From 3bfe35a1d344b113500fd5ceb22c19eb75384d1d Mon Sep 17 00:00:00 2001
From: ARVIN3108 <31arvin08@gmail.com>
Date: Sun, 2 Jul 2023 21:38:10 +0700
Subject: [PATCH] DynaTech

---
 pom.xml                                       | 106 +--
 .../sfa_loader/addons/dynatech/DynaTech.java  |  87 +++
 .../addons}/dynatech/DynaTechItems.java       |  85 +--
 .../dynatech/attributes/LiquidStorage.java    |  52 +-
 .../events/PicnicBasketFeedPlayerEvent.java   |  24 +-
 .../items/abstracts/AbstractContainer.java    |  64 +-
 .../abstracts/AbstractElectricMachine.java    | 104 ++-
 .../abstracts/AbstractElectricTicker.java     |  53 +-
 .../items/abstracts/AbstractGenerator.java    | 144 ++--
 .../items/abstracts/AbstractMachine.java      |  60 +-
 .../items/abstracts/AbstractTicker.java       |  50 +-
 .../abstracts/AbstractTickingContainer.java   |  23 +-
 .../items/backpacks/PicnicBasket.java         | 141 ++--
 .../backpacks/SoulboundPicnicBacket.java      |  17 +-
 .../items/electric/AntigravityBubble.java     |  50 +-
 .../items/electric/BandaidManager.java        |  93 ++-
 .../dynatech/items/electric/BarbedWire.java   |  36 +-
 .../items/electric/FurnaceController.java     |  44 +-
 .../items/electric/KitchenAutoCrafter.java    |  16 +-
 .../dynatech/items/electric/MaterialHive.java | 456 ++++++------
 .../items/electric/PotionSprinkler.java       | 284 ++++----
 .../dynatech/items/electric/SeedPlucker.java  | 288 ++++----
 .../items/electric/WeatherController.java     |  63 +-
 .../items/electric/WirelessCharger.java       |  34 +-
 .../generators/ChippingGenerator.java         | 274 +++----
 .../generators/CulinaryGenerator.java         | 343 +++++----
 .../generators/DragonEggGenerator.java        |  71 +-
 .../electric/generators/HydroGenerator.java   | 179 +++--
 .../electric/generators/StardustReactor.java  |  59 +-
 .../growthchambers/GrowthChamber.java         | 345 +++++----
 .../growthchambers/GrowthChamberEnd.java      |  92 +--
 .../growthchambers/GrowthChamberEndMK2.java   |  85 +--
 .../growthchambers/GrowthChamberMK2.java      | 357 +++++----
 .../growthchambers/GrowthChamberNether.java   |  89 +--
 .../GrowthChamberNetherMK2.java               |  70 +-
 .../growthchambers/GrowthChamberOcean.java    |  89 +--
 .../growthchambers/GrowthChamberOceanMK2.java |  73 +-
 .../electric/machines/MineralizedApiary.java  | 120 ++-
 .../items/electric/machines/Orechid.java      | 223 +++---
 .../items/electric/transfer/Tesseract.java    | 130 ++--
 .../electric/transfer/WirelessEnergyBank.java |  70 +-
 .../transfer/WirelessEnergyPoint.java         | 346 +++++----
 .../electric/transfer/WirelessItemInput.java  | 323 ++++-----
 .../electric/transfer/WirelessItemOutput.java | 586 ++++++++-------
 .../addons}/dynatech/items/misc/Bee.java      |  12 +-
 .../items/misc/DimensionalHomeDimension.java  |  73 +-
 .../addons}/dynatech/items/misc/ItemBand.java |  24 +-
 .../dynatech/items/misc/MobDropItem.java      |  62 +-
 .../dynatech/items/misc/StarDustMeteor.java   | 139 ++--
 .../addons}/dynatech/items/misc/VexGem.java   |  83 ++-
 .../dynatech/items/misc/WitherGolem.java      |  31 +
 .../dynatech/items/tools/AngelGem.java        | 285 ++++----
 .../dynatech/items/tools/DimensionalHome.java |  61 +-
 .../items/tools/ElectricalStimulator.java     |   5 +-
 .../dynatech/items/tools/InventoryFilter.java |   4 +-
 .../dynatech/items/tools/LiquidTank.java      |  98 +--
 .../addons}/dynatech/items/tools/Scoop.java   |  19 +-
 .../dynatech/items/tools/TesseractBinder.java | 121 ++--
 .../ElectricalStimulatorListener.java         | 121 ++--
 .../listeners/InventoryFilterListener.java    | 143 ++--
 .../listeners/PicnicBasketListener.java       | 114 ++-
 .../dynatech/setup/DynaTechItemsSetup.java    | 684 +++++++++---------
 .../addons}/dynatech/tasks/ItemBandTask.java  | 134 ++--
 .../me/profelements/dynatech/DynaTech.java    | 120 ---
 .../dynatech/items/misc/WitherGolem.java      |  33 -
 .../addons-config/DynaTech/config.yml         |   1 +
 src/main/resources/config.yml                 |   3 -
 src/main/resources/plugin.yml                 |  24 -
 68 files changed, 3988 insertions(+), 4704 deletions(-)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/dynatech/DynaTech.java
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/DynaTechItems.java (91%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/attributes/LiquidStorage.java (80%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/events/PicnicBasketFeedPlayerEvent.java (81%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/abstracts/AbstractContainer.java (77%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/abstracts/AbstractElectricMachine.java (70%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/abstracts/AbstractElectricTicker.java (76%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/abstracts/AbstractGenerator.java (71%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/abstracts/AbstractMachine.java (78%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/abstracts/AbstractTicker.java (77%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/abstracts/AbstractTickingContainer.java (77%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/backpacks/PicnicBasket.java (87%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/backpacks/SoulboundPicnicBacket.java (77%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/AntigravityBubble.java (68%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/BandaidManager.java (69%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/BarbedWire.java (91%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/FurnaceController.java (82%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/KitchenAutoCrafter.java (66%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/MaterialHive.java (73%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/PotionSprinkler.java (74%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/SeedPlucker.java (57%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/WeatherController.java (76%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/WirelessCharger.java (57%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/generators/ChippingGenerator.java (50%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/generators/CulinaryGenerator.java (79%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/generators/DragonEggGenerator.java (85%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/generators/HydroGenerator.java (80%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/generators/StardustReactor.java (73%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/growthchambers/GrowthChamber.java (59%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/growthchambers/GrowthChamberEnd.java (56%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/growthchambers/GrowthChamberEndMK2.java (59%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/growthchambers/GrowthChamberMK2.java (58%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/growthchambers/GrowthChamberNether.java (61%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/growthchambers/GrowthChamberNetherMK2.java (63%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/growthchambers/GrowthChamberOcean.java (80%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/growthchambers/GrowthChamberOceanMK2.java (82%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/machines/MineralizedApiary.java (60%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/machines/Orechid.java (77%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/transfer/Tesseract.java (77%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/transfer/WirelessEnergyBank.java (92%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/transfer/WirelessEnergyPoint.java (63%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/transfer/WirelessItemInput.java (73%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/electric/transfer/WirelessItemOutput.java (80%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/misc/Bee.java (79%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/misc/DimensionalHomeDimension.java (79%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/misc/ItemBand.java (88%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/misc/MobDropItem.java (90%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/misc/StarDustMeteor.java (75%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/misc/VexGem.java (92%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/misc/WitherGolem.java
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/tools/AngelGem.java (62%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/tools/DimensionalHome.java (51%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/tools/ElectricalStimulator.java (91%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/tools/InventoryFilter.java (89%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/tools/LiquidTank.java (74%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/tools/Scoop.java (87%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/items/tools/TesseractBinder.java (83%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/listeners/ElectricalStimulatorListener.java (67%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/listeners/InventoryFilterListener.java (75%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/listeners/PicnicBasketListener.java (65%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/setup/DynaTechItemsSetup.java (58%)
 rename src/main/java/{me/profelements => id/universenetwork/sfa_loader/addons}/dynatech/tasks/ItemBandTask.java (76%)
 delete mode 100644 src/main/java/me/profelements/dynatech/DynaTech.java
 delete mode 100644 src/main/java/me/profelements/dynatech/items/misc/WitherGolem.java
 create mode 100644 src/main/resources/addons-config/DynaTech/config.yml
 delete mode 100644 src/main/resources/config.yml
 delete mode 100644 src/main/resources/plugin.yml

diff --git a/pom.xml b/pom.xml
index adae2a8..100cf0c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1,16 +1,19 @@
 <project xmlns="http://maven.apache.org/POM/4.0.0"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
     <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>id.universenetwork.sfa_loader</groupId>
+        <artifactId>Addons</artifactId>
+        <version>1.0.0</version>
+    </parent>
+
     <groupId>me.profelements</groupId>
     <artifactId>DynaTech</artifactId>
     <version>1.0.0</version>
 
     <properties>
-      <maven.compiler.source>16</maven.compiler.source>
-        <maven.compiler.target>16</maven.compiler.target>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
         <sonar.organization>profelements</sonar.organization>
         <sonar.host.url>https://sonarcloud.io</sonar.host.url>
     </properties>
@@ -20,69 +23,10 @@
             <id>paper-repo</id>
             <url>https://repo.destroystokyo.com/repository/maven-public/</url>
         </repository>
-
-        <repository>
-            <id>spigot-repo</id>
-            <url>https://hub.spigotmc.org/nexus/content/repositories/snapshots/</url>
-        </repository>
-
-        <repository>
-            <id>jitpack.io</id>
-            <url>https://jitpack.io</url>
-        </repository>
-
-        <repository>
-            <id>CodeMC</id>
-            <url>https://repo.codemc.org/repository/maven-public</url>
-        </repository>
     </repositories>
 
     <build>
         <finalName>${project.name} v${project.version}</finalName>
-        <defaultGoal>clean package</defaultGoal>
-        <sourceDirectory>${basedir}/src/main/java</sourceDirectory>
-
-        <resources>
-            <resource>
-                <directory>${basedir}/src/main/resources</directory>
-                <filtering>true</filtering>
-                <includes>
-                    <include>*</include>
-                </includes>
-            </resource>
-        </resources>
-
-        <plugins>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-shade-plugin</artifactId>
-                <version>3.4.1</version>
-                <configuration>
-                    <relocations>
-                        <relocation>
-                            <pattern>org.bstats</pattern>
-                            <shadedPattern>me.profelements.dynatech</shadedPattern>
-                        </relocation>
-                        <relocation>
-                            <pattern>dev.j3fftw.extrautils</pattern>
-                            <shadedPattern>me.profelements.dynatech.extrautils</shadedPattern>
-                        </relocation>
-                        <relocation>
-                            <pattern>io.github.bakedlibs.dough</pattern>
-                            <shadedPattern>me.profelements.dynatech.dough</shadedPattern>
-                        </relocation>
-                    </relocations>
-                </configuration>
-                <executions>
-                    <execution>
-                        <phase>package</phase>
-                        <goals>
-                            <goal>shade</goal>
-                        </goals>
-                    </execution>
-                </executions>
-            </plugin>
-        </plugins>
     </build>
 
     <dependencies>
@@ -94,19 +38,7 @@
         </dependency>
 
         <dependency>
-            <groupId>com.github.Slimefun</groupId>
-            <artifactId>Slimefun4</artifactId>
-            <version>84aaaa8</version>
-            <scope>provided</scope>
-            <exclusions>
-                <exclusion>
-                    <groupId>io.github.thebusybiscuit</groupId>
-                    <artifactId>cscorelib2</artifactId>
-                </exclusion>
-            </exclusions>
-        </dependency>
-        <dependency>
-            <groupId>com.github.thebusybiscuit</groupId>
+            <groupId>io.github.thebusybiscuit</groupId>
             <artifactId>exoticgarden</artifactId>
             <version>7f9a5f6</version>
             <scope>provided</scope>
@@ -114,33 +46,31 @@
         <dependency>
             <groupId>io.github.mooy1</groupId>
             <artifactId>InfinityExpansion</artifactId>
-            <version>d995144</version>
+            <version>MODIFIED</version>
             <scope>provided</scope>
         </dependency>
         <dependency>
             <groupId>com.google.code.findbugs</groupId>
             <artifactId>jsr305</artifactId>
             <version>2.0.1</version>
+            <scope>provided</scope>
         </dependency>
-
         <dependency>
-            <groupId>org.bstats</groupId>
-            <artifactId>bstats-bukkit</artifactId>
-            <version>1.8</version>
-            <scope>compile</scope>
+            <groupId>com.google.guava</groupId>
+            <artifactId>guava</artifactId>
+            <version>31.0.1-jre</version>
         </dependency>
+
         <dependency>
             <groupId>com.github.Slimefun-Addon-Community</groupId>
             <artifactId>extrautils</artifactId>
             <version>73e76ac</version>
-            <scope>compile</scope>
         </dependency>
-        
-        <dependency> 
+
+        <dependency>
             <groupId>io.github.baked-libs</groupId>
             <artifactId>dough-api</artifactId>
             <version>1.2.0</version>
-            <scope>compile</scope>
         </dependency>
     </dependencies>
 </project>
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/DynaTech.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/DynaTech.java
new file mode 100644
index 0000000..9d6fadf
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/DynaTech.java
@@ -0,0 +1,87 @@
+package id.universenetwork.sfa_loader.addons.dynatech;
+
+import com.google.common.base.Preconditions;
+import id.universenetwork.sfa_loader.addons.dynatech.items.backpacks.PicnicBasket;
+import id.universenetwork.sfa_loader.addons.dynatech.items.misc.DimensionalHomeDimension;
+import id.universenetwork.sfa_loader.addons.dynatech.items.tools.ElectricalStimulator;
+import id.universenetwork.sfa_loader.addons.dynatech.items.tools.InventoryFilter;
+import id.universenetwork.sfa_loader.addons.dynatech.listeners.ElectricalStimulatorListener;
+import id.universenetwork.sfa_loader.addons.dynatech.listeners.InventoryFilterListener;
+import id.universenetwork.sfa_loader.addons.dynatech.listeners.PicnicBasketListener;
+import id.universenetwork.sfa_loader.addons.dynatech.setup.DynaTechItemsSetup;
+import id.universenetwork.sfa_loader.addons.dynatech.tasks.ItemBandTask;
+import id.universenetwork.sfa_loader.annotations.AddonHooks;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
+import id.universenetwork.sfa_loader.template.AddonTemplate;
+import id.universenetwork.sfa_loader.utils.LogUtils;
+import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import org.bukkit.Bukkit;
+import org.bukkit.WorldCreator;
+
+import javax.annotation.Nonnull;
+
+@AddonHooks("InfinityExpansion")
+public class DynaTech extends AddonTemplate {
+    private static DynaTech instance;
+    private static boolean exoticGardenInstalled;
+
+    private int tickInterval;
+
+    @Override
+    @SuppressWarnings("DataFlowIssue")
+    public void onLoad() {
+        instance = this;
+        final int TICK_TIME = Slimefun.getTickerTask().getTickRate();
+        exoticGardenInstalled = Bukkit.getServer().getPluginManager().isPluginEnabled("ExoticGarden");
+
+        if (!getConfig().getBoolean("disable-dimensionalhome-world")) {
+            WorldCreator worldCreator = new WorldCreator("dimensionalhome");
+            worldCreator.generator(new DimensionalHomeDimension());
+            worldCreator.createWorld();
+        }
+
+        DynaTechItemsSetup.setup();
+        new PicnicBasketListener((PicnicBasket) DynaTechItems.PICNIC_BASKET.getItem());
+        new ElectricalStimulatorListener((ElectricalStimulator) DynaTechItems.ELECTRICAL_STIMULATOR.getItem());
+        new InventoryFilterListener((InventoryFilter) DynaTechItems.INVENTORY_FILTER.getItem());
+
+        //Tasks
+        Bukkit.getScheduler().runTaskTimerAsynchronously(AbstractAddon.instance(), new ItemBandTask(), 0L, 5 * 20L);
+        Bukkit.getScheduler().runTaskTimer(AbstractAddon.instance(), () -> this.tickInterval++, 0, TICK_TIME);
+
+        //TODO: I have been updating javas left right and center 
+        if (System.getProperty("java.version").startsWith("1.8")) {
+            LogUtils.warning("           DynaTech will be switching to JAVA 16        ");
+            LogUtils.warning("                Please Update to JAVA 16                ");
+        }
+    }
+
+    @Override
+    public void onUnload() {
+        Bukkit.getScheduler().cancelTasks(AbstractAddon.instance());
+
+        instance = null;
+    }
+
+    @Nonnull
+    public static DynaTech getInstance() {
+        return instance;
+    }
+
+    public int getTickInterval() {
+        return tickInterval;
+    }
+
+    public static boolean isExoticGardenInstalled() {
+        return exoticGardenInstalled;
+    }
+
+    public static void runSync(@Nonnull Runnable runnable) {
+        Preconditions.checkNotNull(runnable, "Cannot run null");
+
+        if (instance == null || !AbstractAddon.instance().isEnabled()) return;
+
+        Bukkit.getScheduler().runTask(AbstractAddon.instance(), runnable);
+    }
+
+}
diff --git a/src/main/java/me/profelements/dynatech/DynaTechItems.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/DynaTechItems.java
similarity index 91%
rename from src/main/java/me/profelements/dynatech/DynaTechItems.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/DynaTechItems.java
index bf2df08..5fdb5f5 100644
--- a/src/main/java/me/profelements/dynatech/DynaTechItems.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/DynaTechItems.java
@@ -1,6 +1,8 @@
-package me.profelements.dynatech;
+package id.universenetwork.sfa_loader.addons.dynatech;
 
 import dev.j3fftw.extrautils.utils.LoreBuilderDynamic;
+import id.universenetwork.sfa_loader.addons.dynatech.items.electric.MaterialHive;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.items.groups.NestedItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.groups.SubItemGroup;
@@ -13,36 +15,35 @@ import io.github.thebusybiscuit.slimefun4.libraries.dough.skins.PlayerHead;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.skins.PlayerSkin;
 import io.github.thebusybiscuit.slimefun4.utils.LoreBuilder;
 import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;
-import me.profelements.dynatech.items.electric.MaterialHive;
 import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
 import org.bukkit.inventory.ItemStack;
 
 public class DynaTechItems {
 
-    private DynaTechItems() {}
-    
+    private DynaTechItems() {
+    }
+
     //Categories
-    public static final NestedItemGroup DT_GENERAL = new NestedItemGroup(new NamespacedKey(DynaTech.getInstance(), "DT_GENERAL"), new CustomItemStack(Material.CONDUIT, "&bDynaTech"));
-    public static final SubItemGroup DT_RESOURCES = new SubItemGroup(new NamespacedKey(DynaTech.getInstance(), "DT_RESOURCES"), DT_GENERAL, new CustomItemStack(Material.PUFFERFISH, "&bDynaTech Resources"));
-    public static final SubItemGroup DT_TOOLS = new SubItemGroup(new NamespacedKey(DynaTech.getInstance(), "DT_TOOLS"), DT_GENERAL, new CustomItemStack(Material.DIAMOND_AXE, "&bDynaTech Tools"));
-    public static final SubItemGroup DT_MACHINES = new SubItemGroup(new NamespacedKey(DynaTech.getInstance(), "DT_MACHINES"), DT_GENERAL, new CustomItemStack(Material.SEA_LANTERN, "&bDynaTech Machines"));
-    public static final SubItemGroup DT_GENERATORS = new SubItemGroup(new NamespacedKey(DynaTech.getInstance(), "DT_GENERATORS"), DT_GENERAL, new CustomItemStack(Material.PRISMARINE_BRICKS, "&bDynaTech Generators"));
-    
-    public static final SubItemGroup DT_HIVES = new SubItemGroup(new NamespacedKey(DynaTech.getInstance(), "DT_HIVES"), DT_GENERAL, new CustomItemStack(Material.BEEHIVE, "&bDynaTech Apiaries"));
+    public static final NestedItemGroup DT_GENERAL = new NestedItemGroup(AbstractAddon.createKey("DT_GENERAL"), new CustomItemStack(Material.CONDUIT, "&bDynaTech"));
+    public static final SubItemGroup DT_RESOURCES = new SubItemGroup(AbstractAddon.createKey("DT_RESOURCES"), DT_GENERAL, new CustomItemStack(Material.PUFFERFISH, "&bDynaTech Resources"));
+    public static final SubItemGroup DT_TOOLS = new SubItemGroup(AbstractAddon.createKey("DT_TOOLS"), DT_GENERAL, new CustomItemStack(Material.DIAMOND_AXE, "&bDynaTech Tools"));
+    public static final SubItemGroup DT_MACHINES = new SubItemGroup(AbstractAddon.createKey("DT_MACHINES"), DT_GENERAL, new CustomItemStack(Material.SEA_LANTERN, "&bDynaTech Machines"));
+    public static final SubItemGroup DT_GENERATORS = new SubItemGroup(AbstractAddon.createKey("DT_GENERATORS"), DT_GENERAL, new CustomItemStack(Material.PRISMARINE_BRICKS, "&bDynaTech Generators"));
+
+    public static final SubItemGroup DT_HIVES = new SubItemGroup(AbstractAddon.createKey("DT_HIVES"), DT_GENERAL, new CustomItemStack(Material.BEEHIVE, "&bDynaTech Apiaries"));
 
 
-    public static final RecipeType DynaTechScoop = new RecipeType(new NamespacedKey(DynaTech.getInstance(), "dt_scoop"),
+    public static final RecipeType DynaTechScoop = new RecipeType(AbstractAddon.createKey("dt_scoop"),
         new CustomItemStack(Material.IRON_SHOVEL, "&bScoop the Bee using a Scoop")
     );
 
 
     //RecipeTypes
     // #TODO: Make Orechid use RecipeType + Standard Conversions
-    public static final RecipeType DT_SCOOP = new RecipeType(new NamespacedKey(DynaTech.getInstance(), "DT_SCOOP"), new CustomItemStack(Material.IRON_SHOVEL, "&bScoop a Bee using a Scoop"));
-    //public static final RecipeType DT_ORECHID = new RecipeType(new NamespacedKey(DynaTech.getInstance(), "DT_ORECHID"), new CustomItem(Material.END_ROD, "&BTransmuted using the Orechid"));
+    public static final RecipeType DT_SCOOP = new RecipeType(AbstractAddon.createKey("DT_SCOOP"), new CustomItemStack(Material.IRON_SHOVEL, "&bScoop a Bee using a Scoop"));
+    //public static final RecipeType DT_ORECHID = new RecipeType(AbstractAddon.createKey("DT_ORECHID"), new CustomItem(Material.END_ROD, "&BTransmuted using the Orechid"));
+
 
-    
     //General
 
     //Resources
@@ -72,9 +73,9 @@ public class DynaTechItems {
         "",
         "&7ID: <ID>",
         "",
-       "&eRight Click &7to open."
+        "&eRight Click &7to open."
     );
-    
+
     public static final SlimefunItemStack SOULBOUND_PICNIC_BASKET = new SlimefunItemStack("SOULBOUND_PICNIC_BASKET",
         new CustomItemStack(PlayerHead.getItemStack(PlayerSkin.fromHashCode("7a6bf916e28ccb80b4ebfacf98686ad6af7c4fb257e57a8cb78c71d19dccb2"))),
         "&6Soulbound Picnic Basket",
@@ -87,7 +88,7 @@ public class DynaTechItems {
         "",
         "&7ID: <ID>",
         "",
-       "&eRight Click &7to open.",
+        "&eRight Click &7to open.",
         "",
         "&dSoulbound"
     );
@@ -115,7 +116,7 @@ public class DynaTechItems {
     );
 
     public static final SlimefunItemStack ANGEL_GEM = new SlimefunItemStack("ANGEL_GEM",
-        Material.NETHERITE_BLOCK, 
+        Material.NETHERITE_BLOCK,
         "&6Flight Gem",
         "",
         "&fPermanent Creative Flight.",
@@ -127,14 +128,14 @@ public class DynaTechItems {
         "&7Flight Speed: <speed>"
     );
 
-    public static final SlimefunItemStack SCOOP = new SlimefunItemStack("SCOOP", 
+    public static final SlimefunItemStack SCOOP = new SlimefunItemStack("SCOOP",
         Material.IRON_SHOVEL,
         "&6Scoop",
         "",
         "&fUsed to capture bees.",
         "",
         "&f&oMake sure not to get stung",
-       "",
+        "",
         LoreBuilder.powerCharged(0, 512)
     );
 
@@ -154,10 +155,10 @@ public class DynaTechItems {
         new CustomItemStack(PlayerHead.getItemStack(PlayerSkin.fromHashCode("f1e2428cb359988f4c4ff0e61de21385c62269de19a69762d773223b75dd1666"))),
         "&6Healthy Item Band",
         "",
-        "&fWhen applied to armor or tools", 
+        "&fWhen applied to armor or tools",
         "&fgives you 2 levels of Health Boost",
         "",
-        "&f&oPowerup!"            
+        "&f&oPowerup!"
     );
 
     public static final SlimefunItemStack ITEM_BAND_HASTE = new SlimefunItemStack("ITEM_BAND_HASTE",
@@ -168,8 +169,8 @@ public class DynaTechItems {
         "&fgives you 2 levels of Haste",
         "",
         "&f&oPowerup!"
-    ); 
-            
+    );
+
     public static final SlimefunItemStack TESSERACT_BINDER = new SlimefunItemStack("TESSERACT_BINDER",
         Material.NETHERITE_HOE,
         "&6Tesseract Binder",
@@ -178,7 +179,7 @@ public class DynaTechItems {
         "",
         "&fRight click to get Location of Tesseract",
         "&fCrouch Right Click to bind location to Tesseract",
-        ""           
+        ""
     );
 
     public static final SlimefunItemStack LIQUID_TANK = new SlimefunItemStack("LIQUID_TANK",
@@ -194,7 +195,7 @@ public class DynaTechItems {
         "&fAmount: 0mb / 16000",
         ""
     );
-    
+
     public static final SlimefunItemStack WITHER_GOLEM = new SlimefunItemStack("WITHER_GOLEM",
         Material.WITHER_SKELETON_SKULL,
         "&6Wither Golem MultiBlock",
@@ -278,7 +279,7 @@ public class DynaTechItems {
         "&c3x production.",
         LoreBuilder.machine(MachineTier.MEDIUM, MachineType.MACHINE),
         LoreBuilder.speed(3),
-        LoreBuilderDynamic.powerPerSecond(128)      
+        LoreBuilderDynamic.powerPerSecond(128)
     );
 
     public static final SlimefunItemStack GROWTH_CHAMBER_NETHER = new SlimefunItemStack("GROWTH_CHAMBER_NETHER",
@@ -305,7 +306,7 @@ public class DynaTechItems {
     );
 
     public static final SlimefunItemStack GROWTH_CHAMBER_OCEAN = new SlimefunItemStack("GROWTH_CHAMBER_OCEAN",
-    Material.CYAN_STAINED_GLASS,
+        Material.CYAN_STAINED_GLASS,
         "&bOcean Growth Chamber",
         "",
         "&fAutomatically grows &9water &fplants.",
@@ -358,7 +359,7 @@ public class DynaTechItems {
         LoreBuilder.machine(MachineTier.MEDIUM, MachineType.MACHINE),
         LoreBuilderDynamic.powerPerSecond(32)
     );
-    
+
     public static final SlimefunItemStack BARBED_WIRE = new SlimefunItemStack("BARBED_WIRE",
         new CustomItemStack(PlayerHead.getItemStack(PlayerSkin.fromHashCode("b2ac6c219004d82dfa627ffab664f29c53ecc112d91c9d7a9c915c426832412"))),
         "&6Barbed Wire",
@@ -367,8 +368,8 @@ public class DynaTechItems {
         "",
         LoreBuilder.machine(MachineTier.MEDIUM, MachineType.MACHINE),
         LoreBuilderDynamic.powerPerSecond(16)
-    );        
-    
+    );
+
     public static final SlimefunItemStack MATERIAL_HIVE = new SlimefunItemStack("MATERIAL_HIVE",
         Material.BEEHIVE,
         "&6Material Hive",
@@ -419,7 +420,7 @@ public class DynaTechItems {
         "",
         LoreBuilder.machine(MachineTier.END_GAME, MachineType.MACHINE),
         LoreBuilderDynamic.power(1024, " per block converted.")
-   );
+    );
 
     public static final SlimefunItemStack WIRELESS_ENERGY_POINT = new SlimefunItemStack("WIRELESS_ENERGY_POINT",
         new CustomItemStack(PlayerHead.getItemStack(PlayerSkin.fromHashCode("335a21d95e8597759fb259c951ea68e1ad3374ca41e56ef126ffabfe03c1e0"))),
@@ -468,14 +469,14 @@ public class DynaTechItems {
         "&ffrom Wireless Item Input",
         "Right Click on the Wireless Item Output to connect!",
         "",
-        LoreBuilder.machine(MachineTier.MEDIUM, MachineType.MACHINE), 
+        LoreBuilder.machine(MachineTier.MEDIUM, MachineType.MACHINE),
         LoreBuilder.powerBuffer(1024),
         LoreBuilderDynamic.power(8, " per stack of items"),
         ""
     );
 
     public static final SlimefunItemStack TESSERACT = new SlimefunItemStack("TESSERACT",
-        Material.PURPUR_BLOCK, 
+        Material.PURPUR_BLOCK,
         "&6Tesseract",
         "",
         "&fTransfers Items and Energy Wirelessly",
@@ -485,10 +486,10 @@ public class DynaTechItems {
         LoreBuilder.machine(MachineTier.END_GAME, MachineType.MACHINE),
         LoreBuilder.powerBuffer(65535),
         LoreBuilderDynamic.powerPerSecond(1024),
-        ""  
+        ""
     );
-    
-    public static final SlimefunItemStack EXTERNAL_HEATER = new SlimefunItemStack("DT_EXTERNAL_HEATER", 
+
+    public static final SlimefunItemStack EXTERNAL_HEATER = new SlimefunItemStack("DT_EXTERNAL_HEATER",
         Material.BRICKS,
         "&6External Heater",
         "",
@@ -569,10 +570,10 @@ public class DynaTechItems {
         LoreBuilderDynamic.powerPerSecond(1024)
     );
 
-    public static final RecipeType DT_MATERIAL_HIVE = new RecipeType(new NamespacedKey(DynaTech.getInstance(), "DT_MATERIAL_HIVE"), DynaTechItems.MATERIAL_HIVE, (recipe, output) -> {
+    public static final RecipeType DT_MATERIAL_HIVE = new RecipeType(AbstractAddon.createKey("DT_MATERIAL_HIVE"), DynaTechItems.MATERIAL_HIVE, (recipe, output) -> {
         MaterialHive materialHive = ((MaterialHive) DynaTechItems.MATERIAL_HIVE.getItem());
-        materialHive.getMachineRecipes().add(new MachineRecipe(1800, recipe, new ItemStack[] {output}));
-    
+        materialHive.getMachineRecipes().add(new MachineRecipe(1800, recipe, new ItemStack[]{output}));
+
     });
 
 }
diff --git a/src/main/java/me/profelements/dynatech/attributes/LiquidStorage.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/attributes/LiquidStorage.java
similarity index 80%
rename from src/main/java/me/profelements/dynatech/attributes/LiquidStorage.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/attributes/LiquidStorage.java
index ed2af31..e8526ce 100644
--- a/src/main/java/me/profelements/dynatech/attributes/LiquidStorage.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/attributes/LiquidStorage.java
@@ -1,27 +1,25 @@
-package me.profelements.dynatech.attributes;
-
-import java.util.logging.Level;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+package id.universenetwork.sfa_loader.addons.dynatech.attributes;
 
 import com.google.common.base.Preconditions;
-
+import id.universenetwork.sfa_loader.utils.LogUtils;
 import io.github.bakedlibs.dough.blocks.BlockPosition;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.core.attributes.ItemAttribute;
 import io.github.thebusybiscuit.slimefun4.utils.NumberUtils;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import me.profelements.dynatech.DynaTech;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.util.logging.Level;
 
 /**
- * This interface, when attached to a class that inherits {@link SlimefunItem}, marks 
+ * This interface, when attached to a class that inherits {@link SlimefunItem}, marks
  * the item as an liquid containter.
  * This lets the item interact with registered liquids.
- *
  */
 public interface LiquidStorage extends ItemAttribute {
-    
+
     int getLiquidCapacity();
 
     default boolean isFillable() {
@@ -29,9 +27,7 @@ public interface LiquidStorage extends ItemAttribute {
     }
 
     default int getLiquidAmount(@Nonnull BlockPosition l) {
-        if (!isFillable()) {
-            return 0;
-        }
+        if (!isFillable()) return 0;
 
         return getLiquidAmount(l, BlockStorage.getLocationInfo(l.toLocation()));
     }
@@ -41,17 +37,12 @@ public interface LiquidStorage extends ItemAttribute {
         Preconditions.checkNotNull(l, "Location was null");
         Preconditions.checkNotNull(config, "Config was null");
 
-        if (!isFillable()) {
-            return 0;
-        }
+        if (!isFillable()) return 0;
 
         String fluidAmount = config.getString("fluid-amount");
 
-        if (fluidAmount != null) {
-            return Integer.parseInt(fluidAmount);
-        } else {
-            return 0;
-        }
+        if (fluidAmount != null) return Integer.parseInt(fluidAmount);
+        else return 0;
     }
 
     default String getLiquid(@Nonnull BlockPosition l) {
@@ -81,15 +72,14 @@ public interface LiquidStorage extends ItemAttribute {
             if (liquidCapacity > 0) {
                 liquidAmount = NumberUtils.clamp(0, liquidAmount, liquidCapacity);
 
-                if (liquidAmount != getLiquidAmount(l)) {
+                if (liquidAmount != getLiquidAmount(l))
                     BlockStorage.addBlockInfo(l.toLocation(), "fluid-amount", String.valueOf(liquidAmount), false);
-                }
             }
         } catch (Exception | LinkageError x) {
-            DynaTech.getInstance().getLogger().log(Level.SEVERE, x,() -> "Exception while trying to set the fluid-amount for \"" + getId() + "\" at " + l);
+            LogUtils.log(Level.SEVERE, "Exception while trying to set the fluid-amount for \"" + getId() + "\" at " + l, x);
         }
     }
-    
+
     default void addLiquidAmount(@Nonnull BlockPosition l, int liquidAmount) {
         Preconditions.checkNotNull("Location was null");
         Preconditions.checkArgument(liquidAmount > 0, "The fluid amount must be greater then 0");
@@ -106,14 +96,14 @@ public interface LiquidStorage extends ItemAttribute {
                 }
             }
         } catch (Exception | LinkageError x) {
-            DynaTech.getInstance().getLogger().log(Level.SEVERE, x,() -> "Exception while trying to add an fluid-amount for \"" + getId() + "\" at " + l);
+            LogUtils.log(Level.SEVERE, "Exception while trying to add an fluid-amount for \"" + getId() + "\" at " + l, x);
         }
     }
 
     default void removeLiquidAmount(@Nonnull BlockPosition l, int liquidAmount) {
         Preconditions.checkNotNull("Location was null");
         Preconditions.checkArgument(liquidAmount > 0, "The fluid amount must be greater then 0");
-        
+
         try {
             int liquidCapacity = getLiquidCapacity();
             if (liquidCapacity > 0) {
@@ -126,7 +116,7 @@ public interface LiquidStorage extends ItemAttribute {
             }
 
         } catch (Exception | LinkageError x) {
-            DynaTech.getInstance().getLogger().log(Level.SEVERE, x,() -> "Exception while trying to add an fluid-amount for \"" + getId() + "\" at " + l);
+            LogUtils.log(Level.SEVERE, "Exception while trying to add an fluid-amount for \"" + getId() + "\" at " + l, x);
         }
 
     }
@@ -136,7 +126,7 @@ public interface LiquidStorage extends ItemAttribute {
 
         try {
             int liquidCapacity = getLiquidCapacity();
-            
+
             //changing fluids must happen when no other fluid is in the block
             if (liquidCapacity == 0) {
                 if (fluidName == null) {
@@ -146,7 +136,7 @@ public interface LiquidStorage extends ItemAttribute {
                 }
             }
         } catch (Exception | LinkageError x) {
-            DynaTech.getInstance().getLogger().log(Level.SEVERE, x,() -> "Exception while trying to set the fluid-name for \"" + getId() + "\" at " + l);
+            LogUtils.log(Level.SEVERE, "Exception while trying to set the fluid-name for \"" + getId() + "\" at " + l, x);
         }
     }
 }
diff --git a/src/main/java/me/profelements/dynatech/events/PicnicBasketFeedPlayerEvent.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/events/PicnicBasketFeedPlayerEvent.java
similarity index 81%
rename from src/main/java/me/profelements/dynatech/events/PicnicBasketFeedPlayerEvent.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/events/PicnicBasketFeedPlayerEvent.java
index 45a5f22..49865b1 100644
--- a/src/main/java/me/profelements/dynatech/events/PicnicBasketFeedPlayerEvent.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/events/PicnicBasketFeedPlayerEvent.java
@@ -1,6 +1,7 @@
-package me.profelements.dynatech.events;
+package id.universenetwork.sfa_loader.addons.dynatech.events;
 
-import me.profelements.dynatech.items.backpacks.PicnicBasket;
+import com.google.common.base.Preconditions;
+import id.universenetwork.sfa_loader.addons.dynatech.items.backpacks.PicnicBasket;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
@@ -10,10 +11,7 @@ import org.bukkit.inventory.ItemStack;
 import javax.annotation.Nonnull;
 import javax.annotation.ParametersAreNonnullByDefault;
 
-import com.google.common.base.Preconditions;
-
 public class PicnicBasketFeedPlayerEvent extends PlayerEvent implements Cancellable {
-
     public static final HandlerList handlers = new HandlerList();
 
     private final PicnicBasket picnicBasket;
@@ -28,9 +26,7 @@ public class PicnicBasketFeedPlayerEvent extends PlayerEvent implements Cancella
 
         this.picnicBasket = picnicBasket;
         this.picnicBasketItem = picnicBasketItem;
-        this.itemConsumed =itemConsumed;
-
-
+        this.itemConsumed = itemConsumed;
     }
 
     @Nonnull
@@ -49,10 +45,10 @@ public class PicnicBasketFeedPlayerEvent extends PlayerEvent implements Cancella
     }
 
     public void setConsumedItem(@Nonnull ItemStack item) {
-      Preconditions.checkNotNull(item, "Consumed item can not be null");
-      Preconditions.checkArgument(item.getType().isEdible(), "Item must be edible");
-      
-      this.itemConsumed = item;
+        Preconditions.checkNotNull(item, "Consumed item can not be null");
+        Preconditions.checkArgument(item.getType().isEdible(), "Item must be edible");
+
+        this.itemConsumed = item;
     }
 
     @Override
@@ -75,8 +71,4 @@ public class PicnicBasketFeedPlayerEvent extends PlayerEvent implements Cancella
     public HandlerList getHandlers() {
         return getHandlerList();
     }
-
-
 }
-
-
diff --git a/src/main/java/me/profelements/dynatech/items/abstracts/AbstractContainer.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/abstracts/AbstractContainer.java
similarity index 77%
rename from src/main/java/me/profelements/dynatech/items/abstracts/AbstractContainer.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/abstracts/AbstractContainer.java
index 49e7a3b..45d54d2 100644
--- a/src/main/java/me/profelements/dynatech/items/abstracts/AbstractContainer.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/abstracts/AbstractContainer.java
@@ -1,15 +1,4 @@
-package me.profelements.dynatech.items.abstracts;
-
-import java.util.List;
-
-import javax.annotation.Nonnull;
-
-import org.bukkit.Location;
-import org.bukkit.block.Block;
-import org.bukkit.entity.Player;
-import org.bukkit.event.block.BlockBreakEvent;
-import org.bukkit.event.block.BlockPlaceEvent;
-import org.bukkit.inventory.ItemStack;
+package id.universenetwork.sfa_loader.addons.dynatech.items.abstracts;
 
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
@@ -24,42 +13,45 @@ import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
 import me.mrCookieSlime.Slimefun.api.item_transport.ItemTransportFlow;
+import org.bukkit.Location;
+import org.bukkit.block.Block;
+import org.bukkit.entity.Player;
+import org.bukkit.event.block.BlockBreakEvent;
+import org.bukkit.event.block.BlockPlaceEvent;
+import org.bukkit.inventory.ItemStack;
 
+import javax.annotation.Nonnull;
+import java.util.List;
 
 
 public abstract class AbstractContainer extends SlimefunItem implements NotHopperable {
-    
     protected AbstractContainer(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(itemGroup, item, recipeType, recipe); 
+        super(itemGroup, item, recipeType, recipe);
 
         new BlockMenuPreset(getId(), getItemName()) {
             @Override
             public void init() {
-                setupMenu(this); 
+                setupMenu(this);
             }
 
             @Override
             public boolean canOpen(Block b, Player p) {
-                return p.hasPermission("slimefun.inventory.bypass") || Slimefun.getProtectionManager().hasPermission(p, b.getLocation(), Interaction.INTERACT_BLOCK); 
+                return p.hasPermission("slimefun.inventory.bypass") || Slimefun.getProtectionManager().hasPermission(p, b.getLocation(), Interaction.INTERACT_BLOCK);
             }
-            
+
             @Nonnull
             @Override
             public int[] getSlotsAccessedByItemTransport(ItemTransportFlow flow) {
-                if (flow == ItemTransportFlow.INSERT) {
-                    return getInputSlots();
-                } else {
-                    return getOutputSlots(); 
-                }
+                if (flow == ItemTransportFlow.INSERT) return getInputSlots();
+                else return getOutputSlots();
             }
 
-            @Override 
+            @Override
             public void newInstance(BlockMenu m, Block b) {
-                onNewInstance(m, b); 
+                onNewInstance(m, b);
             }
         };
-
-    } 
+    }
 
     @Override
     public void preRegister() {
@@ -67,16 +59,14 @@ public abstract class AbstractContainer extends SlimefunItem implements NotHoppe
             @Override
             public void onPlayerBreak(BlockBreakEvent e, ItemStack item, List<ItemStack> drops) {
                 BlockMenu menu = BlockStorage.getInventory(e.getBlock());
-                if (menu != null) {
-                    onBreak(e, menu, e.getBlock().getLocation()); 
-                }
+                if (menu != null) onBreak(e, menu, e.getBlock().getLocation());
             }
         });
-        
+
         addItemHandler(new BlockPlaceHandler(false) {
             @Override
             public void onPlayerPlace(BlockPlaceEvent e) {
-                    onPlace(e, e.getBlockPlaced()); 
+                onPlace(e, e.getBlockPlaced());
             }
         });
 
@@ -87,13 +77,15 @@ public abstract class AbstractContainer extends SlimefunItem implements NotHoppe
     @Nonnull
     protected abstract int[] getInputSlots();
 
-    @Nonnull 
+    @Nonnull
     protected abstract int[] getOutputSlots();
 
-    protected void onNewInstance(BlockMenu m, Block b) {}
-
-    protected void onBreak(BlockBreakEvent e, BlockMenu m, Location l) {}
+    protected void onNewInstance(BlockMenu m, Block b) {
+    }
 
-    protected void onPlace(BlockPlaceEvent e, Block b) {}
+    protected void onBreak(BlockBreakEvent e, BlockMenu m, Location l) {
+    }
 
+    protected void onPlace(BlockPlaceEvent e, Block b) {
+    }
 }
diff --git a/src/main/java/me/profelements/dynatech/items/abstracts/AbstractElectricMachine.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/abstracts/AbstractElectricMachine.java
similarity index 70%
rename from src/main/java/me/profelements/dynatech/items/abstracts/AbstractElectricMachine.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/abstracts/AbstractElectricMachine.java
index 5af5258..faa5def 100644
--- a/src/main/java/me/profelements/dynatech/items/abstracts/AbstractElectricMachine.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/abstracts/AbstractElectricMachine.java
@@ -1,19 +1,6 @@
-package me.profelements.dynatech.items.abstracts;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-
-import org.bukkit.Location;
-import org.bukkit.block.Block;
-import org.bukkit.inventory.ItemStack;
+package id.universenetwork.sfa_loader.addons.dynatech.items.abstracts;
 
 import com.google.common.base.Preconditions;
-
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -24,22 +11,31 @@ import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
 import io.github.thebusybiscuit.slimefun4.utils.itemstack.ItemStackWrapper;
 import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
+import org.bukkit.Location;
+import org.bukkit.block.Block;
+import org.bukkit.inventory.ItemStack;
 
-public abstract class AbstractElectricMachine extends AbstractMachine implements EnergyNetComponent {
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
 
-    protected List<MachineRecipe> recipes = new ArrayList<>(); 
+public abstract class AbstractElectricMachine extends AbstractMachine implements EnergyNetComponent {
+    protected List<MachineRecipe> recipes = new ArrayList<>();
 
     private int energyConsumedPerTick = -1;
     private int energyCapacity = -1;
-    private int processingSpeed = -1; 
+    private int processingSpeed = -1;
 
     protected AbstractElectricMachine(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(itemGroup, item, recipeType, recipe); 
+        super(itemGroup, item, recipeType, recipe);
     }
 
     @Override
     protected boolean checkCraftPreconditions(Block b) {
-        return takeCharge(b.getLocation()); 
+        return takeCharge(b.getLocation());
     }
 
     @Nonnull
@@ -49,13 +45,13 @@ public abstract class AbstractElectricMachine extends AbstractMachine implements
     }
 
     public int getCapacity() {
-        return energyCapacity; 
+        return energyCapacity;
     }
 
     public int getEnergyConsumption() {
         return energyConsumedPerTick;
     }
-    
+
     public int getSpeed() {
         return processingSpeed;
     }
@@ -63,23 +59,23 @@ public abstract class AbstractElectricMachine extends AbstractMachine implements
     public final AbstractElectricMachine setCapacity(int capacity) {
         Preconditions.checkArgument(capacity > 0, "The capacity must be greater then 0");
 
-        this.energyCapacity = capacity; 
+        this.energyCapacity = capacity;
         return this;
     }
 
     public final AbstractElectricMachine setConsumption(int consumption) {
         Preconditions.checkArgument(getCapacity() > 0, "Capacity must be set before consumption");
-        Preconditions.checkArgument(consumption < getCapacity() && consumption != 0, "Consuption can not be greater then capacity"); 
-        
+        Preconditions.checkArgument(consumption < getCapacity() && consumption != 0, "Consuption can not be greater then capacity");
+
         this.energyConsumedPerTick = consumption;
         return this;
     }
 
     public final AbstractElectricMachine setProcessingSpeed(int speed) {
-        Preconditions.checkArgument(speed > 0, "Speed must be greater then zero!"); 
+        Preconditions.checkArgument(speed > 0, "Speed must be greater then zero!");
 
-        this.processingSpeed = speed; 
-        return this; 
+        this.processingSpeed = speed;
+        return this;
     }
 
     public List<MachineRecipe> getMachineRecipes() {
@@ -87,8 +83,8 @@ public abstract class AbstractElectricMachine extends AbstractMachine implements
     }
 
     public void registerRecipe(MachineRecipe recipe) {
-        recipe.setTicks(recipe.getTicks() / getSpeed()); 
-        recipes.add(recipe); 
+        recipe.setTicks(recipe.getTicks() / getSpeed());
+        recipes.add(recipe);
     }
 
     public void registerRecipe(int seconds, ItemStack[] inputs, ItemStack[] outputs) {
@@ -96,75 +92,61 @@ public abstract class AbstractElectricMachine extends AbstractMachine implements
     }
 
     public void registerRecipe(int seconds, ItemStack input, ItemStack outputs) {
-        registerRecipe(seconds, new ItemStack[] { input }, new ItemStack[] { outputs });
+        registerRecipe(seconds, new ItemStack[]{input}, new ItemStack[]{outputs});
     }
 
     protected boolean takeCharge(Location l) {
-        Preconditions.checkNotNull(l, "Can't take energy from a null location"); 
+        Preconditions.checkNotNull(l, "Can't take energy from a null location");
 
         if (isChargeable()) {
-            int charge = getCharge(l); 
+            int charge = getCharge(l);
 
-             if (charge < getEnergyConsumption()) {
-                return false;
-             }
+            if (charge < getEnergyConsumption()) return false;
 
-             setCharge(l, charge - getEnergyConsumption()); 
+            setCharge(l, charge - getEnergyConsumption());
         }
-        return true; 
+        return true;
     }
 
     @Nullable
     @Override
-	public MachineRecipe findNextRecipe(BlockMenu menu) {
+    public MachineRecipe findNextRecipe(BlockMenu menu) {
         Map<Integer, ItemStack> inv = new HashMap<>();
 
         for (int slot : getInputSlots()) {
             ItemStack item = menu.getItemInSlot(slot);
 
-            if (item != null) {
-                inv.put(slot, ItemStackWrapper.wrap(item));
-            }
+            if (item != null) inv.put(slot, ItemStackWrapper.wrap(item));
         }
 
         int maxedSlots = 0;
         for (int slot : getOutputSlots()) {
-            ItemStack item = menu.getItemInSlot(slot); 
-            if (item != null && item.getAmount() == item.getMaxStackSize()) {
-                maxedSlots += 1;
-            }
+            ItemStack item = menu.getItemInSlot(slot);
+            if (item != null && item.getAmount() == item.getMaxStackSize()) maxedSlots += 1;
         }
 
-        if (maxedSlots == getOutputSlots().length) { return null; }
+        if (maxedSlots == getOutputSlots().length) return null;
 
         Map<Integer, Integer> found = new HashMap<>();
 
         for (MachineRecipe recipe : recipes) {
-            for (ItemStack input : recipe.getInput()) {
-                for (int slot : getInputSlots()) {
+            for (ItemStack input : recipe.getInput())
+                for (int slot : getInputSlots())
                     if (SlimefunUtils.isItemSimilar(inv.get(slot), input, true)) {
                         found.put(slot, input.getAmount());
                         break;
                     }
-                }
-            }
 
             if (found.size() == recipe.getInput().length) {
-                if(!InvUtils.fitAll(menu.toInventory(), recipe.getOutput(), getOutputSlots())) {
-                        return null;
-                }
-                
-                for (Map.Entry<Integer, Integer> entry : found.entrySet()) {
+                if (!InvUtils.fitAll(menu.toInventory(), recipe.getOutput(), getOutputSlots())) return null;
+
+                for (Map.Entry<Integer, Integer> entry : found.entrySet())
                     menu.consumeItem(entry.getKey(), entry.getValue());
-                }
 
-                return recipe; 
-            } else {
-                found.clear();
-            }
+                return recipe;
+            } else found.clear();
         }
 
         return null;
     }
-    
 }
diff --git a/src/main/java/me/profelements/dynatech/items/abstracts/AbstractElectricTicker.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/abstracts/AbstractElectricTicker.java
similarity index 76%
rename from src/main/java/me/profelements/dynatech/items/abstracts/AbstractElectricTicker.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/abstracts/AbstractElectricTicker.java
index 8b0914c..00fb332 100644
--- a/src/main/java/me/profelements/dynatech/items/abstracts/AbstractElectricTicker.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/abstracts/AbstractElectricTicker.java
@@ -1,32 +1,29 @@
-package me.profelements.dynatech.items.abstracts;
-
-import javax.annotation.Nonnull;
-
-import org.bukkit.Location;
-import org.bukkit.block.Block;
-import org.bukkit.inventory.ItemStack;
+package id.universenetwork.sfa_loader.addons.dynatech.items.abstracts;
 
 import com.google.common.base.Preconditions;
-
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetComponent;
 import io.github.thebusybiscuit.slimefun4.core.networks.energy.EnergyNetComponentType;
+import org.bukkit.Location;
+import org.bukkit.block.Block;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
 
 public abstract class AbstractElectricTicker extends AbstractTicker implements EnergyNetComponent {
-    
     private int energyConsumedPerTick = -1;
     private int energyCapacity = -1;
-    private int processingSpeed = -1; 
-    
+    private int processingSpeed = -1;
+
     protected AbstractElectricTicker(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(itemGroup, item, recipeType, recipe); 
+        super(itemGroup, item, recipeType, recipe);
     }
 
     @Override
     protected boolean checkTickPreconditions(Block b) {
-        return takeCharge(b.getLocation()); 
+        return takeCharge(b.getLocation());
     }
 
     @Nonnull
@@ -36,51 +33,49 @@ public abstract class AbstractElectricTicker extends AbstractTicker implements E
     }
 
     public int getCapacity() {
-        return energyCapacity; 
+        return energyCapacity;
     }
 
     public int getEnergyConsumption() {
         return energyConsumedPerTick;
     }
-    
+
     public int getSpeed() {
         return processingSpeed;
     }
 
     public final AbstractElectricTicker setCapacity(int capacity) {
-        Preconditions.checkArgument(capacity > 0, "The capacity must be greater then 0"); 
+        Preconditions.checkArgument(capacity > 0, "The capacity must be greater then 0");
 
-        this.energyCapacity = capacity; 
+        this.energyCapacity = capacity;
         return this;
     }
 
     public final AbstractElectricTicker setConsumption(int consumption) {
         Preconditions.checkArgument(getCapacity() > 0, "Capacity must be set before consumption");
-        Preconditions.checkArgument(consumption < getCapacity() && consumption != 0, "Consuption can not be greater then capacity"); 
-        
+        Preconditions.checkArgument(consumption < getCapacity() && consumption != 0, "Consuption can not be greater then capacity");
+
         this.energyConsumedPerTick = consumption;
         return this;
     }
 
     public final AbstractElectricTicker setProcessingSpeed(int speed) {
-        Preconditions.checkArgument(speed > 0, "Speed must be greater then zero!"); 
+        Preconditions.checkArgument(speed > 0, "Speed must be greater then zero!");
 
-        this.processingSpeed = speed; 
-        return this; 
+        this.processingSpeed = speed;
+        return this;
     }
 
     protected boolean takeCharge(Location l) {
-        Preconditions.checkNotNull(l, "Can't take energy from a null location"); 
+        Preconditions.checkNotNull(l, "Can't take energy from a null location");
 
         if (isChargeable()) {
-            int charge = getCharge(l); 
+            int charge = getCharge(l);
 
-             if (charge < getEnergyConsumption()) {
-                return false;
-             }
+            if (charge < getEnergyConsumption()) return false;
 
-             setCharge(l, charge - getEnergyConsumption()); 
+            setCharge(l, charge - getEnergyConsumption());
         }
-        return true; 
+        return true;
     }
 }
diff --git a/src/main/java/me/profelements/dynatech/items/abstracts/AbstractGenerator.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/abstracts/AbstractGenerator.java
similarity index 71%
rename from src/main/java/me/profelements/dynatech/items/abstracts/AbstractGenerator.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/abstracts/AbstractGenerator.java
index 2dc6642..0bf6902 100644
--- a/src/main/java/me/profelements/dynatech/items/abstracts/AbstractGenerator.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/abstracts/AbstractGenerator.java
@@ -1,21 +1,6 @@
-package me.profelements.dynatech.items.abstracts;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.block.Block;
-import org.bukkit.event.block.BlockBreakEvent;
-import org.bukkit.inventory.ItemStack;
+package id.universenetwork.sfa_loader.addons.dynatech.items.abstracts;
 
 import com.google.common.base.Preconditions;
-
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -32,31 +17,42 @@ import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
 import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineFuel;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.event.block.BlockBreakEvent;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
 
 public abstract class AbstractGenerator extends AbstractContainer implements MachineProcessHolder<FuelOperation>, RecipeDisplayItem, EnergyNetProvider {
-   
-    protected List<MachineFuel> fuels = new ArrayList<>(); 
+    protected List<MachineFuel> fuels = new ArrayList<>();
 
-    private int energyProduction =  -1;
+    private int energyProduction = -1;
     private int energyCapacity = -1;
     private int processingSpeed = -1;
 
-    private final MachineProcessor<FuelOperation> processor = new MachineProcessor<>(this); 
+    private final MachineProcessor<FuelOperation> processor = new MachineProcessor<>(this);
 
-	protected AbstractGenerator(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-		super(itemGroup, item, recipeType, recipe);
+    protected AbstractGenerator(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
+
+        processor.setProgressBar(getProgressBar());
+    }
 
-        processor.setProgressBar(getProgressBar()); 
-	}
-     
     public int getCapacity() {
-        return energyCapacity; 
+        return energyCapacity;
     }
 
     public int getEnergyProduction() {
         return energyProduction;
-    } 
-    
+    }
+
     public int getSpeed() {
         return processingSpeed;
     }
@@ -65,127 +61,121 @@ public abstract class AbstractGenerator extends AbstractContainer implements Mac
     public final AbstractGenerator setEnergyCapacity(int capacity) {
         Preconditions.checkArgument(capacity > 0, "The capacity must be greater then 0");
 
-        this.energyCapacity = capacity; 
+        this.energyCapacity = capacity;
         return this;
     }
 
     public final AbstractGenerator setEnergyProduction(int production) {
         Preconditions.checkArgument(getCapacity() > 0, "Capacity must be set before consumption");
-        Preconditions.checkArgument(production < getCapacity() && production != 0, "Consuption can not be greater then capacity"); 
-        
+        Preconditions.checkArgument(production < getCapacity() && production != 0, "Consuption can not be greater then capacity");
+
         this.energyProduction = production;
         return this;
     }
 
     public final AbstractGenerator setProcessingSpeed(int speed) {
-        Preconditions.checkArgument(speed > 0, "Speed must be greater then zero!"); 
+        Preconditions.checkArgument(speed > 0, "Speed must be greater then zero!");
 
-        this.processingSpeed = speed; 
-        return this; 
+        this.processingSpeed = speed;
+        return this;
     }
 
 
-
     @Nonnull
     @Override
     public MachineProcessor<FuelOperation> getMachineProcessor() {
         return processor;
     }
- 
+
     @Nullable
-	public MachineFuel findNextFuel(BlockMenu menu) {
+    public MachineFuel findNextFuel(BlockMenu menu) {
         Map<Integer, ItemStack> inv = new HashMap<>();
 
         for (int slot : getInputSlots()) {
             ItemStack item = menu.getItemInSlot(slot);
 
-            if (item != null) {
-                inv.put(slot, ItemStackWrapper.wrap(item));
-            }
+            if (item != null) inv.put(slot, ItemStackWrapper.wrap(item));
         }
 
         Map<Integer, Integer> found = new HashMap<>();
 
         for (MachineFuel recipe : fuels) {
             ItemStack input = recipe.getInput();
-            for (int slot : getInputSlots()) {
+            for (int slot : getInputSlots())
                 if (SlimefunUtils.isItemSimilar(inv.get(slot), input, true)) {
                     found.put(slot, input.getAmount());
                     break;
                 }
-            }
 
             if (found.size() == 1) {
-                if(recipe.getOutput() != null && !InvUtils.fitAll(menu.toInventory(), new ItemStack[] { recipe.getOutput() }, getOutputSlots())) {
-                        return null;
-                }
-                
-                for (Map.Entry<Integer, Integer> entry : found.entrySet()) {
+                if (recipe.getOutput() != null && !InvUtils.fitAll(menu.toInventory(), new ItemStack[]{recipe.getOutput()}, getOutputSlots()))
+                    return null;
+
+                for (Map.Entry<Integer, Integer> entry : found.entrySet())
                     menu.consumeItem(entry.getKey(), entry.getValue());
-                }
 
-                return recipe; 
-            } else {
-                found.clear();
-            }
+                return recipe;
+            } else found.clear();
         }
 
         return null;
-    }    
+    }
 
     @Nonnull
     protected abstract ItemStack getProgressBar();
 
-    protected boolean checkFuelPreconditions(Block b) { return true; };
-    
-    protected boolean onFuelFinish(BlockMenu menu, ItemStack[] ingredients) { return true; };
+    protected boolean checkFuelPreconditions(Block b) {
+        return true;
+    }
+
+    ;
+
+    protected boolean onFuelFinish(BlockMenu menu, ItemStack[] ingredients) {
+        return true;
+    }
+
+    ;
 
     protected void addOutputs(BlockMenu menu, Block b, ItemStack[] outputs) {
-        for (ItemStack output: outputs) {
-            if (output != null) {
-                menu.pushItem(output.clone(), getOutputSlots()); 
-            }
-        }
+        for (ItemStack output : outputs) if (output != null) menu.pushItem(output.clone(), getOutputSlots());
     }
 
     @Override
     protected void onBreak(BlockBreakEvent e, BlockMenu menu, Location l) {
-        super.onBreak(e, menu, l); 
+        super.onBreak(e, menu, l);
 
         menu.dropItems(l, getInputSlots());
         menu.dropItems(l, getOutputSlots());
 
-        processor.endOperation(e.getBlock()); 
+        processor.endOperation(e.getBlock());
     }
 
     @Override
     public int getGeneratedOutput(Location l, Config data) {
         Block b = l.getBlock();
-        BlockMenu menu = BlockStorage.getInventory(b); 
-        
+        BlockMenu menu = BlockStorage.getInventory(b);
+
         FuelOperation currentOp = processor.getOperation(b);
         if (currentOp != null && menu != null) {
             if (checkFuelPreconditions(b)) {
-                
-                if(!currentOp.isFinished() && isChargeable()) {
+
+                if (!currentOp.isFinished() && isChargeable()) {
                     int charge = getCharge(l, data);
-                    processor.updateProgressBar(menu, 22, currentOp); 
-                    
-                    if(getCapacity() - charge >= getEnergyProduction()) {
+                    processor.updateProgressBar(menu, 22, currentOp);
+
+                    if (getCapacity() - charge >= getEnergyProduction()) {
                         currentOp.addProgress(1);
                         return getEnergyProduction();
-                    }                    
+                    }
                 } else {
-                    menu.replaceExistingItem(22, new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE, " ")); 
+                    menu.replaceExistingItem(22, new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE, " "));
 
-                    boolean isFinished = onFuelFinish(menu, new ItemStack[] { currentOp.getIngredient() }); 
-                    if (isFinished) {
-                        addOutputs(menu, b, new ItemStack[] {currentOp.getResult()}); 
-                    }
+                    boolean isFinished = onFuelFinish(menu, new ItemStack[]{currentOp.getIngredient()});
+                    if (isFinished) addOutputs(menu, b, new ItemStack[]{currentOp.getResult()});
 
                     processor.endOperation(b);
                     return 0;
-                }     
+                }
             }
         } else {
             MachineFuel next = findNextFuel(menu);
diff --git a/src/main/java/me/profelements/dynatech/items/abstracts/AbstractMachine.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/abstracts/AbstractMachine.java
similarity index 78%
rename from src/main/java/me/profelements/dynatech/items/abstracts/AbstractMachine.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/abstracts/AbstractMachine.java
index 709167f..a7b1f95 100644
--- a/src/main/java/me/profelements/dynatech/items/abstracts/AbstractMachine.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/abstracts/AbstractMachine.java
@@ -1,13 +1,4 @@
-package me.profelements.dynatech.items.abstracts;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.block.Block;
-import org.bukkit.event.block.BlockBreakEvent;
-import org.bukkit.inventory.ItemStack;
+package id.universenetwork.sfa_loader.addons.dynatech.items.abstracts;
 
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -19,24 +10,31 @@ import io.github.thebusybiscuit.slimefun4.implementation.operations.CraftingOper
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.event.block.BlockBreakEvent;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
 
 public abstract class AbstractMachine extends AbstractTickingContainer implements MachineProcessHolder<CraftingOperation>, RecipeDisplayItem {
-        
-    private final MachineProcessor<CraftingOperation> processor = new MachineProcessor<>(this); 
+    private final MachineProcessor<CraftingOperation> processor = new MachineProcessor<>(this);
 
     protected AbstractMachine(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe);
-        
-        processor.setProgressBar(getProgressBar()); 
+
+        processor.setProgressBar(getProgressBar());
     }
 
     @Nonnull
     @Override
     public MachineProcessor<CraftingOperation> getMachineProcessor() {
-        return processor; 
+        return processor;
     }
 
-    @Nullable 
+    @Nullable
     public abstract MachineRecipe findNextRecipe(BlockMenu menu);
 
     @Nonnull
@@ -47,25 +45,21 @@ public abstract class AbstractMachine extends AbstractTickingContainer implement
     }
 
     protected boolean onCraftFinish(BlockMenu menu, ItemStack[] ingredients) {
-        return true; 
+        return true;
     }
 
     protected void addOutputs(BlockMenu menu, Block b, ItemStack[] outputs) {
-        for (ItemStack output: outputs) {
-            if (output != null) {
-                menu.pushItem(output.clone(), getOutputSlots()); 
-            }
-        }
+        for (ItemStack output : outputs) if (output != null) menu.pushItem(output.clone(), getOutputSlots());
     }
 
     @Override
     protected void onBreak(BlockBreakEvent e, BlockMenu menu, Location l) {
-        super.onBreak(e, menu, l); 
+        super.onBreak(e, menu, l);
 
         menu.dropItems(l, getInputSlots());
         menu.dropItems(l, getOutputSlots());
 
-        processor.endOperation(e.getBlock()); 
+        processor.endOperation(e.getBlock());
     }
 
     @Override
@@ -74,20 +68,18 @@ public abstract class AbstractMachine extends AbstractTickingContainer implement
 
         if (currentOp != null) {
             if (checkCraftPreconditions(b)) {
-                
-                if(!currentOp.isFinished()) {
-                    processor.updateProgressBar(menu, getProgressSlot(), currentOp); 
+
+                if (!currentOp.isFinished()) {
+                    processor.updateProgressBar(menu, getProgressSlot(), currentOp);
                     currentOp.addProgress(1);
                 } else {
-                    menu.replaceExistingItem(getProgressSlot(), new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE, " ")); 
+                    menu.replaceExistingItem(getProgressSlot(), new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE, " "));
 
-                    boolean isFinished = onCraftFinish(menu, currentOp.getIngredients()); 
-                    if (isFinished) {
-                        addOutputs(menu, b, currentOp.getResults()); 
-                    }
+                    boolean isFinished = onCraftFinish(menu, currentOp.getIngredients());
+                    if (isFinished) addOutputs(menu, b, currentOp.getResults());
 
                     processor.endOperation(b);
-                }     
+                }
             }
         } else {
             MachineRecipe next = findNextRecipe(menu);
@@ -102,6 +94,6 @@ public abstract class AbstractMachine extends AbstractTickingContainer implement
     }
 
     protected int getProgressSlot() {
-        return 22; 
+        return 22;
     }
 }
diff --git a/src/main/java/me/profelements/dynatech/items/abstracts/AbstractTicker.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/abstracts/AbstractTicker.java
similarity index 77%
rename from src/main/java/me/profelements/dynatech/items/abstracts/AbstractTicker.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/abstracts/AbstractTicker.java
index 87ad6af..d7056bb 100644
--- a/src/main/java/me/profelements/dynatech/items/abstracts/AbstractTicker.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/abstracts/AbstractTicker.java
@@ -1,26 +1,24 @@
-package me.profelements.dynatech.items.abstracts;
-
-import java.util.List;
-
-import org.bukkit.Location;
-import org.bukkit.block.Block;
-import org.bukkit.event.block.BlockBreakEvent;
-import org.bukkit.event.block.BlockPlaceEvent;
-import org.bukkit.inventory.ItemStack;
+package id.universenetwork.sfa_loader.addons.dynatech.items.abstracts;
 
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockPlaceHandler;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
 import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
+import org.bukkit.Location;
+import org.bukkit.block.Block;
+import org.bukkit.event.block.BlockBreakEvent;
+import org.bukkit.event.block.BlockPlaceEvent;
+import org.bukkit.inventory.ItemStack;
+
+import java.util.List;
 
 public abstract class AbstractTicker extends SlimefunItem {
-    
     protected AbstractTicker(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(itemGroup, item, recipeType, recipe); 
+        super(itemGroup, item, recipeType, recipe);
     }
 
     @Override
@@ -35,7 +33,7 @@ public abstract class AbstractTicker extends SlimefunItem {
             public void tick(Block b, SlimefunItem item, Config data) {
                 if (checkTickPreconditions(b)) {
                     AbstractTicker.this.tick(b, item);
-                    onTickFinish(b); 
+                    onTickFinish(b);
                 }
 
             }
@@ -44,27 +42,35 @@ public abstract class AbstractTicker extends SlimefunItem {
         addItemHandler(new BlockBreakHandler(false, false) {
             @Override
             public void onPlayerBreak(BlockBreakEvent e, ItemStack item, List<ItemStack> drops) {
-                    onBreak(e, e.getBlock().getLocation()); 
+                onBreak(e, e.getBlock().getLocation());
             }
         });
-        
+
         addItemHandler(new BlockPlaceHandler(false) {
             @Override
             public void onPlayerPlace(BlockPlaceEvent e) {
-                    onPlace(e, e.getBlockPlaced()); 
+                onPlace(e, e.getBlockPlaced());
             }
         });
 
     }
-    
-    protected void onBreak(BlockBreakEvent e, Location l) {};
 
-    protected void onPlace(BlockPlaceEvent e, Block blockPlaced) {};
+    protected void onBreak(BlockBreakEvent e, Location l) {
+    }
+
+    protected void onPlace(BlockPlaceEvent e, Block blockPlaced) {
+    }
+
+    protected boolean checkTickPreconditions(Block b) {
+        return true;
+    }
+
 
-    protected boolean checkTickPreconditions(Block b) { return true; };
-    protected boolean onTickFinish(Block b) { return true; }  
+    protected boolean onTickFinish(Block b) {
+        return true;
+    }
 
-    protected abstract void tick(Block b, SlimefunItem item); 
+    protected abstract void tick(Block b, SlimefunItem item);
 
     protected boolean isSynchronized() {
         return false;
diff --git a/src/main/java/me/profelements/dynatech/items/abstracts/AbstractTickingContainer.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/abstracts/AbstractTickingContainer.java
similarity index 77%
rename from src/main/java/me/profelements/dynatech/items/abstracts/AbstractTickingContainer.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/abstracts/AbstractTickingContainer.java
index c6677ad..18c904a 100644
--- a/src/main/java/me/profelements/dynatech/items/abstracts/AbstractTickingContainer.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/abstracts/AbstractTickingContainer.java
@@ -1,7 +1,4 @@
-package me.profelements.dynatech.items.abstracts;
-
-import org.bukkit.block.Block;
-import org.bukkit.inventory.ItemStack;
+package id.universenetwork.sfa_loader.addons.dynatech.items.abstracts;
 
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
@@ -11,11 +8,12 @@ import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
 import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
+import org.bukkit.block.Block;
+import org.bukkit.inventory.ItemStack;
 
 public abstract class AbstractTickingContainer extends AbstractContainer {
-    
-    protected AbstractTickingContainer(ItemGroup itemGroup, SlimefunItemStack item ,RecipeType recipeType, ItemStack[] recipe) {
-        super(itemGroup, item, recipeType, recipe); 
+    protected AbstractTickingContainer(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
     }
 
     @Override
@@ -31,18 +29,15 @@ public abstract class AbstractTickingContainer extends AbstractContainer {
             @Override
             public void tick(Block b, SlimefunItem item, Config data) {
                 BlockMenu menu = BlockStorage.getInventory(b);
-                if (menu != null) {
-                    AbstractTickingContainer.this.tick(menu, b);
-                }
+                if (menu != null) AbstractTickingContainer.this.tick(menu, b);
             }
 
-        }); 
+        });
     }
-    
-    protected abstract void tick(BlockMenu menu, Block b); 
+
+    protected abstract void tick(BlockMenu menu, Block b);
 
     protected boolean isSynchronized() {
         return false;
     }
-
 }
diff --git a/src/main/java/me/profelements/dynatech/items/backpacks/PicnicBasket.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/backpacks/PicnicBasket.java
similarity index 87%
rename from src/main/java/me/profelements/dynatech/items/backpacks/PicnicBasket.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/backpacks/PicnicBasket.java
index 45a6ddb..270bd57 100644
--- a/src/main/java/me/profelements/dynatech/items/backpacks/PicnicBasket.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/backpacks/PicnicBasket.java
@@ -1,73 +1,68 @@
-package me.profelements.dynatech.items.backpacks;
-
-import io.github.thebusybiscuit.exoticgarden.items.CustomFood;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.implementation.items.backpacks.SlimefunBackpack;
-import me.profelements.dynatech.DynaTech;
-import org.bukkit.Material;
-import org.bukkit.inventory.ItemStack;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-import java.util.ArrayList;
-import java.util.List;
-
-public class PicnicBasket extends SlimefunBackpack {
-
-    private final List<Material> defaultBlacklist = new ArrayList<>();
-
-    private final ItemSetting<List<String>> blacklistedMaterials = new ItemSetting<>(this, "blacklisted-materials", ToStringList(getDefaultBlacklist()));
-
-    public PicnicBasket(int size, ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(size, itemGroup, item, recipeType, recipe);
-
-        /*Maybe use Material.getMaterial() and send a set of strings*/
-
-        addItemSetting(blacklistedMaterials);
-    }
-
-    @Override
-    public boolean isItemAllowed(@Nonnull ItemStack item, @Nullable SlimefunItem itemAsSlimefunItem) {
-        if (DynaTech.isExoticGardenInstalled()) {
-            if (itemAsSlimefunItem instanceof CustomFood) {
-                return true;
-            } else {
-                return item.getType().isEdible() && !blacklistedMaterials.getValue().contains(item.getType().toString());
-            }
-        }
-        return item.getType().isEdible() && !blacklistedMaterials.getValue().contains(item.getType().toString());
-    }
-
-    private List<Material> getDefaultBlacklist() {
-        defaultBlacklist.add(Material.PUFFERFISH);
-        defaultBlacklist.add(Material.POISONOUS_POTATO);
-        defaultBlacklist.add(Material.SPIDER_EYE);
-        defaultBlacklist.add(Material.CHORUS_FRUIT);
-        defaultBlacklist.add(Material.ENCHANTED_GOLDEN_APPLE);
-        defaultBlacklist.add(Material.GOLDEN_APPLE);
-        defaultBlacklist.add(Material.ROTTEN_FLESH);
-
-        //Returns Stuff, maybe will figure this out later.
-        defaultBlacklist.add(Material.SUSPICIOUS_STEW);
-        defaultBlacklist.add(Material.MUSHROOM_STEW);
-        defaultBlacklist.add(Material.RABBIT_STEW);
-        defaultBlacklist.add(Material.BEETROOT_SOUP);
-        defaultBlacklist.add(Material.HONEY_BOTTLE);
-
-        return defaultBlacklist;
-    }
-
-    private List<String> ToStringList(List<Material> mats) {
-        List<String> materials = new ArrayList<>();
-
-        for (Material mat : mats) {
-            materials.add(mat.toString());
-        }
-
-        return materials;
-    }
-}
+package id.universenetwork.sfa_loader.addons.dynatech.items.backpacks;
+
+import id.universenetwork.sfa_loader.addons.dynatech.DynaTech;
+import io.github.thebusybiscuit.exoticgarden.items.CustomFood;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.implementation.items.backpacks.SlimefunBackpack;
+import org.bukkit.Material;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.util.ArrayList;
+import java.util.List;
+
+public class PicnicBasket extends SlimefunBackpack {
+    private final List<Material> defaultBlacklist = new ArrayList<>();
+
+    private final ItemSetting<List<String>> blacklistedMaterials = new ItemSetting<>(this, "blacklisted-materials", ToStringList(getDefaultBlacklist()));
+
+    public PicnicBasket(int size, ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(size, itemGroup, item, recipeType, recipe);
+
+        /*Maybe use Material.getMaterial() and send a set of strings*/
+
+        addItemSetting(blacklistedMaterials);
+    }
+
+    @Override
+    public boolean isItemAllowed(@Nonnull ItemStack item, @Nullable SlimefunItem itemAsSlimefunItem) {
+        if (DynaTech.isExoticGardenInstalled()) {
+            if (itemAsSlimefunItem instanceof CustomFood) return true;
+            else
+                return item.getType().isEdible() && !blacklistedMaterials.getValue().contains(item.getType().toString());
+        }
+        return item.getType().isEdible() && !blacklistedMaterials.getValue().contains(item.getType().toString());
+    }
+
+    private List<Material> getDefaultBlacklist() {
+        defaultBlacklist.add(Material.PUFFERFISH);
+        defaultBlacklist.add(Material.POISONOUS_POTATO);
+        defaultBlacklist.add(Material.SPIDER_EYE);
+        defaultBlacklist.add(Material.CHORUS_FRUIT);
+        defaultBlacklist.add(Material.ENCHANTED_GOLDEN_APPLE);
+        defaultBlacklist.add(Material.GOLDEN_APPLE);
+        defaultBlacklist.add(Material.ROTTEN_FLESH);
+
+        //Returns Stuff, maybe will figure this out later.
+        defaultBlacklist.add(Material.SUSPICIOUS_STEW);
+        defaultBlacklist.add(Material.MUSHROOM_STEW);
+        defaultBlacklist.add(Material.RABBIT_STEW);
+        defaultBlacklist.add(Material.BEETROOT_SOUP);
+        defaultBlacklist.add(Material.HONEY_BOTTLE);
+
+        return defaultBlacklist;
+    }
+
+    private List<String> ToStringList(List<Material> mats) {
+        List<String> materials = new ArrayList<>();
+
+        for (Material mat : mats) materials.add(mat.toString());
+
+        return materials;
+    }
+}
diff --git a/src/main/java/me/profelements/dynatech/items/backpacks/SoulboundPicnicBacket.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/backpacks/SoulboundPicnicBacket.java
similarity index 77%
rename from src/main/java/me/profelements/dynatech/items/backpacks/SoulboundPicnicBacket.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/backpacks/SoulboundPicnicBacket.java
index 89ef0d4..c708ef0 100644
--- a/src/main/java/me/profelements/dynatech/items/backpacks/SoulboundPicnicBacket.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/backpacks/SoulboundPicnicBacket.java
@@ -1,19 +1,16 @@
-package me.profelements.dynatech.items.backpacks;
-
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.inventory.ItemStack;
+package id.universenetwork.sfa_loader.addons.dynatech.items.backpacks;
 
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.Soulbound;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.ParametersAreNonnullByDefault;
 
 public class SoulboundPicnicBacket extends PicnicBasket implements Soulbound {
-    
-	@ParametersAreNonnullByDefault
+    @ParametersAreNonnullByDefault
     public SoulboundPicnicBacket(int size, ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-		super(size, itemGroup, item, recipeType, recipe);
-	}
-
+        super(size, itemGroup, item, recipeType, recipe);
+    }
 }
diff --git a/src/main/java/me/profelements/dynatech/items/electric/AntigravityBubble.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/AntigravityBubble.java
similarity index 68%
rename from src/main/java/me/profelements/dynatech/items/electric/AntigravityBubble.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/AntigravityBubble.java
index 2feb454..c700814 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/AntigravityBubble.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/AntigravityBubble.java
@@ -1,11 +1,10 @@
-package me.profelements.dynatech.items.electric;
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric;
 
+import id.universenetwork.sfa_loader.addons.dynatech.items.abstracts.AbstractElectricTicker;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import me.profelements.dynatech.items.abstracts.AbstractElectricTicker;
-
 import org.bukkit.Bukkit;
 import org.bukkit.GameMode;
 import org.bukkit.Location;
@@ -16,24 +15,18 @@ import org.bukkit.event.block.BlockBreakEvent;
 import org.bukkit.event.block.BlockPlaceEvent;
 import org.bukkit.inventory.ItemStack;
 
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Set;
-import java.util.UUID;
+import java.util.*;
 
 public class AntigravityBubble extends AbstractElectricTicker {
+    private final Map<Location, Set<UUID>> enabledPlayers = new HashMap<>();
 
-    private final Map<Location, Set<UUID>> enabledPlayers = new HashMap<>(); 
-
-	public AntigravityBubble(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-		super(itemGroup, item, recipeType, recipe);
-	}
+    public AntigravityBubble(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
+    }
 
     @Override
     protected void onPlace(BlockPlaceEvent e, Block blockPlaced) {
-        enabledPlayers.put(blockPlaced.getLocation(), new HashSet<>()); 
+        enabledPlayers.put(blockPlaced.getLocation(), new HashSet<>());
     }
 
     @Override
@@ -47,36 +40,33 @@ public class AntigravityBubble extends AbstractElectricTicker {
         }
 
         enabledPlayers.remove(l);
-        
     }
 
-	@Override
-	protected void tick(Block b, SlimefunItem item) {
+    @Override
+    protected void tick(Block b, SlimefunItem item) {
         Collection<Entity> bubbledEntities = b.getWorld().getNearbyEntities(b.getLocation(), 16, 16, 16, Player.class::isInstance);
         for (Entity entity : bubbledEntities) {
-            Player p = (Player) entity; 
+            Player p = (Player) entity;
 
-            if (!p.getAllowFlight() && (p.getGameMode() != GameMode.CREATIVE || p.getGameMode() != GameMode.SPECTATOR)) {
-                enabledPlayers.get(b.getLocation()).add(p.getUniqueId()); 
-                p.setAllowFlight(true); 
+            if (!p.getAllowFlight() && (p.getGameMode() != GameMode.CREATIVE || p.getGameMode() != GameMode.SPECTATOR) && p.hasPermission("sfaloader.use.antigravitybubble")) {
+                enabledPlayers.get(b.getLocation()).add(p.getUniqueId());
+                p.setAllowFlight(true);
             }
         }
 
 
-
         for (UUID id : enabledPlayers.getOrDefault(b.getLocation(), new HashSet<>())) {
-            Player p = Bukkit.getPlayer(id); 
+            Player p = Bukkit.getPlayer(id);
 
             if (p != null && !bubbledEntities.contains(p)) {
-                    p.setAllowFlight(false);
-                    p.setFlying(false);
-                    p.setFallDistance(0.f);
+                p.setAllowFlight(false);
+                p.setFlying(false);
+                p.setFallDistance(0.f);
             }
         }
 
-        enabledPlayers.get(b.getLocation()).removeIf(uuid -> (Bukkit.getPlayer(uuid) != null && !bubbledEntities.contains(Bukkit.getPlayer(uuid)))); 
-        
-	}
+        enabledPlayers.get(b.getLocation()).removeIf(uuid -> (Bukkit.getPlayer(uuid) != null && !bubbledEntities.contains(Bukkit.getPlayer(uuid))));
+    }
 
     @Override
     protected boolean isSynchronized() {
diff --git a/src/main/java/me/profelements/dynatech/items/electric/BandaidManager.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/BandaidManager.java
similarity index 69%
rename from src/main/java/me/profelements/dynatech/items/electric/BandaidManager.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/BandaidManager.java
index 5e6b049..6f91444 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/BandaidManager.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/BandaidManager.java
@@ -1,5 +1,8 @@
-package me.profelements.dynatech.items.electric;
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric;
 
+import id.universenetwork.sfa_loader.addons.dynatech.DynaTechItems;
+import id.universenetwork.sfa_loader.addons.dynatech.items.abstracts.AbstractElectricMachine;
+import id.universenetwork.sfa_loader.addons.dynatech.items.misc.ItemBand;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -12,26 +15,21 @@ import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
 import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
-import me.profelements.dynatech.DynaTechItems;
-import me.profelements.dynatech.items.abstracts.AbstractElectricMachine;
-import me.profelements.dynatech.items.misc.ItemBand;
-
-import java.util.ArrayList;
-import java.util.List;
-
 import org.bukkit.Material;
 import org.bukkit.entity.Player;
 import org.bukkit.event.inventory.InventoryClickEvent;
 import org.bukkit.inventory.ItemStack;
 
+import java.util.ArrayList;
+import java.util.List;
+
 public class BandaidManager extends AbstractElectricMachine {
-    
-    private static final int[] INPUT_SLOTS = new int[] { 19, 20 };
-    private static final int[] OUTPUT_SLOTS = new int[] { 24, 25 };
+    private static final int[] INPUT_SLOTS = new int[]{19, 20};
+    private static final int[] OUTPUT_SLOTS = new int[]{24, 25};
 
-    private static final int[] INPUT_BORDER_SLOTS = new int[] { 9, 10, 11, 12, 18, 21, 27, 28, 29, 30 };
-    private static final int[] OUTPUT_BORDER_SLOTS = new int[] {14, 15, 16, 17, 23, 26, 32, 33, 34, 35 };
-    private static final int[] BACKGROUND_SLOTS = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44 }; 
+    private static final int[] INPUT_BORDER_SLOTS = new int[]{9, 10, 11, 12, 18, 21, 27, 28, 29, 30};
+    private static final int[] OUTPUT_BORDER_SLOTS = new int[]{14, 15, 16, 17, 23, 26, 32, 33, 34, 35};
+    private static final int[] BACKGROUND_SLOTS = new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44};
 
     private static final ItemStack PROGRESS_ITEM = new ItemStack(Material.PHANTOM_MEMBRANE);
 
@@ -39,7 +37,7 @@ public class BandaidManager extends AbstractElectricMachine {
     public BandaidManager(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe);
     }
-    
+
 
     @Override
     public MachineRecipe findNextRecipe(BlockMenu inv) {
@@ -54,60 +52,53 @@ public class BandaidManager extends AbstractElectricMachine {
                         ItemBand band = (ItemBand) sfBand;
                         ItemStack result = band.applyToItem(target.clone());
 
-                        if (result.getAmount() > 1) {
-                            result.setAmount(1);
-                        }
+                        if (result.getAmount() > 1) result.setAmount(1);
 
                         inv.consumeItem(getInputSlots()[0]);
                         inv.consumeItem(getInputSlots()[1]);
 
-                        return new MachineRecipe(30, new ItemStack[] {target, itemBand}, new ItemStack[] {result});
+                        return new MachineRecipe(30, new ItemStack[]{target, itemBand}, new ItemStack[]{result});
                     }
-                    
+
                 }
             } else if (ItemBand.containsItemBand(target)) {
                 String id = PersistentDataAPI.getString(target.getItemMeta(), ItemBand.KEY);
                 if (id != null && SlimefunItem.getById(id) != null) {
                     SlimefunItem sfItem = SlimefunItem.getById(id);
                     ItemStack result = ItemBand.removeFromItem(target.clone());
-                        
-                    if (result.getAmount() > 1) {
-                        result.setAmount(1);
-                    }
+
+                    if (result.getAmount() > 1) result.setAmount(1);
 
                     inv.consumeItem(getInputSlots()[0]);
 
-                    return new MachineRecipe(60, new ItemStack[] {target}, new ItemStack[] {result, sfItem.getItem()});
+                    return new MachineRecipe(60, new ItemStack[]{target}, new ItemStack[]{result, sfItem.getItem()});
                 }
 
             }
         }
         return null;
     }
-    
+
     @Override
     public ItemStack getProgressBar() {
         return PROGRESS_ITEM;
     }
 
-	@Override
-	protected void setupMenu(BlockMenuPreset preset) {
-		for (int slot : BACKGROUND_SLOTS) {
+    @Override
+    protected void setupMenu(BlockMenuPreset preset) {
+        for (int slot : BACKGROUND_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
-        for (int slot : INPUT_BORDER_SLOTS) {
+        for (int slot : INPUT_BORDER_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getInputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
-        for (int slot : OUTPUT_BORDER_SLOTS) {
+        for (int slot : OUTPUT_BORDER_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getOutputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
-        
+
         preset.addItem(getProgressSlot(), new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE, " "), ChestMenuUtils.getEmptyClickHandler());
 
-        for (int slot : getOutputSlots()) {
-            preset.addMenuClickHandler(slot,new ChestMenu.AdvancedMenuClickHandler() {
+        for (int slot : getOutputSlots())
+            preset.addMenuClickHandler(slot, new ChestMenu.AdvancedMenuClickHandler() {
                 @Override
                 public boolean onClick(InventoryClickEvent e, Player p, int slot, ItemStack cursor, ClickAction action) {
                     return cursor.getType().isAir();
@@ -118,31 +109,29 @@ public class BandaidManager extends AbstractElectricMachine {
                     return false;
                 }
             });
-        }
-	}
+    }
 
-	@Override
-	protected int[] getInputSlots() {
-		return INPUT_SLOTS; 
-	}
+    @Override
+    protected int[] getInputSlots() {
+        return INPUT_SLOTS;
+    }
 
 
-	@Override
-	protected int[] getOutputSlots() {
-		return OUTPUT_SLOTS;
-	}
+    @Override
+    protected int[] getOutputSlots() {
+        return OUTPUT_SLOTS;
+    }
 
 
-	@Override
-	public List<ItemStack> getDisplayRecipes() {
-		List<ItemStack> display = new ArrayList<>();
+    @Override
+    public List<ItemStack> getDisplayRecipes() {
+        List<ItemStack> display = new ArrayList<>();
 
         display.add(DynaTechItems.ITEM_BAND_HASTE);
         display.add(new CustomItemStack(Material.IRON_PICKAXE, "Any Tool"));
         display.add(DynaTechItems.ITEM_BAND_HEALTH);
         display.add(new CustomItemStack(Material.IRON_PICKAXE, "Any Tool"));
-	    
+
         return display;
     }
-    
 }
diff --git a/src/main/java/me/profelements/dynatech/items/electric/BarbedWire.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/BarbedWire.java
similarity index 91%
rename from src/main/java/me/profelements/dynatech/items/electric/BarbedWire.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/BarbedWire.java
index 320f585..f058a59 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/BarbedWire.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/BarbedWire.java
@@ -1,10 +1,11 @@
-package me.profelements.dynatech.items.electric;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import javax.annotation.ParametersAreNonnullByDefault;
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric;
 
+import id.universenetwork.sfa_loader.addons.dynatech.items.abstracts.AbstractElectricTicker;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import org.bukkit.Location;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Entity;
@@ -13,15 +14,11 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.util.NumberConversions;
 import org.bukkit.util.Vector;
 
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import me.profelements.dynatech.items.abstracts.AbstractElectricTicker;
+import javax.annotation.ParametersAreNonnullByDefault;
+import java.util.ArrayList;
+import java.util.List;
 
 public class BarbedWire extends AbstractElectricTicker {
-
     private static final int DEFAULT_ENTITY_PUSH_FORCE = 10;
     private static final int DEFAULT_ENTITY_DETECT_RANGE = 9;
 
@@ -29,7 +26,7 @@ public class BarbedWire extends AbstractElectricTicker {
     private final ItemSetting<Integer> entityDetectRange = new ItemSetting<>(this, "entity-detect-range", DEFAULT_ENTITY_DETECT_RANGE);
 
     @ParametersAreNonnullByDefault
-    public BarbedWire(ItemGroup group, SlimefunItemStack item,  RecipeType recipeType, ItemStack[] recipe) {
+    public BarbedWire(ItemGroup group, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(group, item, recipeType, recipe);
         addItemSetting(entityPushForce, entityDetectRange);
     }
@@ -87,22 +84,19 @@ public class BarbedWire extends AbstractElectricTicker {
         int entityDetectionRange = entityDetectRange.getValue();
         List<EntityType> entityTypeWhitelist = getEntityWhitelist();
         Location loc = block.getLocation();
-    
-        for (Entity e : block.getWorld().getNearbyEntities(loc, entityDetectionRange, entityDetectionRange, entityDetectionRange)) {
+
+        for (Entity e : block.getWorld().getNearbyEntities(loc, entityDetectionRange, entityDetectionRange, entityDetectionRange))
             if (entityTypeWhitelist.contains(e.getType())) {
 
-                /// Find the Direction Vector. normailze it. multiply by the push force. apply it to the entity.
+                /// Find the Direction Vector. normalize it. multiply by the push force. apply it to the entity.
                 Vector launchDirection = loc.subtract(e.getLocation()).toVector().normalize().multiply(entityPushForce.getValue());
 
                 /// If any of the components are not finite just set it to zero.
                 if (NumberConversions.isFinite(launchDirection.getX()) && NumberConversions.isFinite(launchDirection.getY())
                     && NumberConversions.isFinite(launchDirection.getZ())) {
                     e.setVelocity(launchDirection);
-                } else {
-                    e.setVelocity(new Vector(0, 0, 0));
-                }
+                } else e.setVelocity(new Vector(0, 0, 0));
             }
-        } 
     }
 
     @Override
diff --git a/src/main/java/me/profelements/dynatech/items/electric/FurnaceController.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/FurnaceController.java
similarity index 82%
rename from src/main/java/me/profelements/dynatech/items/electric/FurnaceController.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/FurnaceController.java
index a2b5fbb..e54a608 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/FurnaceController.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/FurnaceController.java
@@ -1,8 +1,12 @@
-package me.profelements.dynatech.items.electric;
-
-import java.util.ArrayList;
-import java.util.List;
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric;
 
+import id.universenetwork.sfa_loader.addons.dynatech.items.abstracts.AbstractElectricTicker;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.libraries.paperlib.PaperLib;
+import io.github.thebusybiscuit.slimefun4.libraries.paperlib.features.blockstatesnapshot.BlockStateSnapshotResult;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
@@ -10,48 +14,37 @@ import org.bukkit.block.BlockState;
 import org.bukkit.block.Furnace;
 import org.bukkit.inventory.ItemStack;
 
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.libraries.paperlib.PaperLib;
-import io.github.thebusybiscuit.slimefun4.libraries.paperlib.features.blockstatesnapshot.BlockStateSnapshotResult;
-import me.profelements.dynatech.items.abstracts.AbstractElectricTicker;
+import java.util.ArrayList;
+import java.util.List;
 
 public class FurnaceController extends AbstractElectricTicker {
-    
-
     public FurnaceController(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe);
     }
-    
+
     protected void tick(Block b, SlimefunItem item) {
         for (BlockFace face : BlockFace.values()) {
-            if (face == BlockFace.UP || face == BlockFace.DOWN) {
-                continue;
-            }
+            if (face == BlockFace.UP || face == BlockFace.DOWN) continue;
             Block relBlock = b.getRelative(face);
-            if (getMachines().contains(relBlock.getType())) { 
+            if (getMachines().contains(relBlock.getType())) {
                 BlockStateSnapshotResult result = PaperLib.getBlockState(relBlock, false);
                 BlockState state = result.getState();
-                
+
                 if (state instanceof Furnace && ((Furnace) state).getCookTimeTotal() > 0) {
                     Furnace furnace = (Furnace) state;
                     furnace.setBurnTime((short) 1600);
 
-                    if (result.isSnapshot()) {
-                        state.update(true, true);
-                    }
+                    if (result.isSnapshot()) state.update(true, true);
                 }
             }
         }
     }
-    
+
     @Override
     protected boolean isSynchronized() {
         return true;
     }
-    
+
 
     private List<Material> getMachines() {
         List<Material> machines = new ArrayList<>();
@@ -59,8 +52,7 @@ public class FurnaceController extends AbstractElectricTicker {
         machines.add(Material.FURNACE);
         machines.add(Material.BLAST_FURNACE);
         machines.add(Material.SMOKER);
-        
+
         return machines;
     }
 }
-
diff --git a/src/main/java/me/profelements/dynatech/items/electric/KitchenAutoCrafter.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/KitchenAutoCrafter.java
similarity index 66%
rename from src/main/java/me/profelements/dynatech/items/electric/KitchenAutoCrafter.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/KitchenAutoCrafter.java
index 3e14270..302c0de 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/KitchenAutoCrafter.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/KitchenAutoCrafter.java
@@ -1,19 +1,17 @@
-package me.profelements.dynatech.items.electric;
-
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.inventory.ItemStack;
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric;
 
 import io.github.thebusybiscuit.exoticgarden.ExoticGardenRecipeTypes;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.implementation.items.autocrafters.SlimefunAutoCrafter;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.ParametersAreNonnullByDefault;
 
 public class KitchenAutoCrafter extends SlimefunAutoCrafter {
-    
     @ParametersAreNonnullByDefault
-	public KitchenAutoCrafter(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-		super(itemGroup, item, recipeType, recipe, ExoticGardenRecipeTypes.KITCHEN);
-	}
+    public KitchenAutoCrafter(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe, ExoticGardenRecipeTypes.KITCHEN);
+    }
 }
diff --git a/src/main/java/me/profelements/dynatech/items/electric/MaterialHive.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/MaterialHive.java
similarity index 73%
rename from src/main/java/me/profelements/dynatech/items/electric/MaterialHive.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/MaterialHive.java
index 8333363..3e287f0 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/MaterialHive.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/MaterialHive.java
@@ -1,237 +1,219 @@
-package me.profelements.dynatech.items.electric;
-
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.core.attributes.Radioactive;
-import io.github.thebusybiscuit.slimefun4.core.attributes.Radioactivity;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
-import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
-import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
-import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
-import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
-import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;
-import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
-import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
-import me.profelements.dynatech.DynaTechItems;
-import me.profelements.dynatech.items.abstracts.AbstractElectricMachine;
-import me.profelements.dynatech.items.misc.Bee;
-import org.bukkit.Material;
-import org.bukkit.entity.Player;
-import org.bukkit.event.inventory.InventoryClickEvent;
-import org.bukkit.inventory.ItemStack;
-
-import javax.annotation.Nonnull;
-import java.util.ArrayList;
-import java.util.List;
-
-public class MaterialHive extends AbstractElectricMachine implements Radioactive {
-
-    private static final int[] BACKGROUND_SLOTS  = new int[] {0,1,2,6,7,8,31,36,37,38,39,40,41,42,43,44};
-    private static final int[] INPUT_BORDER_SLOTS = new int[] {9,10,11,12,18,21,27,28,29,30};
-    private static final int[] OUTPUT_BORDER_SLOTS = new int[] {14,15,16,17,23,26,32,33,34,35};
-    
-    private static final int[] BORDER_KEY = new int[] {3,5,13};
-    private static final SlimefunItemStack UI_KEY = new SlimefunItemStack("_UI_KEY", Material.LIGHT_BLUE_STAINED_GLASS_PANE, " ");
-
-    private static final int[] INPUT_SLOTS = new int[] {19,20,4};
-    private static final int[] OUTPUT_SLOTS = new int[] {24,25};
-
-    public final ItemSetting<List<String>> vanillaItemsAccepted = new ItemSetting<>(this, "vanilla-items-accepted", getDefaultAllowedVanillaItems());
-    public final ItemSetting<List<String>> slimefunItemsAccepted = new ItemSetting<>(this, "slimefun-items-accepted", getDefaultAllowedSlimefunItems());
-    
-    public MaterialHive(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(itemGroup, item, recipeType, recipe);
-        addItemSetting(vanillaItemsAccepted, slimefunItemsAccepted);
-    }
-
-
-    @Override
-    public MachineRecipe findNextRecipe(BlockMenu inv) {
-        ItemStack key = inv.getItemInSlot(getInputSlots()[2]);
-        for (MachineRecipe recipe: recipes) {
-            ItemStack input = recipe.getInput()[0].clone();
-            if (SlimefunUtils.isItemSimilar(key, input, true) && key.getAmount() == 64) {
-
-                int seconds = 1800;
-                ItemStack b1 = inv.getItemInSlot(getInputSlots()[0]);
-                ItemStack b2 = inv.getItemInSlot(getInputSlots()[1]);
-
-                if (b1 != null) {
-                    SlimefunItem bee1 = SlimefunItem.getByItem(b1);
-                    if (bee1 instanceof Bee) {
-                        seconds -= ((Bee) bee1).getSpeedMultipler() * b1.getAmount();
-                    }
-                }
-                if (b2 != null) {
-                    SlimefunItem bee2 = SlimefunItem.getByItem(b2);
-                    if (bee2 instanceof Bee) {
-                        seconds -= ((Bee) bee2).getSpeedMultipler() * b2.getAmount();
-                    }
-
-                    if (b1 != null && SlimefunUtils.isItemSimilar(b1, b2, true) && b1.getAmount() == 64 && b2.getAmount() == 64) {
-                       if (bee2.getId().equals(DynaTechItems.BEE.getItemId())) {
-                            seconds = 1500;
-                       }
-                       if (bee2.getId().equals(DynaTechItems.ROBOTIC_BEE.getItemId())) {
-                            seconds = 900;
-                       }
-                       if (bee2.getId().equals(DynaTechItems.ADVANCED_ROBOTIC_BEE.getItemId())) {
-                           seconds = 300;
-                       }
-                    }
-                }
-                input.setAmount(1);
-                return new MachineRecipe(seconds, new ItemStack[] { recipe.getInput()[0] }, new ItemStack[] { input });
-            }
-        }
-        return null;
-    }
-    
-    public void registerDefaultHiveRecipes() {
-        for (String slimefunItem : slimefunItemsAccepted.getValue()) {
-            SlimefunItem sfItem = SlimefunItem.getById(slimefunItem);
-            if (sfItem != null) {
-                ItemStack item = sfItem.getItem().clone();
-                item.setAmount(64);
-                registerRecipe(new MachineRecipe(1800, new ItemStack[] { item }, new ItemStack[] { SlimefunItem.getById(slimefunItem).getItem() }));
-        
-            }
-        }
-        for (String material : vanillaItemsAccepted.getValue()) {
-            ItemStack item = new ItemStack(Material.matchMaterial(material), 64);
-            registerRecipe(new MachineRecipe(1800, new ItemStack[] { item }, new ItemStack[] { new ItemStack(Material.matchMaterial(material)) }));
-        }
-    }
-       
-    @Override
-    public void postRegister() {
-        super.postRegister();
-        registerDefaultHiveRecipes();
-    }
-   
-    @Nonnull
-    @Override
-    public Radioactivity getRadioactivity() {
-        return Radioactivity.HIGH;
-    }
-
-   @Override
-    public ItemStack getProgressBar() {
-        return new ItemStack(Material.NETHERITE_HOE);
-    }
-
-    private static List<String> getDefaultAllowedVanillaItems() {
-        List<String> materialsAllowed = new ArrayList<>();
-
-        materialsAllowed.add("IRON_INGOT");
-        materialsAllowed.add("GOLD_INGOT");
-        materialsAllowed.add("NETHERITE_INGOT");
-        materialsAllowed.add("DIAMOND");
-        materialsAllowed.add("EMERALD");
-        materialsAllowed.add("LAPIS_LAZULI");
-        materialsAllowed.add("QUARTZ");
-        materialsAllowed.add("REDSTONE");
-        materialsAllowed.add("COAL");
-
-        return materialsAllowed;
-    }
-
-    private static List<String> getDefaultAllowedSlimefunItems() {
-        List<String> sfItemsAllowed = new ArrayList<>();
-
-        //Ingots
-        sfItemsAllowed.add("COPPER_INGOT");
-        sfItemsAllowed.add("TIN_INGOT");
-        sfItemsAllowed.add("SILVER_INGOT");
-        sfItemsAllowed.add("ALUMINUM_INGOT");
-        sfItemsAllowed.add("LEAD_INGOT");
-        sfItemsAllowed.add("ZINC_INGOT");
-        sfItemsAllowed.add("MAGNESIUM_INGOT");
-
-        //Alloys
-        sfItemsAllowed.add("STEEL_INGOT");
-        sfItemsAllowed.add("DURALUMIN_INGOT");
-        sfItemsAllowed.add("BILLON_INGOT");
-        sfItemsAllowed.add("BRASS_INGOT");
-        sfItemsAllowed.add("ALUMINUM_BRASS_INGOT");
-        sfItemsAllowed.add("ALUMINUM_BRONZE_INGOT");
-        sfItemsAllowed.add("CORINTHIAN_BRONZE_INGOT");
-        sfItemsAllowed.add("SOLDER_INGOT");
-        sfItemsAllowed.add("DAMASCUS_STEEL_INGOT");
-        sfItemsAllowed.add("HARDENED_METAL_INGOT");
-        sfItemsAllowed.add("REINFORCED_ALLOY_INGOT");
-        sfItemsAllowed.add("FERROSILICON");
-        sfItemsAllowed.add("GILDED_IRON");
-        sfItemsAllowed.add("NICKEL_INGOT");
-        sfItemsAllowed.add("COBALT_INGOT");
-        sfItemsAllowed.add("REDSTONE_ALLOY"); 
-        //Gems
-        sfItemsAllowed.add("SYNTHETIC_DIAMOND");
-        sfItemsAllowed.add("SYNTHETIC_EMERALD");
-        sfItemsAllowed.add("SYNTHETIC_SAPPHIRE");
-        sfItemsAllowed.add("CARBONADO");
-
-        return sfItemsAllowed;
-    }
-
-
-	@Override
-	public List<ItemStack> getDisplayRecipes() {
-	    List<ItemStack> display = new ArrayList<>(); 
-
-        for (MachineRecipe recipe : recipes) {
-            display.add(recipe.getInput()[0]);
-            display.add(recipe.getOutput()[0]);
-        }
-
-        return display;
-
-    }
-    
-    @Override
-    protected void setupMenu(BlockMenuPreset preset) {
-    	for (int slot : BACKGROUND_SLOTS) {
-            preset.addItem(slot, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
-        }
-
-        for (int slot : INPUT_BORDER_SLOTS) {
-            preset.addItem(slot, ChestMenuUtils.getInputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
-
-        for (int slot : OUTPUT_BORDER_SLOTS) {
-            preset.addItem(slot, ChestMenuUtils.getOutputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
-
-        preset.addItem(getProgressSlot(), new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE, " "), ChestMenuUtils.getEmptyClickHandler());
-        
-        for (int slot : getOutputSlots()) {
-            preset.addMenuClickHandler(slot,new ChestMenu.AdvancedMenuClickHandler() {
-                @Override
-                public boolean onClick(InventoryClickEvent e, Player p, int slot, ItemStack cursor, ClickAction action) {
-                    return cursor.getType().isAir();
-                }
-
-                @Override
-                public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
-                    return false;
-                }
-            });
-        };
-
-        preset.drawBackground(UI_KEY, BORDER_KEY);
-    }
-    
-    @Override
-    public int[] getInputSlots() {
-        return INPUT_SLOTS;
-    }
-
-	@Override
-	protected int[] getOutputSlots() {
-		return OUTPUT_SLOTS;
-	}
-    
-}
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric;
+
+import id.universenetwork.sfa_loader.addons.dynatech.DynaTechItems;
+import id.universenetwork.sfa_loader.addons.dynatech.items.abstracts.AbstractElectricMachine;
+import id.universenetwork.sfa_loader.addons.dynatech.items.misc.Bee;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.attributes.Radioactive;
+import io.github.thebusybiscuit.slimefun4.core.attributes.Radioactivity;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
+import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
+import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
+import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;
+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
+import org.bukkit.Material;
+import org.bukkit.entity.Player;
+import org.bukkit.event.inventory.InventoryClickEvent;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+import java.util.ArrayList;
+import java.util.List;
+
+public class MaterialHive extends AbstractElectricMachine implements Radioactive {
+    private static final int[] BACKGROUND_SLOTS = new int[]{0, 1, 2, 6, 7, 8, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44};
+    private static final int[] INPUT_BORDER_SLOTS = new int[]{9, 10, 11, 12, 18, 21, 27, 28, 29, 30};
+    private static final int[] OUTPUT_BORDER_SLOTS = new int[]{14, 15, 16, 17, 23, 26, 32, 33, 34, 35};
+
+    private static final int[] BORDER_KEY = new int[]{3, 5, 13};
+    private static final SlimefunItemStack UI_KEY = new SlimefunItemStack("_UI_KEY", Material.LIGHT_BLUE_STAINED_GLASS_PANE, " ");
+
+    private static final int[] INPUT_SLOTS = new int[]{19, 20, 4};
+    private static final int[] OUTPUT_SLOTS = new int[]{24, 25};
+
+    public final ItemSetting<List<String>> vanillaItemsAccepted = new ItemSetting<>(this, "vanilla-items-accepted", getDefaultAllowedVanillaItems());
+    public final ItemSetting<List<String>> slimefunItemsAccepted = new ItemSetting<>(this, "slimefun-items-accepted", getDefaultAllowedSlimefunItems());
+
+    public MaterialHive(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
+        addItemSetting(vanillaItemsAccepted, slimefunItemsAccepted);
+    }
+
+
+    @Override
+    public MachineRecipe findNextRecipe(BlockMenu inv) {
+        ItemStack key = inv.getItemInSlot(getInputSlots()[2]);
+        for (MachineRecipe recipe : recipes) {
+            ItemStack input = recipe.getInput()[0].clone();
+            if (SlimefunUtils.isItemSimilar(key, input, true) && key.getAmount() == 64) {
+
+                int seconds = 1800;
+                ItemStack b1 = inv.getItemInSlot(getInputSlots()[0]);
+                ItemStack b2 = inv.getItemInSlot(getInputSlots()[1]);
+
+                if (b1 != null) {
+                    SlimefunItem bee1 = SlimefunItem.getByItem(b1);
+                    if (bee1 instanceof Bee) seconds -= ((Bee) bee1).getSpeedMultiplier() * b1.getAmount();
+                }
+                if (b2 != null) {
+                    SlimefunItem bee2 = SlimefunItem.getByItem(b2);
+                    if (bee2 instanceof Bee) seconds -= ((Bee) bee2).getSpeedMultiplier() * b2.getAmount();
+
+                    if (b1 != null && SlimefunUtils.isItemSimilar(b1, b2, true) && b1.getAmount() == 64 && b2.getAmount() == 64) {
+                        if (bee2.getId().equals(DynaTechItems.BEE.getItemId())) seconds = 1500;
+                        if (bee2.getId().equals(DynaTechItems.ROBOTIC_BEE.getItemId())) seconds = 900;
+                        if (bee2.getId().equals(DynaTechItems.ADVANCED_ROBOTIC_BEE.getItemId())) seconds = 300;
+                    }
+                }
+                input.setAmount(1);
+                return new MachineRecipe(seconds, new ItemStack[]{recipe.getInput()[0]}, new ItemStack[]{input});
+            }
+        }
+        return null;
+    }
+
+    public void registerDefaultHiveRecipes() {
+        for (String slimefunItem : slimefunItemsAccepted.getValue()) {
+            SlimefunItem sfItem = SlimefunItem.getById(slimefunItem);
+            if (sfItem != null) {
+                ItemStack item = sfItem.getItem().clone();
+                item.setAmount(64);
+                registerRecipe(new MachineRecipe(1800, new ItemStack[]{item}, new ItemStack[]{SlimefunItem.getById(slimefunItem).getItem()}));
+            }
+        }
+        for (String material : vanillaItemsAccepted.getValue()) {
+            ItemStack item = new ItemStack(Material.matchMaterial(material), 64);
+            registerRecipe(new MachineRecipe(1800, new ItemStack[]{item}, new ItemStack[]{new ItemStack(Material.matchMaterial(material))}));
+        }
+    }
+
+    @Override
+    public void postRegister() {
+        super.postRegister();
+        registerDefaultHiveRecipes();
+    }
+
+    @Nonnull
+    @Override
+    public Radioactivity getRadioactivity() {
+        return Radioactivity.HIGH;
+    }
+
+    @Override
+    public ItemStack getProgressBar() {
+        return new ItemStack(Material.NETHERITE_HOE);
+    }
+
+    private static List<String> getDefaultAllowedVanillaItems() {
+        List<String> materialsAllowed = new ArrayList<>();
+
+        materialsAllowed.add("IRON_INGOT");
+        materialsAllowed.add("GOLD_INGOT");
+        materialsAllowed.add("NETHERITE_INGOT");
+        materialsAllowed.add("DIAMOND");
+        materialsAllowed.add("EMERALD");
+        materialsAllowed.add("LAPIS_LAZULI");
+        materialsAllowed.add("QUARTZ");
+        materialsAllowed.add("REDSTONE");
+        materialsAllowed.add("COAL");
+
+        return materialsAllowed;
+    }
+
+    private static List<String> getDefaultAllowedSlimefunItems() {
+        List<String> sfItemsAllowed = new ArrayList<>();
+
+        //Ingots
+        sfItemsAllowed.add("COPPER_INGOT");
+        sfItemsAllowed.add("TIN_INGOT");
+        sfItemsAllowed.add("SILVER_INGOT");
+        sfItemsAllowed.add("ALUMINUM_INGOT");
+        sfItemsAllowed.add("LEAD_INGOT");
+        sfItemsAllowed.add("ZINC_INGOT");
+        sfItemsAllowed.add("MAGNESIUM_INGOT");
+
+        //Alloys
+        sfItemsAllowed.add("STEEL_INGOT");
+        sfItemsAllowed.add("DURALUMIN_INGOT");
+        sfItemsAllowed.add("BILLON_INGOT");
+        sfItemsAllowed.add("BRASS_INGOT");
+        sfItemsAllowed.add("ALUMINUM_BRASS_INGOT");
+        sfItemsAllowed.add("ALUMINUM_BRONZE_INGOT");
+        sfItemsAllowed.add("CORINTHIAN_BRONZE_INGOT");
+        sfItemsAllowed.add("SOLDER_INGOT");
+        sfItemsAllowed.add("DAMASCUS_STEEL_INGOT");
+        sfItemsAllowed.add("HARDENED_METAL_INGOT");
+        sfItemsAllowed.add("REINFORCED_ALLOY_INGOT");
+        sfItemsAllowed.add("FERROSILICON");
+        sfItemsAllowed.add("GILDED_IRON");
+        sfItemsAllowed.add("NICKEL_INGOT");
+        sfItemsAllowed.add("COBALT_INGOT");
+        sfItemsAllowed.add("REDSTONE_ALLOY");
+        //Gems
+        sfItemsAllowed.add("SYNTHETIC_DIAMOND");
+        sfItemsAllowed.add("SYNTHETIC_EMERALD");
+        sfItemsAllowed.add("SYNTHETIC_SAPPHIRE");
+        sfItemsAllowed.add("CARBONADO");
+
+        return sfItemsAllowed;
+    }
+
+
+    @Override
+    public List<ItemStack> getDisplayRecipes() {
+        List<ItemStack> display = new ArrayList<>();
+
+        for (MachineRecipe recipe : recipes) {
+            display.add(recipe.getInput()[0]);
+            display.add(recipe.getOutput()[0]);
+        }
+
+        return display;
+    }
+
+    @Override
+    protected void setupMenu(BlockMenuPreset preset) {
+        for (int slot : BACKGROUND_SLOTS)
+            preset.addItem(slot, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
+
+        for (int slot : INPUT_BORDER_SLOTS)
+            preset.addItem(slot, ChestMenuUtils.getInputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
+
+        for (int slot : OUTPUT_BORDER_SLOTS)
+            preset.addItem(slot, ChestMenuUtils.getOutputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
+
+        preset.addItem(getProgressSlot(), new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE, " "), ChestMenuUtils.getEmptyClickHandler());
+
+        for (int slot : getOutputSlots())
+            preset.addMenuClickHandler(slot, new ChestMenu.AdvancedMenuClickHandler() {
+                @Override
+                public boolean onClick(InventoryClickEvent e, Player p, int slot, ItemStack cursor, ClickAction action) {
+                    return cursor.getType().isAir();
+                }
+
+                @Override
+                public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
+                    return false;
+                }
+            });
+
+        preset.drawBackground(UI_KEY, BORDER_KEY);
+    }
+
+    @Override
+    public int[] getInputSlots() {
+        return INPUT_SLOTS;
+    }
+
+    @Override
+    protected int[] getOutputSlots() {
+        return OUTPUT_SLOTS;
+    }
+}
diff --git a/src/main/java/me/profelements/dynatech/items/electric/PotionSprinkler.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/PotionSprinkler.java
similarity index 74%
rename from src/main/java/me/profelements/dynatech/items/electric/PotionSprinkler.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/PotionSprinkler.java
index 30e15ed..813f50e 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/PotionSprinkler.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/PotionSprinkler.java
@@ -1,152 +1,132 @@
-package me.profelements.dynatech.items.electric;
-
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
-import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
-import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
-import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
-import me.mrCookieSlime.Slimefun.api.item_transport.ItemTransportFlow;
-import me.profelements.dynatech.DynaTech;
-import me.profelements.dynatech.items.abstracts.AbstractElectricTicker;
-import org.bukkit.Bukkit;
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.block.Block;
-import org.bukkit.entity.Entity;
-import org.bukkit.entity.LivingEntity;
-import org.bukkit.entity.Player;
-import org.bukkit.event.block.BlockBreakEvent;
-import org.bukkit.event.block.BlockPlaceEvent;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.PotionMeta;
-import org.bukkit.potion.PotionData;
-import org.bukkit.potion.PotionEffect;
-import org.bukkit.potion.PotionEffectType;
-
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Set;
-import java.util.UUID;
-
-import javax.annotation.Nonnull;
-
-public class PotionSprinkler extends AbstractElectricTicker {
-
-    //TODO: Refactor this based arouhnd the same Ideas as AntigravityBubble
-
-    private final Map<Location, Set<UUID>> enabledEntities = new HashMap<>();
-    private int plyrsApplied = 0;
-
-    private static final int[] BACKGROUND_SLOTS = new int[] { 1, 2, 6, 7, 9, 10, 11, 15, 16, 17, 19, 20, 24, 25 };
-    private static final int[] INPUT_BORDER_SLOTS = new int[] { 3, 4, 5, 12, 14, 21, 22, 23 };
-    private static final int[] OUTPUT_BORDER_SLOTS = new int[] { 0, 8, 18, 26 };
-
-    public PotionSprinkler(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(itemGroup, item, recipeType, recipe);
-
-        new BlockMenuPreset(getId(), getItemName()) {
-            @Override
-            public void init() {
-                setupMenu(this); 
-            }
-
-
-			@Override
-            public boolean canOpen(Block b, Player p) {
-                return p.hasPermission("slimefun.inventory.bypass") || Slimefun.getProtectionManager().hasPermission(p, b.getLocation(), Interaction.INTERACT_BLOCK); 
-            }
-            
-            @Nonnull
-            @Override
-            public int[] getSlotsAccessedByItemTransport(ItemTransportFlow flow) {
-                if (flow == ItemTransportFlow.INSERT) {
-                    return new int[] {13};
-                } else {
-                    return null; 
-                }
-            }
-
-        };
-    }
-
-    @Override
-    protected void onPlace(BlockPlaceEvent e, Block blockPlaced) {
-        enabledEntities.put(blockPlaced.getLocation(), new HashSet<>()); 
-    }
-
-    @Override
-    protected void onBreak(BlockBreakEvent e, Location l) {
-        enabledEntities.remove(l);
-        
-    }
-
-
-
-    private void setupMenu(BlockMenuPreset preset) {
-    	for (int slot : BACKGROUND_SLOTS) {
-            preset.addItem(slot, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
-        }
-
-        for (int slot : INPUT_BORDER_SLOTS) {
-            preset.addItem(slot, ChestMenuUtils.getInputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
-
-        for (int slot : OUTPUT_BORDER_SLOTS) {
-            preset.addItem(slot, ChestMenuUtils.getOutputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        } 
-    }
-
-    @Override
-    public void tick(Block b, SlimefunItem sfItem) {
-        if (getCharge(b.getLocation()) < getEnergyConsumption()) {
-            return;
-        }
-
-        BlockMenu menu = BlockStorage.getInventory(b);
-        ItemStack item = menu.getItemInSlot(13);
-
-        if (item != null && item.getType() == Material.POTION && item.hasItemMeta() && item.getItemMeta() instanceof PotionMeta) {
-            PotionMeta potionMeta = (PotionMeta) item.getItemMeta();
-            PotionData pd = potionMeta.getBasePotionData();
-            for (Entity ent : b.getWorld().getNearbyEntities(b.getLocation(), 10, 10, 10, e -> (e instanceof LivingEntity))) {
-                LivingEntity p = (LivingEntity) ent;
-                if (!enabledEntities.get(b.getLocation()).contains(p.getUniqueId())) {
-                    int amplifier = pd.isUpgraded() ? 1 : 0;
-                    int duration = pd.isExtended() ? 9600 : 3600;
-                    PotionEffectType pet = pd.getType().getEffectType();
-
-                    if (pet != null) {
-                        PotionEffect pe = new PotionEffect(pet, duration, amplifier);
-                        applyPotionEffect(pe, p);
-                        enabledEntities.get(b.getLocation()).add(p.getUniqueId());
-                    }
-                    
-                }
-            }
-            if (plyrsApplied > 8) {
-                menu.consumeItem(13);
-                plyrsApplied = 0;
-            }
-        }
-
-        enabledEntities.getOrDefault(b.getLocation(), new HashSet<>()).removeIf(uuid -> (Bukkit.getEntity(uuid) != null 
-                    && Bukkit.getEntity(uuid) instanceof LivingEntity 
-                    && ((LivingEntity) Bukkit.getEntity(uuid)).getActivePotionEffects().isEmpty())); 
-    }
-
-    private void applyPotionEffect(PotionEffect pe, LivingEntity livingEntity) {
-        pe.apply(livingEntity);
-        plyrsApplied++;
-    }
-
-    @Override
-    protected boolean isSynchronized() {
-        return true;
-    }
-}
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric;
+
+import id.universenetwork.sfa_loader.addons.dynatech.items.abstracts.AbstractElectricTicker;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
+import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
+import me.mrCookieSlime.Slimefun.api.BlockStorage;
+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
+import me.mrCookieSlime.Slimefun.api.item_transport.ItemTransportFlow;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Player;
+import org.bukkit.event.block.BlockBreakEvent;
+import org.bukkit.event.block.BlockPlaceEvent;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.meta.PotionMeta;
+import org.bukkit.potion.PotionData;
+import org.bukkit.potion.PotionEffect;
+import org.bukkit.potion.PotionEffectType;
+
+import java.util.*;
+
+public class PotionSprinkler extends AbstractElectricTicker {
+    //TODO: Refactor this based arouhnd the same Ideas as AntigravityBubble
+
+    private final Map<Location, Set<UUID>> enabledEntities = new HashMap<>();
+    private int plyrsApplied = 0;
+
+    private static final int[] BACKGROUND_SLOTS = new int[]{1, 2, 6, 7, 9, 10, 11, 15, 16, 17, 19, 20, 24, 25};
+    private static final int[] INPUT_BORDER_SLOTS = new int[]{3, 4, 5, 12, 14, 21, 22, 23};
+    private static final int[] OUTPUT_BORDER_SLOTS = new int[]{0, 8, 18, 26};
+
+    public PotionSprinkler(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
+
+        new BlockMenuPreset(getId(), getItemName()) {
+            @Override
+            public void init() {
+                setupMenu(this);
+            }
+
+
+            @Override
+            public boolean canOpen(Block b, Player p) {
+                return p.hasPermission("slimefun.inventory.bypass") || Slimefun.getProtectionManager().hasPermission(p, b.getLocation(), Interaction.INTERACT_BLOCK);
+            }
+
+            @Override
+            public int[] getSlotsAccessedByItemTransport(ItemTransportFlow flow) {
+                if (flow == ItemTransportFlow.INSERT) return new int[]{13};
+                else return null;
+            }
+        };
+    }
+
+    @Override
+    protected void onPlace(BlockPlaceEvent e, Block blockPlaced) {
+        enabledEntities.put(blockPlaced.getLocation(), new HashSet<>());
+    }
+
+    @Override
+    protected void onBreak(BlockBreakEvent e, Location l) {
+        enabledEntities.remove(l);
+    }
+
+
+    private void setupMenu(BlockMenuPreset preset) {
+        for (int slot : BACKGROUND_SLOTS)
+            preset.addItem(slot, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
+
+        for (int slot : INPUT_BORDER_SLOTS)
+            preset.addItem(slot, ChestMenuUtils.getInputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
+
+        for (int slot : OUTPUT_BORDER_SLOTS)
+            preset.addItem(slot, ChestMenuUtils.getOutputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
+    }
+
+    @Override
+    public void tick(Block b, SlimefunItem sfItem) {
+        if (getCharge(b.getLocation()) < getEnergyConsumption()) return;
+
+        BlockMenu menu = BlockStorage.getInventory(b);
+        ItemStack item = menu.getItemInSlot(13);
+
+        if (item != null && item.getType() == Material.POTION && item.hasItemMeta() && item.getItemMeta() instanceof PotionMeta) {
+            PotionMeta potionMeta = (PotionMeta) item.getItemMeta();
+            PotionData pd = potionMeta.getBasePotionData();
+            for (Entity ent : b.getWorld().getNearbyEntities(b.getLocation(), 10, 10, 10, e -> (e instanceof LivingEntity))) {
+                LivingEntity p = (LivingEntity) ent;
+                if (!enabledEntities.get(b.getLocation()).contains(p.getUniqueId())) {
+                    int amplifier = pd.isUpgraded() ? 1 : 0;
+                    int duration = pd.isExtended() ? 9600 : 3600;
+                    PotionEffectType pet = pd.getType().getEffectType();
+
+                    if (pet != null) {
+                        PotionEffect pe = new PotionEffect(pet, duration, amplifier);
+                        applyPotionEffect(pe, p);
+                        enabledEntities.get(b.getLocation()).add(p.getUniqueId());
+                    }
+
+                }
+            }
+            if (plyrsApplied > 8) {
+                menu.consumeItem(13);
+                plyrsApplied = 0;
+            }
+        }
+
+        enabledEntities.getOrDefault(b.getLocation(), new HashSet<>()).removeIf(uuid -> (Bukkit.getEntity(uuid) != null
+            && Bukkit.getEntity(uuid) instanceof LivingEntity
+            && ((LivingEntity) Bukkit.getEntity(uuid)).getActivePotionEffects().isEmpty()));
+    }
+
+    private void applyPotionEffect(PotionEffect pe, LivingEntity livingEntity) {
+        pe.apply(livingEntity);
+        plyrsApplied++;
+    }
+
+    @Override
+    protected boolean isSynchronized() {
+        return true;
+    }
+}
diff --git a/src/main/java/me/profelements/dynatech/items/electric/SeedPlucker.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/SeedPlucker.java
similarity index 57%
rename from src/main/java/me/profelements/dynatech/items/electric/SeedPlucker.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/SeedPlucker.java
index 376d3e9..9c4705e 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/SeedPlucker.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/SeedPlucker.java
@@ -1,147 +1,141 @@
-package me.profelements.dynatech.items.electric;
-
-import io.github.thebusybiscuit.exoticgarden.items.ExoticGardenFruit;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
-import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
-import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
-import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
-import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;
-import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
-import me.profelements.dynatech.DynaTech;
-import me.profelements.dynatech.items.abstracts.AbstractElectricMachine;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import org.bukkit.Material;
-import org.bukkit.entity.Player;
-import org.bukkit.event.inventory.InventoryClickEvent;
-import org.bukkit.inventory.ItemStack;
-
-public class SeedPlucker extends AbstractElectricMachine {
-        
-    private static final int[] INPUT_SLOTS = new int[] { 19, 20 };
-    private static final int[] OUTPUT_SLOTS = new int[] { 24, 25 };
-
-    private static final int[] INPUT_BORDER_SLOTS = new int[] { 9, 10, 11, 12, 18, 21, 27, 28, 29, 30 };
-    private static final int[] OUTPUT_BORDER_SLOTS = new int[] {14, 15, 16, 17, 23, 26, 32, 33, 34, 35 };
-    private static final int[] BACKGROUND_SLOTS = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44 }; 
-
-    private static final ItemStack PROGRESS_ITEM = new ItemStack(Material.IRON_HOE);
-
-    private final ItemSetting<Boolean> exoticGardenIntegration = new ItemSetting<>(this, "exotic-garden-integration", true);
-
-    public SeedPlucker(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(itemGroup, item, recipeType, recipe);
-
-        addItemSetting(exoticGardenIntegration);
-    }
-
-    public void registerDefaultRecipes() {
-        recipes.add(new MachineRecipe(10, new ItemStack[] {new ItemStack(Material.CHORUS_FRUIT, 4)},  new ItemStack[] {new ItemStack(Material.CHORUS_FLOWER)}));
-        recipes.add(new MachineRecipe(10, new ItemStack[] {new ItemStack(Material.WHEAT)}, new ItemStack[] {new ItemStack(Material.WHEAT_SEEDS)}));
-        recipes.add(new MachineRecipe(10, new ItemStack[] {new ItemStack(Material.BEETROOT)}, new ItemStack[] {new ItemStack(Material.BEETROOT_SEEDS)}));
-        recipes.add(new MachineRecipe(10, new ItemStack[] {new ItemStack(Material.PUMPKIN)}, new ItemStack[] {new ItemStack(Material.PUMPKIN_SEEDS)}));
-        recipes.add(new MachineRecipe(10, new ItemStack[] {new ItemStack(Material.MELON_SLICE)}, new ItemStack[] {new ItemStack(Material.MELON_SEEDS)}));
-        
-        if (DynaTech.isExoticGardenInstalled()) {
-            for (SlimefunItem item : Slimefun.getRegistry().getEnabledSlimefunItems()) {
-                if (item instanceof ExoticGardenFruit) {
-                    SlimefunItem out = SlimefunItem.getById(item.getId().concat("_BUSH")); 
-                    if (out != null) {
-                        recipes.add(new MachineRecipe(10, new ItemStack[] { item.getItem() }, new ItemStack[] { out.getItem() }));
-                    }
-                    
-                    out = SlimefunItem.getById(item.getId().concat("_PLANT"));
-                    if (out != null) {
-                        recipes.add(new MachineRecipe(10, new ItemStack[] { item.getItem() }, new ItemStack[] { out.getItem() }));
-                    }     
-
-                    out = SlimefunItem.getById(item.getId().concat("_SAPLING"));
-                    if (out != null) {
-                        recipes.add(new MachineRecipe(10, new ItemStack[] { item.getItem() }, new ItemStack[] { out.getItem() }));
-                    }
-                }
-            }
-        }
-    }
-    
-    @Override
-	protected ItemStack getProgressBar() {
-		return PROGRESS_ITEM;
-	}
-
-    @Override
-    public void postRegister() {
-        super.postRegister();
-        registerDefaultRecipes();
-    }
-
-	@Override
-	protected void setupMenu(BlockMenuPreset preset) {
-		for (int slot : BACKGROUND_SLOTS) {
-            preset.addItem(slot, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
-        }
-
-        for (int slot : INPUT_BORDER_SLOTS) {
-            preset.addItem(slot, ChestMenuUtils.getInputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
-
-        for (int slot : OUTPUT_BORDER_SLOTS) {
-            preset.addItem(slot, ChestMenuUtils.getOutputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
-
-        preset.addItem(getProgressSlot(), new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE, " "), ChestMenuUtils.getEmptyClickHandler());
-        
-        for (int slot : getOutputSlots()) {
-            preset.addMenuClickHandler(slot,new ChestMenu.AdvancedMenuClickHandler() {
-                @Override
-                public boolean onClick(InventoryClickEvent e, Player p, int slot, ItemStack cursor, ClickAction action) {
-                    return cursor.getType().isAir();
-                }
-
-                @Override
-                public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
-                    return false;
-                }
-            });
-        }
-	}
-
-	@Override
-	protected int[] getInputSlots() {
-		return INPUT_SLOTS;
-	}
-
-	@Override
-	protected int[] getOutputSlots() {
-		return OUTPUT_SLOTS;
-	} 
-     
-	@Override
-	public List<ItemStack> getDisplayRecipes() {
-		List<ItemStack> display = new ArrayList<>(); 
-        
-        
-
-        for (MachineRecipe recipe : recipes) {
-                
-            if (recipe.getInput().length != 1) {
-                break;
-            }
-            
-            display.add(recipe.getInput()[0]);
-            display.add(recipe.getOutput()[0]); 
-        }
-        
-        return display;
-	}
-
-           
-}
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric;
+
+import id.universenetwork.sfa_loader.addons.dynatech.DynaTech;
+import id.universenetwork.sfa_loader.addons.dynatech.items.abstracts.AbstractElectricMachine;
+import io.github.thebusybiscuit.exoticgarden.items.ExoticGardenFruit;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
+import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
+import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;
+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
+import org.bukkit.Material;
+import org.bukkit.entity.Player;
+import org.bukkit.event.inventory.InventoryClickEvent;
+import org.bukkit.inventory.ItemStack;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class SeedPlucker extends AbstractElectricMachine {
+    private static final int[] INPUT_SLOTS = new int[]{19, 20};
+    private static final int[] OUTPUT_SLOTS = new int[]{24, 25};
+
+    private static final int[] INPUT_BORDER_SLOTS = new int[]{9, 10, 11, 12, 18, 21, 27, 28, 29, 30};
+    private static final int[] OUTPUT_BORDER_SLOTS = new int[]{14, 15, 16, 17, 23, 26, 32, 33, 34, 35};
+    private static final int[] BACKGROUND_SLOTS = new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44};
+
+    private static final ItemStack PROGRESS_ITEM = new ItemStack(Material.IRON_HOE);
+
+    public SeedPlucker(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
+
+        addItemSetting(new ItemSetting<>(this, "exotic-garden-integration", true));
+    }
+
+    public void registerDefaultRecipes() {
+        recipes.add(new MachineRecipe(10, new ItemStack[]{new ItemStack(Material.CHORUS_FRUIT, 4)}, new ItemStack[]{new ItemStack(Material.CHORUS_FLOWER)}));
+        recipes.add(new MachineRecipe(10, new ItemStack[]{new ItemStack(Material.WHEAT)}, new ItemStack[]{new ItemStack(Material.WHEAT_SEEDS)}));
+        recipes.add(new MachineRecipe(10, new ItemStack[]{new ItemStack(Material.BEETROOT)}, new ItemStack[]{new ItemStack(Material.BEETROOT_SEEDS)}));
+        recipes.add(new MachineRecipe(10, new ItemStack[]{new ItemStack(Material.PUMPKIN)}, new ItemStack[]{new ItemStack(Material.PUMPKIN_SEEDS)}));
+        recipes.add(new MachineRecipe(10, new ItemStack[]{new ItemStack(Material.MELON_SLICE)}, new ItemStack[]{new ItemStack(Material.MELON_SEEDS)}));
+
+        if (DynaTech.isExoticGardenInstalled()) {
+            for (SlimefunItem item : Slimefun.getRegistry().getEnabledSlimefunItems()) {
+                if (item instanceof ExoticGardenFruit) {
+                    SlimefunItem out = SlimefunItem.getById(item.getId().concat("_BUSH"));
+                    if (out != null) {
+                        recipes.add(new MachineRecipe(10, new ItemStack[]{item.getItem()}, new ItemStack[]{out.getItem()}));
+                    }
+
+                    out = SlimefunItem.getById(item.getId().concat("_PLANT"));
+                    if (out != null) {
+                        recipes.add(new MachineRecipe(10, new ItemStack[]{item.getItem()}, new ItemStack[]{out.getItem()}));
+                    }
+
+                    out = SlimefunItem.getById(item.getId().concat("_SAPLING"));
+                    if (out != null) {
+                        recipes.add(new MachineRecipe(10, new ItemStack[]{item.getItem()}, new ItemStack[]{out.getItem()}));
+                    }
+                }
+            }
+        }
+    }
+
+    @Override
+    protected ItemStack getProgressBar() {
+        return PROGRESS_ITEM;
+    }
+
+    @Override
+    public void postRegister() {
+        super.postRegister();
+        registerDefaultRecipes();
+    }
+
+    @Override
+    protected void setupMenu(BlockMenuPreset preset) {
+        for (int slot : BACKGROUND_SLOTS) {
+            preset.addItem(slot, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
+        }
+
+        for (int slot : INPUT_BORDER_SLOTS) {
+            preset.addItem(slot, ChestMenuUtils.getInputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
+        }
+
+        for (int slot : OUTPUT_BORDER_SLOTS) {
+            preset.addItem(slot, ChestMenuUtils.getOutputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
+        }
+
+        preset.addItem(getProgressSlot(), new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE, " "), ChestMenuUtils.getEmptyClickHandler());
+
+        for (int slot : getOutputSlots())
+            preset.addMenuClickHandler(slot, new ChestMenu.AdvancedMenuClickHandler() {
+                @Override
+                public boolean onClick(InventoryClickEvent e, Player p, int slot, ItemStack cursor, ClickAction action) {
+                    return cursor.getType().isAir();
+                }
+
+                @Override
+                public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
+                    return false;
+                }
+            });
+    }
+
+    @Override
+    protected int[] getInputSlots() {
+        return INPUT_SLOTS;
+    }
+
+    @Override
+    protected int[] getOutputSlots() {
+        return OUTPUT_SLOTS;
+    }
+
+    @Override
+    public List<ItemStack> getDisplayRecipes() {
+        List<ItemStack> display = new ArrayList<>();
+
+
+        for (MachineRecipe recipe : recipes) {
+
+            if (recipe.getInput().length != 1) {
+                break;
+            }
+
+            display.add(recipe.getInput()[0]);
+            display.add(recipe.getOutput()[0]);
+        }
+
+        return display;
+    }
+
+
+}
diff --git a/src/main/java/me/profelements/dynatech/items/electric/WeatherController.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/WeatherController.java
similarity index 76%
rename from src/main/java/me/profelements/dynatech/items/electric/WeatherController.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/WeatherController.java
index 60307a0..985a77a 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/WeatherController.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/WeatherController.java
@@ -1,5 +1,7 @@
-package me.profelements.dynatech.items.electric;
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric;
 
+import id.universenetwork.sfa_loader.addons.dynatech.DynaTech;
+import id.universenetwork.sfa_loader.addons.dynatech.items.abstracts.AbstractElectricTicker;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -9,14 +11,10 @@ import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
-import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
 import me.mrCookieSlime.Slimefun.api.item_transport.ItemTransportFlow;
-import me.profelements.dynatech.DynaTech;
-import me.profelements.dynatech.items.abstracts.AbstractElectricTicker;
-
 import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
@@ -29,77 +27,60 @@ import java.util.ArrayList;
 import java.util.List;
 
 public class WeatherController extends AbstractElectricTicker implements RecipeDisplayItem {
-
-    private static final int[] BACKGROUND_SLOTS = new int[] {0,1,2,3,5,6,7,8};
-    private static final int[] INPUT_BORDER_SLOTS = new int[] {};
-    private static final int[] OUTPUT_BORDER_SLOTS = new int[] {};
+    private static final int[] BACKGROUND_SLOTS = new int[]{0, 1, 2, 3, 5, 6, 7, 8};
+    private static final int[] INPUT_BORDER_SLOTS = new int[]{};
+    private static final int[] OUTPUT_BORDER_SLOTS = new int[]{};
 
     public WeatherController(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe);
-    
+
         new BlockMenuPreset(getId(), getItemName()) {
             @Override
             public void init() {
-                setupMenu(this); 
+                setupMenu(this);
             }
 
             @Override
             public boolean canOpen(Block b, Player p) {
-                return p.hasPermission("slimefun.inventory.bypass") || Slimefun.getProtectionManager().hasPermission(p, b.getLocation(), Interaction.INTERACT_BLOCK); 
+                return p.hasPermission("slimefun.inventory.bypass") || Slimefun.getProtectionManager().hasPermission(p, b.getLocation(), Interaction.INTERACT_BLOCK);
             }
-            
-            @Nonnull
+
             @Override
             public int[] getSlotsAccessedByItemTransport(ItemTransportFlow flow) {
-                if (flow == ItemTransportFlow.INSERT) {
-                    return null;
-                } else {
-                    return null; 
-                }
+                return null;
             }
-
         };
 
     }
 
-	protected void setupMenu(BlockMenuPreset preset) {
-		for (int slot : BACKGROUND_SLOTS) {
+    protected void setupMenu(BlockMenuPreset preset) {
+        for (int slot : BACKGROUND_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
-        for (int slot : INPUT_BORDER_SLOTS) {
+        for (int slot : INPUT_BORDER_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getInputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
-        for (int slot : OUTPUT_BORDER_SLOTS) {
+        for (int slot : OUTPUT_BORDER_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getOutputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        } 
-
     }
 
     public void tick(Block b, SlimefunItem sfItem) {
-        if (getCharge(b.getLocation()) < getEnergyConsumption()) {
-            return;
-        }
+        if (getCharge(b.getLocation()) < getEnergyConsumption()) return;
 
         BlockMenu menu = BlockStorage.getInventory(b);
         ItemStack item = menu.getItemInSlot(4);
 
         if (item != null && (item.getType() == Material.SUNFLOWER || item.getType() == Material.LILAC || item.getType() == Material.CREEPER_HEAD)) {
             if (item.getType() == Material.SUNFLOWER) {
-                if (b.getWorld().isClearWeather()) {
-                    return;
-                } 
+                if (b.getWorld().isClearWeather()) return;
                 DynaTech.runSync(() -> {
                     b.getWorld().setClearWeatherDuration(1200);
                     removeCharge(b.getLocation(), getEnergyConsumption());
                 });
             }
-            
+
             if (item.getType() == Material.LILAC) {
-                if (b.getWorld().hasStorm()) {
-                    return;
-                }
+                if (b.getWorld().hasStorm()) return;
                 DynaTech.runSync(() -> {
                     b.getWorld().setStorm(true);
                     b.getWorld().setWeatherDuration(1200);
@@ -108,10 +89,8 @@ public class WeatherController extends AbstractElectricTicker implements RecipeD
             }
 
             if (item.getType() == Material.CREEPER_HEAD) {
-                if (b.getWorld().isThundering()) {
-                    return;
-                }
-                DynaTech.runSync(()-> {
+                if (b.getWorld().isThundering()) return;
+                DynaTech.runSync(() -> {
                     b.getWorld().setThundering(true);
                     b.getWorld().setThunderDuration(1200);
                     removeCharge(b.getLocation(), getEnergyConsumption());
diff --git a/src/main/java/me/profelements/dynatech/items/electric/WirelessCharger.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/WirelessCharger.java
similarity index 57%
rename from src/main/java/me/profelements/dynatech/items/electric/WirelessCharger.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/WirelessCharger.java
index 942da87..36c4f53 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/WirelessCharger.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/WirelessCharger.java
@@ -1,18 +1,16 @@
-package me.profelements.dynatech.items.electric;
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric;
 
+import id.universenetwork.sfa_loader.addons.dynatech.items.abstracts.AbstractElectricTicker;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.Rechargeable;
-import me.profelements.dynatech.items.abstracts.AbstractElectricTicker;
-import org.bukkit.Material;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 
 public class WirelessCharger extends AbstractElectricTicker {
-
     private final double radius;
 
     public WirelessCharger(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, double radius) {
@@ -27,30 +25,26 @@ public class WirelessCharger extends AbstractElectricTicker {
 
     @Override
     protected void tick(Block b, SlimefunItem slimefunItem) {
-        if (getCharge(b.getLocation()) < getEnergyConsumption()) {
-            return;
-        }
+        if (getCharge(b.getLocation()) < getEnergyConsumption()) return;
 
         for (Player p : b.getWorld().getPlayers()) {
             double distance = p.getLocation().distance(b.getLocation());
 
-            if (distance <= radius) {
-                for (ItemStack item : p.getInventory()) {
-                    SlimefunItem sfItem = SlimefunItem.getByItem(item);
+            if (distance <= radius) for (ItemStack item : p.getInventory()) {
+                SlimefunItem sfItem = SlimefunItem.getByItem(item);
+
+                if (sfItem instanceof Rechargeable) {
+                    Rechargeable rcItem = (Rechargeable) sfItem;
 
-                    if (sfItem instanceof Rechargeable) {
-                        Rechargeable rcItem = (Rechargeable) sfItem;
-                        
-                        if (rcItem.getItemCharge(item) != rcItem.getMaxItemCharge(item)) {
-                            
-                            removeCharge(b.getLocation(), getEnergyConsumption());
-                            rcItem.addItemCharge(item, getEnergyConsumption());
-                            p.updateInventory();
+                    if (rcItem.getItemCharge(item) != rcItem.getMaxItemCharge(item)) {
+
+                        removeCharge(b.getLocation(), getEnergyConsumption());
+                        rcItem.addItemCharge(item, getEnergyConsumption());
+                        p.updateInventory();
 
-                        }
                     }
                 }
             }
         }
-    }    
+    }
 }
diff --git a/src/main/java/me/profelements/dynatech/items/electric/generators/ChippingGenerator.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/generators/ChippingGenerator.java
similarity index 50%
rename from src/main/java/me/profelements/dynatech/items/electric/generators/ChippingGenerator.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/generators/ChippingGenerator.java
index 9c85877..13b50e6 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/generators/ChippingGenerator.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/generators/ChippingGenerator.java
@@ -1,160 +1,114 @@
-package me.profelements.dynatech.items.electric.generators;
-
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
-import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
-import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
-import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
-import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
-import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineFuel;
-import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
-import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
-import me.profelements.dynatech.items.abstracts.AbstractGenerator;
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.entity.Player;
-import org.bukkit.event.inventory.InventoryClickEvent;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.Damageable;
-import org.bukkit.inventory.meta.ItemMeta;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import javax.annotation.Nonnull;
-
-public class ChippingGenerator extends AbstractGenerator {
-
-    private final int powerPerDurability = 8;
-    
-    private static final int[] INPUT_SLOTS = new int[] { 19, 20 };
-    private static final int[] OUTPUT_SLOTS = new int[] { 24, 25 };
-
-    private static final int[] INPUT_BORDER_SLOTS = new int[] { 9, 10, 11, 12, 18, 21, 27, 28, 29, 30 };
-    private static final int[] OUTPUT_BORDER_SLOTS = new int[] {14, 15, 16, 17, 23, 26, 32, 33, 34, 35 };
-    private static final int[] BACKGROUND_SLOTS = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44 }; 
-
-    private final ItemStack PROGRESS_ITEM = new ItemStack(Material.NETHERITE_AXE);
-
-    public ChippingGenerator(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(itemGroup, item, recipeType, recipe);
-    }
-
-    /*
-    @Override
-    public int getGeneratedOutput(Location l, Config data) {
-        BlockMenu inv = BlockStorage.getInventory(l.getBlock());
-        int julesAmount;
-
-        for (int slot : getInputSlots()) {
-            ItemStack item = inv.getItemInSlot(slot);
-            // Do as many lightweight checks as possible before we do the intensive stuff
-            if (item != null && !item.getType().isAir() && item.getType().isItem() && item.hasItemMeta()) {
-                // `getItemMeta` does multiple clones! Even doing this once is slow, nevermind multiple times!
-                ItemMeta meta = item.getItemMeta();
-                if (meta instanceof Damageable && !meta.isUnbreakable()) {
-                    Damageable im = (Damageable) meta;
-                    if (!im.hasDamage()) {
-                        julesAmount = item.getType().getMaxDurability() * powerPerDurability;
-                        if (julesAmount != 0) {
-                            inv.consumeItem(slot);
-                            return julesAmount;
-                        }
-                    }
-
-                    julesAmount = (item.getType().getMaxDurability() - im.getDamage()) * 2;
-                    if (julesAmount != 0) {
-                        inv.consumeItem(slot);
-                        return julesAmount;
-                    }
-                }
-            }
-        }
-        return 0;
-    }
-    */
-
-    @Override
-    public MachineFuel findNextFuel(BlockMenu inv) {
-            
-        for (int slot : getInputSlots()) {
-            ItemStack item =  inv.getItemInSlot(slot); 
-            if (item != null && !item.getType().isAir() && item.hasItemMeta()) {
-                ItemMeta meta = item.getItemMeta(); 
-                if (meta instanceof Damageable && !meta.isUnbreakable()) {
-                    Damageable damage = (Damageable) meta; 
-                    if (!damage.hasDamage()) {
-                        int durability = item.getType().getMaxDurability(); 
-                        inv.consumeItem(slot); 
-                        return new MachineFuel(durability, item);  
-                    } else {
-                        int durability = item.getType().getMaxDurability() - damage.getDamage();
-                        inv.consumeItem(slot);
-                        return new MachineFuel(durability, item);  
-
-                    }
-                }
-            }
-        }
-
-        return null;
-    }
-
-	@Override
-	public List<ItemStack> getDisplayRecipes() {
-		return new ArrayList<>();
-	}
-
-    
-    @Override
-	protected void setupMenu(BlockMenuPreset preset) {
-		for (int slot : BACKGROUND_SLOTS) {
-            preset.addItem(slot, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
-        }
-
-        for (int slot : INPUT_BORDER_SLOTS) {
-            preset.addItem(slot, ChestMenuUtils.getInputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
-
-        for (int slot : OUTPUT_BORDER_SLOTS) {
-            preset.addItem(slot, ChestMenuUtils.getOutputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
-
-        preset.addItem(22, new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE, " "), ChestMenuUtils.getEmptyClickHandler());
-        
-        for (int slot : getOutputSlots()) {
-            preset.addMenuClickHandler(slot,new ChestMenu.AdvancedMenuClickHandler() {
-                @Override
-                public boolean onClick(InventoryClickEvent e, Player p, int slot, ItemStack cursor, ClickAction action) {
-                    return cursor.getType().isAir();
-                }
-
-                @Override
-                public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
-                    return false;
-                }
-            });
-        }	
-	}
-
-
-	@Override
-	protected ItemStack getProgressBar() {
-		return PROGRESS_ITEM;
-	}
-
-	@Override
-	protected int[] getInputSlots() {
-		return INPUT_SLOTS;
-	}
-
-
-	@Override
-	protected int[] getOutputSlots() {
-		return OUTPUT_SLOTS;
-	}
-
-}
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric.generators;
+
+import id.universenetwork.sfa_loader.addons.dynatech.items.abstracts.AbstractGenerator;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
+import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
+import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineFuel;
+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
+import org.bukkit.Material;
+import org.bukkit.entity.Player;
+import org.bukkit.event.inventory.InventoryClickEvent;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.meta.Damageable;
+import org.bukkit.inventory.meta.ItemMeta;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class ChippingGenerator extends AbstractGenerator {
+    private final int powerPerDurability = 8;
+
+    private static final int[] INPUT_SLOTS = new int[]{19, 20};
+    private static final int[] OUTPUT_SLOTS = new int[]{24, 25};
+
+    private static final int[] INPUT_BORDER_SLOTS = new int[]{9, 10, 11, 12, 18, 21, 27, 28, 29, 30};
+    private static final int[] OUTPUT_BORDER_SLOTS = new int[]{14, 15, 16, 17, 23, 26, 32, 33, 34, 35};
+    private static final int[] BACKGROUND_SLOTS = new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44};
+
+    private final ItemStack PROGRESS_ITEM = new ItemStack(Material.NETHERITE_AXE);
+
+    public ChippingGenerator(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
+    }
+
+    @Override
+    public MachineFuel findNextFuel(BlockMenu inv) {
+
+        for (int slot : getInputSlots()) {
+            ItemStack item = inv.getItemInSlot(slot);
+            if (item != null && !item.getType().isAir() && item.hasItemMeta()) {
+                ItemMeta meta = item.getItemMeta();
+                if (meta instanceof Damageable && !meta.isUnbreakable()) {
+                    Damageable damage = (Damageable) meta;
+                    if (!damage.hasDamage()) {
+                        int durability = item.getType().getMaxDurability();
+                        inv.consumeItem(slot);
+                        return new MachineFuel(durability, item);
+                    } else {
+                        int durability = item.getType().getMaxDurability() - damage.getDamage();
+                        inv.consumeItem(slot);
+                        return new MachineFuel(durability, item);
+                    }
+                }
+            }
+        }
+
+        return null;
+    }
+
+    @Override
+    public List<ItemStack> getDisplayRecipes() {
+        return new ArrayList<>();
+    }
+
+
+    @Override
+    protected void setupMenu(BlockMenuPreset preset) {
+        for (int slot : BACKGROUND_SLOTS)
+            preset.addItem(slot, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
+
+        for (int slot : INPUT_BORDER_SLOTS)
+            preset.addItem(slot, ChestMenuUtils.getInputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
+
+        for (int slot : OUTPUT_BORDER_SLOTS)
+            preset.addItem(slot, ChestMenuUtils.getOutputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
+
+        preset.addItem(22, new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE, " "), ChestMenuUtils.getEmptyClickHandler());
+
+        for (int slot : getOutputSlots())
+            preset.addMenuClickHandler(slot, new ChestMenu.AdvancedMenuClickHandler() {
+                @Override
+                public boolean onClick(InventoryClickEvent e, Player p, int slot, ItemStack cursor, ClickAction action) {
+                    return cursor.getType().isAir();
+                }
+
+                @Override
+                public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
+                    return false;
+                }
+            });
+    }
+
+
+    @Override
+    protected ItemStack getProgressBar() {
+        return PROGRESS_ITEM;
+    }
+
+    @Override
+    protected int[] getInputSlots() {
+        return INPUT_SLOTS;
+    }
+
+
+    @Override
+    protected int[] getOutputSlots() {
+        return OUTPUT_SLOTS;
+    }
+}
diff --git a/src/main/java/me/profelements/dynatech/items/electric/generators/CulinaryGenerator.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/generators/CulinaryGenerator.java
similarity index 79%
rename from src/main/java/me/profelements/dynatech/items/electric/generators/CulinaryGenerator.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/generators/CulinaryGenerator.java
index 0b9b162..ca09284 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/generators/CulinaryGenerator.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/generators/CulinaryGenerator.java
@@ -1,176 +1,167 @@
-package me.profelements.dynatech.items.electric.generators;
-
-import io.github.thebusybiscuit.exoticgarden.items.CustomFood;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.common.ChatColors;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
-import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
-import io.github.thebusybiscuit.slimefun4.utils.NumberUtils;
-import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
-import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
-import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineFuel;
-import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
-import me.profelements.dynatech.DynaTech;
-import me.profelements.dynatech.items.abstracts.AbstractGenerator;
-import org.bukkit.Material;
-import org.bukkit.entity.Player;
-import org.bukkit.event.inventory.InventoryClickEvent;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.ItemMeta;
-
-import javax.annotation.Nonnull;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class CulinaryGenerator extends AbstractGenerator {
-   
-    private static final int[] INPUT_SLOTS = new int[] { 19, 20 };
-    private static final int[] OUTPUT_SLOTS = new int[] { 24, 25 };
-
-    private static final int[] INPUT_BORDER_SLOTS = new int[] { 9, 10, 11, 12, 18, 21, 27, 28, 29, 30 };
-    private static final int[] OUTPUT_BORDER_SLOTS = new int[] {14, 15, 16, 17, 23, 26, 32, 33, 34, 35 };
-    private static final int[] BACKGROUND_SLOTS = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44 }; 
-
-    private static final ItemStack PROGRESS_ITEM = new ItemStack(Material.IRON_SHOVEL);
-
-    private ItemSetting<Boolean> exoticGardenIntegration = new ItemSetting<>(this, "exotic-garden-integration", true);
-
-    public CulinaryGenerator(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(itemGroup, item, recipeType, recipe);
-
-        addItemSetting(exoticGardenIntegration);
-    }
-
-    @Override
-    public void postRegister() {
-        registerDefaultFuelTypes();
-    } 
-
-    public void registerDefaultFuelTypes() {
-        //1 Food Levels
-        fuels.add(new MachineFuel(2, new ItemStack(Material.BEETROOT)));
-        fuels.add(new MachineFuel(2, new ItemStack(Material.DRIED_KELP)));
-        fuels.add(new MachineFuel(2, new ItemStack(Material.POTATO)));
-        fuels.add(new MachineFuel(2, new ItemStack(Material.TROPICAL_FISH)));
-
-        //2 Food Levels
-        fuels.add(new MachineFuel(4, new ItemStack(Material.COOKIE)));
-        fuels.add(new MachineFuel(4, new ItemStack(Material.MELON_SLICE)));
-        fuels.add(new MachineFuel(4, new ItemStack(Material.CHICKEN)));
-        fuels.add(new MachineFuel(4, new ItemStack(Material.COD)));
-        fuels.add(new MachineFuel(4, new ItemStack(Material.MUTTON)));
-        fuels.add(new MachineFuel(4, new ItemStack(Material.SWEET_BERRIES)));
-        fuels.add(new MachineFuel(4, new ItemStack(Material.SALMON)));
-
-        //3 Food Levels
-        fuels.add(new MachineFuel(6, new ItemStack(Material.CARROT)));
-        fuels.add(new MachineFuel(6, new ItemStack(Material.BEEF)));
-        fuels.add(new MachineFuel(6, new ItemStack(Material.PORKCHOP)));
-        fuels.add(new MachineFuel(6, new ItemStack(Material.RABBIT)));
-
-        //4 Food Levels
-        fuels.add(new MachineFuel(10, new ItemStack(Material.APPLE)));
-        fuels.add(new MachineFuel(10, new ItemStack(Material.GOLDEN_APPLE)));
-        fuels.add(new MachineFuel(10, new ItemStack(Material.ENCHANTED_GOLDEN_APPLE)));
-        fuels.add(new MachineFuel(10, new ItemStack(Material.CHORUS_FRUIT)));
-
-        //5 Food Levels
-        fuels.add(new MachineFuel(18, new ItemStack(Material.BAKED_POTATO)));
-        fuels.add(new MachineFuel(18, new ItemStack(Material.COOKED_RABBIT)));
-        fuels.add(new MachineFuel(18, new ItemStack(Material.COOKED_COD)));
-        fuels.add(new MachineFuel(18, new ItemStack(Material.BREAD)));
-
-        //6 Food Levels
-        fuels.add(new MachineFuel(24, new ItemStack(Material.COOKED_MUTTON)));
-        fuels.add(new MachineFuel(24, new ItemStack(Material.COOKED_CHICKEN)));
-        fuels.add(new MachineFuel(24, new ItemStack(Material.COOKED_SALMON)));
-        fuels.add(new MachineFuel(24, new ItemStack(Material.GOLDEN_CARROT)));
-
-        //8 Food Levels
-        fuels.add(new MachineFuel(36, new ItemStack(Material.COOKED_PORKCHOP)));
-        fuels.add(new MachineFuel(36, new ItemStack(Material.COOKED_BEEF)));
-        fuels.add(new MachineFuel(36, new ItemStack(Material.PUMPKIN_PIE)));
-        
-        if(DynaTech.isExoticGardenInstalled() && exoticGardenIntegration.getValue()) {
-            for (SlimefunItem sfItem : Slimefun.getRegistry().getEnabledSlimefunItems()) {
-                if (sfItem instanceof CustomFood) {
-                    CustomFood cfItem = (CustomFood) sfItem;
-                    MachineFuel fuel = new MachineFuel(cfItem.getFoodValue() * 4, sfItem.getItem());
-                    fuels.add(fuel);
-                }
-            }
-        }
-
-    }
-    
-    @Nonnull
-    @Override
-    public ItemStack getProgressBar() {
-        return PROGRESS_ITEM;
-    }	
-
-	@Override
-	protected void setupMenu(BlockMenuPreset preset) {
-		for (int slot : BACKGROUND_SLOTS) {
-            preset.addItem(slot, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
-        }
-
-        for (int slot : INPUT_BORDER_SLOTS) {
-            preset.addItem(slot, ChestMenuUtils.getInputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
-
-        for (int slot : OUTPUT_BORDER_SLOTS) {
-            preset.addItem(slot, ChestMenuUtils.getOutputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
-
-        preset.addItem(22, new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE, " "), ChestMenuUtils.getEmptyClickHandler());
-        for (int slot : getOutputSlots()) {
-            preset.addMenuClickHandler(slot,new ChestMenu.AdvancedMenuClickHandler() {
-                @Override
-                public boolean onClick(InventoryClickEvent e, Player p, int slot, ItemStack cursor, ClickAction action) {
-                    return cursor.getType().isAir();
-                }
-
-                @Override
-                public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
-                    return false;
-                }
-            });
-        }	
-	}
-
-	@Override
-	protected int[] getInputSlots() {
-    	return INPUT_SLOTS;
-	}
-
-	@Override
-	protected int[] getOutputSlots() {
-	    return OUTPUT_SLOTS;
-	}
-
-    @Override
-    public List<ItemStack> getDisplayRecipes() {
-        List<ItemStack> list = new ArrayList<>();
-
-        for (MachineFuel fuel : fuels) {
-            ItemStack item = fuel.getInput().clone();
-            ItemMeta im = item.getItemMeta();
-            List<String> lore = new ArrayList<>();
-            lore.add(ChatColors.color("&8\u21E8 &7Lasts " + NumberUtils.getTimeLeft(fuel.getTicks() / 2)));
-            lore.add(ChatColors.color("&8\u21E8 &e\u26A1 &7" + getEnergyProduction() * 2) + " J/s");
-            lore.add(ChatColors.color("&8\u21E8 &e\u26A1 &7" + NumberUtils.getCompactDouble((double) fuel.getTicks() * getEnergyProduction()) + " J in total"));
-            im.setLore(lore);
-            item.setItemMeta(im);
-            list.add(item);
-        }
-
-        return list;
-    }
-}
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric.generators;
+
+import id.universenetwork.sfa_loader.addons.dynatech.DynaTech;
+import id.universenetwork.sfa_loader.addons.dynatech.items.abstracts.AbstractGenerator;
+import io.github.thebusybiscuit.exoticgarden.items.CustomFood;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.common.ChatColors;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
+import io.github.thebusybiscuit.slimefun4.utils.NumberUtils;
+import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
+import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineFuel;
+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
+import org.bukkit.Material;
+import org.bukkit.entity.Player;
+import org.bukkit.event.inventory.InventoryClickEvent;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.meta.ItemMeta;
+
+import javax.annotation.Nonnull;
+import java.util.ArrayList;
+import java.util.List;
+
+public class CulinaryGenerator extends AbstractGenerator {
+    private static final int[] INPUT_SLOTS = new int[]{19, 20};
+    private static final int[] OUTPUT_SLOTS = new int[]{24, 25};
+
+    private static final int[] INPUT_BORDER_SLOTS = new int[]{9, 10, 11, 12, 18, 21, 27, 28, 29, 30};
+    private static final int[] OUTPUT_BORDER_SLOTS = new int[]{14, 15, 16, 17, 23, 26, 32, 33, 34, 35};
+    private static final int[] BACKGROUND_SLOTS = new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44};
+
+    private static final ItemStack PROGRESS_ITEM = new ItemStack(Material.IRON_SHOVEL);
+
+    private final ItemSetting<Boolean> exoticGardenIntegration = new ItemSetting<>(this, "exotic-garden-integration", true);
+
+    public CulinaryGenerator(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
+
+        addItemSetting(exoticGardenIntegration);
+    }
+
+    @Override
+    public void postRegister() {
+        registerDefaultFuelTypes();
+    }
+
+    public void registerDefaultFuelTypes() {
+        //1 Food Levels
+        fuels.add(new MachineFuel(2, new ItemStack(Material.BEETROOT)));
+        fuels.add(new MachineFuel(2, new ItemStack(Material.DRIED_KELP)));
+        fuels.add(new MachineFuel(2, new ItemStack(Material.POTATO)));
+        fuels.add(new MachineFuel(2, new ItemStack(Material.TROPICAL_FISH)));
+
+        //2 Food Levels
+        fuels.add(new MachineFuel(4, new ItemStack(Material.COOKIE)));
+        fuels.add(new MachineFuel(4, new ItemStack(Material.MELON_SLICE)));
+        fuels.add(new MachineFuel(4, new ItemStack(Material.CHICKEN)));
+        fuels.add(new MachineFuel(4, new ItemStack(Material.COD)));
+        fuels.add(new MachineFuel(4, new ItemStack(Material.MUTTON)));
+        fuels.add(new MachineFuel(4, new ItemStack(Material.SWEET_BERRIES)));
+        fuels.add(new MachineFuel(4, new ItemStack(Material.SALMON)));
+
+        //3 Food Levels
+        fuels.add(new MachineFuel(6, new ItemStack(Material.CARROT)));
+        fuels.add(new MachineFuel(6, new ItemStack(Material.BEEF)));
+        fuels.add(new MachineFuel(6, new ItemStack(Material.PORKCHOP)));
+        fuels.add(new MachineFuel(6, new ItemStack(Material.RABBIT)));
+
+        //4 Food Levels
+        fuels.add(new MachineFuel(10, new ItemStack(Material.APPLE)));
+        fuels.add(new MachineFuel(10, new ItemStack(Material.GOLDEN_APPLE)));
+        fuels.add(new MachineFuel(10, new ItemStack(Material.ENCHANTED_GOLDEN_APPLE)));
+        fuels.add(new MachineFuel(10, new ItemStack(Material.CHORUS_FRUIT)));
+
+        //5 Food Levels
+        fuels.add(new MachineFuel(18, new ItemStack(Material.BAKED_POTATO)));
+        fuels.add(new MachineFuel(18, new ItemStack(Material.COOKED_RABBIT)));
+        fuels.add(new MachineFuel(18, new ItemStack(Material.COOKED_COD)));
+        fuels.add(new MachineFuel(18, new ItemStack(Material.BREAD)));
+
+        //6 Food Levels
+        fuels.add(new MachineFuel(24, new ItemStack(Material.COOKED_MUTTON)));
+        fuels.add(new MachineFuel(24, new ItemStack(Material.COOKED_CHICKEN)));
+        fuels.add(new MachineFuel(24, new ItemStack(Material.COOKED_SALMON)));
+        fuels.add(new MachineFuel(24, new ItemStack(Material.GOLDEN_CARROT)));
+
+        //8 Food Levels
+        fuels.add(new MachineFuel(36, new ItemStack(Material.COOKED_PORKCHOP)));
+        fuels.add(new MachineFuel(36, new ItemStack(Material.COOKED_BEEF)));
+        fuels.add(new MachineFuel(36, new ItemStack(Material.PUMPKIN_PIE)));
+
+        if (DynaTech.isExoticGardenInstalled() && exoticGardenIntegration.getValue())
+            for (SlimefunItem sfItem : Slimefun.getRegistry().getEnabledSlimefunItems())
+                if (sfItem instanceof CustomFood) {
+                    CustomFood cfItem = (CustomFood) sfItem;
+                    MachineFuel fuel = new MachineFuel(cfItem.getFoodValue() * 4, sfItem.getItem());
+                    fuels.add(fuel);
+                }
+    }
+
+    @Nonnull
+    @Override
+    public ItemStack getProgressBar() {
+        return PROGRESS_ITEM;
+    }
+
+    @Override
+    protected void setupMenu(BlockMenuPreset preset) {
+        for (int slot : BACKGROUND_SLOTS)
+            preset.addItem(slot, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
+
+        for (int slot : INPUT_BORDER_SLOTS)
+            preset.addItem(slot, ChestMenuUtils.getInputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
+
+        for (int slot : OUTPUT_BORDER_SLOTS)
+            preset.addItem(slot, ChestMenuUtils.getOutputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
+
+        preset.addItem(22, new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE, " "), ChestMenuUtils.getEmptyClickHandler());
+        for (int slot : getOutputSlots())
+            preset.addMenuClickHandler(slot, new ChestMenu.AdvancedMenuClickHandler() {
+                @Override
+                public boolean onClick(InventoryClickEvent e, Player p, int slot, ItemStack cursor, ClickAction action) {
+                    return cursor.getType().isAir();
+                }
+
+                @Override
+                public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
+                    return false;
+                }
+            });
+    }
+
+    @Override
+    protected int[] getInputSlots() {
+        return INPUT_SLOTS;
+    }
+
+    @Override
+    protected int[] getOutputSlots() {
+        return OUTPUT_SLOTS;
+    }
+
+    @Override
+    public List<ItemStack> getDisplayRecipes() {
+        List<ItemStack> list = new ArrayList<>();
+
+        for (MachineFuel fuel : fuels) {
+            ItemStack item = fuel.getInput().clone();
+            ItemMeta im = item.getItemMeta();
+            List<String> lore = new ArrayList<>();
+            lore.add(ChatColors.color("&8\u21E8 &7Lasts " + NumberUtils.getTimeLeft(fuel.getTicks() / 2)));
+            lore.add(ChatColors.color("&8\u21E8 &e\u26A1 &7" + getEnergyProduction() * 2) + " J/s");
+            lore.add(ChatColors.color("&8\u21E8 &e\u26A1 &7" + NumberUtils.getCompactDouble((double) fuel.getTicks() * getEnergyProduction()) + " J in total"));
+            im.setLore(lore);
+            item.setItemMeta(im);
+            list.add(item);
+        }
+
+        return list;
+    }
+}
diff --git a/src/main/java/me/profelements/dynatech/items/electric/generators/DragonEggGenerator.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/generators/DragonEggGenerator.java
similarity index 85%
rename from src/main/java/me/profelements/dynatech/items/electric/generators/DragonEggGenerator.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/generators/DragonEggGenerator.java
index 1c58489..5349d89 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/generators/DragonEggGenerator.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/generators/DragonEggGenerator.java
@@ -1,37 +1,34 @@
-package me.profelements.dynatech.items.electric.generators;
-
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetProvider;
-import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.block.Block;
-import org.bukkit.block.BlockFace;
-import org.bukkit.inventory.ItemStack;
-
-import javax.annotation.Nonnull;
-
-public class DragonEggGenerator extends SlimefunItem implements EnergyNetProvider {
-
-    public DragonEggGenerator(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(itemGroup, item, recipeType, recipe);
-    }
-
-    @Override
-    public int getGeneratedOutput(@Nonnull Location location, @Nonnull Config config) {
-        Block dragonEgg = location.getBlock().getRelative(BlockFace.UP);
-        if (dragonEgg.getType() == Material.DRAGON_EGG) {
-            return 32;
-        }
-
-        return 0;
-    }
-
-    @Override
-    public int getCapacity() {
-        return 512;
-    }
-}
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric.generators;
+
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetProvider;
+import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.block.BlockFace;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+
+public class DragonEggGenerator extends SlimefunItem implements EnergyNetProvider {
+    public DragonEggGenerator(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
+    }
+
+    @Override
+    public int getGeneratedOutput(@Nonnull Location location, @Nonnull Config config) {
+        Block dragonEgg = location.getBlock().getRelative(BlockFace.UP);
+        if (dragonEgg.getType() == Material.DRAGON_EGG) return 32;
+
+        return 0;
+    }
+
+    @Override
+    public int getCapacity() {
+        return 512;
+    }
+}
diff --git a/src/main/java/me/profelements/dynatech/items/electric/generators/HydroGenerator.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/generators/HydroGenerator.java
similarity index 80%
rename from src/main/java/me/profelements/dynatech/items/electric/generators/HydroGenerator.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/generators/HydroGenerator.java
index 546808c..aa77b91 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/generators/HydroGenerator.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/generators/HydroGenerator.java
@@ -1,93 +1,86 @@
-package me.profelements.dynatech.items.electric.generators;
-
-
-import com.google.common.cache.CacheBuilder;
-import com.google.common.cache.CacheLoader;
-import com.google.common.cache.LoadingCache;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetProvider;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.blocks.BlockPosition;
-import io.github.thebusybiscuit.slimefun4.libraries.paperlib.PaperLib;
-import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.block.Block;
-import org.bukkit.block.data.BlockData;
-import org.bukkit.block.data.Waterlogged;
-import org.bukkit.inventory.ItemStack;
-
-import javax.annotation.Nonnull;
-import java.util.concurrent.TimeUnit;
-
-public class HydroGenerator extends SlimefunItem implements EnergyNetProvider {
-
-    private final int energy;
-    private final int capacity;
-
-    private final LoadingCache<BlockPosition, Integer> cachedGeneration = CacheBuilder.newBuilder()
-        .refreshAfterWrite(1, TimeUnit.MINUTES)
-        .expireAfterAccess(3, TimeUnit.MINUTES)
-        .build(new CacheLoader<>() {
-            @Override
-            public Integer load(@Nonnull BlockPosition key) {
-                return fetchOutputForBlock(key);
-            }
-        });
-
-    public HydroGenerator(ItemGroup itemGroup, int energy, int capacity, SlimefunItemStack item, RecipeType recipeType,
-                          ItemStack[] recipe) {
-        super(itemGroup, item, recipeType, recipe);
-
-        this.energy = energy;
-        this.capacity = capacity;
-    }
-
-    @Override
-    public int getGeneratedOutput(@Nonnull Location location, @Nonnull Config config) {
-        final BlockPosition pos = new BlockPosition(location);
-        Integer i = cachedGeneration.getIfPresent(pos);
-
-        if (i != null) {
-            return i;
-        } else {
-            int output = fetchOutputForBlock(pos);
-            cachedGeneration.put(pos, output);
-            return output;
-        }
-    }
-
-    private int fetchOutputForBlock(@Nonnull BlockPosition position) {
-        final Block b = position.getBlock();
-
-        if (b.getType() == Material.COBBLESTONE_WALL || b.getType() == Material.PRISMARINE_WALL) {
-            BlockData blockData = PaperLib.getBlockState(b, false).getState().getBlockData();
-            if (blockData instanceof Waterlogged) {
-                Waterlogged data = (Waterlogged) blockData;
-                if (data.isWaterlogged()) {
-                    return getEnergyProduction();
-                }
-            }
-        } else {
-            // Block has been removed, invalidate the cache
-            cachedGeneration.invalidate(position);
-        }
-        return 0;
-    }
-
-    @Override
-    public boolean isChargeable() {
-        return false;
-    }
-
-    public int getEnergyProduction() {
-        return energy;
-    }
-
-    @Override
-    public int getCapacity() {
-        return capacity;
-    }
-}
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric.generators;
+
+
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetProvider;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.blocks.BlockPosition;
+import io.github.thebusybiscuit.slimefun4.libraries.paperlib.PaperLib;
+import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.block.data.BlockData;
+import org.bukkit.block.data.Waterlogged;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+import java.time.Duration;
+
+public class HydroGenerator extends SlimefunItem implements EnergyNetProvider {
+    private final int energy;
+    private final int capacity;
+
+    private final LoadingCache<BlockPosition, Integer> cachedGeneration = CacheBuilder.newBuilder()
+        .refreshAfterWrite(Duration.ofMinutes(1))
+        .expireAfterAccess(Duration.ofMinutes(3))
+        .build(new CacheLoader<BlockPosition, Integer>() {
+            @Override
+            public Integer load(@Nonnull BlockPosition key) {
+                return fetchOutputForBlock(key);
+            }
+        });
+
+    public HydroGenerator(ItemGroup itemGroup, int energy, int capacity, SlimefunItemStack item, RecipeType recipeType,
+                          ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
+
+        this.energy = energy;
+        this.capacity = capacity;
+    }
+
+    @Override
+    public int getGeneratedOutput(@Nonnull Location location, @Nonnull Config config) {
+        final BlockPosition pos = new BlockPosition(location);
+        Integer i = cachedGeneration.getIfPresent(pos);
+
+        if (i != null) return i;
+        else {
+            int output = fetchOutputForBlock(pos);
+            cachedGeneration.put(pos, output);
+            return output;
+        }
+    }
+
+    private int fetchOutputForBlock(@Nonnull BlockPosition position) {
+        final Block b = position.getBlock();
+
+        if (b.getType() == Material.COBBLESTONE_WALL || b.getType() == Material.PRISMARINE_WALL) {
+            BlockData blockData = PaperLib.getBlockState(b, false).getState().getBlockData();
+            if (blockData instanceof Waterlogged) {
+                Waterlogged data = (Waterlogged) blockData;
+                if (data.isWaterlogged()) return getEnergyProduction();
+            }
+        } else cachedGeneration.invalidate(position); // Block has been removed, invalidate the cache
+        return 0;
+    }
+
+    @Override
+    public boolean isChargeable() {
+        return false;
+    }
+
+    public int getEnergyProduction() {
+        return energy;
+    }
+
+    @Override
+    public int getCapacity() {
+        return capacity;
+    }
+}
diff --git a/src/main/java/me/profelements/dynatech/items/electric/generators/StardustReactor.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/generators/StardustReactor.java
similarity index 73%
rename from src/main/java/me/profelements/dynatech/items/electric/generators/StardustReactor.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/generators/StardustReactor.java
index 69ff2dc..a646f5b 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/generators/StardustReactor.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/generators/StardustReactor.java
@@ -1,5 +1,7 @@
-package me.profelements.dynatech.items.electric.generators;
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric.generators;
 
+import id.universenetwork.sfa_loader.addons.dynatech.DynaTechItems;
+import id.universenetwork.sfa_loader.addons.dynatech.items.abstracts.AbstractGenerator;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -11,33 +13,28 @@ import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
 import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineFuel;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
-import me.profelements.dynatech.DynaTechItems;
-import me.profelements.dynatech.items.abstracts.AbstractGenerator;
 import org.bukkit.Material;
 import org.bukkit.entity.Player;
 import org.bukkit.event.inventory.InventoryClickEvent;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
 
+import javax.annotation.Nonnull;
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.annotation.Nonnull;
-
 public class StardustReactor extends AbstractGenerator {
+    private static final int[] INPUT_SLOTS = new int[]{19, 20};
+    private static final int[] OUTPUT_SLOTS = new int[]{24, 25};
 
-    private static final int[] INPUT_SLOTS = new int[] { 19, 20 };
-    private static final int[] OUTPUT_SLOTS = new int[] { 24, 25 };
-
-    private static final int[] INPUT_BORDER_SLOTS = new int[] { 9, 10, 11, 12, 18, 21, 27, 28, 29, 30 };
-    private static final int[] OUTPUT_BORDER_SLOTS = new int[] {14, 15, 16, 17, 23, 26, 32, 33, 34, 35 };
-    private static final int[] BACKGROUND_SLOTS = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44 }; 
+    private static final int[] INPUT_BORDER_SLOTS = new int[]{9, 10, 11, 12, 18, 21, 27, 28, 29, 30};
+    private static final int[] OUTPUT_BORDER_SLOTS = new int[]{14, 15, 16, 17, 23, 26, 32, 33, 34, 35};
+    private static final int[] BACKGROUND_SLOTS = new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44};
 
     private static final ItemStack PROGRESS_ITEM = new ItemStack(Material.IRON_CHESTPLATE);
 
     public StardustReactor(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe);
-
     }
 
     @Override
@@ -54,26 +51,22 @@ public class StardustReactor extends AbstractGenerator {
     public ItemStack getProgressBar() {
         return PROGRESS_ITEM;
     }
-    
+
     @Override
-	protected void setupMenu(BlockMenuPreset preset) {
-		for (int slot : BACKGROUND_SLOTS) {
+    protected void setupMenu(BlockMenuPreset preset) {
+        for (int slot : BACKGROUND_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
-        for (int slot : INPUT_BORDER_SLOTS) {
+        for (int slot : INPUT_BORDER_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getInputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
-        for (int slot : OUTPUT_BORDER_SLOTS) {
+        for (int slot : OUTPUT_BORDER_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getOutputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
-        
 
 
         preset.addItem(22, new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE, " "), ChestMenuUtils.getEmptyClickHandler());
-        for (int slot : getOutputSlots()) {
-            preset.addMenuClickHandler(slot,new ChestMenu.AdvancedMenuClickHandler() {
+        for (int slot : getOutputSlots())
+            preset.addMenuClickHandler(slot, new ChestMenu.AdvancedMenuClickHandler() {
                 @Override
                 public boolean onClick(InventoryClickEvent e, Player p, int slot, ItemStack cursor, ClickAction action) {
                     return cursor.getType().isAir();
@@ -84,18 +77,17 @@ public class StardustReactor extends AbstractGenerator {
                     return false;
                 }
             });
-        }	
-	}
+    }
 
-	@Override
-	protected int[] getInputSlots() {
-    	return INPUT_SLOTS;
-	}
+    @Override
+    protected int[] getInputSlots() {
+        return INPUT_SLOTS;
+    }
 
-	@Override
-	protected int[] getOutputSlots() {
-	    return OUTPUT_SLOTS;
-	}
+    @Override
+    protected int[] getOutputSlots() {
+        return OUTPUT_SLOTS;
+    }
 
     @Override
     public List<ItemStack> getDisplayRecipes() {
@@ -115,5 +107,4 @@ public class StardustReactor extends AbstractGenerator {
 
         return list;
     }
-
 }
diff --git a/src/main/java/me/profelements/dynatech/items/electric/growthchambers/GrowthChamber.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/growthchambers/GrowthChamber.java
similarity index 59%
rename from src/main/java/me/profelements/dynatech/items/electric/growthchambers/GrowthChamber.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/growthchambers/GrowthChamber.java
index 4620810..86270c3 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/growthchambers/GrowthChamber.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/growthchambers/GrowthChamber.java
@@ -1,180 +1,165 @@
-package me.profelements.dynatech.items.electric.growthchambers;
-
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
-import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
-import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
-import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
-import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;
-import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
-import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
-import me.profelements.dynatech.DynaTech;
-import me.profelements.dynatech.items.abstracts.AbstractElectricMachine;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import org.bukkit.Material;
-import org.bukkit.entity.Player;
-import org.bukkit.event.inventory.InventoryClickEvent;
-import org.bukkit.inventory.ItemStack;
-
-public class GrowthChamber extends AbstractElectricMachine {
-
-    private static final int[] INPUT_SLOTS = new int[] { 19, 20 };
-    private static final int[] OUTPUT_SLOTS = new int[] { 24, 25 };
-
-    private static final int[] INPUT_BORDER_SLOTS = new int[] { 9, 10, 11, 12, 18, 21, 27, 28, 29, 30 };
-    private static final int[] OUTPUT_BORDER_SLOTS = new int[] {14, 15, 16, 17, 23, 26, 32, 33, 34, 35 };
-    private static final int[] BACKGROUND_SLOTS = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44 }; 
-
-    private static final ItemStack PROGRESS_ITEM = new ItemStack(Material.IRON_HOE);
-
-    private ItemSetting<Boolean> exoticGardenIntegration = new ItemSetting<Boolean>(this, "exotic-garden-integration", true);
-
-    public GrowthChamber(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(itemGroup, item, recipeType, recipe);
-
-        addItemSetting(exoticGardenIntegration);
-    }
-
-    @Override
-    public void postRegister() {
-        registerDefaultRecipes();
-    } 
-
-
-    protected void registerDefaultRecipes() {
-
-        registerRecipe(9, new ItemStack(Material.COCOA_BEANS), new ItemStack(Material.COCOA_BEANS, 3));
-        registerRecipe(15, new ItemStack[] {new ItemStack(Material.MELON_SEEDS)}, new ItemStack[] {new ItemStack(Material.MELON , 1), new ItemStack(Material.MELON_SEEDS, 1)});
-        registerRecipe(15, new ItemStack[] {new ItemStack(Material.PUMPKIN_SEEDS)}, new ItemStack[] {new ItemStack(Material.PUMPKIN , 1), new ItemStack(Material.PUMPKIN_SEEDS, 1)});
-        registerRecipe(15, new ItemStack[] {new ItemStack(Material.BEETROOT_SEEDS)}, new ItemStack[] {new ItemStack(Material.BEETROOT , 3), new ItemStack(Material.BEETROOT_SEEDS, 2)});
-        registerRecipe(12, new ItemStack[] {new ItemStack(Material.WHEAT_SEEDS)}, new ItemStack[] {new ItemStack(Material.WHEAT , 3), new ItemStack(Material.WHEAT_SEEDS, 2)});
-        registerRecipe(9, new ItemStack(Material.APPLE), new ItemStack(Material.APPLE, 3));
-        registerRecipe(9, new ItemStack(Material.BROWN_MUSHROOM), new ItemStack(Material.BROWN_MUSHROOM, 3));
-        registerRecipe(9, new ItemStack(Material.RED_MUSHROOM), new ItemStack(Material.RED_MUSHROOM, 3));
-        registerRecipe(9, new ItemStack[] {new ItemStack(Material.DEAD_BUSH)}, new ItemStack[] {new ItemStack(Material.DEAD_BUSH , 3), new ItemStack(Material.STICK, 2)});
-        registerRecipe(9, new ItemStack(Material.GRASS), new ItemStack(Material.GRASS, 3));
-        registerRecipe(12, new ItemStack(Material.TALL_GRASS), new ItemStack(Material.TALL_GRASS, 3));
-        registerRecipe(9, new ItemStack(Material.FERN), new ItemStack(Material.FERN, 3));
-        registerRecipe(12, new ItemStack(Material.LARGE_FERN), new ItemStack(Material.LARGE_FERN, 3));
-        registerRecipe(9, new ItemStack(Material.VINE), new ItemStack(Material.VINE, 3));
-
-    // Flowers
-        registerRecipe(9, new ItemStack(Material.DANDELION), new ItemStack(Material.DANDELION, 3));
-        registerRecipe(9, new ItemStack(Material.POPPY), new ItemStack(Material.POPPY, 3));
-        registerRecipe(9, new ItemStack(Material.BLUE_ORCHID), new ItemStack(Material.BLUE_ORCHID, 3));
-        registerRecipe(9, new ItemStack(Material.ALLIUM), new ItemStack(Material.ALLIUM, 3));
-        registerRecipe(9, new ItemStack(Material.AZURE_BLUET), new ItemStack(Material.AZURE_BLUET, 3));
-        registerRecipe(9, new ItemStack(Material.RED_TULIP), new ItemStack(Material.RED_TULIP, 3));
-        registerRecipe(9, new ItemStack(Material.ORANGE_TULIP), new ItemStack(Material.ORANGE_TULIP, 3));
-        registerRecipe(9, new ItemStack(Material.WHITE_TULIP), new ItemStack(Material.WHITE_TULIP, 3));
-        registerRecipe(9, new ItemStack(Material.PINK_TULIP), new ItemStack(Material.PINK_TULIP, 3));
-        registerRecipe(9, new ItemStack(Material.OXEYE_DAISY), new ItemStack(Material.OXEYE_DAISY, 3));
-        registerRecipe(9, new ItemStack(Material.CORNFLOWER), new ItemStack(Material.CORNFLOWER, 3));
-        registerRecipe(9, new ItemStack(Material.LILY_OF_THE_VALLEY), new ItemStack(Material.LILY_OF_THE_VALLEY, 3));
-        registerRecipe(12, new ItemStack(Material.WITHER_ROSE), new ItemStack(Material.WITHER_ROSE, 2));
-        registerRecipe(12, new ItemStack(Material.SUNFLOWER), new ItemStack(Material.SUNFLOWER, 2));
-        registerRecipe(12, new ItemStack(Material.LILAC), new ItemStack(Material.LILAC, 2));
-        registerRecipe(12, new ItemStack(Material.ROSE_BUSH), new ItemStack(Material.ROSE_BUSH, 2));
-        registerRecipe(12, new ItemStack(Material.PEONY), new ItemStack(Material.PEONY, 2));
-
-        registerRecipe(12, new ItemStack(Material.CARROT), new ItemStack(Material.CARROT, 3));
-        registerRecipe(12, new ItemStack(Material.POTATO), new ItemStack(Material.POTATO, 3));
-        registerRecipe(12, new ItemStack(Material.SWEET_BERRIES), new ItemStack(Material.SWEET_BERRIES, 3));
-        registerRecipe(12, new ItemStack(Material.SUGAR_CANE), new ItemStack(Material.SUGAR_CANE, 3));
-        registerRecipe(12, new ItemStack(Material.BAMBOO), new ItemStack(Material.BAMBOO, 3));
-        registerRecipe(12, new ItemStack(Material.CACTUS), new ItemStack(Material.CACTUS, 3));
-
-        registerRecipe(30, new ItemStack[] {new ItemStack(Material.OAK_SAPLING)}, new ItemStack[] {new ItemStack(Material.OAK_SAPLING , 3), new ItemStack(Material.OAK_LOG, 6)});
-        registerRecipe(30, new ItemStack[] {new ItemStack(Material.BIRCH_SAPLING)}, new ItemStack[] {new ItemStack(Material.BIRCH_SAPLING , 3), new ItemStack(Material.BIRCH_LOG, 6)});
-        registerRecipe(30, new ItemStack[] {new ItemStack(Material.SPRUCE_SAPLING)}, new ItemStack[] {new ItemStack(Material.SPRUCE_SAPLING , 3), new ItemStack(Material.SPRUCE_LOG, 6)});
-        registerRecipe(30, new ItemStack[] {new ItemStack(Material.DARK_OAK_SAPLING)}, new ItemStack[] {new ItemStack(Material.DARK_OAK_SAPLING , 3), new ItemStack(Material.DARK_OAK_LOG, 6)});
-        registerRecipe(30, new ItemStack[] {new ItemStack(Material.JUNGLE_SAPLING)}, new ItemStack[] {new ItemStack(Material.JUNGLE_SAPLING, 3), new ItemStack(Material.JUNGLE_LOG, 6)});
-        registerRecipe(30, new ItemStack[] {new ItemStack(Material.ACACIA_SAPLING)}, new ItemStack[] {new ItemStack(Material.ACACIA_SAPLING, 3), new ItemStack(Material.ACACIA_LOG, 6)});
-        
-        if (DynaTech.isExoticGardenInstalled() && exoticGardenIntegration.getValue()) {
-            for (SlimefunItem item : Slimefun.getRegistry().getEnabledSlimefunItems()) {
-                if (item.getId().contains("_BUSH") || item.getId().contains("_PLANT") || item.getId().contains("_SAPLING")) {
-                    SlimefunItem fruit = SlimefunItem.getById(item.getId().split("_")[0]);
-                    SlimefunItem essence = SlimefunItem.getById(item.getId().split("_")[0] + "_ESSENCE");
-                    if ( fruit != null) { 
-                       registerRecipe(new MachineRecipe(30, new ItemStack[] {item.getItem()}, new ItemStack[] { item.getItem(), fruit.getItem()}));
-                    }
-
-                    if (essence != null) { 
-                       registerRecipe(new MachineRecipe(30, new ItemStack[] {item.getItem()}, new ItemStack[] { item.getItem(), essence.getItem()}));
-                    }
-                }
-            }
-        }
-    }
-    
-
-    @Override
-	public List<ItemStack> getDisplayRecipes() {
-		List<ItemStack> display = new ArrayList<>(); 
-        for (MachineRecipe recipe : recipes) {
-           display.add(recipe.getInput()[0]);
-           if (recipe.getOutput().length > 1) {
-            display.add(recipe.getOutput()[1]);
-           } else {
-            display.add(recipe.getOutput()[0]);
-           }
-        }
-        return display;
-	}
-
-	@Override
-	protected void setupMenu(BlockMenuPreset preset) {
-		for (int slot : BACKGROUND_SLOTS) {
-            preset.addItem(slot, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
-        }
-
-        for (int slot : INPUT_BORDER_SLOTS) {
-            preset.addItem(slot, ChestMenuUtils.getInputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
-
-        for (int slot : OUTPUT_BORDER_SLOTS) {
-            preset.addItem(slot, ChestMenuUtils.getOutputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
-
-        preset.addItem(getProgressSlot(), new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE, " "), ChestMenuUtils.getEmptyClickHandler());
-        
-        for (int slot : getOutputSlots()) {
-            preset.addMenuClickHandler(slot,new ChestMenu.AdvancedMenuClickHandler() {
-                @Override
-                public boolean onClick(InventoryClickEvent e, Player p, int slot, ItemStack cursor, ClickAction action) {
-                    return cursor.getType().isAir();
-                }
-
-                @Override
-                public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
-                    return false;
-                }
-            });
-        }
-	}
-
-	@Override
-	protected int[] getInputSlots() {
-		return INPUT_SLOTS;
-	}
-
-	@Override
-	protected int[] getOutputSlots() {
-		return OUTPUT_SLOTS;
-	}
-
-	@Override
-	protected ItemStack getProgressBar() {
-		return PROGRESS_ITEM;
-	}
-
-}
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric.growthchambers;
+
+import id.universenetwork.sfa_loader.addons.dynatech.DynaTech;
+import id.universenetwork.sfa_loader.addons.dynatech.items.abstracts.AbstractElectricMachine;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
+import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
+import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;
+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
+import org.bukkit.Material;
+import org.bukkit.entity.Player;
+import org.bukkit.event.inventory.InventoryClickEvent;
+import org.bukkit.inventory.ItemStack;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class GrowthChamber extends AbstractElectricMachine {
+    private static final int[] INPUT_SLOTS = new int[]{19, 20};
+    private static final int[] OUTPUT_SLOTS = new int[]{24, 25};
+
+    private static final int[] INPUT_BORDER_SLOTS = new int[]{9, 10, 11, 12, 18, 21, 27, 28, 29, 30};
+    private static final int[] OUTPUT_BORDER_SLOTS = new int[]{14, 15, 16, 17, 23, 26, 32, 33, 34, 35};
+    private static final int[] BACKGROUND_SLOTS = new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44};
+
+    private static final ItemStack PROGRESS_ITEM = new ItemStack(Material.IRON_HOE);
+
+    private ItemSetting<Boolean> exoticGardenIntegration = new ItemSetting<Boolean>(this, "exotic-garden-integration", true);
+
+    public GrowthChamber(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
+
+        addItemSetting(exoticGardenIntegration);
+    }
+
+    @Override
+    public void postRegister() {
+        registerDefaultRecipes();
+    }
+
+
+    protected void registerDefaultRecipes() {
+
+        registerRecipe(9, new ItemStack(Material.COCOA_BEANS), new ItemStack(Material.COCOA_BEANS, 3));
+        registerRecipe(15, new ItemStack[]{new ItemStack(Material.MELON_SEEDS)}, new ItemStack[]{new ItemStack(Material.MELON, 1), new ItemStack(Material.MELON_SEEDS, 1)});
+        registerRecipe(15, new ItemStack[]{new ItemStack(Material.PUMPKIN_SEEDS)}, new ItemStack[]{new ItemStack(Material.PUMPKIN, 1), new ItemStack(Material.PUMPKIN_SEEDS, 1)});
+        registerRecipe(15, new ItemStack[]{new ItemStack(Material.BEETROOT_SEEDS)}, new ItemStack[]{new ItemStack(Material.BEETROOT, 3), new ItemStack(Material.BEETROOT_SEEDS, 2)});
+        registerRecipe(12, new ItemStack[]{new ItemStack(Material.WHEAT_SEEDS)}, new ItemStack[]{new ItemStack(Material.WHEAT, 3), new ItemStack(Material.WHEAT_SEEDS, 2)});
+        registerRecipe(9, new ItemStack(Material.APPLE), new ItemStack(Material.APPLE, 3));
+        registerRecipe(9, new ItemStack(Material.BROWN_MUSHROOM), new ItemStack(Material.BROWN_MUSHROOM, 3));
+        registerRecipe(9, new ItemStack(Material.RED_MUSHROOM), new ItemStack(Material.RED_MUSHROOM, 3));
+        registerRecipe(9, new ItemStack[]{new ItemStack(Material.DEAD_BUSH)}, new ItemStack[]{new ItemStack(Material.DEAD_BUSH, 3), new ItemStack(Material.STICK, 2)});
+        registerRecipe(9, new ItemStack(Material.GRASS), new ItemStack(Material.GRASS, 3));
+        registerRecipe(12, new ItemStack(Material.TALL_GRASS), new ItemStack(Material.TALL_GRASS, 3));
+        registerRecipe(9, new ItemStack(Material.FERN), new ItemStack(Material.FERN, 3));
+        registerRecipe(12, new ItemStack(Material.LARGE_FERN), new ItemStack(Material.LARGE_FERN, 3));
+        registerRecipe(9, new ItemStack(Material.VINE), new ItemStack(Material.VINE, 3));
+
+        // Flowers
+        registerRecipe(9, new ItemStack(Material.DANDELION), new ItemStack(Material.DANDELION, 3));
+        registerRecipe(9, new ItemStack(Material.POPPY), new ItemStack(Material.POPPY, 3));
+        registerRecipe(9, new ItemStack(Material.BLUE_ORCHID), new ItemStack(Material.BLUE_ORCHID, 3));
+        registerRecipe(9, new ItemStack(Material.ALLIUM), new ItemStack(Material.ALLIUM, 3));
+        registerRecipe(9, new ItemStack(Material.AZURE_BLUET), new ItemStack(Material.AZURE_BLUET, 3));
+        registerRecipe(9, new ItemStack(Material.RED_TULIP), new ItemStack(Material.RED_TULIP, 3));
+        registerRecipe(9, new ItemStack(Material.ORANGE_TULIP), new ItemStack(Material.ORANGE_TULIP, 3));
+        registerRecipe(9, new ItemStack(Material.WHITE_TULIP), new ItemStack(Material.WHITE_TULIP, 3));
+        registerRecipe(9, new ItemStack(Material.PINK_TULIP), new ItemStack(Material.PINK_TULIP, 3));
+        registerRecipe(9, new ItemStack(Material.OXEYE_DAISY), new ItemStack(Material.OXEYE_DAISY, 3));
+        registerRecipe(9, new ItemStack(Material.CORNFLOWER), new ItemStack(Material.CORNFLOWER, 3));
+        registerRecipe(9, new ItemStack(Material.LILY_OF_THE_VALLEY), new ItemStack(Material.LILY_OF_THE_VALLEY, 3));
+        registerRecipe(12, new ItemStack(Material.WITHER_ROSE), new ItemStack(Material.WITHER_ROSE, 2));
+        registerRecipe(12, new ItemStack(Material.SUNFLOWER), new ItemStack(Material.SUNFLOWER, 2));
+        registerRecipe(12, new ItemStack(Material.LILAC), new ItemStack(Material.LILAC, 2));
+        registerRecipe(12, new ItemStack(Material.ROSE_BUSH), new ItemStack(Material.ROSE_BUSH, 2));
+        registerRecipe(12, new ItemStack(Material.PEONY), new ItemStack(Material.PEONY, 2));
+
+        registerRecipe(12, new ItemStack(Material.CARROT), new ItemStack(Material.CARROT, 3));
+        registerRecipe(12, new ItemStack(Material.POTATO), new ItemStack(Material.POTATO, 3));
+        registerRecipe(12, new ItemStack(Material.SWEET_BERRIES), new ItemStack(Material.SWEET_BERRIES, 3));
+        registerRecipe(12, new ItemStack(Material.SUGAR_CANE), new ItemStack(Material.SUGAR_CANE, 3));
+        registerRecipe(12, new ItemStack(Material.BAMBOO), new ItemStack(Material.BAMBOO, 3));
+        registerRecipe(12, new ItemStack(Material.CACTUS), new ItemStack(Material.CACTUS, 3));
+
+        registerRecipe(30, new ItemStack[]{new ItemStack(Material.OAK_SAPLING)}, new ItemStack[]{new ItemStack(Material.OAK_SAPLING, 3), new ItemStack(Material.OAK_LOG, 6)});
+        registerRecipe(30, new ItemStack[]{new ItemStack(Material.BIRCH_SAPLING)}, new ItemStack[]{new ItemStack(Material.BIRCH_SAPLING, 3), new ItemStack(Material.BIRCH_LOG, 6)});
+        registerRecipe(30, new ItemStack[]{new ItemStack(Material.SPRUCE_SAPLING)}, new ItemStack[]{new ItemStack(Material.SPRUCE_SAPLING, 3), new ItemStack(Material.SPRUCE_LOG, 6)});
+        registerRecipe(30, new ItemStack[]{new ItemStack(Material.DARK_OAK_SAPLING)}, new ItemStack[]{new ItemStack(Material.DARK_OAK_SAPLING, 3), new ItemStack(Material.DARK_OAK_LOG, 6)});
+        registerRecipe(30, new ItemStack[]{new ItemStack(Material.JUNGLE_SAPLING)}, new ItemStack[]{new ItemStack(Material.JUNGLE_SAPLING, 3), new ItemStack(Material.JUNGLE_LOG, 6)});
+        registerRecipe(30, new ItemStack[]{new ItemStack(Material.ACACIA_SAPLING)}, new ItemStack[]{new ItemStack(Material.ACACIA_SAPLING, 3), new ItemStack(Material.ACACIA_LOG, 6)});
+
+        if (DynaTech.isExoticGardenInstalled() && exoticGardenIntegration.getValue())
+            for (SlimefunItem item : Slimefun.getRegistry().getEnabledSlimefunItems())
+                if (item.getId().contains("_BUSH") || item.getId().contains("_PLANT") || item.getId().contains("_SAPLING")) {
+                    SlimefunItem fruit = SlimefunItem.getById(item.getId().split("_")[0]);
+                    SlimefunItem essence = SlimefunItem.getById(item.getId().split("_")[0] + "_ESSENCE");
+                    if (fruit != null)
+                        registerRecipe(new MachineRecipe(30, new ItemStack[]{item.getItem()}, new ItemStack[]{item.getItem(), fruit.getItem()}));
+
+                    if (essence != null)
+                        registerRecipe(new MachineRecipe(30, new ItemStack[]{item.getItem()}, new ItemStack[]{item.getItem(), essence.getItem()}));
+                }
+    }
+
+
+    @Override
+    public List<ItemStack> getDisplayRecipes() {
+        List<ItemStack> display = new ArrayList<>();
+        for (MachineRecipe recipe : recipes) {
+            display.add(recipe.getInput()[0]);
+            if (recipe.getOutput().length > 1) display.add(recipe.getOutput()[1]);
+            else display.add(recipe.getOutput()[0]);
+        }
+        return display;
+    }
+
+    @Override
+    protected void setupMenu(BlockMenuPreset preset) {
+        for (int slot : BACKGROUND_SLOTS)
+            preset.addItem(slot, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
+
+        for (int slot : INPUT_BORDER_SLOTS)
+            preset.addItem(slot, ChestMenuUtils.getInputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
+
+        for (int slot : OUTPUT_BORDER_SLOTS)
+            preset.addItem(slot, ChestMenuUtils.getOutputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
+
+        preset.addItem(getProgressSlot(), new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE, " "), ChestMenuUtils.getEmptyClickHandler());
+
+        for (int slot : getOutputSlots())
+            preset.addMenuClickHandler(slot, new ChestMenu.AdvancedMenuClickHandler() {
+                @Override
+                public boolean onClick(InventoryClickEvent e, Player p, int slot, ItemStack cursor, ClickAction action) {
+                    return cursor.getType().isAir();
+                }
+
+                @Override
+                public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
+                    return false;
+                }
+            });
+    }
+
+    @Override
+    protected int[] getInputSlots() {
+        return INPUT_SLOTS;
+    }
+
+    @Override
+    protected int[] getOutputSlots() {
+        return OUTPUT_SLOTS;
+    }
+
+    @Override
+    protected ItemStack getProgressBar() {
+        return PROGRESS_ITEM;
+    }
+}
diff --git a/src/main/java/me/profelements/dynatech/items/electric/growthchambers/GrowthChamberEnd.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/growthchambers/GrowthChamberEnd.java
similarity index 56%
rename from src/main/java/me/profelements/dynatech/items/electric/growthchambers/GrowthChamberEnd.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/growthchambers/GrowthChamberEnd.java
index 86f28ef..25917b4 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/growthchambers/GrowthChamberEnd.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/growthchambers/GrowthChamberEnd.java
@@ -1,5 +1,6 @@
-package me.profelements.dynatech.items.electric.growthchambers;
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric.growthchambers;
 
+import id.universenetwork.sfa_loader.addons.dynatech.items.abstracts.AbstractElectricMachine;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -9,30 +10,26 @@ import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
 import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
-import me.profelements.dynatech.items.abstracts.AbstractElectricMachine;
-
-import java.util.ArrayList;
-import java.util.List;
-
 import org.bukkit.Material;
 import org.bukkit.entity.Player;
 import org.bukkit.event.inventory.InventoryClickEvent;
 import org.bukkit.inventory.ItemStack;
 
+import java.util.ArrayList;
+import java.util.List;
+
 public class GrowthChamberEnd extends AbstractElectricMachine {
+    private static final int[] INPUT_SLOTS = new int[]{19, 20};
+    private static final int[] OUTPUT_SLOTS = new int[]{24, 25};
 
-    private static final int[] INPUT_SLOTS = new int[] { 19, 20 };
-    private static final int[] OUTPUT_SLOTS = new int[] { 24, 25 };
+    private static final int[] INPUT_BORDER_SLOTS = new int[]{9, 10, 11, 12, 18, 21, 27, 28, 29, 30};
+    private static final int[] OUTPUT_BORDER_SLOTS = new int[]{14, 15, 16, 17, 23, 26, 32, 33, 34, 35};
+    private static final int[] BACKGROUND_SLOTS = new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44};
 
-    private static final int[] INPUT_BORDER_SLOTS = new int[] { 9, 10, 11, 12, 18, 21, 27, 28, 29, 30 };
-    private static final int[] OUTPUT_BORDER_SLOTS = new int[] {14, 15, 16, 17, 23, 26, 32, 33, 34, 35 };
-    private static final int[] BACKGROUND_SLOTS = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44 }; 
- 
     public static final ItemStack PROGRESS_ITEM = new ItemStack(Material.CHORUS_FLOWER);
 
     public GrowthChamberEnd(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe);
-
     }
 
     @Override
@@ -41,43 +38,35 @@ public class GrowthChamberEnd extends AbstractElectricMachine {
     }
 
     protected void registerDefaultRecipes() {
+        registerRecipe(9, new ItemStack[]{new ItemStack(Material.CHORUS_FLOWER)}, new ItemStack[]{new ItemStack(Material.CHORUS_FLOWER, 2), new ItemStack(Material.CHORUS_FRUIT, 8)});
+    }
 
-        registerRecipe(9, new ItemStack[] {new ItemStack(Material.CHORUS_FLOWER)}, new ItemStack[] {new ItemStack(Material.CHORUS_FLOWER , 2), new ItemStack(Material.CHORUS_FRUIT, 8)});
-
-    } 
-    
     @Override
-	public List<ItemStack> getDisplayRecipes() {
-		List<ItemStack> display = new ArrayList<>(); 
+    public List<ItemStack> getDisplayRecipes() {
+        List<ItemStack> display = new ArrayList<>();
         for (MachineRecipe recipe : recipes) {
-           display.add(recipe.getInput()[0]);
-           if (recipe.getOutput().length > 1) {
-            display.add(recipe.getOutput()[1]);
-           } else {
-            display.add(recipe.getOutput()[0]);
-           }
+            display.add(recipe.getInput()[0]);
+            if (recipe.getOutput().length > 1) display.add(recipe.getOutput()[1]);
+            else display.add(recipe.getOutput()[0]);
         }
         return display;
-	}
+    }
 
-	@Override
-	protected void setupMenu(BlockMenuPreset preset) {
-		for (int slot : BACKGROUND_SLOTS) {
+    @Override
+    protected void setupMenu(BlockMenuPreset preset) {
+        for (int slot : BACKGROUND_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
-        for (int slot : INPUT_BORDER_SLOTS) {
+        for (int slot : INPUT_BORDER_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getInputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
-        for (int slot : OUTPUT_BORDER_SLOTS) {
+        for (int slot : OUTPUT_BORDER_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getOutputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
         preset.addItem(getProgressSlot(), new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE, " "), ChestMenuUtils.getEmptyClickHandler());
-        
-        for (int slot : getOutputSlots()) {
-            preset.addMenuClickHandler(slot,new ChestMenu.AdvancedMenuClickHandler() {
+
+        for (int slot : getOutputSlots())
+            preset.addMenuClickHandler(slot, new ChestMenu.AdvancedMenuClickHandler() {
                 @Override
                 public boolean onClick(InventoryClickEvent e, Player p, int slot, ItemStack cursor, ClickAction action) {
                     return cursor.getType().isAir();
@@ -88,23 +77,20 @@ public class GrowthChamberEnd extends AbstractElectricMachine {
                     return false;
                 }
             });
-        }
-	}
-
-	@Override
-	protected int[] getInputSlots() {
-		return INPUT_SLOTS;
-	}
-
-	@Override
-	protected int[] getOutputSlots() {
-		return OUTPUT_SLOTS;
-	}
+    }
 
-	@Override
-	protected ItemStack getProgressBar() {
-		return PROGRESS_ITEM;
-	}
+    @Override
+    protected int[] getInputSlots() {
+        return INPUT_SLOTS;
+    }
 
+    @Override
+    protected int[] getOutputSlots() {
+        return OUTPUT_SLOTS;
+    }
 
+    @Override
+    protected ItemStack getProgressBar() {
+        return PROGRESS_ITEM;
+    }
 }
diff --git a/src/main/java/me/profelements/dynatech/items/electric/growthchambers/GrowthChamberEndMK2.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/growthchambers/GrowthChamberEndMK2.java
similarity index 59%
rename from src/main/java/me/profelements/dynatech/items/electric/growthchambers/GrowthChamberEndMK2.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/growthchambers/GrowthChamberEndMK2.java
index 3f71d4c..5212b44 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/growthchambers/GrowthChamberEndMK2.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/growthchambers/GrowthChamberEndMK2.java
@@ -1,5 +1,6 @@
-package me.profelements.dynatech.items.electric.growthchambers;
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric.growthchambers;
 
+import id.universenetwork.sfa_loader.addons.dynatech.items.abstracts.AbstractElectricMachine;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -9,25 +10,22 @@ import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
 import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
-import me.profelements.dynatech.items.abstracts.AbstractElectricMachine;
-
-import java.util.ArrayList;
-import java.util.List;
-
 import org.bukkit.Material;
 import org.bukkit.entity.Player;
 import org.bukkit.event.inventory.InventoryClickEvent;
 import org.bukkit.inventory.ItemStack;
 
+import java.util.ArrayList;
+import java.util.List;
+
 public class GrowthChamberEndMK2 extends AbstractElectricMachine {
-   
-    private static final int[] INPUT_SLOTS = new int[] {1,2,3,4,5,6,7};
-    private static final int[] OUTPUT_SLOTS = new int[] {28,29,30,31,32,33,34,37,38,39,40,41,42,43,46,47,48,49,50,51,52};
-
-    private static final int[] INPUT_BORDER_SLOTS = new int[] {0,8,9,10,11,12,14,15,16,17};
-    private static final int[] OUTPUT_BORDER_SLOTS = new int[] {18,19,20,21,22,23,24,25,26,27,35,36,44,45,53};
-    private static final int[] BACKGROUND_SLOTS = new int[] {}; 
- 
+    private static final int[] INPUT_SLOTS = new int[]{1, 2, 3, 4, 5, 6, 7};
+    private static final int[] OUTPUT_SLOTS = new int[]{28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52};
+
+    private static final int[] INPUT_BORDER_SLOTS = new int[]{0, 8, 9, 10, 11, 12, 14, 15, 16, 17};
+    private static final int[] OUTPUT_BORDER_SLOTS = new int[]{18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 35, 36, 44, 45, 53};
+    private static final int[] BACKGROUND_SLOTS = new int[]{};
+
     private static final ItemStack PROGRESS_ITEM = new ItemStack(Material.CHORUS_FLOWER);
 
     public GrowthChamberEndMK2(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
@@ -41,10 +39,8 @@ public class GrowthChamberEndMK2 extends AbstractElectricMachine {
     }
 
     protected void registerDefaultRecipes() {
-
-        registerRecipe(9, new ItemStack[] {new ItemStack(Material.CHORUS_FLOWER)}, new ItemStack[] {new ItemStack(Material.CHORUS_FLOWER , 6), new ItemStack(Material.CHORUS_FRUIT, 24)});
-
-    } 
+        registerRecipe(9, new ItemStack[]{new ItemStack(Material.CHORUS_FLOWER)}, new ItemStack[]{new ItemStack(Material.CHORUS_FLOWER, 6), new ItemStack(Material.CHORUS_FRUIT, 24)});
+    }
 
     @Override
     public ItemStack getProgressBar() {
@@ -56,37 +52,31 @@ public class GrowthChamberEndMK2 extends AbstractElectricMachine {
         return 13;
     }
 
-	@Override
-	public List<ItemStack> getDisplayRecipes() {
-		List<ItemStack> display = new ArrayList<>(); 
+    @Override
+    public List<ItemStack> getDisplayRecipes() {
+        List<ItemStack> display = new ArrayList<>();
         for (MachineRecipe recipe : recipes) {
-           display.add(recipe.getInput()[0]);
-           if (recipe.getOutput().length > 1) {
-            display.add(recipe.getOutput()[1]);
-           } else {
-            display.add(recipe.getOutput()[0]);
-           }
+            display.add(recipe.getInput()[0]);
+            if (recipe.getOutput().length > 1) display.add(recipe.getOutput()[1]);
+            else display.add(recipe.getOutput()[0]);
         }
         return display;
-	}
+    }
 
-	@Override
-	protected void setupMenu(BlockMenuPreset preset) {
-		for (int slot : BACKGROUND_SLOTS) {
+    @Override
+    protected void setupMenu(BlockMenuPreset preset) {
+        for (int slot : BACKGROUND_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
-        for (int slot : INPUT_BORDER_SLOTS) {
+        for (int slot : INPUT_BORDER_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getInputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
-        for (int slot : OUTPUT_BORDER_SLOTS) {
+        for (int slot : OUTPUT_BORDER_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getOutputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
         preset.addItem(getProgressSlot(), new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE, " "), ChestMenuUtils.getEmptyClickHandler());
-        for (int slot : getOutputSlots()) {
-            preset.addMenuClickHandler(slot,new ChestMenu.AdvancedMenuClickHandler() {
+        for (int slot : getOutputSlots())
+            preset.addMenuClickHandler(slot, new ChestMenu.AdvancedMenuClickHandler() {
                 @Override
                 public boolean onClick(InventoryClickEvent e, Player p, int slot, ItemStack cursor, ClickAction action) {
                     return cursor.getType().isAir();
@@ -97,16 +87,15 @@ public class GrowthChamberEndMK2 extends AbstractElectricMachine {
                     return false;
                 }
             });
-        }
-	}
+    }
 
-	@Override
-	protected int[] getInputSlots() {
-		return INPUT_SLOTS;
-	}
+    @Override
+    protected int[] getInputSlots() {
+        return INPUT_SLOTS;
+    }
 
-	@Override
-	protected int[] getOutputSlots() {
-		return OUTPUT_SLOTS;
-	}
+    @Override
+    protected int[] getOutputSlots() {
+        return OUTPUT_SLOTS;
+    }
 }
diff --git a/src/main/java/me/profelements/dynatech/items/electric/growthchambers/GrowthChamberMK2.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/growthchambers/GrowthChamberMK2.java
similarity index 58%
rename from src/main/java/me/profelements/dynatech/items/electric/growthchambers/GrowthChamberMK2.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/growthchambers/GrowthChamberMK2.java
index a97652e..43f2094 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/growthchambers/GrowthChamberMK2.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/growthchambers/GrowthChamberMK2.java
@@ -1,185 +1,172 @@
-package me.profelements.dynatech.items.electric.growthchambers;
-
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
-import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
-import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
-import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
-import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;
-import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
-import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
-import me.profelements.dynatech.DynaTech;
-import me.profelements.dynatech.items.abstracts.AbstractElectricMachine;
-import org.bukkit.Material;
-import org.bukkit.entity.Player;
-import org.bukkit.event.inventory.InventoryClickEvent;
-import org.bukkit.inventory.ItemStack;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class GrowthChamberMK2 extends AbstractElectricMachine {
-   
-    private static final int[] INPUT_SLOTS = new int[] {1,2,3,4,5,6,7};
-    private static final int[] OUTPUT_SLOTS = new int[] {28,29,30,31,32,33,34,37,38,39,40,41,42,43,46,47,48,49,50,51,52};
-
-    private static final int[] INPUT_BORDER_SLOTS = new int[] {0,8,9,10,11,12,14,15,16,17};
-    private static final int[] OUTPUT_BORDER_SLOTS = new int[] {18,19,20,21,22,23,24,25,26,27,35,36,44,45,53};
-    private static final int[] BACKGROUND_SLOTS = new int[] {}; 
-
-    private static final ItemStack PROGRESS_ITEM = new ItemStack(Material.DIAMOND_HOE);
-
-
-    private ItemSetting<Boolean> exoticGardenIntegration = new ItemSetting<Boolean>(this, "exotic-garden-integration", true);
-
-    public GrowthChamberMK2(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(itemGroup, item, recipeType, recipe);
-
-        addItemSetting(exoticGardenIntegration);
-    }
-    
-    @Override
-    public void postRegister() { 
-        registerDefaultRecipes();
-    }
-
-
-    protected void registerDefaultRecipes() {
-
-        registerRecipe(9, new ItemStack(Material.COCOA_BEANS), new ItemStack(Material.COCOA_BEANS, 9));
-        registerRecipe(15, new ItemStack[] {new ItemStack(Material.MELON_SEEDS)}, new ItemStack[] {new ItemStack(Material.MELON , 3), new ItemStack(Material.MELON_SEEDS, 3)});
-        registerRecipe(15, new ItemStack[] {new ItemStack(Material.PUMPKIN_SEEDS)}, new ItemStack[] {new ItemStack(Material.PUMPKIN , 3), new ItemStack(Material.PUMPKIN_SEEDS, 3)});
-        registerRecipe(15, new ItemStack[] {new ItemStack(Material.BEETROOT_SEEDS)}, new ItemStack[] {new ItemStack(Material.BEETROOT , 9), new ItemStack(Material.BEETROOT_SEEDS, 6)});
-        registerRecipe(12, new ItemStack[] {new ItemStack(Material.WHEAT_SEEDS)}, new ItemStack[] {new ItemStack(Material.WHEAT , 9), new ItemStack(Material.WHEAT_SEEDS, 6)});
-        registerRecipe(9, new ItemStack(Material.APPLE), new ItemStack(Material.APPLE, 9));
-        registerRecipe(9, new ItemStack(Material.BROWN_MUSHROOM), new ItemStack(Material.BROWN_MUSHROOM, 9));
-        registerRecipe(9, new ItemStack(Material.RED_MUSHROOM), new ItemStack(Material.RED_MUSHROOM, 9));
-        registerRecipe(9, new ItemStack[] {new ItemStack(Material.DEAD_BUSH)}, new ItemStack[] {new ItemStack(Material.DEAD_BUSH , 9), new ItemStack(Material.STICK, 6)});
-        registerRecipe(9, new ItemStack(Material.GRASS), new ItemStack(Material.GRASS, 9));
-        registerRecipe(12, new ItemStack(Material.TALL_GRASS), new ItemStack(Material.TALL_GRASS, 9));
-        registerRecipe(9, new ItemStack(Material.FERN), new ItemStack(Material.FERN, 9));
-        registerRecipe(12, new ItemStack(Material.LARGE_FERN), new ItemStack(Material.LARGE_FERN, 9));
-        registerRecipe(9, new ItemStack(Material.VINE), new ItemStack(Material.VINE, 9));
-
-        // Flowers
-        registerRecipe(9, new ItemStack(Material.DANDELION), new ItemStack(Material.DANDELION, 9));
-        registerRecipe(9, new ItemStack(Material.POPPY), new ItemStack(Material.POPPY, 3));
-        registerRecipe(9, new ItemStack(Material.BLUE_ORCHID), new ItemStack(Material.BLUE_ORCHID, 9));
-        registerRecipe(9, new ItemStack(Material.ALLIUM), new ItemStack(Material.ALLIUM, 9));
-        registerRecipe(9, new ItemStack(Material.AZURE_BLUET), new ItemStack(Material.AZURE_BLUET, 9));
-        registerRecipe(9, new ItemStack(Material.RED_TULIP), new ItemStack(Material.RED_TULIP, 9));
-        registerRecipe(9, new ItemStack(Material.ORANGE_TULIP), new ItemStack(Material.ORANGE_TULIP, 9));
-        registerRecipe(9, new ItemStack(Material.WHITE_TULIP), new ItemStack(Material.WHITE_TULIP, 9));
-        registerRecipe(9, new ItemStack(Material.PINK_TULIP), new ItemStack(Material.PINK_TULIP, 9));
-        registerRecipe(9, new ItemStack(Material.OXEYE_DAISY), new ItemStack(Material.OXEYE_DAISY, 9));
-        registerRecipe(9, new ItemStack(Material.CORNFLOWER), new ItemStack(Material.CORNFLOWER, 9));
-        registerRecipe(9, new ItemStack(Material.LILY_OF_THE_VALLEY), new ItemStack(Material.LILY_OF_THE_VALLEY, 9));
-        registerRecipe(12, new ItemStack(Material.WITHER_ROSE), new ItemStack(Material.WITHER_ROSE, 6));
-        registerRecipe(12, new ItemStack(Material.SUNFLOWER), new ItemStack(Material.SUNFLOWER, 6));
-        registerRecipe(12, new ItemStack(Material.LILAC), new ItemStack(Material.LILAC, 6));
-        registerRecipe(12, new ItemStack(Material.ROSE_BUSH), new ItemStack(Material.ROSE_BUSH, 6));
-        registerRecipe(12, new ItemStack(Material.PEONY), new ItemStack(Material.PEONY, 6));
-
-        registerRecipe(12, new ItemStack(Material.CARROT), new ItemStack(Material.CARROT, 9));
-        registerRecipe(12, new ItemStack(Material.POTATO), new ItemStack(Material.POTATO, 9));
-        registerRecipe(12, new ItemStack(Material.SWEET_BERRIES), new ItemStack(Material.SWEET_BERRIES, 9));
-        registerRecipe(12, new ItemStack(Material.SUGAR_CANE), new ItemStack(Material.SUGAR_CANE, 9));
-        registerRecipe(12, new ItemStack(Material.BAMBOO), new ItemStack(Material.BAMBOO, 9));
-        registerRecipe(12, new ItemStack(Material.CACTUS), new ItemStack(Material.CACTUS, 9));
-
-        registerRecipe(30, new ItemStack[] {new ItemStack(Material.OAK_SAPLING)}, new ItemStack[] {new ItemStack(Material.OAK_SAPLING , 9), new ItemStack(Material.OAK_LOG, 18), new ItemStack(Material.APPLE, 6), new ItemStack(Material.OAK_LEAVES, 9), new ItemStack(Material.STICK, 6)});
-        registerRecipe(30, new ItemStack[] {new ItemStack(Material.BIRCH_SAPLING)}, new ItemStack[] {new ItemStack(Material.BIRCH_SAPLING , 9), new ItemStack(Material.BIRCH_LOG, 18), new ItemStack(Material.APPLE, 6), new ItemStack(Material.BIRCH_LEAVES, 9), new ItemStack(Material.STICK, 6)});
-        registerRecipe(30, new ItemStack[] {new ItemStack(Material.SPRUCE_SAPLING)}, new ItemStack[] {new ItemStack(Material.SPRUCE_SAPLING , 9), new ItemStack(Material.SPRUCE_LOG, 18), new ItemStack(Material.APPLE, 6), new ItemStack(Material.SPRUCE_LEAVES, 9), new ItemStack(Material.STICK, 6)});
-        registerRecipe(30, new ItemStack[] {new ItemStack(Material.DARK_OAK_SAPLING)}, new ItemStack[] {new ItemStack(Material.DARK_OAK_SAPLING , 9), new ItemStack(Material.DARK_OAK_LOG, 18), new ItemStack(Material.APPLE, 6), new ItemStack(Material.DARK_OAK_LEAVES, 9), new ItemStack(Material.STICK, 6)});
-        registerRecipe(30, new ItemStack[] {new ItemStack(Material.JUNGLE_SAPLING)}, new ItemStack[] {new ItemStack(Material.JUNGLE_SAPLING, 9), new ItemStack(Material.JUNGLE_LOG, 18), new ItemStack(Material.APPLE, 6), new ItemStack(Material.JUNGLE_LEAVES, 9), new ItemStack(Material.STICK, 6)});
-        registerRecipe(30, new ItemStack[] {new ItemStack(Material.ACACIA_SAPLING)}, new ItemStack[] {new ItemStack(Material.ACACIA_SAPLING, 9), new ItemStack(Material.ACACIA_LOG, 18), new ItemStack(Material.APPLE, 6), new ItemStack(Material.ACACIA_LEAVES, 9), new ItemStack(Material.STICK, 6)});
-        
-        if (DynaTech.isExoticGardenInstalled() && exoticGardenIntegration.getValue()) {
-            for (SlimefunItem item : Slimefun.getRegistry().getEnabledSlimefunItems()) {
-                if (item.getId().contains("_BUSH") || item.getId().contains("_PLANT") || item.getId().contains("_SAPLING")) {
-                    SlimefunItem fruit = SlimefunItem.getById(item.getId().split("_")[0]);
-                    SlimefunItem essence = SlimefunItem.getById(item.getId().split("_")[0] + "_ESSENCE");
-                    if ( fruit != null) { 
-                       registerRecipe(new MachineRecipe(30, new ItemStack[] {item.getItem()}, new ItemStack[] { item.getItem(), fruit.getItem()}));
-                    }
-
-                    if (essence != null) { 
-                       registerRecipe(new MachineRecipe(30, new ItemStack[] {item.getItem()}, new ItemStack[] { item.getItem(), essence.getItem()}));
-                    }
-                }
-            }
-        }
-    }
-
-    @Override
-    public int[] getInputSlots() {
-        return INPUT_SLOTS; 
-    }
-
-    @Override
-    public int[] getOutputSlots() {
-        return OUTPUT_SLOTS; 
-    }
-
-    @Override
-    public ItemStack getProgressBar() {
-        return PROGRESS_ITEM;   
-    }
-    
-    @Override
-    protected int getProgressSlot() {
-        return 13;
-    }
-
-    @Override
-	public List<ItemStack> getDisplayRecipes() {
-		List<ItemStack> display = new ArrayList<>(); 
-        for (MachineRecipe recipe : recipes) {
-           display.add(recipe.getInput()[0]);
-           if (recipe.getOutput().length > 1) {
-            display.add(recipe.getOutput()[1]);
-           } else {
-            display.add(recipe.getOutput()[0]);
-           }
-        }
-        return display;
-	}
-
-	@Override
-	protected void setupMenu(BlockMenuPreset preset) {
-		for (int slot : BACKGROUND_SLOTS) {
-            preset.addItem(slot, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
-        }
-
-        for (int slot : INPUT_BORDER_SLOTS) {
-            preset.addItem(slot, ChestMenuUtils.getInputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
-
-        for (int slot : OUTPUT_BORDER_SLOTS) {
-            preset.addItem(slot, ChestMenuUtils.getOutputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
-        
-        preset.addItem(getProgressSlot(), new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE, " "), ChestMenuUtils.getEmptyClickHandler());
-
-        for (int slot : getOutputSlots()) {
-            preset.addMenuClickHandler(slot,new ChestMenu.AdvancedMenuClickHandler() {
-                @Override
-                public boolean onClick(InventoryClickEvent e, Player p, int slot, ItemStack cursor, ClickAction action) {
-                    return cursor.getType().isAir();
-                }
-
-                @Override
-                public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
-                    return false;
-                }
-            });
-        }
-	}
-
-
-}
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric.growthchambers;
+
+import id.universenetwork.sfa_loader.addons.dynatech.DynaTech;
+import id.universenetwork.sfa_loader.addons.dynatech.items.abstracts.AbstractElectricMachine;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
+import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
+import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;
+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
+import org.bukkit.Material;
+import org.bukkit.entity.Player;
+import org.bukkit.event.inventory.InventoryClickEvent;
+import org.bukkit.inventory.ItemStack;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class GrowthChamberMK2 extends AbstractElectricMachine {
+    private static final int[] INPUT_SLOTS = new int[]{1, 2, 3, 4, 5, 6, 7};
+    private static final int[] OUTPUT_SLOTS = new int[]{28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52};
+
+    private static final int[] INPUT_BORDER_SLOTS = new int[]{0, 8, 9, 10, 11, 12, 14, 15, 16, 17};
+    private static final int[] OUTPUT_BORDER_SLOTS = new int[]{18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 35, 36, 44, 45, 53};
+    private static final int[] BACKGROUND_SLOTS = new int[]{};
+
+    private static final ItemStack PROGRESS_ITEM = new ItemStack(Material.DIAMOND_HOE);
+
+
+    private ItemSetting<Boolean> exoticGardenIntegration = new ItemSetting<Boolean>(this, "exotic-garden-integration", true);
+
+    public GrowthChamberMK2(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
+
+        addItemSetting(exoticGardenIntegration);
+    }
+
+    @Override
+    public void postRegister() {
+        registerDefaultRecipes();
+    }
+
+
+    protected void registerDefaultRecipes() {
+
+        registerRecipe(9, new ItemStack(Material.COCOA_BEANS), new ItemStack(Material.COCOA_BEANS, 9));
+        registerRecipe(15, new ItemStack[]{new ItemStack(Material.MELON_SEEDS)}, new ItemStack[]{new ItemStack(Material.MELON, 3), new ItemStack(Material.MELON_SEEDS, 3)});
+        registerRecipe(15, new ItemStack[]{new ItemStack(Material.PUMPKIN_SEEDS)}, new ItemStack[]{new ItemStack(Material.PUMPKIN, 3), new ItemStack(Material.PUMPKIN_SEEDS, 3)});
+        registerRecipe(15, new ItemStack[]{new ItemStack(Material.BEETROOT_SEEDS)}, new ItemStack[]{new ItemStack(Material.BEETROOT, 9), new ItemStack(Material.BEETROOT_SEEDS, 6)});
+        registerRecipe(12, new ItemStack[]{new ItemStack(Material.WHEAT_SEEDS)}, new ItemStack[]{new ItemStack(Material.WHEAT, 9), new ItemStack(Material.WHEAT_SEEDS, 6)});
+        registerRecipe(9, new ItemStack(Material.APPLE), new ItemStack(Material.APPLE, 9));
+        registerRecipe(9, new ItemStack(Material.BROWN_MUSHROOM), new ItemStack(Material.BROWN_MUSHROOM, 9));
+        registerRecipe(9, new ItemStack(Material.RED_MUSHROOM), new ItemStack(Material.RED_MUSHROOM, 9));
+        registerRecipe(9, new ItemStack[]{new ItemStack(Material.DEAD_BUSH)}, new ItemStack[]{new ItemStack(Material.DEAD_BUSH, 9), new ItemStack(Material.STICK, 6)});
+        registerRecipe(9, new ItemStack(Material.GRASS), new ItemStack(Material.GRASS, 9));
+        registerRecipe(12, new ItemStack(Material.TALL_GRASS), new ItemStack(Material.TALL_GRASS, 9));
+        registerRecipe(9, new ItemStack(Material.FERN), new ItemStack(Material.FERN, 9));
+        registerRecipe(12, new ItemStack(Material.LARGE_FERN), new ItemStack(Material.LARGE_FERN, 9));
+        registerRecipe(9, new ItemStack(Material.VINE), new ItemStack(Material.VINE, 9));
+
+        // Flowers
+        registerRecipe(9, new ItemStack(Material.DANDELION), new ItemStack(Material.DANDELION, 9));
+        registerRecipe(9, new ItemStack(Material.POPPY), new ItemStack(Material.POPPY, 3));
+        registerRecipe(9, new ItemStack(Material.BLUE_ORCHID), new ItemStack(Material.BLUE_ORCHID, 9));
+        registerRecipe(9, new ItemStack(Material.ALLIUM), new ItemStack(Material.ALLIUM, 9));
+        registerRecipe(9, new ItemStack(Material.AZURE_BLUET), new ItemStack(Material.AZURE_BLUET, 9));
+        registerRecipe(9, new ItemStack(Material.RED_TULIP), new ItemStack(Material.RED_TULIP, 9));
+        registerRecipe(9, new ItemStack(Material.ORANGE_TULIP), new ItemStack(Material.ORANGE_TULIP, 9));
+        registerRecipe(9, new ItemStack(Material.WHITE_TULIP), new ItemStack(Material.WHITE_TULIP, 9));
+        registerRecipe(9, new ItemStack(Material.PINK_TULIP), new ItemStack(Material.PINK_TULIP, 9));
+        registerRecipe(9, new ItemStack(Material.OXEYE_DAISY), new ItemStack(Material.OXEYE_DAISY, 9));
+        registerRecipe(9, new ItemStack(Material.CORNFLOWER), new ItemStack(Material.CORNFLOWER, 9));
+        registerRecipe(9, new ItemStack(Material.LILY_OF_THE_VALLEY), new ItemStack(Material.LILY_OF_THE_VALLEY, 9));
+        registerRecipe(12, new ItemStack(Material.WITHER_ROSE), new ItemStack(Material.WITHER_ROSE, 6));
+        registerRecipe(12, new ItemStack(Material.SUNFLOWER), new ItemStack(Material.SUNFLOWER, 6));
+        registerRecipe(12, new ItemStack(Material.LILAC), new ItemStack(Material.LILAC, 6));
+        registerRecipe(12, new ItemStack(Material.ROSE_BUSH), new ItemStack(Material.ROSE_BUSH, 6));
+        registerRecipe(12, new ItemStack(Material.PEONY), new ItemStack(Material.PEONY, 6));
+
+        registerRecipe(12, new ItemStack(Material.CARROT), new ItemStack(Material.CARROT, 9));
+        registerRecipe(12, new ItemStack(Material.POTATO), new ItemStack(Material.POTATO, 9));
+        registerRecipe(12, new ItemStack(Material.SWEET_BERRIES), new ItemStack(Material.SWEET_BERRIES, 9));
+        registerRecipe(12, new ItemStack(Material.SUGAR_CANE), new ItemStack(Material.SUGAR_CANE, 9));
+        registerRecipe(12, new ItemStack(Material.BAMBOO), new ItemStack(Material.BAMBOO, 9));
+        registerRecipe(12, new ItemStack(Material.CACTUS), new ItemStack(Material.CACTUS, 9));
+
+        registerRecipe(30, new ItemStack[]{new ItemStack(Material.OAK_SAPLING)}, new ItemStack[]{new ItemStack(Material.OAK_SAPLING, 9), new ItemStack(Material.OAK_LOG, 18), new ItemStack(Material.APPLE, 6), new ItemStack(Material.OAK_LEAVES, 9), new ItemStack(Material.STICK, 6)});
+        registerRecipe(30, new ItemStack[]{new ItemStack(Material.BIRCH_SAPLING)}, new ItemStack[]{new ItemStack(Material.BIRCH_SAPLING, 9), new ItemStack(Material.BIRCH_LOG, 18), new ItemStack(Material.APPLE, 6), new ItemStack(Material.BIRCH_LEAVES, 9), new ItemStack(Material.STICK, 6)});
+        registerRecipe(30, new ItemStack[]{new ItemStack(Material.SPRUCE_SAPLING)}, new ItemStack[]{new ItemStack(Material.SPRUCE_SAPLING, 9), new ItemStack(Material.SPRUCE_LOG, 18), new ItemStack(Material.APPLE, 6), new ItemStack(Material.SPRUCE_LEAVES, 9), new ItemStack(Material.STICK, 6)});
+        registerRecipe(30, new ItemStack[]{new ItemStack(Material.DARK_OAK_SAPLING)}, new ItemStack[]{new ItemStack(Material.DARK_OAK_SAPLING, 9), new ItemStack(Material.DARK_OAK_LOG, 18), new ItemStack(Material.APPLE, 6), new ItemStack(Material.DARK_OAK_LEAVES, 9), new ItemStack(Material.STICK, 6)});
+        registerRecipe(30, new ItemStack[]{new ItemStack(Material.JUNGLE_SAPLING)}, new ItemStack[]{new ItemStack(Material.JUNGLE_SAPLING, 9), new ItemStack(Material.JUNGLE_LOG, 18), new ItemStack(Material.APPLE, 6), new ItemStack(Material.JUNGLE_LEAVES, 9), new ItemStack(Material.STICK, 6)});
+        registerRecipe(30, new ItemStack[]{new ItemStack(Material.ACACIA_SAPLING)}, new ItemStack[]{new ItemStack(Material.ACACIA_SAPLING, 9), new ItemStack(Material.ACACIA_LOG, 18), new ItemStack(Material.APPLE, 6), new ItemStack(Material.ACACIA_LEAVES, 9), new ItemStack(Material.STICK, 6)});
+
+        if (DynaTech.isExoticGardenInstalled() && exoticGardenIntegration.getValue()) {
+            for (SlimefunItem item : Slimefun.getRegistry().getEnabledSlimefunItems()) {
+                if (item.getId().contains("_BUSH") || item.getId().contains("_PLANT") || item.getId().contains("_SAPLING")) {
+                    SlimefunItem fruit = SlimefunItem.getById(item.getId().split("_")[0]);
+                    SlimefunItem essence = SlimefunItem.getById(item.getId().split("_")[0] + "_ESSENCE");
+                    if (fruit != null)
+                        registerRecipe(new MachineRecipe(30, new ItemStack[]{item.getItem()}, new ItemStack[]{item.getItem(), fruit.getItem()}));
+
+                    if (essence != null)
+                        registerRecipe(new MachineRecipe(30, new ItemStack[]{item.getItem()}, new ItemStack[]{item.getItem(), essence.getItem()}));
+                }
+            }
+        }
+    }
+
+    @Override
+    public int[] getInputSlots() {
+        return INPUT_SLOTS;
+    }
+
+    @Override
+    public int[] getOutputSlots() {
+        return OUTPUT_SLOTS;
+    }
+
+    @Override
+    public ItemStack getProgressBar() {
+        return PROGRESS_ITEM;
+    }
+
+    @Override
+    protected int getProgressSlot() {
+        return 13;
+    }
+
+    @Override
+    public List<ItemStack> getDisplayRecipes() {
+        List<ItemStack> display = new ArrayList<>();
+        for (MachineRecipe recipe : recipes) {
+            display.add(recipe.getInput()[0]);
+            if (recipe.getOutput().length > 1) display.add(recipe.getOutput()[1]);
+            else display.add(recipe.getOutput()[0]);
+        }
+        return display;
+    }
+
+    @Override
+    protected void setupMenu(BlockMenuPreset preset) {
+        for (int slot : BACKGROUND_SLOTS)
+            preset.addItem(slot, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
+
+        for (int slot : INPUT_BORDER_SLOTS)
+            preset.addItem(slot, ChestMenuUtils.getInputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
+
+        for (int slot : OUTPUT_BORDER_SLOTS)
+            preset.addItem(slot, ChestMenuUtils.getOutputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
+
+        preset.addItem(getProgressSlot(), new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE, " "), ChestMenuUtils.getEmptyClickHandler());
+
+        for (int slot : getOutputSlots())
+            preset.addMenuClickHandler(slot, new ChestMenu.AdvancedMenuClickHandler() {
+                @Override
+                public boolean onClick(InventoryClickEvent e, Player p, int slot, ItemStack cursor, ClickAction action) {
+                    return cursor.getType().isAir();
+                }
+
+                @Override
+                public boolean onClick(Player p, int slot, ItemStack item, ClickAction action) {
+                    return false;
+                }
+            });
+    }
+}
diff --git a/src/main/java/me/profelements/dynatech/items/electric/growthchambers/GrowthChamberNether.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/growthchambers/GrowthChamberNether.java
similarity index 61%
rename from src/main/java/me/profelements/dynatech/items/electric/growthchambers/GrowthChamberNether.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/growthchambers/GrowthChamberNether.java
index 0772ab5..a01203f 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/growthchambers/GrowthChamberNether.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/growthchambers/GrowthChamberNether.java
@@ -1,5 +1,6 @@
-package me.profelements.dynatech.items.electric.growthchambers;
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric.growthchambers;
 
+import id.universenetwork.sfa_loader.addons.dynatech.items.abstracts.AbstractElectricMachine;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -9,31 +10,28 @@ import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
 import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
-import me.profelements.dynatech.items.abstracts.AbstractElectricMachine;
-
-import java.util.ArrayList;
-import java.util.List;
-
 import org.bukkit.Material;
 import org.bukkit.entity.Player;
 import org.bukkit.event.inventory.InventoryClickEvent;
 import org.bukkit.inventory.ItemStack;
 
+import java.util.ArrayList;
+import java.util.List;
+
 public class GrowthChamberNether extends AbstractElectricMachine {
-    private static final int[] INPUT_SLOTS = new int[] { 19, 20 };
-    private static final int[] OUTPUT_SLOTS = new int[] { 24, 25 };
+    private static final int[] INPUT_SLOTS = new int[]{19, 20};
+    private static final int[] OUTPUT_SLOTS = new int[]{24, 25};
+
+    private static final int[] INPUT_BORDER_SLOTS = new int[]{9, 10, 11, 12, 18, 21, 27, 28, 29, 30};
+    private static final int[] OUTPUT_BORDER_SLOTS = new int[]{14, 15, 16, 17, 23, 26, 32, 33, 34, 35};
+    private static final int[] BACKGROUND_SLOTS = new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44};
 
-    private static final int[] INPUT_BORDER_SLOTS = new int[] { 9, 10, 11, 12, 18, 21, 27, 28, 29, 30 };
-    private static final int[] OUTPUT_BORDER_SLOTS = new int[] {14, 15, 16, 17, 23, 26, 32, 33, 34, 35 };
-    private static final int[] BACKGROUND_SLOTS = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44 }; 
+    private static final ItemStack PROGRESS_ITEM = new ItemStack(Material.NETHERRACK);
 
-    private static final ItemStack PROGRESS_ITEM = new ItemStack(Material.NETHERRACK); 
-    
     public GrowthChamberNether(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe);
-
     }
-    
+
     @Override
     public void postRegister() {
         registerDefaultRecipes();
@@ -48,43 +46,37 @@ public class GrowthChamberNether extends AbstractElectricMachine {
         registerRecipe(9, new ItemStack(Material.WARPED_ROOTS), new ItemStack(Material.WARPED_ROOTS, 4));
         registerRecipe(9, new ItemStack(Material.NETHER_SPROUTS), new ItemStack(Material.NETHER_SPROUTS, 4));
 
-        registerRecipe(30, new ItemStack[] {new ItemStack(Material.CRIMSON_FUNGUS)}, new ItemStack[] {new ItemStack(Material.CRIMSON_FUNGUS, 2), new ItemStack(Material.CRIMSON_STEM, 6)});
-        registerRecipe(30, new ItemStack[] {new ItemStack(Material.WARPED_FUNGUS)}, new ItemStack[] {new ItemStack(Material.WARPED_FUNGUS, 2), new ItemStack(Material.WARPED_STEM, 6)});
+        registerRecipe(30, new ItemStack[]{new ItemStack(Material.CRIMSON_FUNGUS)}, new ItemStack[]{new ItemStack(Material.CRIMSON_FUNGUS, 2), new ItemStack(Material.CRIMSON_STEM, 6)});
+        registerRecipe(30, new ItemStack[]{new ItemStack(Material.WARPED_FUNGUS)}, new ItemStack[]{new ItemStack(Material.WARPED_FUNGUS, 2), new ItemStack(Material.WARPED_STEM, 6)});
 
     }
-   
+
     @Override
-	public List<ItemStack> getDisplayRecipes() {
-		List<ItemStack> display = new ArrayList<>(); 
+    public List<ItemStack> getDisplayRecipes() {
+        List<ItemStack> display = new ArrayList<>();
         for (MachineRecipe recipe : recipes) {
-           display.add(recipe.getInput()[0]);
-           if (recipe.getOutput().length > 1) {
-            display.add(recipe.getOutput()[1]);
-           } else {
-            display.add(recipe.getOutput()[0]);
-           }
+            display.add(recipe.getInput()[0]);
+            if (recipe.getOutput().length > 1) display.add(recipe.getOutput()[1]);
+            else display.add(recipe.getOutput()[0]);
         }
         return display;
-	}
+    }
 
-	@Override
-	protected void setupMenu(BlockMenuPreset preset) {
-		for (int slot : BACKGROUND_SLOTS) {
+    @Override
+    protected void setupMenu(BlockMenuPreset preset) {
+        for (int slot : BACKGROUND_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
-        for (int slot : INPUT_BORDER_SLOTS) {
+        for (int slot : INPUT_BORDER_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getInputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
-        for (int slot : OUTPUT_BORDER_SLOTS) {
+        for (int slot : OUTPUT_BORDER_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getOutputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
-    
+
         preset.addItem(getProgressSlot(), new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE, " "), ChestMenuUtils.getEmptyClickHandler());
 
-        for (int slot : getOutputSlots()) {
-            preset.addMenuClickHandler(slot,new ChestMenu.AdvancedMenuClickHandler() {
+        for (int slot : getOutputSlots())
+            preset.addMenuClickHandler(slot, new ChestMenu.AdvancedMenuClickHandler() {
                 @Override
                 public boolean onClick(InventoryClickEvent e, Player p, int slot, ItemStack cursor, ClickAction action) {
                     return cursor.getType().isAir();
@@ -95,20 +87,19 @@ public class GrowthChamberNether extends AbstractElectricMachine {
                     return false;
                 }
             });
-        }
-	}
+    }
+
+    @Override
+    protected int[] getInputSlots() {
+        return INPUT_SLOTS;
+    }
 
-	@Override
-	protected int[] getInputSlots() {
-		return INPUT_SLOTS;
-	}
+    @Override
+    protected int[] getOutputSlots() {
+        return OUTPUT_SLOTS;
+    }
 
-	@Override
-	protected int[] getOutputSlots() {
-		return OUTPUT_SLOTS;
-	}
 
-  
     @Override
     public ItemStack getProgressBar() {
         return PROGRESS_ITEM;
diff --git a/src/main/java/me/profelements/dynatech/items/electric/growthchambers/GrowthChamberNetherMK2.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/growthchambers/GrowthChamberNetherMK2.java
similarity index 63%
rename from src/main/java/me/profelements/dynatech/items/electric/growthchambers/GrowthChamberNetherMK2.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/growthchambers/GrowthChamberNetherMK2.java
index 2cb2200..8976013 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/growthchambers/GrowthChamberNetherMK2.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/growthchambers/GrowthChamberNetherMK2.java
@@ -1,5 +1,6 @@
-package me.profelements.dynatech.items.electric.growthchambers;
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric.growthchambers;
 
+import id.universenetwork.sfa_loader.addons.dynatech.items.abstracts.AbstractElectricMachine;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -9,7 +10,6 @@ import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
 import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
-import me.profelements.dynatech.items.abstracts.AbstractElectricMachine;
 import org.bukkit.Material;
 import org.bukkit.entity.Player;
 import org.bukkit.event.inventory.InventoryClickEvent;
@@ -19,19 +19,17 @@ import java.util.ArrayList;
 import java.util.List;
 
 public class GrowthChamberNetherMK2 extends AbstractElectricMachine {
-   
-    private static final int[] INPUT_SLOTS = new int[] {1,2,3,4,5,6,7};
-    private static final int[] OUTPUT_SLOTS = new int[] {28,29,30,31,32,33,34,37,38,39,40,41,42,43,46,47,48,49,50,51,52};
-
-    private static final int[] INPUT_BORDER_SLOTS = new int[] {0,8,9,10,11,12,14,15,16,17};
-    private static final int[] OUTPUT_BORDER_SLOTS = new int[] {18,19,20,21,22,23,24,25,26,27,35,36,44,45,53};
-    private static final int[] BACKGROUND_SLOTS = new int[] {}; 
-    
+    private static final int[] INPUT_SLOTS = new int[]{1, 2, 3, 4, 5, 6, 7};
+    private static final int[] OUTPUT_SLOTS = new int[]{28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52};
+
+    private static final int[] INPUT_BORDER_SLOTS = new int[]{0, 8, 9, 10, 11, 12, 14, 15, 16, 17};
+    private static final int[] OUTPUT_BORDER_SLOTS = new int[]{18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 35, 36, 44, 45, 53};
+    private static final int[] BACKGROUND_SLOTS = new int[]{};
+
     private static final ItemStack PROGRESS_ITEM = new ItemStack(Material.NETHERRACK);
 
     public GrowthChamberNetherMK2(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe);
-
     }
 
     @Override
@@ -48,15 +46,16 @@ public class GrowthChamberNetherMK2 extends AbstractElectricMachine {
         registerRecipe(9, new ItemStack(Material.WARPED_ROOTS), new ItemStack(Material.WARPED_ROOTS, 12));
         registerRecipe(9, new ItemStack(Material.NETHER_SPROUTS), new ItemStack(Material.NETHER_SPROUTS, 12));
 
-        registerRecipe(30, new ItemStack[] {new ItemStack(Material.CRIMSON_FUNGUS)}, new ItemStack[] {new ItemStack(Material.CRIMSON_FUNGUS, 6), new ItemStack(Material.CRIMSON_STEM, 18), new ItemStack(Material.SHROOMLIGHT, 6), new ItemStack(Material.NETHER_WART_BLOCK, 12)});
-        registerRecipe(30, new ItemStack[] {new ItemStack(Material.WARPED_FUNGUS)}, new ItemStack[] {new ItemStack(Material.WARPED_FUNGUS, 6), new ItemStack(Material.WARPED_STEM, 18), new ItemStack(Material.SHROOMLIGHT, 6), new ItemStack(Material.WARPED_WART_BLOCK, 12)});
+        registerRecipe(30, new ItemStack[]{new ItemStack(Material.CRIMSON_FUNGUS)}, new ItemStack[]{new ItemStack(Material.CRIMSON_FUNGUS, 6), new ItemStack(Material.CRIMSON_STEM, 18), new ItemStack(Material.SHROOMLIGHT, 6), new ItemStack(Material.NETHER_WART_BLOCK, 12)});
+        registerRecipe(30, new ItemStack[]{new ItemStack(Material.WARPED_FUNGUS)}, new ItemStack[]{new ItemStack(Material.WARPED_FUNGUS, 6), new ItemStack(Material.WARPED_STEM, 18), new ItemStack(Material.SHROOMLIGHT, 6), new ItemStack(Material.WARPED_WART_BLOCK, 12)});
 
     }
-    
+
     @Override
     public int[] getInputSlots() {
         return INPUT_SLOTS;
     }
+
     @Override
     public int[] getOutputSlots() {
         return OUTPUT_SLOTS;
@@ -66,44 +65,38 @@ public class GrowthChamberNetherMK2 extends AbstractElectricMachine {
     public ItemStack getProgressBar() {
         return PROGRESS_ITEM;
     }
-    
+
     @Override
     public int getProgressSlot() {
         return 13;
     }
-    
+
     @Override
-	public List<ItemStack> getDisplayRecipes() {
-		List<ItemStack> display = new ArrayList<>(); 
+    public List<ItemStack> getDisplayRecipes() {
+        List<ItemStack> display = new ArrayList<>();
         for (MachineRecipe recipe : recipes) {
-           display.add(recipe.getInput()[0]);
-           if (recipe.getOutput().length > 1) {
-            display.add(recipe.getOutput()[1]);
-           } else {
-            display.add(recipe.getOutput()[0]);
-           }
+            display.add(recipe.getInput()[0]);
+            if (recipe.getOutput().length > 1) display.add(recipe.getOutput()[1]);
+            else display.add(recipe.getOutput()[0]);
         }
         return display;
-	}
+    }
 
-	@Override
-	protected void setupMenu(BlockMenuPreset preset) {
-		for (int slot : BACKGROUND_SLOTS) {
+    @Override
+    protected void setupMenu(BlockMenuPreset preset) {
+        for (int slot : BACKGROUND_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
-        for (int slot : INPUT_BORDER_SLOTS) {
+        for (int slot : INPUT_BORDER_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getInputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
-        for (int slot : OUTPUT_BORDER_SLOTS) {
+        for (int slot : OUTPUT_BORDER_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getOutputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
         preset.addItem(getProgressSlot(), new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE, " "), ChestMenuUtils.getEmptyClickHandler());
-        
-        for (int slot : getOutputSlots()) {
-            preset.addMenuClickHandler(slot,new ChestMenu.AdvancedMenuClickHandler() {
+
+        for (int slot : getOutputSlots())
+            preset.addMenuClickHandler(slot, new ChestMenu.AdvancedMenuClickHandler() {
                 @Override
                 public boolean onClick(InventoryClickEvent e, Player p, int slot, ItemStack cursor, ClickAction action) {
                     return cursor.getType().isAir();
@@ -114,8 +107,5 @@ public class GrowthChamberNetherMK2 extends AbstractElectricMachine {
                     return false;
                 }
             });
-        }
-	}
-
-
+    }
 }
diff --git a/src/main/java/me/profelements/dynatech/items/electric/growthchambers/GrowthChamberOcean.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/growthchambers/GrowthChamberOcean.java
similarity index 80%
rename from src/main/java/me/profelements/dynatech/items/electric/growthchambers/GrowthChamberOcean.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/growthchambers/GrowthChamberOcean.java
index 83e87a6..4a22bfe 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/growthchambers/GrowthChamberOcean.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/growthchambers/GrowthChamberOcean.java
@@ -1,5 +1,6 @@
-package me.profelements.dynatech.items.electric.growthchambers;
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric.growthchambers;
 
+import id.universenetwork.sfa_loader.addons.dynatech.items.abstracts.AbstractElectricMachine;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -9,30 +10,26 @@ import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
 import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
-import me.profelements.dynatech.items.abstracts.AbstractElectricMachine;
-
-import java.util.ArrayList;
-import java.util.List;
-
 import org.bukkit.Material;
 import org.bukkit.entity.Player;
 import org.bukkit.event.inventory.InventoryClickEvent;
 import org.bukkit.inventory.ItemStack;
 
-public class GrowthChamberOcean extends AbstractElectricMachine {
+import java.util.ArrayList;
+import java.util.List;
 
-    private static final int[] INPUT_SLOTS = new int[] { 19, 20 };
-    private static final int[] OUTPUT_SLOTS = new int[] { 24, 25 };
+public class GrowthChamberOcean extends AbstractElectricMachine {
+    private static final int[] INPUT_SLOTS = new int[]{19, 20};
+    private static final int[] OUTPUT_SLOTS = new int[]{24, 25};
 
-    private static final int[] INPUT_BORDER_SLOTS = new int[] { 9, 10, 11, 12, 18, 21, 27, 28, 29, 30 };
-    private static final int[] OUTPUT_BORDER_SLOTS = new int[] {14, 15, 16, 17, 23, 26, 32, 33, 34, 35 };
-    private static final int[] BACKGROUND_SLOTS = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44 }; 
+    private static final int[] INPUT_BORDER_SLOTS = new int[]{9, 10, 11, 12, 18, 21, 27, 28, 29, 30};
+    private static final int[] OUTPUT_BORDER_SLOTS = new int[]{14, 15, 16, 17, 23, 26, 32, 33, 34, 35};
+    private static final int[] BACKGROUND_SLOTS = new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 13, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44};
 
-    private static final ItemStack PROGRESS_ITEM = new ItemStack(Material.CONDUIT); 
+    private static final ItemStack PROGRESS_ITEM = new ItemStack(Material.CONDUIT);
 
     public GrowthChamberOcean(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe);
-
     }
 
     @Override
@@ -46,7 +43,7 @@ public class GrowthChamberOcean extends AbstractElectricMachine {
         registerRecipe(9, new ItemStack(Material.SEA_PICKLE), new ItemStack(Material.SEA_PICKLE, 3));
         registerRecipe(12, new ItemStack(Material.SEAGRASS), new ItemStack(Material.SEAGRASS, 4));
         registerRecipe(9, new ItemStack(Material.KELP), new ItemStack(Material.KELP, 3));
-    // Coral blocks
+        // Coral blocks
         // Brings dead coral blocks back to life!
         registerRecipe(9, new ItemStack(Material.DEAD_TUBE_CORAL_BLOCK), new ItemStack(Material.TUBE_CORAL_BLOCK, 1));
         registerRecipe(9, new ItemStack(Material.DEAD_BRAIN_CORAL_BLOCK), new ItemStack(Material.BRAIN_CORAL_BLOCK, 1));
@@ -60,7 +57,7 @@ public class GrowthChamberOcean extends AbstractElectricMachine {
         registerRecipe(12, new ItemStack(Material.FIRE_CORAL_BLOCK), new ItemStack(Material.FIRE_CORAL_BLOCK, 2));
         registerRecipe(12, new ItemStack(Material.HORN_CORAL_BLOCK), new ItemStack(Material.HORN_CORAL_BLOCK, 2));
 
-    // Coral
+        // Coral
         // Revive for coral
         registerRecipe(9, new ItemStack(Material.DEAD_TUBE_CORAL), new ItemStack(Material.TUBE_CORAL, 1));
         registerRecipe(9, new ItemStack(Material.DEAD_BRAIN_CORAL), new ItemStack(Material.BRAIN_CORAL, 1));
@@ -74,7 +71,7 @@ public class GrowthChamberOcean extends AbstractElectricMachine {
         registerRecipe(12, new ItemStack(Material.FIRE_CORAL), new ItemStack(Material.FIRE_CORAL, 2));
         registerRecipe(12, new ItemStack(Material.HORN_CORAL), new ItemStack(Material.HORN_CORAL, 2));
 
-    // Coral fans
+        // Coral fans
         // Medical attention for the fans
         registerRecipe(9, new ItemStack(Material.DEAD_TUBE_CORAL_FAN), new ItemStack(Material.TUBE_CORAL_FAN, 1));
         registerRecipe(9, new ItemStack(Material.DEAD_BRAIN_CORAL_FAN), new ItemStack(Material.BRAIN_CORAL_FAN, 1));
@@ -88,42 +85,35 @@ public class GrowthChamberOcean extends AbstractElectricMachine {
         registerRecipe(12, new ItemStack(Material.FIRE_CORAL_FAN), new ItemStack(Material.FIRE_CORAL_FAN, 2));
         registerRecipe(12, new ItemStack(Material.HORN_CORAL_FAN), new ItemStack(Material.HORN_CORAL_FAN, 2));
 
-
     }
-   
+
 
     @Override
-	public List<ItemStack> getDisplayRecipes() {
-		List<ItemStack> display = new ArrayList<>(); 
+    public List<ItemStack> getDisplayRecipes() {
+        List<ItemStack> display = new ArrayList<>();
         for (MachineRecipe recipe : recipes) {
-           display.add(recipe.getInput()[0]);
-           if (recipe.getOutput().length > 1) {
-            display.add(recipe.getOutput()[1]);
-           } else {
-            display.add(recipe.getOutput()[0]);
-           }
+            display.add(recipe.getInput()[0]);
+            if (recipe.getOutput().length > 1) display.add(recipe.getOutput()[1]);
+            else display.add(recipe.getOutput()[0]);
         }
         return display;
-	}
+    }
 
-	@Override
-	protected void setupMenu(BlockMenuPreset preset) {
-		for (int slot : BACKGROUND_SLOTS) {
+    @Override
+    protected void setupMenu(BlockMenuPreset preset) {
+        for (int slot : BACKGROUND_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
-        for (int slot : INPUT_BORDER_SLOTS) {
+        for (int slot : INPUT_BORDER_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getInputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
-        for (int slot : OUTPUT_BORDER_SLOTS) {
+        for (int slot : OUTPUT_BORDER_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getOutputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
         preset.addItem(getProgressSlot(), new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE, " "), ChestMenuUtils.getEmptyClickHandler());
-        
-        for (int slot : getOutputSlots()) {
-            preset.addMenuClickHandler(slot,new ChestMenu.AdvancedMenuClickHandler() {
+
+        for (int slot : getOutputSlots())
+            preset.addMenuClickHandler(slot, new ChestMenu.AdvancedMenuClickHandler() {
                 @Override
                 public boolean onClick(InventoryClickEvent e, Player p, int slot, ItemStack cursor, ClickAction action) {
                     return cursor.getType().isAir();
@@ -134,23 +124,20 @@ public class GrowthChamberOcean extends AbstractElectricMachine {
                     return false;
                 }
             });
-        }
-	}
+    }
 
-	@Override
-	protected int[] getInputSlots() {
-		return INPUT_SLOTS;
-	}
+    @Override
+    protected int[] getInputSlots() {
+        return INPUT_SLOTS;
+    }
 
-	@Override
-	protected int[] getOutputSlots() {
-		return OUTPUT_SLOTS;
-	}
+    @Override
+    protected int[] getOutputSlots() {
+        return OUTPUT_SLOTS;
+    }
 
     @Override
     public ItemStack getProgressBar() {
         return PROGRESS_ITEM;
     }
-
-
 }
diff --git a/src/main/java/me/profelements/dynatech/items/electric/growthchambers/GrowthChamberOceanMK2.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/growthchambers/GrowthChamberOceanMK2.java
similarity index 82%
rename from src/main/java/me/profelements/dynatech/items/electric/growthchambers/GrowthChamberOceanMK2.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/growthchambers/GrowthChamberOceanMK2.java
index ad75295..52efc15 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/growthchambers/GrowthChamberOceanMK2.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/growthchambers/GrowthChamberOceanMK2.java
@@ -1,5 +1,6 @@
-package me.profelements.dynatech.items.electric.growthchambers;
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric.growthchambers;
 
+import id.universenetwork.sfa_loader.addons.dynatech.items.abstracts.AbstractElectricMachine;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -9,7 +10,6 @@ import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
 import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
-import me.profelements.dynatech.items.abstracts.AbstractElectricMachine;
 import org.bukkit.Material;
 import org.bukkit.entity.Player;
 import org.bukkit.event.inventory.InventoryClickEvent;
@@ -19,19 +19,17 @@ import java.util.ArrayList;
 import java.util.List;
 
 public class GrowthChamberOceanMK2 extends AbstractElectricMachine {
-   
-    private static final int[] INPUT_SLOTS = new int[] {1,2,3,4,5,6,7};
-    private static final int[] OUTPUT_SLOTS = new int[] {28,29,30,31,32,33,34,37,38,39,40,41,42,43,46,47,48,49,50,51,52};
-
-    private static final int[] INPUT_BORDER_SLOTS = new int[] {0,8,9,10,11,12,14,15,16,17};
-    private static final int[] OUTPUT_BORDER_SLOTS = new int[] {18,19,20,21,22,23,24,25,26,27,35,36,44,45,53};
-    private static final int[] BACKGROUND_SLOTS = new int[] {}; 
-    
+    private static final int[] INPUT_SLOTS = new int[]{1, 2, 3, 4, 5, 6, 7};
+    private static final int[] OUTPUT_SLOTS = new int[]{28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52};
+
+    private static final int[] INPUT_BORDER_SLOTS = new int[]{0, 8, 9, 10, 11, 12, 14, 15, 16, 17};
+    private static final int[] OUTPUT_BORDER_SLOTS = new int[]{18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 35, 36, 44, 45, 53};
+    private static final int[] BACKGROUND_SLOTS = new int[]{};
+
     private static final ItemStack PROGRESS_ITEM = new ItemStack(Material.CONDUIT);
-    
+
     public GrowthChamberOceanMK2(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe);
-
     }
 
     @Override
@@ -45,7 +43,7 @@ public class GrowthChamberOceanMK2 extends AbstractElectricMachine {
         registerRecipe(9, new ItemStack(Material.SEA_PICKLE), new ItemStack(Material.SEA_PICKLE, 9));
         registerRecipe(12, new ItemStack(Material.SEAGRASS), new ItemStack(Material.SEAGRASS, 12));
         registerRecipe(9, new ItemStack(Material.KELP), new ItemStack(Material.KELP, 9));
-    // Coral blocks
+        // Coral blocks
         // Brings dead coral blocks back to life!
         registerRecipe(9, new ItemStack(Material.DEAD_TUBE_CORAL_BLOCK), new ItemStack(Material.TUBE_CORAL_BLOCK, 3));
         registerRecipe(9, new ItemStack(Material.DEAD_BRAIN_CORAL_BLOCK), new ItemStack(Material.BRAIN_CORAL_BLOCK, 3));
@@ -59,7 +57,7 @@ public class GrowthChamberOceanMK2 extends AbstractElectricMachine {
         registerRecipe(12, new ItemStack(Material.FIRE_CORAL_BLOCK), new ItemStack(Material.FIRE_CORAL_BLOCK, 6));
         registerRecipe(12, new ItemStack(Material.HORN_CORAL_BLOCK), new ItemStack(Material.HORN_CORAL_BLOCK, 6));
 
-    // Coral
+        // Coral
         // Revive for coral
         registerRecipe(9, new ItemStack(Material.DEAD_TUBE_CORAL), new ItemStack(Material.TUBE_CORAL, 3));
         registerRecipe(9, new ItemStack(Material.DEAD_BRAIN_CORAL), new ItemStack(Material.BRAIN_CORAL, 3));
@@ -73,7 +71,7 @@ public class GrowthChamberOceanMK2 extends AbstractElectricMachine {
         registerRecipe(12, new ItemStack(Material.FIRE_CORAL), new ItemStack(Material.FIRE_CORAL, 6));
         registerRecipe(12, new ItemStack(Material.HORN_CORAL), new ItemStack(Material.HORN_CORAL, 6));
 
-    // Coral fans
+        // Coral fans
         // Medical attention for the fans
         registerRecipe(9, new ItemStack(Material.DEAD_TUBE_CORAL_FAN), new ItemStack(Material.TUBE_CORAL_FAN, 3));
         registerRecipe(9, new ItemStack(Material.DEAD_BRAIN_CORAL_FAN), new ItemStack(Material.BRAIN_CORAL_FAN, 3));
@@ -88,11 +86,12 @@ public class GrowthChamberOceanMK2 extends AbstractElectricMachine {
         registerRecipe(12, new ItemStack(Material.HORN_CORAL_FAN), new ItemStack(Material.HORN_CORAL_FAN, 6));
 
     }
-    
+
     @Override
     public int[] getInputSlots() {
         return INPUT_SLOTS;
     }
+
     @Override
     public int[] getOutputSlots() {
         return OUTPUT_SLOTS;
@@ -102,44 +101,38 @@ public class GrowthChamberOceanMK2 extends AbstractElectricMachine {
     public ItemStack getProgressBar() {
         return PROGRESS_ITEM;
     }
-    
+
     @Override
     public int getProgressSlot() {
         return 13;
     }
-    
+
     @Override
-	public List<ItemStack> getDisplayRecipes() {
-		List<ItemStack> display = new ArrayList<>(); 
+    public List<ItemStack> getDisplayRecipes() {
+        List<ItemStack> display = new ArrayList<>();
         for (MachineRecipe recipe : recipes) {
-           display.add(recipe.getInput()[0]);
-           if (recipe.getOutput().length > 1) {
-            display.add(recipe.getOutput()[1]);
-           } else {
-            display.add(recipe.getOutput()[0]);
-           }
+            display.add(recipe.getInput()[0]);
+            if (recipe.getOutput().length > 1) display.add(recipe.getOutput()[1]);
+            else display.add(recipe.getOutput()[0]);
         }
         return display;
-	}
+    }
 
-	@Override
-	protected void setupMenu(BlockMenuPreset preset) {
-		for (int slot : BACKGROUND_SLOTS) {
+    @Override
+    protected void setupMenu(BlockMenuPreset preset) {
+        for (int slot : BACKGROUND_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
-        for (int slot : INPUT_BORDER_SLOTS) {
+        for (int slot : INPUT_BORDER_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getInputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
-        for (int slot : OUTPUT_BORDER_SLOTS) {
+        for (int slot : OUTPUT_BORDER_SLOTS)
             preset.addItem(slot, ChestMenuUtils.getOutputSlotTexture(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
         preset.addItem(getProgressSlot(), new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE, " "), ChestMenuUtils.getEmptyClickHandler());
-        
-        for (int slot : getOutputSlots()) {
-            preset.addMenuClickHandler(slot,new ChestMenu.AdvancedMenuClickHandler() {
+
+        for (int slot : getOutputSlots())
+            preset.addMenuClickHandler(slot, new ChestMenu.AdvancedMenuClickHandler() {
                 @Override
                 public boolean onClick(InventoryClickEvent e, Player p, int slot, ItemStack cursor, ClickAction action) {
                     return cursor.getType().isAir();
@@ -150,9 +143,7 @@ public class GrowthChamberOceanMK2 extends AbstractElectricMachine {
                     return false;
                 }
             });
-        }
-	}
-
+    }
 
 
 }
diff --git a/src/main/java/me/profelements/dynatech/items/electric/machines/MineralizedApiary.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/machines/MineralizedApiary.java
similarity index 60%
rename from src/main/java/me/profelements/dynatech/items/electric/machines/MineralizedApiary.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/machines/MineralizedApiary.java
index e97176e..589e995 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/machines/MineralizedApiary.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/machines/MineralizedApiary.java
@@ -1,15 +1,6 @@
-package me.profelements.dynatech.items.electric.machines;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import org.bukkit.Material;
-import org.bukkit.block.Beehive;
-import org.bukkit.block.Block;
-import org.bukkit.block.BlockState;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.ItemMeta;
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric.machines;
 
+import id.universenetwork.sfa_loader.addons.dynatech.items.abstracts.AbstractElectricMachine;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -19,19 +10,24 @@ import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
 import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
-import me.profelements.dynatech.items.abstracts.AbstractElectricMachine;
+import org.bukkit.Material;
+import org.bukkit.block.Beehive;
+import org.bukkit.block.Block;
+import org.bukkit.block.BlockState;
+import org.bukkit.inventory.ItemStack;
+
+import java.util.ArrayList;
+import java.util.List;
 
 public class MineralizedApiary extends AbstractElectricMachine {
+    private static final int[] BACKGROUND_SLOTS = new int[]{0, 1, 2, 3, 9, 18, 27, 36, 37, 38, 39};
+    private static final int[] OUTPUT_BORDER_SLOTS = new int[]{4, 5, 6, 7, 8, 13, 17, 26, 31, 35, 40, 41, 42, 43, 44};
+    private static final int[] INPUT_BORDER_SLOTS = new int[]{10, 11, 12, 19, 21, 28, 29, 30};
 
-    private static final int[] BACKGROUND_SLOTS = new int[] { 0, 1, 2, 3, 9, 18, 27, 36, 37, 38, 39 };
-    private static final int[] OUTPUT_BORDER_SLOTS = new int[] { 4, 5, 6, 7, 8, 13, 17, 26, 31, 35, 40, 41, 42, 43, 44};
-    private static final int[] INPUT_BORDER_SLOTS = new int[] {10, 11, 12, 19, 21, 28, 29, 30}; 
-    
-    private static final int[] OUTPUT_SLOTS = new int[] { 14, 15, 16, 23, 24, 25, 32, 33, 34};
+    private static final int[] OUTPUT_SLOTS = new int[]{14, 15, 16, 23, 24, 25, 32, 33, 34};
 
     private static final ItemStack PROGRESS_ITEM = new ItemStack(Material.HONEYCOMB);
-    private ItemStack material = new ItemStack(Material.AIR);
-
+    private final ItemStack material;
 
 
     public MineralizedApiary(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, ItemStack material) {
@@ -39,54 +35,52 @@ public class MineralizedApiary extends AbstractElectricMachine {
 
         this.material = material;
     }
-        
+
 
     @Override
     public void postRegister() {
-        registerRecipe(60, new ItemStack[] { this.material }, new ItemStack[] { this.material });
+        registerRecipe(60, new ItemStack[]{this.material}, new ItemStack[]{this.material});
     }
-    
+
     @Override
     public void tick(BlockMenu menu, Block b) {
-        BlockState state = PaperLib.getBlockState(menu.getBlock(), false).getState(); 
+        BlockState state = PaperLib.getBlockState(menu.getBlock(), false).getState();
         if (state instanceof Beehive) {
             Beehive hive = (Beehive) state;
 
             int count = hive.getEntityCount();
-            
-            updateInfoStack(menu, count); 
+
+            updateInfoStack(menu, count);
         }
         super.tick(menu, b);
     }
 
     @Override
-	public MachineRecipe findNextRecipe(BlockMenu menu) {
-        
-        int maxedSlots = 0; 
+    public MachineRecipe findNextRecipe(BlockMenu menu) {
+
+        int maxedSlots = 0;
         for (int slots : getOutputSlots()) {
             ItemStack item = menu.getItemInSlot(slots);
-            if (item != null && item.getMaxStackSize() == item.getAmount()) {
-                maxedSlots += 1;
-            }
+            if (item != null && item.getMaxStackSize() == item.getAmount()) maxedSlots += 1;
         }
 
-        if (maxedSlots == getOutputSlots().length) { return null; }
+        if (maxedSlots == getOutputSlots().length) return null;
 
 
         MachineRecipe recipe = recipes.get(0);
-    
-        BlockState state = PaperLib.getBlockState(menu.getBlock(), false).getState(); 
+
+        BlockState state = PaperLib.getBlockState(menu.getBlock(), false).getState();
         if (state instanceof Beehive) {
             Beehive hive = (Beehive) state;
 
             int count = hive.getEntityCount();
-            
+
             if (count == 1) {
                 //30 second recipe if 1 bee; 
-                return new MachineRecipe(30, new ItemStack[] { this.material }, new ItemStack[] { this.material }); 
+                return new MachineRecipe(30, new ItemStack[]{this.material}, new ItemStack[]{this.material});
             } else if (count > 1) {
                 // Minus 10 from 30 seconds other wise;
-                return new MachineRecipe(30 - ((count -1) * 10), new ItemStack[] { this.material }, new ItemStack[] { this.material }); 
+                return new MachineRecipe(30 - ((count - 1) * 10), new ItemStack[]{this.material}, new ItemStack[]{this.material});
             }
         }
 
@@ -95,54 +89,52 @@ public class MineralizedApiary extends AbstractElectricMachine {
     }
 
 
-	@Override
-	public List<ItemStack> getDisplayRecipes() {
-	    List<ItemStack> display = new ArrayList<>();
+    @Override
+    public List<ItemStack> getDisplayRecipes() {
+        List<ItemStack> display = new ArrayList<>();
 
         display.add(this.material);
         display.add(this.material);
 
         return display;
-	}
+    }
 
-	@Override
-	protected ItemStack getProgressBar() {
-		return PROGRESS_ITEM;
-	}
+    @Override
+    protected ItemStack getProgressBar() {
+        return PROGRESS_ITEM;
+    }
 
-	@Override
-	protected void setupMenu(BlockMenuPreset preset) {
-	    preset.drawBackground(ChestMenuUtils.getBackground(), BACKGROUND_SLOTS);
+    @Override
+    protected void setupMenu(BlockMenuPreset preset) {
+        preset.drawBackground(ChestMenuUtils.getBackground(), BACKGROUND_SLOTS);
         preset.drawBackground(ChestMenuUtils.getInputSlotTexture(), INPUT_BORDER_SLOTS);
         preset.drawBackground(ChestMenuUtils.getOutputSlotTexture(), OUTPUT_BORDER_SLOTS);
 
         preset.addItem(getProgressSlot(), new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE, " "), ChestMenuUtils.getEmptyClickHandler());
-        preset.addItem(20, new CustomItemStack(Material.BEACON, "&fINFO", "&fBee Count: {}", "&fCurrent Speed: {}"), ChestMenuUtils.getEmptyClickHandler()); 
- 
+        preset.addItem(20, new CustomItemStack(Material.BEACON, "&fINFO", "&fBee Count: {}", "&fCurrent Speed: {}"), ChestMenuUtils.getEmptyClickHandler());
+
     }
 
-	@Override
-	protected int[] getInputSlots() {
-		return new int[] {};
-	}
+    @Override
+    protected int[] getInputSlots() {
+        return new int[]{};
+    }
+
+    @Override
+    protected int[] getOutputSlots() {
+        return OUTPUT_SLOTS;
+    }
 
-	@Override
-	protected int[] getOutputSlots() {
-		return OUTPUT_SLOTS;
-	}
-    
     @Override
     public boolean isSynchronized() {
         return true;
     }
 
     private void updateInfoStack(BlockMenu menu, int beeCount) {
-        int currSpeed = 100; 
-        if (beeCount > 0) {
-            currSpeed = 30 - ((beeCount - 1) * 10);
-        }
+        int currSpeed = 100;
+        if (beeCount > 0) currSpeed = 30 - ((beeCount - 1) * 10);
 
-        ItemStack infoStack = new CustomItemStack(Material.BEACON, "&fINFO", "&fBee Count: " + String.valueOf(beeCount), "&fCurrent Speed: " + String.valueOf(currSpeed) + "s");  
+        ItemStack infoStack = new CustomItemStack(Material.BEACON, "&fINFO", "&fBee Count: " + String.valueOf(beeCount), "&fCurrent Speed: " + String.valueOf(currSpeed) + "s");
         menu.replaceExistingItem(20, infoStack);
     }
 }
diff --git a/src/main/java/me/profelements/dynatech/items/electric/machines/Orechid.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/machines/Orechid.java
similarity index 77%
rename from src/main/java/me/profelements/dynatech/items/electric/machines/Orechid.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/machines/Orechid.java
index 1611b8f..2fed650 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/machines/Orechid.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/machines/Orechid.java
@@ -1,114 +1,109 @@
-package me.profelements.dynatech.items.electric.machines;
-
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.core.attributes.RecipeDisplayItem;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.collections.RandomizedSet;
-import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import me.profelements.dynatech.DynaTech;
-import me.profelements.dynatech.items.abstracts.AbstractElectricTicker;
-import org.bukkit.Material;
-import org.bukkit.block.Block;
-import org.bukkit.block.BlockFace;
-import org.bukkit.inventory.ItemStack;
-
-import java.util.ArrayList;
-import java.util.EnumMap;
-import java.util.List;
-import java.util.Map;
-import javax.annotation.Nonnull;
-
-//I feel like this can somehow be much better :O (review)
-
-public class Orechid extends AbstractElectricTicker implements RecipeDisplayItem {
-
-    private static final Map<Material, RandomizedSet<ItemStack>> oreMap = new EnumMap<>(Material.class);
-    //private static final List<Material> END_ORES = new ArrayList<>();
-
-    public Orechid(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(itemGroup, item, recipeType, recipe);
-        registerDefaultOres();
-    }
-    
-    @Override
-    protected boolean checkTickPreconditions(Block b) {
-        return true;
-    }
-
-    @Override
-    public void tick(Block b, SlimefunItem sfItem) {
-        if (DynaTech.getInstance().getTickInterval() % 10 == 0) {
-            for (BlockFace relative : BlockFace.values()) {
-                if (getCharge(b.getLocation()) < getEnergyConsumption()) {
-                    break;
-                }
-    
-                if (relative == BlockFace.UP || relative == BlockFace.DOWN) {
-                    continue;
-                }
-                
-                Block relBlock = b.getRelative(relative);
-    
-                if (oreMap.containsKey(relBlock.getType())) {
-                    ItemStack item = oreMap.get(relBlock.getType()).getRandom();
-                    SlimefunItem sfi = SlimefunItem.getByItem(item);
-
-                    DynaTech.runSync(() -> {
-                        relBlock.setType(item.getType());
-                        if (sfi != null) {
-                            BlockStorage.addBlockInfo(relBlock, "id", sfi.getId());
-                        }
-                    });
-
-                    removeCharge(b.getLocation(), getEnergyConsumption());
-                }
-            }        
-        }
-    }
-
-    public static void registerOre(@Nonnull Material from, @Nonnull Material result, float weight) {
-        oreMap.computeIfAbsent(from, k -> new RandomizedSet<>()).add(new ItemStack(result), weight);
-    }
-
-    /**
-     * For Slimefun items
-     */
-    public static void registerOre(@Nonnull Material from, @Nonnull SlimefunItemStack result, float weight) {
-        oreMap.computeIfAbsent(from, k -> new RandomizedSet<>()).add(result, weight);
-    }
-
-    private static void registerDefaultOres() {
-        registerOre(Material.STONE, Material.COAL_ORE, 3);
-        registerOre(Material.STONE, Material.IRON_ORE, 2);
-        registerOre(Material.STONE, Material.GOLD_ORE, 2);
-        registerOre(Material.STONE, Material.DIAMOND_ORE, 1);
-        registerOre(Material.STONE, Material.EMERALD_ORE, 1);
-        registerOre(Material.STONE, Material.REDSTONE_ORE, 3);
-        registerOre(Material.STONE, Material.LAPIS_ORE, 3);
-        registerOre(Material.STONE, Material.COPPER_ORE, 3);
-
-        registerOre(Material.NETHERRACK, Material.NETHER_QUARTZ_ORE, 3);
-        registerOre(Material.NETHERRACK, Material.NETHER_GOLD_ORE, 3);
-        registerOre(Material.NETHERRACK, Material.ANCIENT_DEBRIS, 1);
-        registerOre(Material.NETHERRACK, Material.BASALT, 5);
-        registerOre(Material.NETHERRACK, Material.BLACKSTONE, 5);
-    }
-
-    @Nonnull
-    @Override
-    public List<ItemStack> getDisplayRecipes() {
-        List<ItemStack> displayList = new ArrayList<>();
-
-        for (Material m : oreMap.keySet()) {
-            for (ItemStack item : oreMap.get(m)) {
-                displayList.add(new ItemStack(m));
-                displayList.add(item);
-            }
-        }
-
-        return displayList;
-    }
-    
-}
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric.machines;
+
+import id.universenetwork.sfa_loader.addons.dynatech.DynaTech;
+import id.universenetwork.sfa_loader.addons.dynatech.items.abstracts.AbstractElectricTicker;
+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.attributes.RecipeDisplayItem;
+import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.collections.RandomizedSet;
+import me.mrCookieSlime.Slimefun.api.BlockStorage;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.block.BlockFace;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+import java.util.ArrayList;
+import java.util.EnumMap;
+import java.util.List;
+import java.util.Map;
+
+//I feel like this can somehow be much better :O (review)
+
+public class Orechid extends AbstractElectricTicker implements RecipeDisplayItem {
+    private static final Map<Material, RandomizedSet<ItemStack>> oreMap = new EnumMap<>(Material.class);
+
+    public Orechid(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
+        registerDefaultOres();
+    }
+
+    @Override
+    protected boolean checkTickPreconditions(Block b) {
+        return true;
+    }
+
+    @Override
+    public void tick(Block b, SlimefunItem sfItem) {
+        if (DynaTech.getInstance().getTickInterval() % 10 == 0) {
+            for (BlockFace relative : BlockFace.values()) {
+                if (getCharge(b.getLocation()) < getEnergyConsumption()) break;
+
+                if (relative == BlockFace.UP || relative == BlockFace.DOWN) continue;
+
+                Block relBlock = b.getRelative(relative);
+
+                if (oreMap.containsKey(relBlock.getType())) {
+                    ItemStack item = oreMap.get(relBlock.getType()).getRandom();
+                    SlimefunItem sfi = SlimefunItem.getByItem(item);
+
+                    DynaTech.runSync(() -> {
+                        relBlock.setType(item.getType());
+                        if (sfi != null) BlockStorage.addBlockInfo(relBlock, "id", sfi.getId());
+                    });
+
+                    removeCharge(b.getLocation(), getEnergyConsumption());
+                }
+            }
+        }
+    }
+
+    public static void registerOre(@Nonnull Material from, @Nonnull Material result, float weight) {
+        oreMap.computeIfAbsent(from, k -> new RandomizedSet<>()).add(new ItemStack(result), weight);
+    }
+
+    /**
+     * For Slimefun items
+     */
+    public static void registerOre(@Nonnull Material from, @Nonnull SlimefunItemStack result, float weight) {
+        oreMap.computeIfAbsent(from, k -> new RandomizedSet<>()).add(result, weight);
+    }
+
+    private static void registerDefaultOres() {
+        registerOre(Material.STONE, Material.COAL_ORE, 3);
+        registerOre(Material.STONE, Material.IRON_ORE, 2);
+        registerOre(Material.STONE, Material.GOLD_ORE, 2);
+        registerOre(Material.STONE, Material.DIAMOND_ORE, 1);
+        registerOre(Material.STONE, Material.EMERALD_ORE, 1);
+        registerOre(Material.STONE, Material.REDSTONE_ORE, 3);
+        registerOre(Material.STONE, Material.LAPIS_ORE, 3);
+        if (Slimefun.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_17))
+            registerOre(Material.STONE, Material.COPPER_ORE, 3);
+
+        registerOre(Material.NETHERRACK, Material.NETHER_QUARTZ_ORE, 3);
+        registerOre(Material.NETHERRACK, Material.NETHER_GOLD_ORE, 3);
+        if (Slimefun.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_16)) {
+            registerOre(Material.NETHERRACK, Material.ANCIENT_DEBRIS, 1);
+            registerOre(Material.NETHERRACK, Material.BASALT, 5);
+            registerOre(Material.NETHERRACK, Material.BLACKSTONE, 5);
+        }
+    }
+
+    @Nonnull
+    @Override
+    public List<ItemStack> getDisplayRecipes() {
+        List<ItemStack> displayList = new ArrayList<>();
+
+        for (Material m : oreMap.keySet())
+            for (ItemStack item : oreMap.get(m)) {
+                displayList.add(new ItemStack(m));
+                displayList.add(item);
+            }
+
+        return displayList;
+    }
+}
diff --git a/src/main/java/me/profelements/dynatech/items/electric/transfer/Tesseract.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/transfer/Tesseract.java
similarity index 77%
rename from src/main/java/me/profelements/dynatech/items/electric/transfer/Tesseract.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/transfer/Tesseract.java
index 4668578..0c483cd 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/transfer/Tesseract.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/transfer/Tesseract.java
@@ -1,5 +1,7 @@
-package me.profelements.dynatech.items.electric.transfer;
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric.transfer;
 
+import id.universenetwork.sfa_loader.addons.dynatech.DynaTechItems;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemHandler;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
@@ -20,14 +22,8 @@ import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
 import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
 import me.mrCookieSlime.Slimefun.api.item_transport.ItemTransportFlow;
-import me.profelements.dynatech.DynaTech;
-import me.profelements.dynatech.DynaTechItems;
 import net.md_5.bungee.api.ChatColor;
-import org.bukkit.Bukkit;
-import org.bukkit.Chunk;
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
+import org.bukkit.*;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Player;
 import org.bukkit.event.block.BlockBreakEvent;
@@ -39,10 +35,10 @@ import java.util.List;
 import java.util.concurrent.CompletableFuture;
 
 public class Tesseract extends SlimefunItem implements EnergyNetProvider {
-    public static final NamespacedKey WIRELESS_LOCATION_KEY = new NamespacedKey(DynaTech.getInstance(), "tesseract-pair-location");
-	private final int capacity;
+    public static final NamespacedKey WIRELESS_LOCATION_KEY = AbstractAddon.createKey("tesseract-pair-location");
+    private final int capacity;
     private final int energyRate;
-            
+
     public Tesseract(ItemGroup itemGroup, int capacity, int energyRate, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe);
 
@@ -50,7 +46,7 @@ public class Tesseract extends SlimefunItem implements EnergyNetProvider {
         this.energyRate = energyRate;
 
         addItemHandler(onBlockBreak());
-        
+
         new BlockMenuPreset("TESSERACT", "Tesseract") {
 
             @Override
@@ -59,85 +55,71 @@ public class Tesseract extends SlimefunItem implements EnergyNetProvider {
             }
 
             @Override
-            public boolean canOpen(Block b, Player p) { 
+            public boolean canOpen(Block b, Player p) {
                 return p.hasPermission("slimefun.inventory.bypass") || Slimefun.getProtectionManager().hasPermission(p, b.getLocation(), Interaction.INTERACT_BLOCK);
-
-                
             }
 
-            @Override 
+            @Override
             public int[] getSlotsAccessedByItemTransport(ItemTransportFlow flow) {
                 return new int[0];
             }
 
             @Override
             public int[] getSlotsAccessedByItemTransport(DirtyChestMenu menu, ItemTransportFlow flow, ItemStack item) {
-                if (flow == ItemTransportFlow.INSERT) {
-                    return getInputSlots();
-                } else {
-                    return getOutputSlots();
-                } 
+                if (flow == ItemTransportFlow.INSERT) return getInputSlots();
+                else return getOutputSlots();
             }
         };
     }
 
     @Override
     public void preRegister() {
-        addItemHandler(new BlockTicker(){
+        addItemHandler(new BlockTicker() {
 
-			@Override
+            @Override
             public boolean isSynchronized() {
-				return false;
-			}
+                return false;
+            }
 
-			@Override
-			public void tick(Block block, SlimefunItem sfItem, Config data) {
+            @Override
+            public void tick(Block block, SlimefunItem sfItem, Config data) {
                 Tesseract.this.tick(block);
-				
-			}
+            }
 
-             
-       });
+        });
     }
 
     private ItemHandler onBlockBreak() {
         return new BlockBreakHandler(false, false) {
 
-			@Override
-			public void onPlayerBreak(BlockBreakEvent event, ItemStack block, List<ItemStack> drops) {
+            @Override
+            public void onPlayerBreak(BlockBreakEvent event, ItemStack block, List<ItemStack> drops) {
                 BlockMenu inv = BlockStorage.getInventory(event.getBlock());
-                
+
                 if (inv != null) {
                     inv.dropItems(event.getBlock().getLocation(), getInputSlots());
                     inv.dropItems(event.getBlock().getLocation(), getOutputSlots());
-    
                 }
 
 
-				BlockStorage.clearBlockInfo(event.getBlock().getLocation());
-			}
-            
+                BlockStorage.clearBlockInfo(event.getBlock().getLocation());
+            }
         };
     }
 
     protected void tick(Block b) {
         String wirelessLocation = BlockStorage.getLocationInfo(b.getLocation(), "tesseract-pair-location");
-        if (wirelessLocation != null) {
-            sendItemsAndCharge(b, wirelessLocation);
-            
-        }
+        if (wirelessLocation != null) sendItemsAndCharge(b, wirelessLocation);
     }
 
     private void sendItemsAndCharge(Block b, String wirelessLocation) {
         Location tesseractPair = StringToLocation(wirelessLocation);
-    
+
         // Note: You should probably also see if the Future from getChunkAtAsync is finished here.
         // you don't really want to possibly trigger the chunk to load in another thread twice.
         if (!tesseractPair.getWorld().isChunkLoaded(tesseractPair.getBlockX() >> 4, tesseractPair.getBlockZ() >> 4)) {
             CompletableFuture<Chunk> chunkLoad = PaperLib.getChunkAtAsync(tesseractPair);
-            if (!chunkLoad.isDone()) {
-                return;
-            } 
+            if (!chunkLoad.isDone()) return;
         }
 
         if (tesseractPair != null && BlockStorage.checkID(tesseractPair) != null && BlockStorage.checkID(tesseractPair).equals(DynaTechItems.TESSERACT.getItemId())) {
@@ -145,41 +127,37 @@ public class Tesseract extends SlimefunItem implements EnergyNetProvider {
             BlockMenu output = BlockStorage.getInventory(b);
 
             updateKnowledgePane(output, getCharge(b.getLocation()));
-            
+
             for (int i : getInputSlots()) {
                 ItemStack itemStack = input.getItemInSlot(i);
-                
-                if (itemStack != null && itemStack.getType() != Material.AIR && InvUtils.fitAll(output.toInventory(), new ItemStack[] {itemStack}, getOutputSlots())) {
+
+                if (itemStack != null && itemStack.getType() != Material.AIR && InvUtils.fitAll(output.toInventory(), new ItemStack[]{itemStack}, getOutputSlots())) {
                     output.pushItem(itemStack, getOutputSlots());
                     itemStack.setAmount(0);
                 }
             }
-            
         }
-
     }
 
     @Override
     public int getGeneratedOutput(Location l, Config data) {
         String tesseractPairLocation = BlockStorage.getLocationInfo(l, "tesseract-pair-location");
-    
+
         int chargedNeeded = getCapacity() - getCharge(l);
-    
-        if(chargedNeeded != 0 && tesseractPairLocation != null) {
+
+        if (chargedNeeded != 0 && tesseractPairLocation != null) {
             Location tesseractPair = StringToLocation(tesseractPairLocation);
-    
+
             // Note: You should probably also see if the Future from getChunkAtAsync is finished here.
             // you don't really want to possibly trigger the chunk to load in another thread twice.
             if (!tesseractPair.getWorld().isChunkLoaded(tesseractPair.getBlockX() >> 4, tesseractPair.getBlockZ() >> 4)) {
                 CompletableFuture<Chunk> chunkLoad = PaperLib.getChunkAtAsync(tesseractPair);
-                if (!chunkLoad.isDone()) {
-                    return 0;
-                } 
+                if (!chunkLoad.isDone()) return 0;
             }
-    
+
             if (tesseractPair != null && BlockStorage.checkID(tesseractPair) != null && BlockStorage.checkID(tesseractPair).equals(DynaTechItems.TESSERACT.getItemId())) {
                 int BankCharge = getCharge(tesseractPair);
-                
+
                 if (BankCharge > chargedNeeded && BankCharge != 0) {
                     if (chargedNeeded > getEnergyRate()) {
                         removeCharge(tesseractPair, getEnergyRate());
@@ -195,12 +173,11 @@ public class Tesseract extends SlimefunItem implements EnergyNetProvider {
                     removeCharge(tesseractPair, BankCharge);
                     return BankCharge;
                 }
-                
             }
-    
         }
         return 0;
     }
+
     private void updateKnowledgePane(BlockMenu menu, int currentCharge) {
         ItemStack knowledgePane = menu.getItemInSlot(4);
         ItemMeta im = knowledgePane.getItemMeta();
@@ -208,8 +185,8 @@ public class Tesseract extends SlimefunItem implements EnergyNetProvider {
 
         lore.clear();
         lore.add(" ");
-        lore.add(ChatColor.WHITE +"Current Power: " + currentCharge);
-        lore.add(ChatColor.WHITE +"Current Status: " + ChatColor.RED + "CONNECTED");
+        lore.add(ChatColor.WHITE + "Current Power: " + currentCharge);
+        lore.add(ChatColor.WHITE + "Current Status: " + ChatColor.RED + "CONNECTED");
         knowledgePane.setType(Material.RED_STAINED_GLASS_PANE);
 
         im.setLore(lore);
@@ -224,24 +201,25 @@ public class Tesseract extends SlimefunItem implements EnergyNetProvider {
         preset.addItem(4, new CustomItemStack(Material.PURPLE_STAINED_GLASS_PANE, "&fKnowledge Pane", "&fCurrent Power: Unknown", "&fCurrent Status: NOT CONNECTED"), ChestMenuUtils.getEmptyClickHandler());
     }
 
-    
+
     public int[] getBorder() {
-        return new int[] {13,22,31,49,40};
+        return new int[]{13, 22, 31, 49, 40};
     }
 
     public int[] getInputBorder() {
-        return new int[] {0,1,2,3,45,46,47,48};
+        return new int[]{0, 1, 2, 3, 45, 46, 47, 48};
     }
 
     public int[] getOutputBorder() {
-        return new int[] {5,6,7,8,50,51,52,53};
+        return new int[]{5, 6, 7, 8, 50, 51, 52, 53};
     }
+
     public int[] getInputSlots() {
-        return new int[] {9,10,11,12,18,19,20,21,27,28,29,30,36,37,38,39};  
+        return new int[]{9, 10, 11, 12, 18, 19, 20, 21, 27, 28, 29, 30, 36, 37, 38, 39};
     }
 
     public int[] getOutputSlots() {
-        return new int[] {14,15,16,17,23,24,25,26,32,33,34,35,41,42,43,44};
+        return new int[]{14, 15, 16, 17, 23, 24, 25, 26, 32, 33, 34, 35, 41, 42, 43, 44};
     }
 
     @Override
@@ -256,24 +234,20 @@ public class Tesseract extends SlimefunItem implements EnergyNetProvider {
     public static void setItemLore(ItemStack item, Location l) {
         ItemMeta im = item.getItemMeta();
         List<String> lore = im.getLore();
-        for (int i = 0; i < lore.size(); i++) {
-            if (lore.get(i).contains("Location: ")) {
-                lore.remove(i);
-            } 
-        }
+        for (int i = 0; i < lore.size(); i++) if (lore.get(i).contains("Location: ")) lore.remove(i);
 
         lore.add(ChatColor.WHITE + "Location: " + l.getWorld().getName() + " " + l.getBlockX() + " " + l.getBlockY() + " " + l.getBlockZ());
 
         im.setLore(lore);
         item.setItemMeta(im);
-        
+
     }
 
     public static String LocationToString(Location l) {
-        return l.getWorld().getName()+";"+l.getBlockX()+";"+l.getBlockY()+";"+l.getBlockZ();
+        return l.getWorld().getName() + ";" + l.getBlockX() + ";" + l.getBlockY() + ";" + l.getBlockZ();
     }
 
-    public static final Location StringToLocation(String locString) {
+    public static Location StringToLocation(String locString) {
         String[] locComponents = locString.split(";");
         return new Location(Bukkit.getWorld(locComponents[0]), Double.parseDouble(locComponents[1]), Double.parseDouble(locComponents[2]), Double.parseDouble(locComponents[3]));
     }
diff --git a/src/main/java/me/profelements/dynatech/items/electric/transfer/WirelessEnergyBank.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/transfer/WirelessEnergyBank.java
similarity index 92%
rename from src/main/java/me/profelements/dynatech/items/electric/transfer/WirelessEnergyBank.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/transfer/WirelessEnergyBank.java
index 241830b..b2748fe 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/transfer/WirelessEnergyBank.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/transfer/WirelessEnergyBank.java
@@ -1,36 +1,34 @@
-package me.profelements.dynatech.items.electric.transfer;
-
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetComponent;
-import io.github.thebusybiscuit.slimefun4.core.networks.energy.EnergyNetComponentType;
-import org.bukkit.inventory.ItemStack;
-
-import javax.annotation.Nonnull;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-public class WirelessEnergyBank extends SlimefunItem implements EnergyNetComponent {
-
-    private final int capacity;
-
-    @ParametersAreNonnullByDefault
-    public WirelessEnergyBank(ItemGroup itemGroup, int capacity, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(itemGroup, item, recipeType, recipe);
-
-        this.capacity = capacity;
-    }
-
-    @Override
-    @Nonnull
-    public EnergyNetComponentType getEnergyComponentType() {
-        return EnergyNetComponentType.CAPACITOR;
-    }
-
-    @Override
-    public int getCapacity() {
-        return capacity;
-    }
-    
-}
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric.transfer;
+
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetComponent;
+import io.github.thebusybiscuit.slimefun4.core.networks.energy.EnergyNetComponentType;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+import javax.annotation.ParametersAreNonnullByDefault;
+
+public class WirelessEnergyBank extends SlimefunItem implements EnergyNetComponent {
+    private final int capacity;
+
+    @ParametersAreNonnullByDefault
+    public WirelessEnergyBank(ItemGroup itemGroup, int capacity, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
+
+        this.capacity = capacity;
+    }
+
+    @Override
+    @Nonnull
+    public EnergyNetComponentType getEnergyComponentType() {
+        return EnergyNetComponentType.CAPACITOR;
+    }
+
+    @Override
+    public int getCapacity() {
+        return capacity;
+    }
+}
diff --git a/src/main/java/me/profelements/dynatech/items/electric/transfer/WirelessEnergyPoint.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/transfer/WirelessEnergyPoint.java
similarity index 63%
rename from src/main/java/me/profelements/dynatech/items/electric/transfer/WirelessEnergyPoint.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/transfer/WirelessEnergyPoint.java
index ebf09b3..f4d6347 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/transfer/WirelessEnergyPoint.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/transfer/WirelessEnergyPoint.java
@@ -1,182 +1,164 @@
-package me.profelements.dynatech.items.electric.transfer;
-
-import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemHandler;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetProvider;
-import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;
-import io.github.thebusybiscuit.slimefun4.core.handlers.BlockPlaceHandler;
-import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
-import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.data.persistent.PersistentDataAPI;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
-import io.github.thebusybiscuit.slimefun4.libraries.paperlib.PaperLib;
-import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
-import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import me.profelements.dynatech.DynaTech;
-import me.profelements.dynatech.DynaTechItems;
-import net.md_5.bungee.api.ChatColor;
-import org.bukkit.Bukkit;
-import org.bukkit.Chunk;
-import org.bukkit.Location;
-import org.bukkit.NamespacedKey;
-import org.bukkit.block.Block;
-import org.bukkit.event.block.BlockBreakEvent;
-import org.bukkit.event.block.BlockPlaceEvent;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.ItemMeta;
-
-import javax.annotation.ParametersAreNonnullByDefault;
-import java.util.List;
-import java.util.Optional;
-import java.util.concurrent.CompletableFuture;
-
-public class WirelessEnergyPoint extends SlimefunItem implements EnergyNetProvider {
-
-    private static final NamespacedKey WIRELESS_LOCATION_KEY = new NamespacedKey(DynaTech.getInstance(), "wireless-location");
-    private final int capacity;
-    private final int energyRate;
-
-    @ParametersAreNonnullByDefault
-    public WirelessEnergyPoint(ItemGroup itemGroup, int capacity, int energyRate, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(itemGroup, item, recipeType, recipe);
-
-        this.capacity = capacity;
-        this.energyRate = energyRate;
-
-        addItemHandler(onRightClick(), onBlockPlace(), onBlockBreak());
-    }
-
-    @Override
-    public int getGeneratedOutput(Location l, Config data) {
-        String wirelessBankLocation = BlockStorage.getLocationInfo(l, "wireless-location");
-    
-        int chargedNeeded = getCapacity() - getCharge(l);
-    
-        if(chargedNeeded != 0 && wirelessBankLocation != null) {
-            Location wirelessEnergyBank = StringToLocation(wirelessBankLocation);
-    
-            // Note: You should probably also see if the Future from getChunkAtAsync is finished here.
-            // you don't really want to possibly trigger the chunk to load in another thread twice.
-            if (!wirelessEnergyBank.getWorld().isChunkLoaded(wirelessEnergyBank.getBlockX() >> 4, wirelessEnergyBank.getBlockZ() >> 4)) {
-                CompletableFuture<Chunk> chunkLoad = PaperLib.getChunkAtAsync(wirelessEnergyBank);
-                if (!chunkLoad.isDone()) {
-                    return 0;
-                } 
-            }
-    
-            if (wirelessEnergyBank != null && BlockStorage.checkID(wirelessEnergyBank) != null && BlockStorage.checkID(wirelessEnergyBank).equals(DynaTechItems.WIRELESS_ENERGY_BANK.getItemId())) {
-                int BankCharge = getCharge(wirelessEnergyBank);
-                
-                if (BankCharge > chargedNeeded) {
-                    if (chargedNeeded > getEnergyRate()) {
-                        removeCharge(wirelessEnergyBank, getEnergyRate());
-                        return getEnergyRate();
-                    }
-                    removeCharge(wirelessEnergyBank, chargedNeeded);
-                    return chargedNeeded;
-                }
-                
-            }
-    
-        }
-        return 0;
-    }
-
-    private ItemHandler onRightClick() {
-        return new ItemUseHandler() {
-
-            @Override
-            public void onRightClick(PlayerRightClickEvent event) {
-
-                Optional<Block> blockClicked = event.getClickedBlock();           
-                Optional<SlimefunItem> sfBlockClicked = event.getSlimefunBlock();
-                if (blockClicked.isPresent() && sfBlockClicked.isPresent()) {
-                    Location blockLoc = blockClicked.get().getLocation();
-                    SlimefunItem sfBlock = sfBlockClicked.get();
-                    ItemStack item = event.getItem();
-
-
-                    if (sfBlock != null && Slimefun.getProtectionManager().hasPermission(event.getPlayer(), blockLoc, Interaction.INTERACT_BLOCK) && sfBlock.getId().equals(DynaTechItems.WIRELESS_ENERGY_BANK.getItemId()) && blockLoc != null) {
-                        event.cancel();
-                        ItemMeta im = item.getItemMeta();
-                        String locationString = LocationToString(blockLoc);
-                        
-                        PersistentDataAPI.setString(im, WIRELESS_LOCATION_KEY, locationString);
-                        item.setItemMeta(im);
-                        setItemLore(item, blockLoc);
-                    }
-                }   
-            } 
-        };
-    }
-
-    private ItemHandler onBlockPlace() {
-        return new BlockPlaceHandler(false) {
-            @Override
-            public void onPlayerPlace(BlockPlaceEvent event) {
-                
-                
-                Location blockLoc = event.getBlockPlaced().getLocation();
-                ItemStack item = event.getItemInHand();
-                String locationString = PersistentDataAPI.getString(item.getItemMeta(), WIRELESS_LOCATION_KEY);
-                
-                if (item != null && item.getType() == DynaTechItems.WIRELESS_ENERGY_POINT.getType() && item.hasItemMeta() && locationString != null) {
-                    BlockStorage.addBlockInfo(blockLoc, "wireless-location", locationString);
-                    
-                }   
-            }
-            
-        };
-    }
-
-    private ItemHandler onBlockBreak() {
-        return new BlockBreakHandler(false, false) {
-
-			@Override
-			public void onPlayerBreak(BlockBreakEvent event, ItemStack block, List<ItemStack> drops) {
-				BlockStorage.clearBlockInfo(event.getBlock().getLocation());
-			}
-            
-        };
-    }
-
-    @Override
-    public int getCapacity() {
-        return capacity;
-    }
-
-    public int getEnergyRate() {
-        return energyRate;
-    }
-
-    private void setItemLore(ItemStack item, Location l) {
-        ItemMeta im = item.getItemMeta();
-        List<String> lore = im.getLore();
-        for (int i = 0; i < lore.size(); i++) {
-            if (lore.get(i).contains("Location: ")) {
-                lore.remove(i);
-            } 
-        }
-
-        lore.add(ChatColor.WHITE + "Location: " + l.getWorld().getName() + " " + l.getBlockX() + " " + l.getBlockY() + " " + l.getBlockZ());
-
-        im.setLore(lore);
-        item.setItemMeta(im);
-        
-    }
-
-
-    private String LocationToString(Location l) {
-        return l.getWorld().getName()+":"+l.getBlockX()+":"+l.getBlockY()+":"+l.getBlockZ();
-    }
-
-    private Location StringToLocation (String str) {
-            String[] locComponents = str.split(":");
-            return new Location(Bukkit.getWorld(locComponents[0]), Double.parseDouble(locComponents[1]), Double.parseDouble(locComponents[2]), Double.parseDouble(locComponents[3]));
-    }
-
-}
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric.transfer;
+
+import id.universenetwork.sfa_loader.addons.dynatech.DynaTechItems;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemHandler;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetProvider;
+import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;
+import io.github.thebusybiscuit.slimefun4.core.handlers.BlockPlaceHandler;
+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
+import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.data.persistent.PersistentDataAPI;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
+import io.github.thebusybiscuit.slimefun4.libraries.paperlib.PaperLib;
+import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
+import me.mrCookieSlime.Slimefun.api.BlockStorage;
+import net.md_5.bungee.api.ChatColor;
+import org.bukkit.Bukkit;
+import org.bukkit.Chunk;
+import org.bukkit.Location;
+import org.bukkit.NamespacedKey;
+import org.bukkit.block.Block;
+import org.bukkit.event.block.BlockBreakEvent;
+import org.bukkit.event.block.BlockPlaceEvent;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.meta.ItemMeta;
+
+import javax.annotation.ParametersAreNonnullByDefault;
+import java.util.List;
+import java.util.Optional;
+import java.util.concurrent.CompletableFuture;
+
+public class WirelessEnergyPoint extends SlimefunItem implements EnergyNetProvider {
+    private static final NamespacedKey WIRELESS_LOCATION_KEY = AbstractAddon.createKey("wireless-location");
+    private final int capacity;
+    private final int energyRate;
+
+    @ParametersAreNonnullByDefault
+    public WirelessEnergyPoint(ItemGroup itemGroup, int capacity, int energyRate, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
+
+        this.capacity = capacity;
+        this.energyRate = energyRate;
+
+        addItemHandler(onRightClick(), onBlockPlace(), onBlockBreak());
+    }
+
+    @Override
+    public int getGeneratedOutput(Location l, Config data) {
+        String wirelessBankLocation = BlockStorage.getLocationInfo(l, "wireless-location");
+
+        int chargedNeeded = getCapacity() - getCharge(l);
+
+        if (chargedNeeded != 0 && wirelessBankLocation != null) {
+            Location wirelessEnergyBank = StringToLocation(wirelessBankLocation);
+
+            // Note: You should probably also see if the Future from getChunkAtAsync is finished here.
+            // you don't really want to possibly trigger the chunk to load in another thread twice.
+            if (!wirelessEnergyBank.getWorld().isChunkLoaded(wirelessEnergyBank.getBlockX() >> 4, wirelessEnergyBank.getBlockZ() >> 4)) {
+                CompletableFuture<Chunk> chunkLoad = PaperLib.getChunkAtAsync(wirelessEnergyBank);
+                if (!chunkLoad.isDone()) return 0;
+            }
+
+            if (wirelessEnergyBank != null && BlockStorage.checkID(wirelessEnergyBank) != null && BlockStorage.checkID(wirelessEnergyBank).equals(DynaTechItems.WIRELESS_ENERGY_BANK.getItemId())) {
+                int BankCharge = getCharge(wirelessEnergyBank);
+
+                if (BankCharge > chargedNeeded) {
+                    if (chargedNeeded > getEnergyRate()) {
+                        removeCharge(wirelessEnergyBank, getEnergyRate());
+                        return getEnergyRate();
+                    }
+                    removeCharge(wirelessEnergyBank, chargedNeeded);
+                    return chargedNeeded;
+                }
+            }
+        }
+        return 0;
+    }
+
+    private ItemHandler onRightClick() {
+        return (ItemUseHandler) event -> {
+
+            Optional<Block> blockClicked = event.getClickedBlock();
+            Optional<SlimefunItem> sfBlockClicked = event.getSlimefunBlock();
+            if (blockClicked.isPresent() && sfBlockClicked.isPresent()) {
+                Location blockLoc = blockClicked.get().getLocation();
+                SlimefunItem sfBlock = sfBlockClicked.get();
+                ItemStack item = event.getItem();
+
+
+                if (sfBlock != null && Slimefun.getProtectionManager().hasPermission(event.getPlayer(), blockLoc, Interaction.INTERACT_BLOCK) && sfBlock.getId().equals(DynaTechItems.WIRELESS_ENERGY_BANK.getItemId()) && blockLoc != null) {
+                    event.cancel();
+                    ItemMeta im = item.getItemMeta();
+                    String locationString = LocationToString(blockLoc);
+
+                    PersistentDataAPI.setString(im, WIRELESS_LOCATION_KEY, locationString);
+                    item.setItemMeta(im);
+                    setItemLore(item, blockLoc);
+                }
+            }
+        };
+    }
+
+    private ItemHandler onBlockPlace() {
+        return new BlockPlaceHandler(false) {
+            @Override
+            public void onPlayerPlace(BlockPlaceEvent event) {
+
+
+                Location blockLoc = event.getBlockPlaced().getLocation();
+                ItemStack item = event.getItemInHand();
+                String locationString = PersistentDataAPI.getString(item.getItemMeta(), WIRELESS_LOCATION_KEY);
+
+                if (item != null && item.getType() == DynaTechItems.WIRELESS_ENERGY_POINT.getType() && item.hasItemMeta() && locationString != null)
+                    BlockStorage.addBlockInfo(blockLoc, "wireless-location", locationString);
+            }
+        };
+    }
+
+    private ItemHandler onBlockBreak() {
+        return new BlockBreakHandler(false, false) {
+
+            @Override
+            public void onPlayerBreak(BlockBreakEvent event, ItemStack block, List<ItemStack> drops) {
+                BlockStorage.clearBlockInfo(event.getBlock().getLocation());
+            }
+
+        };
+    }
+
+    @Override
+    public int getCapacity() {
+        return capacity;
+    }
+
+    public int getEnergyRate() {
+        return energyRate;
+    }
+
+    private void setItemLore(ItemStack item, Location l) {
+        ItemMeta im = item.getItemMeta();
+        List<String> lore = im.getLore();
+        for (int i = 0; i < lore.size(); i++) if (lore.get(i).contains("Location: ")) lore.remove(i);
+
+        lore.add(ChatColor.WHITE + "Location: " + l.getWorld().getName() + " " + l.getBlockX() + " " + l.getBlockY() + " " + l.getBlockZ());
+
+        im.setLore(lore);
+        item.setItemMeta(im);
+
+    }
+
+
+    private String LocationToString(Location l) {
+        return l.getWorld().getName() + ":" + l.getBlockX() + ":" + l.getBlockY() + ":" + l.getBlockZ();
+    }
+
+    private Location StringToLocation(String str) {
+        String[] locComponents = str.split(":");
+        return new Location(Bukkit.getWorld(locComponents[0]), Double.parseDouble(locComponents[1]), Double.parseDouble(locComponents[2]), Double.parseDouble(locComponents[3]));
+    }
+}
diff --git a/src/main/java/me/profelements/dynatech/items/electric/transfer/WirelessItemInput.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/transfer/WirelessItemInput.java
similarity index 73%
rename from src/main/java/me/profelements/dynatech/items/electric/transfer/WirelessItemInput.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/transfer/WirelessItemInput.java
index 980265e..f7292a3 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/transfer/WirelessItemInput.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/transfer/WirelessItemInput.java
@@ -1,166 +1,157 @@
-package me.profelements.dynatech.items.electric.transfer;
-
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemHandler;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetComponent;
-import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;
-import io.github.thebusybiscuit.slimefun4.core.networks.energy.EnergyNetComponentType;
-import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
-import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
-import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
-import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
-import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
-import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
-import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
-import me.mrCookieSlime.Slimefun.api.item_transport.ItemTransportFlow;
-import org.bukkit.ChatColor;
-import org.bukkit.Material;
-import org.bukkit.block.Block;
-import org.bukkit.entity.Player;
-import org.bukkit.event.block.BlockBreakEvent;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.ItemMeta;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class WirelessItemInput extends SlimefunItem implements EnergyNetComponent {
-
-      private final int capacity;
-            
-    public WirelessItemInput(ItemGroup itemGroup, int capacity, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(itemGroup, item, recipeType, recipe);
-
-        this.capacity = capacity;
-
-        addItemHandler(onBlockBreak());
-        
-        new BlockMenuPreset("WIRELESS_ITEM_INPUT", "Wireless Item Input") {
-
-            @Override
-            public void init() {
-                constructMenu(this);
-            }
-
-            @Override
-            public boolean canOpen(Block b, Player p) { 
-                return p.hasPermission("slimefun.inventory.bypass") || Slimefun.getProtectionManager().hasPermission(p, b.getLocation(), Interaction.INTERACT_BLOCK);
-
-                
-            }
-
-            @Override 
-            public int[] getSlotsAccessedByItemTransport(ItemTransportFlow flow) {
-                return new int[0];
-            }
-
-            @Override
-            public int[] getSlotsAccessedByItemTransport(DirtyChestMenu menu, ItemTransportFlow flow, ItemStack item) {
-                if (flow == ItemTransportFlow.INSERT) {
-                    return getInputSlots();
-                } else {
-                    return getOutputSlots();
-                } 
-            }
-        };
-    }
-
-    @Override
-    public void preRegister() {
-        addItemHandler(new BlockTicker(){
-
-			@Override
-			public boolean isSynchronized() {
-				return false;
-			}
-
-			@Override
-			public void tick(Block block, SlimefunItem sfItem, Config data) {
-                WirelessItemInput.this.tick(block);
-				
-			}
-
-             
-       });
-    }
-
-    private ItemHandler onBlockBreak() {
-        return new BlockBreakHandler(false, false) {
-
-			@Override
-			public void onPlayerBreak(BlockBreakEvent event, ItemStack block, List<ItemStack> drops) {
-                BlockMenu inv = BlockStorage.getInventory(event.getBlock());
-                
-                if (inv != null) {
-                    inv.dropItems(event.getBlock().getLocation(), getInputSlots());
-                    inv.dropItems(event.getBlock().getLocation(), getOutputSlots());
-    
-                }
-
-
-				BlockStorage.clearBlockInfo(event.getBlock().getLocation());
-			}
-            
-        };
-    }
-    protected void tick(Block b) {
-            BlockMenu menu = BlockStorage.getInventory(b);
-            updateKnowledgePane(menu, getCharge(b.getLocation()));
-    }
-
-    private void updateKnowledgePane(BlockMenu menu, int currentCharge) {
-        ItemStack knowledgePane = menu.getItemInSlot(4);
-        ItemMeta im = knowledgePane.getItemMeta();
-        List<String> lore = im.hasLore() ? im.getLore() : new ArrayList<String>();
-
-        lore.clear();
-        lore.add(" ");
-        lore.add(ChatColor.WHITE +"Current Power: " + currentCharge);
-        lore.add(ChatColor.WHITE +"Current Status: Interesting.");
-
-        im.setLore(lore);
-        knowledgePane.setItemMeta(im);
-    }
-
-    //Boilerplate for machines.
-    public void constructMenu(BlockMenuPreset preset) {
-        preset.drawBackground(ChestMenuUtils.getInputSlotTexture(), getBorder());
-        preset.addItem(4, new CustomItemStack(Material.PURPLE_STAINED_GLASS_PANE, "&fKnowledge Pane"), ChestMenuUtils.getEmptyClickHandler());
-    }
-
-    
-    public int[] getBorder() {
-        return new int[] {0,1,2,3,5,6,7,8,45,46,47,48,49,50,51,52,53};
-    }
-
-    public int[] getInputSlots() {
-        return new int[] {9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44};
-    }
-
-    public int[] getOutputSlots() {
-        return new int[0];  
-    }
- 
-    @Override
-    public int getCapacity() {
-        return capacity;
-    }
-
-    @Override
-    public EnergyNetComponentType getEnergyComponentType() {
-        return EnergyNetComponentType.CONSUMER;
-    }
-
-}
-
-    
-
-    
-       
-        
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric.transfer;
+
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemHandler;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetComponent;
+import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;
+import io.github.thebusybiscuit.slimefun4.core.networks.energy.EnergyNetComponentType;
+import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
+import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
+import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
+import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
+import me.mrCookieSlime.Slimefun.api.BlockStorage;
+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
+import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
+import me.mrCookieSlime.Slimefun.api.item_transport.ItemTransportFlow;
+import org.bukkit.ChatColor;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.entity.Player;
+import org.bukkit.event.block.BlockBreakEvent;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.meta.ItemMeta;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class WirelessItemInput extends SlimefunItem implements EnergyNetComponent {
+    private final int capacity;
+
+    public WirelessItemInput(ItemGroup itemGroup, int capacity, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
+
+        this.capacity = capacity;
+
+        addItemHandler(onBlockBreak());
+
+        new BlockMenuPreset("WIRELESS_ITEM_INPUT", "Wireless Item Input") {
+
+            @Override
+            public void init() {
+                constructMenu(this);
+            }
+
+            @Override
+            public boolean canOpen(Block b, Player p) {
+                return p.hasPermission("slimefun.inventory.bypass") || Slimefun.getProtectionManager().hasPermission(p, b.getLocation(), Interaction.INTERACT_BLOCK);
+            }
+
+            @Override
+            public int[] getSlotsAccessedByItemTransport(ItemTransportFlow flow) {
+                return new int[0];
+            }
+
+            @Override
+            public int[] getSlotsAccessedByItemTransport(DirtyChestMenu menu, ItemTransportFlow flow, ItemStack item) {
+                if (flow == ItemTransportFlow.INSERT) return getInputSlots();
+                else return getOutputSlots();
+            }
+        };
+    }
+
+    @Override
+    public void preRegister() {
+        addItemHandler(new BlockTicker() {
+
+            @Override
+            public boolean isSynchronized() {
+                return false;
+            }
+
+            @Override
+            public void tick(Block block, SlimefunItem sfItem, Config data) {
+                WirelessItemInput.this.tick(block);
+            }
+
+        });
+    }
+
+    private ItemHandler onBlockBreak() {
+        return new BlockBreakHandler(false, false) {
+
+            @Override
+            public void onPlayerBreak(BlockBreakEvent event, ItemStack block, List<ItemStack> drops) {
+                BlockMenu inv = BlockStorage.getInventory(event.getBlock());
+
+                if (inv != null) {
+                    inv.dropItems(event.getBlock().getLocation(), getInputSlots());
+                    inv.dropItems(event.getBlock().getLocation(), getOutputSlots());
+                }
+
+
+                BlockStorage.clearBlockInfo(event.getBlock().getLocation());
+            }
+
+        };
+    }
+
+    protected void tick(Block b) {
+        BlockMenu menu = BlockStorage.getInventory(b);
+        updateKnowledgePane(menu, getCharge(b.getLocation()));
+    }
+
+    private void updateKnowledgePane(BlockMenu menu, int currentCharge) {
+        ItemStack knowledgePane = menu.getItemInSlot(4);
+        ItemMeta im = knowledgePane.getItemMeta();
+        List<String> lore = im.hasLore() ? im.getLore() : new ArrayList<>();
+
+        lore.clear();
+        lore.add(" ");
+        lore.add(ChatColor.WHITE + "Current Power: " + currentCharge);
+        lore.add(ChatColor.WHITE + "Current Status: Interesting.");
+
+        im.setLore(lore);
+        knowledgePane.setItemMeta(im);
+    }
+
+    //Boilerplate for machines.
+    public void constructMenu(BlockMenuPreset preset) {
+        preset.drawBackground(ChestMenuUtils.getInputSlotTexture(), getBorder());
+        preset.addItem(4, new CustomItemStack(Material.PURPLE_STAINED_GLASS_PANE, "&fKnowledge Pane"), ChestMenuUtils.getEmptyClickHandler());
+    }
+
+
+    public int[] getBorder() {
+        return new int[]{0, 1, 2, 3, 5, 6, 7, 8, 45, 46, 47, 48, 49, 50, 51, 52, 53};
+    }
+
+    public int[] getInputSlots() {
+        return new int[]{9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44};
+    }
+
+    public int[] getOutputSlots() {
+        return new int[0];
+    }
+
+    @Override
+    public int getCapacity() {
+        return capacity;
+    }
+
+    @Override
+    public EnergyNetComponentType getEnergyComponentType() {
+        return EnergyNetComponentType.CONSUMER;
+    }
+}
+
+    
+
+    
+       
+        
diff --git a/src/main/java/me/profelements/dynatech/items/electric/transfer/WirelessItemOutput.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/transfer/WirelessItemOutput.java
similarity index 80%
rename from src/main/java/me/profelements/dynatech/items/electric/transfer/WirelessItemOutput.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/transfer/WirelessItemOutput.java
index d528f62..efe45c1 100644
--- a/src/main/java/me/profelements/dynatech/items/electric/transfer/WirelessItemOutput.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/electric/transfer/WirelessItemOutput.java
@@ -1,300 +1,286 @@
-package me.profelements.dynatech.items.electric.transfer;
-
-import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemHandler;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetComponent;
-import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;
-import io.github.thebusybiscuit.slimefun4.core.handlers.BlockPlaceHandler;
-import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
-import io.github.thebusybiscuit.slimefun4.core.networks.energy.EnergyNetComponentType;
-import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.data.persistent.PersistentDataAPI;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.inventory.InvUtils;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
-import io.github.thebusybiscuit.slimefun4.libraries.paperlib.PaperLib;
-import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
-import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
-import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
-import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
-import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
-import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
-import me.mrCookieSlime.Slimefun.api.item_transport.ItemTransportFlow;
-import me.profelements.dynatech.DynaTech;
-import me.profelements.dynatech.DynaTechItems;
-import org.bukkit.Bukkit;
-import org.bukkit.ChatColor;
-import org.bukkit.Chunk;
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
-import org.bukkit.block.Block;
-import org.bukkit.entity.Player;
-import org.bukkit.event.block.BlockBreakEvent;
-import org.bukkit.event.block.BlockPlaceEvent;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.ItemMeta;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Optional;
-import java.util.concurrent.CompletableFuture;
-
-
-public class WirelessItemOutput extends SlimefunItem implements EnergyNetComponent {
-
-    
-    protected static final NamespacedKey WIRELESS_LOCATION_KEY = new NamespacedKey(DynaTech.getInstance(), "wireless-input-location");
-	private final int capacity;
-            
-    public WirelessItemOutput(ItemGroup itemGroup, int capacity, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(itemGroup, item, recipeType, recipe);
-
-        this.capacity = capacity;
-
-        addItemHandler(onBlockBreak(), onBlockPlace(), onRightClick());
-        
-        new BlockMenuPreset("WIRELESS_ITEM_OUTPUT", "Wireless Item Output") {
-
-            @Override
-            public void init() {
-                constructMenu(this);
-            }
-
-            @Override
-            public boolean canOpen(Block b, Player p) { 
-                return p.hasPermission("slimefun.inventory.bypass") || Slimefun.getProtectionManager().hasPermission(p, b.getLocation(), Interaction.INTERACT_BLOCK);
-
-                
-            }
-
-            @Override 
-            public int[] getSlotsAccessedByItemTransport(ItemTransportFlow flow) {
-                return new int[0];
-            }
-
-            @Override
-            public int[] getSlotsAccessedByItemTransport(DirtyChestMenu menu, ItemTransportFlow flow, ItemStack item) {
-                if (flow == ItemTransportFlow.INSERT) {
-                    return getInputSlots();
-                } else {
-                    return getOutputSlots();
-                } 
-            }
-        };
-    }
-
-    @Override
-    public void preRegister() {
-        addItemHandler(new BlockTicker(){
-
-			@Override
-    public boolean isSynchronized() {
-				return false;
-			}
-
-			@Override
-			public void tick(Block block, SlimefunItem sfItem, Config data) {
-                WirelessItemOutput.this.tick(block);
-				
-			}
-
-             
-       });
-    }
-
-    private ItemHandler onRightClick() {
-        return new ItemUseHandler() {
-
-            @Override
-            public void onRightClick(PlayerRightClickEvent event) {
-
-                Optional<Block> blockClicked = event.getClickedBlock();           
-                Optional<SlimefunItem> sfBlockClicked = event.getSlimefunBlock();
-                if (blockClicked.isPresent() && sfBlockClicked.isPresent()) {
-                    Location blockLoc = blockClicked.get().getLocation();
-                    SlimefunItem sfBlock = sfBlockClicked.get();
-                    ItemStack item = event.getItem();
-
-
-                    if (sfBlock != null && sfBlock.getId().equals(DynaTechItems.WIRELESS_ITEM_INPUT.getItemId()) && blockLoc != null) {
-                        event.cancel();
-                        ItemMeta im = item.getItemMeta();
-                        String locationString = LocationToString(blockLoc);
-                        
-                        PersistentDataAPI.setString(im, WIRELESS_LOCATION_KEY, locationString);
-                        item.setItemMeta(im);
-                        setItemLore(item, blockLoc);
-                    }
-                }   
-            } 
-        };
-    }
-
-    private ItemHandler onBlockPlace() {
-        return new BlockPlaceHandler(false) {
-            @Override
-            public void onPlayerPlace(BlockPlaceEvent event) {
-                
-                
-                Location blockLoc = event.getBlockPlaced().getLocation();
-                ItemStack item = event.getItemInHand();
-                String locationString = PersistentDataAPI.getString(item.getItemMeta(), WIRELESS_LOCATION_KEY);
-                
-                if (item != null && item.getType() == DynaTechItems.WIRELESS_ITEM_OUTPUT.getType() && item.hasItemMeta() && locationString != null) {
-                    BlockStorage.addBlockInfo(blockLoc, "wireless-input-location", locationString);
-                    
-                }   
-            }
-            
-        };
-    }
-
-    private ItemHandler onBlockBreak() {
-        return new BlockBreakHandler(false, false) {
-
-			@Override
-			public void onPlayerBreak(BlockBreakEvent event, ItemStack block, List<ItemStack> drops) {
-                BlockMenu inv = BlockStorage.getInventory(event.getBlock());
-                
-                if (inv != null) {
-                    inv.dropItems(event.getBlock().getLocation(), getInputSlots());
-                    inv.dropItems(event.getBlock().getLocation(), getOutputSlots());
-    
-                }
-
-
-				BlockStorage.clearBlockInfo(event.getBlock().getLocation());
-			}
-            
-        };
-    }
-
-    protected void tick(Block b) {
-        String wirelessLocation = BlockStorage.getLocationInfo(b.getLocation(), "wireless-input-location");
-        if (wirelessLocation != null) {
-            sendItemsFromInput(b, wirelessLocation);
-            
-        }
-    }
-
-    private void sendItemsFromInput(Block b, String wirelessLocation) {
-        Location wirelessItemInput = StringToLocation(wirelessLocation);
-    
-        // Note: You should probably also see if the Future from getChunkAtAsync is finished here.
-        // you don't really want to possibly trigger the chunk to load in another thread twice.
-        if (!wirelessItemInput.getWorld().isChunkLoaded(wirelessItemInput.getBlockX() >> 4, wirelessItemInput.getBlockZ() >> 4)) {
-            CompletableFuture<Chunk> chunkLoad = PaperLib.getChunkAtAsync(wirelessItemInput);
-            if (!chunkLoad.isDone()) {
-                return;
-            } 
-        }
-
-        if (wirelessItemInput != null && BlockStorage.checkID(wirelessItemInput) != null && BlockStorage.checkID(wirelessItemInput).equals(DynaTechItems.WIRELESS_ITEM_INPUT.getItemId())) {
-            BlockMenu input = BlockStorage.getInventory(wirelessItemInput);
-            BlockMenu output = BlockStorage.getInventory(b);
-            updateKnowledgePane(output, getCharge(b.getLocation()));
-            
-            for (int i : getOutputSlots()) {
-                if (getCharge(wirelessItemInput) < getEnergyConsumption() || getCharge(b.getLocation()) < getEnergyConsumption()) {
-                    return;
-                }
-                ItemStack itemStack = input.getItemInSlot(i);
-                
-                if (itemStack != null && itemStack.getType() != Material.AIR && InvUtils.fitAll(output.toInventory(), new ItemStack[] {itemStack}, getOutputSlots())) {
-                    removeCharge(wirelessItemInput, getEnergyConsumption());
-                    removeCharge(b.getLocation(), getEnergyConsumption());
-                    output.pushItem(itemStack, getOutputSlots());
-                    itemStack.setAmount(0);
-                }
-            }
-            
-        }
-
-    }
- 
-    private void updateKnowledgePane(BlockMenu menu, int currentCharge) {
-        ItemStack knowledgePane = menu.getItemInSlot(4);
-        ItemMeta im = knowledgePane.getItemMeta();
-        List<String> lore = im.hasLore() ? im.getLore() : new ArrayList<String>();
-
-        lore.clear();
-        lore.add(" ");
-        lore.add(ChatColor.WHITE +"Current Power: " + currentCharge);
-        lore.add(ChatColor.WHITE +"Current Status: " + ChatColor.RED + "CONNECTED");
-        knowledgePane.setType(Material.RED_STAINED_GLASS_PANE);
-
-        im.setLore(lore);
-        knowledgePane.setItemMeta(im);
-    }
-
-    //Boilerplate for machines.
-    public void constructMenu(BlockMenuPreset preset) {
-        preset.drawBackground(ChestMenuUtils.getOutputSlotTexture(), getBorder());
-        preset.addItem(4, new CustomItemStack(Material.PURPLE_STAINED_GLASS_PANE, "&fKnowledge Pane", "&fCurrent Power: Unknown", "&fCurrent Status: NOT CONNECTED"), ChestMenuUtils.getEmptyClickHandler());
-    }
-
-    
-    public int[] getBorder() {
-        return new int[] {0,1,2,3,5,6,7,8,45,46,47,48,49,50,51,52,53};
-    }
-
-    public int[] getOutputSlots() {
-        return new int[] {9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44};
-    }
-
-    public int[] getInputSlots() {
-        return new int[0];  
-    }
- 
-    @Override
-    public int getCapacity() {
-        return capacity;
-    }
-
-    public int getEnergyConsumption() {
-        return 8;
-    }
-
-    @Override
-    public EnergyNetComponentType getEnergyComponentType() {
-        return EnergyNetComponentType.CONSUMER;
-    }
-
-    private void setItemLore(ItemStack item, Location l) {
-        ItemMeta im = item.getItemMeta();
-        List<String> lore = im.getLore();
-        for (int i = 0; i < lore.size(); i++) {
-            if (lore.get(i).contains("Location: ")) {
-                lore.remove(i);
-            } 
-        }
-
-        lore.add(ChatColor.WHITE + "Location: " + l.getWorld().getName() + " " + l.getBlockX() + " " + l.getBlockY() + " " + l.getBlockZ());
-
-        im.setLore(lore);
-        item.setItemMeta(im);
-        
-    }
-
-    private String LocationToString(Location l) {
-        return l.getWorld().getName()+";"+l.getBlockX()+";"+l.getBlockY()+";"+l.getBlockZ();
-    }
-
-    private static final Location StringToLocation(String locString) {
-        String[] locComponents = locString.split(";");
-        return new Location(Bukkit.getWorld(locComponents[0]), Double.parseDouble(locComponents[1]), Double.parseDouble(locComponents[2]), Double.parseDouble(locComponents[3]));
-    }
-
-}
-
-    
-
-    
-       
-        
+package id.universenetwork.sfa_loader.addons.dynatech.items.electric.transfer;
+
+import id.universenetwork.sfa_loader.addons.dynatech.DynaTechItems;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
+import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemHandler;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetComponent;
+import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;
+import io.github.thebusybiscuit.slimefun4.core.handlers.BlockPlaceHandler;
+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
+import io.github.thebusybiscuit.slimefun4.core.networks.energy.EnergyNetComponentType;
+import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.data.persistent.PersistentDataAPI;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.inventory.InvUtils;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
+import io.github.thebusybiscuit.slimefun4.libraries.paperlib.PaperLib;
+import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
+import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
+import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
+import me.mrCookieSlime.Slimefun.api.BlockStorage;
+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
+import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
+import me.mrCookieSlime.Slimefun.api.item_transport.ItemTransportFlow;
+import org.bukkit.*;
+import org.bukkit.block.Block;
+import org.bukkit.entity.Player;
+import org.bukkit.event.block.BlockBreakEvent;
+import org.bukkit.event.block.BlockPlaceEvent;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.meta.ItemMeta;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Optional;
+import java.util.concurrent.CompletableFuture;
+
+
+public class WirelessItemOutput extends SlimefunItem implements EnergyNetComponent {
+    protected static final NamespacedKey WIRELESS_LOCATION_KEY = AbstractAddon.createKey("wireless-input-location");
+    private final int capacity;
+
+    public WirelessItemOutput(ItemGroup itemGroup, int capacity, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
+
+        this.capacity = capacity;
+
+        addItemHandler(onBlockBreak(), onBlockPlace(), onRightClick());
+
+        new BlockMenuPreset("WIRELESS_ITEM_OUTPUT", "Wireless Item Output") {
+
+            @Override
+            public void init() {
+                constructMenu(this);
+            }
+
+            @Override
+            public boolean canOpen(Block b, Player p) {
+                return p.hasPermission("slimefun.inventory.bypass") || Slimefun.getProtectionManager().hasPermission(p, b.getLocation(), Interaction.INTERACT_BLOCK);
+            }
+
+            @Override
+            public int[] getSlotsAccessedByItemTransport(ItemTransportFlow flow) {
+                return new int[0];
+            }
+
+            @Override
+            public int[] getSlotsAccessedByItemTransport(DirtyChestMenu menu, ItemTransportFlow flow, ItemStack item) {
+                if (flow == ItemTransportFlow.INSERT) return getInputSlots();
+                else return getOutputSlots();
+            }
+        };
+    }
+
+    @Override
+    public void preRegister() {
+        addItemHandler(new BlockTicker() {
+
+            @Override
+            public boolean isSynchronized() {
+                return false;
+            }
+
+            @Override
+            public void tick(Block block, SlimefunItem sfItem, Config data) {
+                WirelessItemOutput.this.tick(block);
+            }
+
+        });
+    }
+
+    private ItemHandler onRightClick() {
+        return new ItemUseHandler() {
+
+            @Override
+            public void onRightClick(PlayerRightClickEvent event) {
+
+                Optional<Block> blockClicked = event.getClickedBlock();
+                Optional<SlimefunItem> sfBlockClicked = event.getSlimefunBlock();
+                if (blockClicked.isPresent() && sfBlockClicked.isPresent()) {
+                    Location blockLoc = blockClicked.get().getLocation();
+                    SlimefunItem sfBlock = sfBlockClicked.get();
+                    ItemStack item = event.getItem();
+
+
+                    if (sfBlock != null && sfBlock.getId().equals(DynaTechItems.WIRELESS_ITEM_INPUT.getItemId()) && blockLoc != null) {
+                        event.cancel();
+                        ItemMeta im = item.getItemMeta();
+                        String locationString = LocationToString(blockLoc);
+
+                        PersistentDataAPI.setString(im, WIRELESS_LOCATION_KEY, locationString);
+                        item.setItemMeta(im);
+                        setItemLore(item, blockLoc);
+                    }
+                }
+            }
+        };
+    }
+
+    private ItemHandler onBlockPlace() {
+        return new BlockPlaceHandler(false) {
+            @Override
+            public void onPlayerPlace(BlockPlaceEvent event) {
+
+
+                Location blockLoc = event.getBlockPlaced().getLocation();
+                ItemStack item = event.getItemInHand();
+                String locationString = PersistentDataAPI.getString(item.getItemMeta(), WIRELESS_LOCATION_KEY);
+
+                if (item != null && item.getType() == DynaTechItems.WIRELESS_ITEM_OUTPUT.getType() && item.hasItemMeta() && locationString != null) {
+                    BlockStorage.addBlockInfo(blockLoc, "wireless-input-location", locationString);
+
+                }
+            }
+
+        };
+    }
+
+    private ItemHandler onBlockBreak() {
+        return new BlockBreakHandler(false, false) {
+
+            @Override
+            public void onPlayerBreak(BlockBreakEvent event, ItemStack block, List<ItemStack> drops) {
+                BlockMenu inv = BlockStorage.getInventory(event.getBlock());
+
+                if (inv != null) {
+                    inv.dropItems(event.getBlock().getLocation(), getInputSlots());
+                    inv.dropItems(event.getBlock().getLocation(), getOutputSlots());
+
+                }
+
+
+                BlockStorage.clearBlockInfo(event.getBlock().getLocation());
+            }
+
+        };
+    }
+
+    protected void tick(Block b) {
+        String wirelessLocation = BlockStorage.getLocationInfo(b.getLocation(), "wireless-input-location");
+        if (wirelessLocation != null) {
+            sendItemsFromInput(b, wirelessLocation);
+
+        }
+    }
+
+    private void sendItemsFromInput(Block b, String wirelessLocation) {
+        Location wirelessItemInput = StringToLocation(wirelessLocation);
+
+        // Note: You should probably also see if the Future from getChunkAtAsync is finished here.
+        // you don't really want to possibly trigger the chunk to load in another thread twice.
+        if (!wirelessItemInput.getWorld().isChunkLoaded(wirelessItemInput.getBlockX() >> 4, wirelessItemInput.getBlockZ() >> 4)) {
+            CompletableFuture<Chunk> chunkLoad = PaperLib.getChunkAtAsync(wirelessItemInput);
+            if (!chunkLoad.isDone()) {
+                return;
+            }
+        }
+
+        if (wirelessItemInput != null && BlockStorage.checkID(wirelessItemInput) != null && BlockStorage.checkID(wirelessItemInput).equals(DynaTechItems.WIRELESS_ITEM_INPUT.getItemId())) {
+            BlockMenu input = BlockStorage.getInventory(wirelessItemInput);
+            BlockMenu output = BlockStorage.getInventory(b);
+            updateKnowledgePane(output, getCharge(b.getLocation()));
+
+            for (int i : getOutputSlots()) {
+                if (getCharge(wirelessItemInput) < getEnergyConsumption() || getCharge(b.getLocation()) < getEnergyConsumption()) {
+                    return;
+                }
+                ItemStack itemStack = input.getItemInSlot(i);
+
+                if (itemStack != null && itemStack.getType() != Material.AIR && InvUtils.fitAll(output.toInventory(), new ItemStack[]{itemStack}, getOutputSlots())) {
+                    removeCharge(wirelessItemInput, getEnergyConsumption());
+                    removeCharge(b.getLocation(), getEnergyConsumption());
+                    output.pushItem(itemStack, getOutputSlots());
+                    itemStack.setAmount(0);
+                }
+            }
+
+        }
+
+    }
+
+    private void updateKnowledgePane(BlockMenu menu, int currentCharge) {
+        ItemStack knowledgePane = menu.getItemInSlot(4);
+        ItemMeta im = knowledgePane.getItemMeta();
+        List<String> lore = im.hasLore() ? im.getLore() : new ArrayList<String>();
+
+        lore.clear();
+        lore.add(" ");
+        lore.add(ChatColor.WHITE + "Current Power: " + currentCharge);
+        lore.add(ChatColor.WHITE + "Current Status: " + ChatColor.RED + "CONNECTED");
+        knowledgePane.setType(Material.RED_STAINED_GLASS_PANE);
+
+        im.setLore(lore);
+        knowledgePane.setItemMeta(im);
+    }
+
+    //Boilerplate for machines.
+    public void constructMenu(BlockMenuPreset preset) {
+        preset.drawBackground(ChestMenuUtils.getOutputSlotTexture(), getBorder());
+        preset.addItem(4, new CustomItemStack(Material.PURPLE_STAINED_GLASS_PANE, "&fKnowledge Pane", "&fCurrent Power: Unknown", "&fCurrent Status: NOT CONNECTED"), ChestMenuUtils.getEmptyClickHandler());
+    }
+
+
+    public int[] getBorder() {
+        return new int[]{0, 1, 2, 3, 5, 6, 7, 8, 45, 46, 47, 48, 49, 50, 51, 52, 53};
+    }
+
+    public int[] getOutputSlots() {
+        return new int[]{9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44};
+    }
+
+    public int[] getInputSlots() {
+        return new int[0];
+    }
+
+    @Override
+    public int getCapacity() {
+        return capacity;
+    }
+
+    public int getEnergyConsumption() {
+        return 8;
+    }
+
+    @Override
+    public EnergyNetComponentType getEnergyComponentType() {
+        return EnergyNetComponentType.CONSUMER;
+    }
+
+    private void setItemLore(ItemStack item, Location l) {
+        ItemMeta im = item.getItemMeta();
+        List<String> lore = im.getLore();
+        for (int i = 0; i < lore.size(); i++) {
+            if (lore.get(i).contains("Location: ")) {
+                lore.remove(i);
+            }
+        }
+
+        lore.add(ChatColor.WHITE + "Location: " + l.getWorld().getName() + " " + l.getBlockX() + " " + l.getBlockY() + " " + l.getBlockZ());
+
+        im.setLore(lore);
+        item.setItemMeta(im);
+
+    }
+
+    private String LocationToString(Location l) {
+        return l.getWorld().getName() + ";" + l.getBlockX() + ";" + l.getBlockY() + ";" + l.getBlockZ();
+    }
+
+    private static final Location StringToLocation(String locString) {
+        String[] locComponents = locString.split(";");
+        return new Location(Bukkit.getWorld(locComponents[0]), Double.parseDouble(locComponents[1]), Double.parseDouble(locComponents[2]), Double.parseDouble(locComponents[3]));
+    }
+
+}
+
+    
+
+    
+       
+        
diff --git a/src/main/java/me/profelements/dynatech/items/misc/Bee.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/misc/Bee.java
similarity index 79%
rename from src/main/java/me/profelements/dynatech/items/misc/Bee.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/misc/Bee.java
index bf18c0e..e5c1654 100644
--- a/src/main/java/me/profelements/dynatech/items/misc/Bee.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/misc/Bee.java
@@ -1,16 +1,13 @@
-package me.profelements.dynatech.items.misc;
+package id.universenetwork.sfa_loader.addons.dynatech.items.misc;
 
+import com.google.common.base.Preconditions;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.implementation.items.blocks.UnplaceableBlock;
-
-import com.google.common.base.Preconditions;
-
 import org.bukkit.inventory.ItemStack;
 
 public class Bee extends UnplaceableBlock {
-    
     private int speedMultiplier;
 
     public Bee(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, int speedMulitplier) {
@@ -18,13 +15,12 @@ public class Bee extends UnplaceableBlock {
         this.speedMultiplier = speedMulitplier;
     }
 
-    public float getSpeedMultipler() {
+    public float getSpeedMultiplier() {
         return speedMultiplier;
     }
 
     public void setSpeedMultiplier(int speedMultiplier) {
-      Preconditions.checkArgument(speedMultiplier > 0, " The Speed multipler must be greater then 0");  
+        Preconditions.checkArgument(speedMultiplier > 0, " The Speed multiplier must be greater then 0");
         this.speedMultiplier = speedMultiplier;
     }
-    
 }
diff --git a/src/main/java/me/profelements/dynatech/items/misc/DimensionalHomeDimension.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/misc/DimensionalHomeDimension.java
similarity index 79%
rename from src/main/java/me/profelements/dynatech/items/misc/DimensionalHomeDimension.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/misc/DimensionalHomeDimension.java
index 99fd329..1eb720b 100644
--- a/src/main/java/me/profelements/dynatech/items/misc/DimensionalHomeDimension.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/misc/DimensionalHomeDimension.java
@@ -1,39 +1,34 @@
-package me.profelements.dynatech.items.misc;
-
-import org.bukkit.Material;
-import org.bukkit.World;
-import org.bukkit.generator.ChunkGenerator;
-
-import javax.annotation.Nonnull;
-import javax.annotation.ParametersAreNonnullByDefault;
-import java.util.Random;
-
-public class DimensionalHomeDimension extends ChunkGenerator {
-
-    @Nonnull
-    @Override
-    @ParametersAreNonnullByDefault
-    public ChunkData generateChunkData(World world, Random random, int chunkx, int chunkz, BiomeGrid biomeGrid) {
-        ChunkData chunkData = createChunkData(world);
-
-        chunkData.setRegion(0, 59, 0, 16, 60, 16, Material.BEDROCK);
-        for (int y = 60; y < 180; y++) {
-            for (int x = 0; x < 16; x++) {
-                chunkData.setBlock(x, y, 0, Material.BARRIER);
-                chunkData.setBlock(x, y, 16, Material.BARRIER);
-            }
-            for (int z = 0; z < 16; z++) {
-                chunkData.setBlock(0, y, z, Material.BARRIER);
-                chunkData.setBlock(16, y, z, Material.BARRIER);
-            }
-
-        }
-        for (int x2 = 0; x2 < 16; x2++) {
-            for (int y2 = 0; y2 < 16; y2++) {
-                chunkData.setBlock(x2, 180, y2, Material.BARRIER);
-            }
-        }
-        return chunkData;
-    }
-
-}
+package id.universenetwork.sfa_loader.addons.dynatech.items.misc;
+
+import org.bukkit.Material;
+import org.bukkit.World;
+import org.bukkit.generator.ChunkGenerator;
+
+import javax.annotation.Nonnull;
+import javax.annotation.ParametersAreNonnullByDefault;
+import java.util.Random;
+
+public class DimensionalHomeDimension extends ChunkGenerator {
+    @Nonnull
+    @Override
+    @ParametersAreNonnullByDefault
+    public ChunkData generateChunkData(World world, Random random, int chunkx, int chunkz, BiomeGrid biomeGrid) {
+        ChunkData chunkData = createChunkData(world);
+
+        chunkData.setRegion(0, 59, 0, 16, 60, 16, Material.BEDROCK);
+        for (int y = 60; y < 180; y++) {
+            for (int x = 0; x < 16; x++) {
+                chunkData.setBlock(x, y, 0, Material.BARRIER);
+                chunkData.setBlock(x, y, 16, Material.BARRIER);
+            }
+            for (int z = 0; z < 16; z++) {
+                chunkData.setBlock(0, y, z, Material.BARRIER);
+                chunkData.setBlock(16, y, z, Material.BARRIER);
+            }
+
+        }
+        for (int x2 = 0; x2 < 16; x2++)
+            for (int y2 = 0; y2 < 16; y2++) chunkData.setBlock(x2, 180, y2, Material.BARRIER);
+        return chunkData;
+    }
+}
diff --git a/src/main/java/me/profelements/dynatech/items/misc/ItemBand.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/misc/ItemBand.java
similarity index 88%
rename from src/main/java/me/profelements/dynatech/items/misc/ItemBand.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/misc/ItemBand.java
index 8c78c32..14cf99d 100644
--- a/src/main/java/me/profelements/dynatech/items/misc/ItemBand.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/misc/ItemBand.java
@@ -1,11 +1,11 @@
-package me.profelements.dynatech.items.misc;
+package id.universenetwork.sfa_loader.addons.dynatech.items.misc;
 
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.data.persistent.PersistentDataAPI;
-import me.profelements.dynatech.DynaTech;
 import org.bukkit.ChatColor;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
@@ -18,13 +18,12 @@ import java.util.ArrayList;
 import java.util.List;
 
 public class ItemBand extends SlimefunItem {
-
-    public static final NamespacedKey KEY = new NamespacedKey(DynaTech.getInstance(), "item_band");
+    public static final NamespacedKey KEY = AbstractAddon.createKey("item_band");
     private final PotionEffect[] potionEffects;
 
     public ItemBand(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, PotionEffect[] potionEffects) {
         super(itemGroup, item, recipeType, recipe);
-        
+
         this.potionEffects = potionEffects;
     }
 
@@ -33,21 +32,19 @@ public class ItemBand extends SlimefunItem {
     }
 
     public static boolean containsItemBand(ItemStack item) {
-        if (item != null && item.getType() != Material.AIR && item.hasItemMeta()) {
+        if (item != null && item.getType() != Material.AIR && item.hasItemMeta())
             return PersistentDataAPI.getString(item.getItemMeta(), KEY) != null;
-        } else {
-            return false;
-        }
+        else return false;
     }
 
     @Nullable
     public ItemStack applyToItem(@Nullable ItemStack item) {
         if (item != null && item.getType() != Material.AIR) {
-           
+
 
             ItemMeta im = item.getItemMeta();
             List<String> lore = im.hasLore() ? im.getLore() : new ArrayList<>();
-            
+
             lore.add(ChatColor.WHITE + "Bandaid: " + getPotionEffects()[0].getType().getName());
             PersistentDataAPI.setString(im, KEY, this.getId());
 
@@ -63,11 +60,11 @@ public class ItemBand extends SlimefunItem {
         if (item != null && item.getType() != Material.AIR) {
             ItemMeta im = item.getItemMeta();
             List<String> lore = im.getLore();
-            
+
             im.getPersistentDataContainer().remove(KEY);
 
             lore.removeIf(line -> line.contains(ChatColor.WHITE + "Bandaid: "));
-    
+
             im.setLore(lore);
             item.setItemMeta(im);
 
@@ -75,5 +72,4 @@ public class ItemBand extends SlimefunItem {
         }
         return null;
     }
-    
 }
diff --git a/src/main/java/me/profelements/dynatech/items/misc/MobDropItem.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/misc/MobDropItem.java
similarity index 90%
rename from src/main/java/me/profelements/dynatech/items/misc/MobDropItem.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/misc/MobDropItem.java
index 809b38f..aa56ea8 100644
--- a/src/main/java/me/profelements/dynatech/items/misc/MobDropItem.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/misc/MobDropItem.java
@@ -1,32 +1,30 @@
-package me.profelements.dynatech.items.misc;
-
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.core.attributes.RandomMobDrop;
-import org.bukkit.inventory.ItemStack;
-
-public class MobDropItem extends SlimefunItem implements RandomMobDrop {
-
-    private final ItemSetting<Boolean> dropSetting = new ItemSetting<>(this, "drop-from-mob", true);
-    private int dropChance = 0;
-
-    public MobDropItem(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, int dropChance) {
-        super(itemGroup, item, recipeType, recipe);
-        this.dropChance = dropChance;
-
-        addItemSetting(dropSetting);
-    }
-
-    public boolean isDroppedFromMob() {
-        return dropSetting.getValue();
-    }
-
-    @Override
-    public int getMobDropChance() {
-        return dropChance;
-    }
-    
-}
+package id.universenetwork.sfa_loader.addons.dynatech.items.misc;
+
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.attributes.RandomMobDrop;
+import org.bukkit.inventory.ItemStack;
+
+public class MobDropItem extends SlimefunItem implements RandomMobDrop {
+    private final ItemSetting<Boolean> dropSetting = new ItemSetting<>(this, "drop-from-mob", true);
+    private final int dropChance;
+
+    public MobDropItem(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, int dropChance) {
+        super(itemGroup, item, recipeType, recipe);
+        this.dropChance = dropChance;
+
+        addItemSetting(dropSetting);
+    }
+
+    public boolean isDroppedFromMob() {
+        return dropSetting.getValue();
+    }
+
+    @Override
+    public int getMobDropChance() {
+        return dropChance;
+    }
+}
diff --git a/src/main/java/me/profelements/dynatech/items/misc/StarDustMeteor.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/misc/StarDustMeteor.java
similarity index 75%
rename from src/main/java/me/profelements/dynatech/items/misc/StarDustMeteor.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/misc/StarDustMeteor.java
index a31de5f..f9ba604 100644
--- a/src/main/java/me/profelements/dynatech/items/misc/StarDustMeteor.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/misc/StarDustMeteor.java
@@ -1,72 +1,67 @@
-package me.profelements.dynatech.items.misc;
-
-import io.github.thebusybiscuit.slimefun4.api.geo.GEOResource;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.implementation.items.blocks.UnplaceableBlock;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.skins.PlayerHead;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.skins.PlayerSkin;
-import me.profelements.dynatech.DynaTech;
-import org.bukkit.NamespacedKey;
-import org.bukkit.World.Environment;
-import org.bukkit.block.Biome;
-import org.bukkit.inventory.ItemStack;
-
-import javax.annotation.Nonnull;
-
-public class StarDustMeteor extends UnplaceableBlock implements GEOResource {
-
-    public static final SlimefunItemStack STARDUST_METEOR = new SlimefunItemStack(
-        "STARDUST_METEOR",
-        PlayerHead.getItemStack(PlayerSkin.fromHashCode("c482d1ba4bdac990f6ea987703587fd79fe55555363251984679d4f279cc0c2a")),
-        "&6Stardust Meteor",
-        "",
-        "&fGeomined from Mountain or Badlands Biomes"
-    );
-    
-    private final NamespacedKey key = new NamespacedKey(DynaTech.getInstance(), "stardust_meteor");
-  
-    public StarDustMeteor(ItemGroup itemGroup) {
-        super(itemGroup, STARDUST_METEOR, RecipeType.GEO_MINER, new ItemStack[0]);
-        register();
-    }
-    
-    @Nonnull
-    @Override
-    public NamespacedKey getKey() {
-      return key;
-    }
-    
-    @Nonnull
-    @Override
-    public ItemStack getItem() {
-      return STARDUST_METEOR.clone();
-    }
-  
-    @Nonnull
-    @Override
-    public String getName() {
-      return "Stardust Meteor";
-    }
-    
-    @Override
-    public boolean isObtainableFromGEOMiner() {
-      return true;
-    }
-    
-    @Override
-    public int getDefaultSupply(@Nonnull Environment environment, @Nonnull Biome biome) {
-        if (biome == Biome.MEADOW || biome == Biome.BADLANDS) {
-            return 16;
-        } else {
-            return 0;
-        }
-    }
-    
-    @Override
-    public int getMaxDeviation() {
-      return 4;
-    }
-  
-}
+package id.universenetwork.sfa_loader.addons.dynatech.items.misc;
+
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
+import io.github.thebusybiscuit.slimefun4.api.geo.GEOResource;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.implementation.items.blocks.UnplaceableBlock;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.skins.PlayerHead;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.skins.PlayerSkin;
+import org.bukkit.NamespacedKey;
+import org.bukkit.World.Environment;
+import org.bukkit.block.Biome;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+
+public class StarDustMeteor extends UnplaceableBlock implements GEOResource {
+    public static final SlimefunItemStack STARDUST_METEOR = new SlimefunItemStack(
+        "STARDUST_METEOR",
+        PlayerHead.getItemStack(PlayerSkin.fromHashCode("c482d1ba4bdac990f6ea987703587fd79fe55555363251984679d4f279cc0c2a")),
+        "&6Stardust Meteor",
+        "",
+        "&fGeomined from Mountain or Badlands Biomes"
+    );
+
+    private final NamespacedKey key = AbstractAddon.createKey("stardust_meteor");
+
+    public StarDustMeteor(ItemGroup itemGroup) {
+        super(itemGroup, STARDUST_METEOR, RecipeType.GEO_MINER, new ItemStack[0]);
+        register();
+    }
+
+    @Nonnull
+    @Override
+    public NamespacedKey getKey() {
+        return key;
+    }
+
+    @Nonnull
+    @Override
+    public ItemStack getItem() {
+        return STARDUST_METEOR.clone();
+    }
+
+    @Nonnull
+    @Override
+    public String getName() {
+        return "Stardust Meteor";
+    }
+
+    @Override
+    public boolean isObtainableFromGEOMiner() {
+        return true;
+    }
+
+    @Override
+    public int getDefaultSupply(@Nonnull Environment environment, @Nonnull Biome biome) {
+        if (biome == Biome.MEADOW || biome == Biome.BADLANDS) return 16;
+        else return 0;
+    }
+
+    @Override
+    public int getMaxDeviation() {
+        return 4;
+    }
+}
diff --git a/src/main/java/me/profelements/dynatech/items/misc/VexGem.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/misc/VexGem.java
similarity index 92%
rename from src/main/java/me/profelements/dynatech/items/misc/VexGem.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/misc/VexGem.java
index 15cfddf..be8125f 100644
--- a/src/main/java/me/profelements/dynatech/items/misc/VexGem.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/misc/VexGem.java
@@ -1,42 +1,41 @@
-package me.profelements.dynatech.items.misc;
-
-import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.items.settings.IntRangeSetting;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;
-import io.github.thebusybiscuit.slimefun4.core.attributes.RandomMobDrop;
-import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
-import org.bukkit.inventory.ItemStack;
-
-public class VexGem extends SlimefunItem implements NotPlaceable, RandomMobDrop {
-
-    private final ItemSetting<Boolean> dropSetting = new ItemSetting<>(this, " drop-from-vexs", true);
-    private final ItemSetting<Integer> chance = new IntRangeSetting(this ,"vex-drop-chance", 0, 10, 100);
-
-    public VexGem(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(itemGroup, item, recipeType, recipe);
-
-        addItemSetting(dropSetting);
-        addItemSetting(chance);
-
-        addItemHandler(getItemHandler());
-    }
-
-    @Override
-    public int getMobDropChance() {
-        return chance.getValue();
-    }
-
-    public boolean isDroppedFromVexs() {
-        return dropSetting.getValue();
-    }
-
-    public ItemUseHandler getItemHandler() {
-        return PlayerRightClickEvent::cancel;
-    }
-
-}
+package id.universenetwork.sfa_loader.addons.dynatech.items.misc;
+
+import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.items.settings.IntRangeSetting;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;
+import io.github.thebusybiscuit.slimefun4.core.attributes.RandomMobDrop;
+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
+import org.bukkit.inventory.ItemStack;
+
+public class VexGem extends SlimefunItem implements NotPlaceable, RandomMobDrop {
+    private final ItemSetting<Boolean> dropSetting = new ItemSetting<>(this, " drop-from-vexs", true);
+    private final ItemSetting<Integer> chance = new IntRangeSetting(this, "vex-drop-chance", 0, 10, 100);
+
+    public VexGem(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
+
+        addItemSetting(dropSetting);
+        addItemSetting(chance);
+
+        addItemHandler(getItemHandler());
+    }
+
+    @Override
+    public int getMobDropChance() {
+        return chance.getValue();
+    }
+
+    public boolean isDroppedFromVexs() {
+        return dropSetting.getValue();
+    }
+
+    public ItemUseHandler getItemHandler() {
+        return PlayerRightClickEvent::cancel;
+    }
+
+}
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/misc/WitherGolem.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/misc/WitherGolem.java
new file mode 100644
index 0000000..403a80f
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/misc/WitherGolem.java
@@ -0,0 +1,31 @@
+package id.universenetwork.sfa_loader.addons.dynatech.items.misc;
+
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.core.multiblocks.MultiBlockMachine;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.block.BlockFace;
+import org.bukkit.entity.EntityType;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+
+public class WitherGolem extends MultiBlockMachine {
+    public WitherGolem(ItemGroup itemGroup, SlimefunItemStack item) {
+        super(itemGroup, item, new ItemStack[]{null, new ItemStack(Material.CARVED_PUMPKIN), null, null, new ItemStack(Material.POLISHED_BLACKSTONE), null, null, new ItemStack(Material.POLISHED_BLACKSTONE), null}, BlockFace.SELF);
+    }
+
+    @Override
+    public void onInteract(@Nonnull Player p, @Nonnull Block b) {
+        Block pumpkinHead = b.getRelative(BlockFace.UP);
+        Block bottomBlackstone = b.getRelative(BlockFace.DOWN);
+
+        p.getWorld().spawnEntity(b.getLocation().add(0.5, -1, 0.5), EntityType.WITHER_SKELETON);
+
+        pumpkinHead.setType(Material.AIR);
+        b.setType(Material.AIR);
+        bottomBlackstone.setType(Material.AIR);
+    }
+}
diff --git a/src/main/java/me/profelements/dynatech/items/tools/AngelGem.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/tools/AngelGem.java
similarity index 62%
rename from src/main/java/me/profelements/dynatech/items/tools/AngelGem.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/tools/AngelGem.java
index 7f860ed..c711dd1 100644
--- a/src/main/java/me/profelements/dynatech/items/tools/AngelGem.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/tools/AngelGem.java
@@ -1,150 +1,135 @@
-package me.profelements.dynatech.items.tools;
-
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;
-import io.github.thebusybiscuit.slimefun4.core.handlers.ItemDropHandler;
-import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
-import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
-import me.profelements.dynatech.DynaTech;
-import me.profelements.dynatech.DynaTechItems;
-import org.bukkit.Bukkit;
-import org.bukkit.ChatColor;
-import org.bukkit.GameMode;
-import org.bukkit.entity.HumanEntity;
-import org.bukkit.entity.Player;
-import org.bukkit.event.EventHandler;
-import org.bukkit.event.Listener;
-import org.bukkit.event.inventory.InventoryClickEvent;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.ItemMeta;
-
-import java.math.BigDecimal;
-import java.math.RoundingMode;
-import java.util.List;
-
-import com.google.common.base.Preconditions;
-
-public class AngelGem extends SlimefunItem implements NotPlaceable, Listener {
-
-    private final ItemSetting<Double> maxFlightSpeed = new ItemSetting<>(this, "max-flight-speed", 1.0d);
-    private final ItemSetting<Boolean> hasMaxFlightSpeed = new ItemSetting<>(this, "has-max-flight-speed", false);
-
-    private float flySpeed = 0.1f;
-
-    public AngelGem(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(itemGroup, item, recipeType, recipe);
-
-        addItemSetting(maxFlightSpeed, hasMaxFlightSpeed);
-
-        addItemHandler(onRightClick(), onItemDrop());
-
-        Bukkit.getPluginManager().registerEvents(this, DynaTech.getInstance());
-    }
-
-    private ItemDropHandler onItemDrop() {
-        return (e, p, itemEntity) -> {
-            ItemStack item = itemEntity.getItemStack();
-            if (e.getPlayer().getGameMode() != GameMode.CREATIVE && item.getType() == DynaTechItems.ANGEL_GEM.getType() && SlimefunUtils.isItemSimilar(item, DynaTechItems.ANGEL_GEM, false, false)) {
-                e.getPlayer().setFlying(false);
-                e.getPlayer().setAllowFlight(false);
-                e.getPlayer().setFlySpeed(0.1f);
-                e.getPlayer().setFallDistance(0.0f);
-            } else {
-                return false;
-            }
-            return true;
-        };
-    }
-
-    private ItemUseHandler onRightClick() {
-        return e -> {
-            if (e.getPlayer().isSneaking()) {
-                e.getPlayer().setFlying(false);
-                e.getPlayer().setAllowFlight(false);
-                e.getPlayer().setFallDistance(0f);
-                e.getItem().setItemMeta(updateLore(e.getItem(), e.getPlayer()));
-            }
-            if (!e.getPlayer().getAllowFlight()) {
-                e.getPlayer().setAllowFlight(true);
-                setFlySpeed(0.10f);
-            } else {
-                if (hasMaxFlightSpeed.getValue()) {
-                    if (getFlySpeed() < maxFlightSpeed.getValue()) {
-                        if (getFlySpeed() + 0.10f > maxFlightSpeed.getValue()) {
-                            setFlySpeed(maxFlightSpeed.getValue().floatValue());
-                        } else {
-                            setFlySpeed(getFlySpeed() + 0.10f);
-                        }
-                    } else {
-                        setFlySpeed(0.10f);
-                    }
-                } else {
-                    if (getFlySpeed() < 1f) {
-                        setFlySpeed(getFlySpeed() + 0.10f);
-                    } else {
-                        setFlySpeed(0.10f);
-                    }
-                }
-            }
-            e.getPlayer().setFlySpeed(getFlySpeed());
-            e.getItem().setItemMeta(updateLore(e.getItem(), e.getPlayer()));
-            e.cancel();
-        };
-    }
-
-    @EventHandler
-    public void getItemClicked(InventoryClickEvent e) {
-        List<HumanEntity> views = e.getViewers();
-        if (isItem(e.getCursor()) || isItem(e.getCurrentItem())) {
-            for (HumanEntity he : views) {
-                if (he instanceof Player) {
-                    Player p = (Player) he;
-                    p.setFlying(false);
-                    p.setAllowFlight(false);
-                    p.setFallDistance(0f);
-                }
-            }
-        }
-    }
-
-
-    protected ItemMeta updateLore(ItemStack item, Player p) {
-        ItemMeta im = item.getItemMeta();
-
-        if (!im.hasLore()) {
-            throw new IllegalArgumentException("This item does not have any lore!");
-        }
-
-        List<String> lore = im.getLore();
-
-        for (int line = 0; line < lore.size(); line++ ) {
-            if (lore.get(line).contains("Flight: <enabled>")) {
-                lore.set(line, lore.get(line).replace("<enabled>", p.getAllowFlight() ? "Enabled" : "Disabled"));
-            }
-            if (lore.get(line).contains(ChatColor.GRAY + "Flight Speed: ")) {
-                lore.set(line, lore.get(line).replaceFirst(".*", ChatColor.GRAY + "Flight Speed: " + getFlySpeed()));
-            }
-        }
-
-        im.setLore(lore);
-        return im;
-    }
-
-
-    public float getFlySpeed() {
-        return flySpeed;
-    }
-
-    public void setFlySpeed(float newFlySpeed) {
-        Preconditions.checkArgument(newFlySpeed > 0, "Must be greater then 0");
-
-        BigDecimal bd = new BigDecimal(Float.toString(newFlySpeed));
-        bd = bd.setScale(1, RoundingMode.DOWN);
-        flySpeed = bd.floatValue();
-    }
-
-}
+package id.universenetwork.sfa_loader.addons.dynatech.items.tools;
+
+import com.google.common.base.Preconditions;
+import id.universenetwork.sfa_loader.addons.dynatech.DynaTechItems;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Events;
+import id.universenetwork.sfa_loader.utils.TextUtils;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;
+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemDropHandler;
+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
+import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
+import org.bukkit.ChatColor;
+import org.bukkit.GameMode;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.entity.Player;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+import org.bukkit.event.inventory.InventoryClickEvent;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.meta.ItemMeta;
+
+import java.math.BigDecimal;
+import java.util.List;
+
+public class AngelGem extends SlimefunItem implements NotPlaceable, Listener {
+
+    private final ItemSetting<Double> maxFlightSpeed = new ItemSetting<>(this, "max-flight-speed", 1.0d);
+    private final ItemSetting<Boolean> hasMaxFlightSpeed = new ItemSetting<>(this, "has-max-flight-speed", false);
+
+    private float flySpeed = 0.1f;
+
+    public AngelGem(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
+
+        addItemSetting(maxFlightSpeed, hasMaxFlightSpeed);
+
+        addItemHandler(onRightClick(), onItemDrop());
+
+        Events.registerListener(this);
+    }
+
+    private ItemDropHandler onItemDrop() {
+        return (e, p, itemEntity) -> {
+            ItemStack item = itemEntity.getItemStack();
+            if (e.getPlayer().getGameMode() != GameMode.CREATIVE && item.getType() == DynaTechItems.ANGEL_GEM.getType() && SlimefunUtils.isItemSimilar(item, DynaTechItems.ANGEL_GEM, false, false)) {
+                e.getPlayer().setFlying(false);
+                e.getPlayer().setAllowFlight(false);
+                e.getPlayer().setFlySpeed(0.1f);
+                e.getPlayer().setFallDistance(0.0f);
+            } else {
+                return false;
+            }
+            return true;
+        };
+    }
+
+    private ItemUseHandler onRightClick() {
+        return e -> {
+            if (e.getPlayer().hasPermission("sfaloader.use.angelgem")) {
+                if (e.getPlayer().isSneaking()) {
+                    e.getPlayer().setFlying(false);
+                    e.getPlayer().setAllowFlight(false);
+                    e.getPlayer().setFallDistance(0f);
+                    e.getItem().setItemMeta(updateLore(e.getItem(), e.getPlayer()));
+                }
+                if (!e.getPlayer().getAllowFlight()) {
+                    e.getPlayer().setAllowFlight(true);
+                    setFlySpeed(0.10f);
+                } else {
+                    if (hasMaxFlightSpeed.getValue()) {
+                        if (getFlySpeed() < maxFlightSpeed.getValue()) {
+                            if (getFlySpeed() + 0.10f > maxFlightSpeed.getValue())
+                                setFlySpeed(maxFlightSpeed.getValue().floatValue());
+                            else setFlySpeed(getFlySpeed() + 0.10f);
+                        } else setFlySpeed(0.10f);
+                    } else {
+                        if (getFlySpeed() < 1f) setFlySpeed(getFlySpeed() + 0.10f);
+                        else setFlySpeed(0.10f);
+                    }
+                }
+                e.getPlayer().setFlySpeed(getFlySpeed());
+                e.getItem().setItemMeta(updateLore(e.getItem(), e.getPlayer()));
+            } else e.getPlayer().sendMessage(TextUtils.translateColor("&cYou don't have permission to use AngelGem!"));
+            e.cancel();
+        };
+    }
+
+    @EventHandler
+    public void getItemClicked(InventoryClickEvent e) {
+        List<HumanEntity> views = e.getViewers();
+        if (isItem(e.getCursor()) || isItem(e.getCurrentItem())) for (HumanEntity he : views)
+            if (he instanceof Player) {
+                Player p = (Player) he;
+                p.setFlying(false);
+                p.setAllowFlight(false);
+                p.setFallDistance(0f);
+            }
+    }
+
+
+    protected ItemMeta updateLore(ItemStack item, Player p) {
+        ItemMeta im = item.getItemMeta();
+
+        if (!im.hasLore()) throw new IllegalArgumentException("This item does not have any lore!");
+
+        List<String> lore = im.getLore();
+
+        for (int line = 0; line < lore.size(); line++) {
+            if (lore.get(line).contains("Flight: <enabled>"))
+                lore.set(line, lore.get(line).replace("<enabled>", p.getAllowFlight() ? "Enabled" : "Disabled"));
+            if (lore.get(line).contains(ChatColor.GRAY + "Flight Speed: "))
+                lore.set(line, lore.get(line).replaceFirst(".*", ChatColor.GRAY + "Flight Speed: " + getFlySpeed()));
+        }
+
+        im.setLore(lore);
+        return im;
+    }
+
+
+    public float getFlySpeed() {
+        return flySpeed;
+    }
+
+    public void setFlySpeed(float newFlySpeed) {
+        Preconditions.checkArgument(newFlySpeed > 0, "Must be greater then 0");
+
+        BigDecimal bd = new BigDecimal(Float.toString(newFlySpeed));
+        bd = bd.setScale(1, BigDecimal.ROUND_DOWN);
+        flySpeed = bd.floatValue();
+    }
+}
diff --git a/src/main/java/me/profelements/dynatech/items/tools/DimensionalHome.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/tools/DimensionalHome.java
similarity index 51%
rename from src/main/java/me/profelements/dynatech/items/tools/DimensionalHome.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/tools/DimensionalHome.java
index 4ce62e0..4fb7521 100644
--- a/src/main/java/me/profelements/dynatech/items/tools/DimensionalHome.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/tools/DimensionalHome.java
@@ -1,18 +1,16 @@
-package me.profelements.dynatech.items.tools;
+package id.universenetwork.sfa_loader.addons.dynatech.items.tools;
 
-import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;
+import id.universenetwork.sfa_loader.addons.dynatech.DynaTechItems;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AddonConfig;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.config.Config;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.data.persistent.PersistentDataAPI;
 import io.github.thebusybiscuit.slimefun4.libraries.paperlib.PaperLib;
 import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
-import me.profelements.dynatech.DynaTech;
-import me.profelements.dynatech.DynaTechItems;
-
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.NamespacedKey;
@@ -25,10 +23,9 @@ import javax.annotation.Nonnull;
 import java.util.List;
 
 public class DimensionalHome extends SlimefunItem {
-    
-    private static final NamespacedKey CHUNK_KEY = new NamespacedKey(DynaTech.getInstance(), "chunk-key");
+    private static final NamespacedKey CHUNK_KEY = AbstractAddon.createKey("chunk-key");
     private static final World DIM_HOME_WORLD = Bukkit.getServer().getWorld("dimensionalhome");
-    private final Config CURRENT_HIGHEST_CHUNK_ID = new Config("plugins/DynaTech/current-chunk-highest.yml");
+    private final AddonConfig CURRENT_HIGHEST_CHUNK_ID = new AddonConfig("addons-config/DynaTech/current-chunk-highest.yml", false);
     private int id = CURRENT_HIGHEST_CHUNK_ID.getInt("current-chunk-highest-id");
 
     public DimensionalHome(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
@@ -37,33 +34,24 @@ public class DimensionalHome extends SlimefunItem {
     }
 
     public ItemUseHandler onRightClick() {
-        return new ItemUseHandler() {
-			@Override
-			public void onRightClick(PlayerRightClickEvent e) {
-			    e.cancel();
+        return e -> {
+            e.cancel();
 
-                Player p = e.getPlayer();
-                ItemStack item = e.getItem();
-                int chunkKey = PersistentDataAPI.getInt(item.getItemMeta(), CHUNK_KEY);
+            Player p = e.getPlayer();
+            ItemStack item = e.getItem();
+            int chunkKey = PersistentDataAPI.getInt(item.getItemMeta(), CHUNK_KEY);
 
-                if (SlimefunUtils.isItemSimilar(item, DynaTechItems.DIMENSIONAL_HOME, true)) {
-                    if (chunkKey > 0) {
-                        if (p.getLocation().getWorld() != DIM_HOME_WORLD) {
-                            Location dimHomeLocation = new Location(DIM_HOME_WORLD, 16 * chunkKey + 8d, 65, 8);
-                            PaperLib.teleportAsync(p, dimHomeLocation);
-                        } else {
-                            if (p.getBedSpawnLocation() != null) {
-                                PaperLib.teleportAsync(p, p.getBedSpawnLocation());
-                            } else {
-                                PaperLib.teleportAsync(p, Bukkit.getServer().getWorlds().get(0).getSpawnLocation());
-                            }
-                        }
+            if (SlimefunUtils.isItemSimilar(item, DynaTechItems.DIMENSIONAL_HOME, true)) {
+                if (chunkKey > 0) {
+                    if (p.getLocation().getWorld() != DIM_HOME_WORLD) {
+                        Location dimHomeLocation = new Location(DIM_HOME_WORLD, 16 * chunkKey + 8d, 65, 8);
+                        PaperLib.teleportAsync(p, dimHomeLocation);
                     } else {
-                        // Setup ChunkKey
-                        updateLore(item);
+                        if (p.getBedSpawnLocation() != null) PaperLib.teleportAsync(p, p.getBedSpawnLocation());
+                        else PaperLib.teleportAsync(p, Bukkit.getServer().getWorlds().get(0).getSpawnLocation());
                     }
-                }
-			} 
+                } else updateLore(item); // Setup ChunkKey
+            }
         };
     }
 
@@ -71,21 +59,18 @@ public class DimensionalHome extends SlimefunItem {
         ItemMeta im = item.getItemMeta();
         List<String> lore = im.getLore();
 
-        for (int line = 0; line < lore.size(); line++ ) {
+        for (int line = 0; line < lore.size(); line++)
             if (lore.get(line).contains("CHUNK ID: <id>")) {
                 id++;
                 lore.set(line, lore.get(line).replace("<id>", String.valueOf(id)));
                 PersistentDataAPI.setInt(im, CHUNK_KEY, id);
-                
+
                 // THIS IS PROBABLY BAD AND A BAD WAY TO KEEP AN CHUNK ID
-                CURRENT_HIGHEST_CHUNK_ID.setValue("current-chunk-highest-id", id);
+                CURRENT_HIGHEST_CHUNK_ID.set("current-chunk-highest-id", id);
                 CURRENT_HIGHEST_CHUNK_ID.save();
             }
-    
-        }
 
         im.setLore(lore);
         item.setItemMeta(im);
     }
-    
 }
diff --git a/src/main/java/me/profelements/dynatech/items/tools/ElectricalStimulator.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/tools/ElectricalStimulator.java
similarity index 91%
rename from src/main/java/me/profelements/dynatech/items/tools/ElectricalStimulator.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/tools/ElectricalStimulator.java
index 86e77f9..048d719 100644
--- a/src/main/java/me/profelements/dynatech/items/tools/ElectricalStimulator.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/tools/ElectricalStimulator.java
@@ -1,4 +1,4 @@
-package me.profelements.dynatech.items.tools;
+package id.universenetwork.sfa_loader.addons.dynatech.items.tools;
 
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -8,7 +8,6 @@ import io.github.thebusybiscuit.slimefun4.implementation.items.blocks.Unplaceabl
 import org.bukkit.inventory.ItemStack;
 
 public class ElectricalStimulator extends UnplaceableBlock implements Rechargeable {
-
     public ElectricalStimulator(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe);
     }
@@ -16,7 +15,7 @@ public class ElectricalStimulator extends UnplaceableBlock implements Rechargeab
     @Override
     public float getMaxItemCharge(ItemStack item) {
         return 1024;
-    }    
+    }
 
     public float getEnergyComsumption() {
         return 32f;
diff --git a/src/main/java/me/profelements/dynatech/items/tools/InventoryFilter.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/tools/InventoryFilter.java
similarity index 89%
rename from src/main/java/me/profelements/dynatech/items/tools/InventoryFilter.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/tools/InventoryFilter.java
index ef39be7..f08dc75 100644
--- a/src/main/java/me/profelements/dynatech/items/tools/InventoryFilter.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/tools/InventoryFilter.java
@@ -1,4 +1,4 @@
-package me.profelements.dynatech.items.tools;
+package id.universenetwork.sfa_loader.addons.dynatech.items.tools;
 
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -7,9 +7,7 @@ import io.github.thebusybiscuit.slimefun4.implementation.items.backpacks.Slimefu
 import org.bukkit.inventory.ItemStack;
 
 public class InventoryFilter extends SlimefunBackpack {
-
     public InventoryFilter(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(9, itemGroup, item, recipeType, recipe);
     }
-    
 }
diff --git a/src/main/java/me/profelements/dynatech/items/tools/LiquidTank.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/tools/LiquidTank.java
similarity index 74%
rename from src/main/java/me/profelements/dynatech/items/tools/LiquidTank.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/tools/LiquidTank.java
index ba772b5..e8e5ba8 100644
--- a/src/main/java/me/profelements/dynatech/items/tools/LiquidTank.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/tools/LiquidTank.java
@@ -1,6 +1,10 @@
-package me.profelements.dynatech.items.tools;
+package id.universenetwork.sfa_loader.addons.dynatech.items.tools;
 
 
+import id.universenetwork.sfa_loader.addons.dynatech.DynaTech;
+import id.universenetwork.sfa_loader.addons.dynatech.DynaTechItems;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Events;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -8,21 +12,13 @@ import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;
 import io.github.thebusybiscuit.slimefun4.core.handlers.EntityInteractHandler;
 import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
-import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.collections.Pair;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.data.persistent.PersistentDataAPI;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
-import io.github.thebusybiscuit.slimefun4.libraries.paperlib.PaperLib;
 import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
-import me.profelements.dynatech.DynaTech;
-import me.profelements.dynatech.DynaTechItems;
-import net.md_5.bungee.api.ChatColor;
-
-import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
 import org.bukkit.block.Block;
-import org.bukkit.block.BlockState;
 import org.bukkit.entity.EntityType;
 import org.bukkit.event.EventHandler;
 import org.bukkit.event.Listener;
@@ -32,12 +28,10 @@ import org.bukkit.inventory.meta.ItemMeta;
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Optional;
 
 public class LiquidTank extends SlimefunItem implements NotPlaceable, Listener {
-
-    private static final NamespacedKey FLUID_NAME = new NamespacedKey(DynaTech.getInstance(), "liquid-name");
-    private static final NamespacedKey FLUID_AMOUNT = new NamespacedKey(DynaTech.getInstance(), "liquid-amount");
+    private static final NamespacedKey FLUID_NAME = AbstractAddon.createKey("liquid-name");
+    private static final NamespacedKey FLUID_AMOUNT = AbstractAddon.createKey("liquid-amount");
 
     private final int maxLiquidAmount;
 
@@ -46,7 +40,7 @@ public class LiquidTank extends SlimefunItem implements NotPlaceable, Listener {
 
         this.maxLiquidAmount = maxLiquidAmount;
 
-        Bukkit.getPluginManager().registerEvents(this, DynaTech.getInstance());
+        Events.registerListener(this);
         addItemHandler(onEntityClick());
         addItemHandler(onRightClick());
     }
@@ -58,21 +52,22 @@ public class LiquidTank extends SlimefunItem implements NotPlaceable, Listener {
             }
         };
     }
+
     @EventHandler
     private void onBucketChange(PlayerBucketFillEvent e) {
         ItemStack item = e.getPlayer().getEquipment().getItem(e.getHand());
-        if (this.isItem(item) && this.canUse(e.getPlayer(), true) && SlimefunItem.getByItem(item) instanceof LiquidTank tank) {
+        if (this.isItem(item) && this.canUse(e.getPlayer(), true) && SlimefunItem.getByItem(item) instanceof LiquidTank) {
             e.setCancelled(true);
             //Check if block == LAVA or WATER 
             String fluidName = PersistentDataAPI.getString(item.getItemMeta(), FLUID_NAME, "NO_LIQUID");
             int fluidAmount = PersistentDataAPI.getInt(item.getItemMeta(), FLUID_AMOUNT, 0);
             Block block = e.getBlock();
             if (block.isLiquid() && (fluidName.equals("NO_LIQUID") && fluidAmount == 0) || fluidName.equals(block.getType().toString()) && fluidAmount + 1000 <= getMaxLiquidAmount()) {
-                ItemMeta meta = item.getItemMeta(); 
-            
+                ItemMeta meta = item.getItemMeta();
+
                 PersistentDataAPI.setString(meta, FLUID_NAME, block.getType().toString());
-                PersistentDataAPI.setInt(meta, FLUID_AMOUNT, fluidAmount + 1000); 
-                
+                PersistentDataAPI.setInt(meta, FLUID_AMOUNT, fluidAmount + 1000);
+
                 List<String> lore = new ArrayList<>();
                 lore.add(ChatColor.GRAY + "A Liquid tank holding up to 16 buckets of some liquids");
                 lore.add("");
@@ -82,15 +77,15 @@ public class LiquidTank extends SlimefunItem implements NotPlaceable, Listener {
                 lore.add(ChatColor.WHITE + "Fluid Held: " + PersistentDataAPI.getString(meta, FLUID_NAME));
                 lore.add(ChatColor.WHITE + "Fluid Amount: " + PersistentDataAPI.getInt(meta, FLUID_AMOUNT));
                 meta.setLore(lore);
-                item.setItemMeta(meta); 
-                DynaTech.runSync(() -> { block.setType(Material.AIR); }); 
-            }    
+                item.setItemMeta(meta);
+                DynaTech.runSync(() -> block.setType(Material.AIR));
+            }
         }
     }
 
-    private final ItemUseHandler onRightClick() {
+    private ItemUseHandler onRightClick() {
         return e -> {
-            if (e.getPlayer().isSneaking() && e.getClickedBlock().isPresent() && !e.getClickedBlock().get().isLiquid()) { 
+            if (e.getPlayer().isSneaking() && e.getClickedBlock().isPresent() && !e.getClickedBlock().get().isLiquid()) {
                 ItemStack item = e.getItem();
                 String fluidName = PersistentDataAPI.getString(item.getItemMeta(), FLUID_NAME, "NO_LIQUID");
                 int fluidAmount = PersistentDataAPI.getInt(item.getItemMeta(), FLUID_AMOUNT, 0);
@@ -100,14 +95,11 @@ public class LiquidTank extends SlimefunItem implements NotPlaceable, Listener {
                     if (mat != null && e.getClickedBlock().isPresent()) {
                         Block block = e.getClickedBlock().get().getRelative(e.getClickedFace());
                         if ((block.isLiquid() || block.getType().isAir()) && !block.getWorld().isUltraWarm()) {
-                            ItemMeta meta = item.getItemMeta(); 
-                            if (fluidAmount - 1000 == 0) {
-                                PersistentDataAPI.setString(meta, FLUID_NAME, "NO_LIQUID");
-                            } else { 
-                                PersistentDataAPI.setString(meta, FLUID_NAME, fluidName);
-                            }
-                            PersistentDataAPI.setInt(meta, FLUID_AMOUNT, fluidAmount - 1000); 
-                            
+                            ItemMeta meta = item.getItemMeta();
+                            if (fluidAmount - 1000 == 0) PersistentDataAPI.setString(meta, FLUID_NAME, "NO_LIQUID");
+                            else PersistentDataAPI.setString(meta, FLUID_NAME, fluidName);
+                            PersistentDataAPI.setInt(meta, FLUID_AMOUNT, fluidAmount - 1000);
+
                             List<String> lore = new ArrayList<>();
                             lore.add(ChatColor.GRAY + "A Liquid tank holding up to 16 buckets of some liquids");
                             lore.add("");
@@ -117,13 +109,12 @@ public class LiquidTank extends SlimefunItem implements NotPlaceable, Listener {
                             lore.add(ChatColor.WHITE + "Fluid Held: " + PersistentDataAPI.getString(meta, FLUID_NAME));
                             lore.add(ChatColor.WHITE + "Fluid Amount: " + PersistentDataAPI.getInt(meta, FLUID_AMOUNT));
                             meta.setLore(lore);
-                            item.setItemMeta(meta); 
-                            DynaTech.runSync(() -> { block.setType(mat); });
+                            item.setItemMeta(meta);
+                            DynaTech.runSync(() -> block.setType(mat));
                         }
                     }
                 }
             }
-            
         };
     }
 
@@ -131,7 +122,7 @@ public class LiquidTank extends SlimefunItem implements NotPlaceable, Listener {
         return maxLiquidAmount;
     }
 
-    public static final List<String> getPlaceableFluids() {
+    public static List<String> getPlaceableFluids() {
         List<String> PLACEABLE_FLUIDS = new ArrayList<>();
         PLACEABLE_FLUIDS.add("WATER");
         PLACEABLE_FLUIDS.add("LAVA");
@@ -146,13 +137,10 @@ public class LiquidTank extends SlimefunItem implements NotPlaceable, Listener {
         int itemFluidAmount = PersistentDataAPI.getInt(im, FLUID_AMOUNT);
 
         int resultFluidAmount = itemFluidAmount + fluidAmount;
-        if (itemFluidName != null && itemFluidName.equals(fluidName) && itemFluidAmount != 0 && resultFluidAmount <= getMaxLiquidAmount()) {
+        if (itemFluidName != null && itemFluidName.equals(fluidName) && itemFluidAmount != 0 && resultFluidAmount <= getMaxLiquidAmount())
             setLiquid(item, fluidName, resultFluidAmount);
-        } else if (resultFluidAmount >= getMaxLiquidAmount()) {
-            setLiquid(item, fluidName, getMaxLiquidAmount());
-        } else {
-            setLiquid(item, fluidName, fluidAmount);
-        }
+        else if (resultFluidAmount >= getMaxLiquidAmount()) setLiquid(item, fluidName, getMaxLiquidAmount());
+        else setLiquid(item, fluidName, fluidAmount);
 
     }
 
@@ -163,11 +151,9 @@ public class LiquidTank extends SlimefunItem implements NotPlaceable, Listener {
         int itemFluidAmount = PersistentDataAPI.getInt(im, FLUID_AMOUNT);
 
         int resultFluidAmount = itemFluidAmount - fluidAmount;
-        if (itemFluidName != null && itemFluidName.equals(fluidName) && itemFluidAmount != 0 && resultFluidAmount > 0) {
+        if (itemFluidName != null && itemFluidName.equals(fluidName) && itemFluidAmount != 0 && resultFluidAmount > 0)
             setLiquid(item, fluidName, resultFluidAmount);
-        } else {
-            setLiquid(item, "NO_FLUID", 0);
-        }
+        else setLiquid(item, "NO_FLUID", 0);
     }
 
     public void setLiquid(ItemStack item, String fluidName, int fluidAmount) {
@@ -182,9 +168,7 @@ public class LiquidTank extends SlimefunItem implements NotPlaceable, Listener {
     public Pair<String, Integer> getLiquid(ItemStack item) {
         String fluidName = PersistentDataAPI.getString(item.getItemMeta(), FLUID_NAME);
         int fluidAmount = PersistentDataAPI.getInt(item.getItemMeta(), FLUID_AMOUNT);
-        if (item.hasItemMeta() && fluidName != null && fluidAmount != 0) {
-            return new Pair<>(fluidName, fluidAmount);
-        }
+        if (item.hasItemMeta() && fluidName != null && fluidAmount != 0) return new Pair<>(fluidName, fluidAmount);
         return new Pair<>("NO_FLUID", 0);
     }
 
@@ -195,24 +179,16 @@ public class LiquidTank extends SlimefunItem implements NotPlaceable, Listener {
         ItemMeta im = item.getItemMeta();
         List<String> lore = im.getLore();
 
-        if (fluidName == null) {
-            return;
-        }
+        if (fluidName == null) return;
 
         for (int i = 0; i < lore.size(); i++) {
-            if (lore.get(i).contains("Fluid Held: ")) {
-
-                lore.set(i, ChatColor.WHITE + "Fluid Held: " + fluidName);
-            }
-
-            if (lore.get(i).contains("Amount: ")) {
+            if (lore.get(i).contains("Fluid Held: ")) lore.set(i, ChatColor.WHITE + "Fluid Held: " + fluidName);
 
+            if (lore.get(i).contains("Amount: "))
                 lore.set(i, ChatColor.WHITE + "Amount: " + fluidAmount + "mb / " + getMaxLiquidAmount());
-            }
         }
 
         im.setLore(lore);
         item.setItemMeta(im);
     }
-
 }
diff --git a/src/main/java/me/profelements/dynatech/items/tools/Scoop.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/tools/Scoop.java
similarity index 87%
rename from src/main/java/me/profelements/dynatech/items/tools/Scoop.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/tools/Scoop.java
index cdd40d4..3b3585c 100644
--- a/src/main/java/me/profelements/dynatech/items/tools/Scoop.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/tools/Scoop.java
@@ -1,5 +1,6 @@
-package me.profelements.dynatech.items.tools;
+package id.universenetwork.sfa_loader.addons.dynatech.items.tools;
 
+import id.universenetwork.sfa_loader.addons.dynatech.DynaTechItems;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -9,7 +10,6 @@ import io.github.thebusybiscuit.slimefun4.core.attributes.Rechargeable;
 import io.github.thebusybiscuit.slimefun4.core.handlers.EntityInteractHandler;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
-import me.profelements.dynatech.DynaTechItems;
 import org.bukkit.Sound;
 import org.bukkit.entity.Bee;
 import org.bukkit.entity.Entity;
@@ -17,7 +17,6 @@ import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 
 public class Scoop extends SlimefunItem implements Rechargeable, NotPlaceable {
-
     public Scoop(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe);
 
@@ -26,20 +25,17 @@ public class Scoop extends SlimefunItem implements Rechargeable, NotPlaceable {
 
     public EntityInteractHandler getItemHandler() {
         return (e, item, offhand) -> {
-            if (getItemCharge(item) < 8) {
-                return;
-            }
+            if (getItemCharge(item) < 8) return;
 
             Entity entity = e.getRightClicked();
-            
-            if (e.isCancelled() || !Slimefun.getProtectionManager().hasPermission(e.getPlayer(), entity.getLocation(), Interaction.INTERACT_ENTITY)) {
+
+            if (e.isCancelled() || !Slimefun.getProtectionManager().hasPermission(e.getPlayer(), entity.getLocation(), Interaction.INTERACT_ENTITY))
                 return;
-            }
 
             Player p = e.getPlayer();
 
             if (entity instanceof Bee) {
-                
+
                 entity.getWorld().dropItemNaturally(entity.getLocation(), DynaTechItems.BEE);
                 entity.remove();
                 removeItemCharge(item, 8);
@@ -47,12 +43,11 @@ public class Scoop extends SlimefunItem implements Rechargeable, NotPlaceable {
                 p.playSound(p.getLocation(), Sound.BLOCK_ANVIL_FALL, 1, 1);
             }
         };
-        
+
     }
 
     @Override
     public float getMaxItemCharge(ItemStack item) {
         return 512;
     }
-        
 }
diff --git a/src/main/java/me/profelements/dynatech/items/tools/TesseractBinder.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/tools/TesseractBinder.java
similarity index 83%
rename from src/main/java/me/profelements/dynatech/items/tools/TesseractBinder.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/tools/TesseractBinder.java
index 3652123..9e5757d 100644
--- a/src/main/java/me/profelements/dynatech/items/tools/TesseractBinder.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/items/tools/TesseractBinder.java
@@ -1,61 +1,60 @@
-package me.profelements.dynatech.items.tools;
-
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
-import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.data.persistent.PersistentDataAPI;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
-import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import me.profelements.dynatech.DynaTechItems;
-import me.profelements.dynatech.items.electric.transfer.Tesseract;
-import net.md_5.bungee.api.ChatColor;
-import net.md_5.bungee.api.ChatMessageType;
-import net.md_5.bungee.api.chat.TextComponent;
-import org.bukkit.Location;
-import org.bukkit.block.Block;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.ItemMeta;
-
-import java.util.Optional;
-
-public class TesseractBinder extends SlimefunItem {
-    public TesseractBinder(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(itemGroup, item, recipeType, recipe);
-
-        addItemHandler(bindTesseract());
-    }
-
-    private ItemUseHandler bindTesseract() {
-        return e -> {
-            e.cancel();
-
-            Optional<Block> block = e.getClickedBlock();
-            Optional<SlimefunItem> sfBlock = e.getSlimefunBlock();
-            if (block.isPresent() && sfBlock.isPresent()) {
-                Location blockLocation = block.get().getLocation();
-                SlimefunItem sfItem = sfBlock.get();
-                ItemStack item = e.getItem();
-                Boolean hasPermision = Slimefun.getProtectionManager().hasPermission(e.getPlayer(), blockLocation, Interaction.INTERACT_BLOCK);
-
-                if (e.getPlayer().isSneaking()) {
-                    String locString = PersistentDataAPI.getString(item.getItemMeta(), Tesseract.WIRELESS_LOCATION_KEY);
-                    if (item != null  && hasPermision && BlockStorage.checkID(blockLocation).equals(DynaTechItems.TESSERACT.getItemId()) && item.hasItemMeta() && locString != null) {
-                        BlockStorage.addBlockInfo(blockLocation, "tesseract-pair-location", locString);
-                        e.getPlayer().spigot().sendMessage(ChatMessageType.ACTION_BAR, TextComponent.fromLegacyText(ChatColor.WHITE + "Tesseract Connected!"));
-                    }
-                } else if (hasPermision && sfItem.getId().equals(DynaTechItems.TESSERACT.getItemId()) && blockLocation != null) {
-                    ItemMeta im = item.getItemMeta();
-                    String locString = Tesseract.LocationToString(blockLocation);
-                        
-                    PersistentDataAPI.setString(im, Tesseract.WIRELESS_LOCATION_KEY, locString);
-                    item.setItemMeta(im);
-                    Tesseract.setItemLore(item, blockLocation);
-                }
-                
-            }
-        };
-    }    
-}
+package id.universenetwork.sfa_loader.addons.dynatech.items.tools;
+
+import id.universenetwork.sfa_loader.addons.dynatech.DynaTechItems;
+import id.universenetwork.sfa_loader.addons.dynatech.items.electric.transfer.Tesseract;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
+import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.data.persistent.PersistentDataAPI;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
+import me.mrCookieSlime.Slimefun.api.BlockStorage;
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.ChatMessageType;
+import net.md_5.bungee.api.chat.TextComponent;
+import org.bukkit.Location;
+import org.bukkit.block.Block;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.meta.ItemMeta;
+
+import java.util.Optional;
+
+public class TesseractBinder extends SlimefunItem {
+    public TesseractBinder(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
+
+        addItemHandler(bindTesseract());
+    }
+
+    private ItemUseHandler bindTesseract() {
+        return e -> {
+            e.cancel();
+
+            Optional<Block> block = e.getClickedBlock();
+            Optional<SlimefunItem> sfBlock = e.getSlimefunBlock();
+            if (block.isPresent() && sfBlock.isPresent()) {
+                Location blockLocation = block.get().getLocation();
+                SlimefunItem sfItem = sfBlock.get();
+                ItemStack item = e.getItem();
+                boolean hasPermision = Slimefun.getProtectionManager().hasPermission(e.getPlayer(), blockLocation, Interaction.INTERACT_BLOCK);
+
+                if (e.getPlayer().isSneaking()) {
+                    String locString = PersistentDataAPI.getString(item.getItemMeta(), Tesseract.WIRELESS_LOCATION_KEY);
+                    if (item != null && hasPermision && BlockStorage.checkID(blockLocation).equals(DynaTechItems.TESSERACT.getItemId()) && item.hasItemMeta() && locString != null) {
+                        BlockStorage.addBlockInfo(blockLocation, "tesseract-pair-location", locString);
+                        e.getPlayer().spigot().sendMessage(ChatMessageType.ACTION_BAR, TextComponent.fromLegacyText(ChatColor.WHITE + "Tesseract Connected!"));
+                    }
+                } else if (hasPermision && sfItem.getId().equals(DynaTechItems.TESSERACT.getItemId()) && blockLocation != null) {
+                    ItemMeta im = item.getItemMeta();
+                    String locString = Tesseract.LocationToString(blockLocation);
+
+                    PersistentDataAPI.setString(im, Tesseract.WIRELESS_LOCATION_KEY, locString);
+                    item.setItemMeta(im);
+                    Tesseract.setItemLore(item, blockLocation);
+                }
+            }
+        };
+    }
+}
diff --git a/src/main/java/me/profelements/dynatech/listeners/ElectricalStimulatorListener.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/listeners/ElectricalStimulatorListener.java
similarity index 67%
rename from src/main/java/me/profelements/dynatech/listeners/ElectricalStimulatorListener.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/listeners/ElectricalStimulatorListener.java
index e2f50e6..e8f3c87 100644
--- a/src/main/java/me/profelements/dynatech/listeners/ElectricalStimulatorListener.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/listeners/ElectricalStimulatorListener.java
@@ -1,65 +1,56 @@
-package me.profelements.dynatech.listeners;
-
-import io.github.thebusybiscuit.slimefun4.utils.ChargeUtils;
-import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
-import me.profelements.dynatech.DynaTech;
-import me.profelements.dynatech.DynaTechItems;
-import me.profelements.dynatech.items.tools.ElectricalStimulator;
-import org.bukkit.Sound;
-import org.bukkit.entity.Player;
-import org.bukkit.event.EventHandler;
-import org.bukkit.event.Listener;
-import org.bukkit.event.entity.EntityDamageEvent;
-import org.bukkit.event.entity.FoodLevelChangeEvent;
-import org.bukkit.inventory.ItemStack;
-
-import javax.annotation.Nonnull;
-
-public class ElectricalStimulatorListener implements Listener {
-    
-    private final ElectricalStimulator electricalStimulator;
-
-    public ElectricalStimulatorListener(@Nonnull DynaTech plugin, @Nonnull ElectricalStimulator electricalStimulator) {
-        plugin.getServer().getPluginManager().registerEvents(this, plugin);
-        this.electricalStimulator = electricalStimulator;
-    }
-
-    @EventHandler
-    public void onHungerLoss(FoodLevelChangeEvent e) {
-        if (e.getEntity() instanceof Player) {
-            Player p = (Player) e.getEntity();
-            if (p.getFoodLevel() < 20 && feedPlayer(p)) {
-                e.setFoodLevel(20); 
-            }
-        }
-    }
-
-    @EventHandler
-    public void onHungerDamage(EntityDamageEvent e) {
-        if (e.getEntity() instanceof Player && e.getCause() == EntityDamageEvent.DamageCause.STARVATION) {
-            if(feedPlayer((Player) e.getEntity())) {
-                Player p = (Player) e.getEntity();
-                p.setFoodLevel(20);
-                p.setSaturation(20f);
-            }
-        }
-    }
-
-    private boolean feedPlayer(Player p) {
-        if (electricalStimulator == null || electricalStimulator.isDisabled()) {
-            return false;
-       }
-
-        for (ItemStack item : p.getInventory().getStorageContents()) {
-            if (item != null && item.getType() == electricalStimulator.getItem().getType() && SlimefunUtils.isItemSimilar(item, DynaTechItems.ELECTRICAL_STIMULATOR, false, false) && ChargeUtils.getCharge(item.getItemMeta()) > electricalStimulator.getEnergyComsumption()) {
-                if (SlimefunUtils.canPlayerUseItem(p, item, true)) {
-                    p.playSound(p.getLocation(), Sound.ENTITY_PLAYER_BURP, 1F , 1F);
-                    electricalStimulator.removeItemCharge(item,  electricalStimulator.getEnergyComsumption());
-                    return true;
-                }
-            }
-        }
-        return false;
-    }
-
-}
+package id.universenetwork.sfa_loader.addons.dynatech.listeners;
+
+import id.universenetwork.sfa_loader.addons.dynatech.DynaTechItems;
+import id.universenetwork.sfa_loader.addons.dynatech.items.tools.ElectricalStimulator;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Events;
+import io.github.thebusybiscuit.slimefun4.utils.ChargeUtils;
+import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
+import org.bukkit.Sound;
+import org.bukkit.entity.Player;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.event.entity.FoodLevelChangeEvent;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+
+public class ElectricalStimulatorListener implements Listener {
+    private final ElectricalStimulator electricalStimulator;
+
+    public ElectricalStimulatorListener(@Nonnull ElectricalStimulator electricalStimulator) {
+        Events.registerListener(this);
+        this.electricalStimulator = electricalStimulator;
+    }
+
+    @EventHandler
+    public void onHungerLoss(FoodLevelChangeEvent e) {
+        if (e.getEntity() instanceof Player) {
+            Player p = (Player) e.getEntity();
+            if (p.getFoodLevel() < 20 && feedPlayer(p)) e.setFoodLevel(20);
+        }
+    }
+
+    @EventHandler
+    public void onHungerDamage(EntityDamageEvent e) {
+        if (e.getEntity() instanceof Player && e.getCause() == EntityDamageEvent.DamageCause.STARVATION)
+            if (feedPlayer((Player) e.getEntity())) {
+                Player p = (Player) e.getEntity();
+                p.setFoodLevel(20);
+                p.setSaturation(20f);
+            }
+    }
+
+    private boolean feedPlayer(Player p) {
+        if (electricalStimulator == null || electricalStimulator.isDisabled()) return false;
+
+        for (ItemStack item : p.getInventory().getStorageContents())
+            if (item != null && item.getType() == electricalStimulator.getItem().getType() && SlimefunUtils.isItemSimilar(item, DynaTechItems.ELECTRICAL_STIMULATOR, false, false) && ChargeUtils.getCharge(item.getItemMeta()) > electricalStimulator.getEnergyComsumption())
+                if (SlimefunUtils.canPlayerUseItem(p, item, true)) {
+                    p.playSound(p.getLocation(), Sound.ENTITY_PLAYER_BURP, 1F, 1F);
+                    electricalStimulator.removeItemCharge(item, electricalStimulator.getEnergyComsumption());
+                    return true;
+                }
+        return false;
+    }
+}
diff --git a/src/main/java/me/profelements/dynatech/listeners/InventoryFilterListener.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/listeners/InventoryFilterListener.java
similarity index 75%
rename from src/main/java/me/profelements/dynatech/listeners/InventoryFilterListener.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/listeners/InventoryFilterListener.java
index 468e38d..12a34ad 100644
--- a/src/main/java/me/profelements/dynatech/listeners/InventoryFilterListener.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/listeners/InventoryFilterListener.java
@@ -1,76 +1,67 @@
-package me.profelements.dynatech.listeners;
-
-import io.github.thebusybiscuit.slimefun4.api.player.PlayerBackpack;
-import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;
-import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
-import me.profelements.dynatech.DynaTech;
-import me.profelements.dynatech.items.tools.InventoryFilter;
-import org.bukkit.Material;
-import org.bukkit.entity.Player;
-import org.bukkit.event.EventHandler;
-import org.bukkit.event.Listener;
-import org.bukkit.event.entity.EntityPickupItemEvent;
-import org.bukkit.inventory.Inventory;
-import org.bukkit.inventory.ItemStack;
-
-import javax.annotation.Nonnull;
-import java.util.ArrayList;
-import java.util.EnumSet;
-import java.util.List;
-import java.util.Set;
-
-public class InventoryFilterListener implements Listener {
-    
-    private final InventoryFilter inventoryFilter;
-    private final Set<Material> blacklistedMaterials = EnumSet.noneOf(Material.class);
-
-    public InventoryFilterListener(@Nonnull DynaTech plugin, @Nonnull InventoryFilter inventoryFilter) {
-        plugin.getServer().getPluginManager().registerEvents(this, plugin);
-        this.inventoryFilter = inventoryFilter;
-    }
-
-    @EventHandler
-    public void onItemPickup(EntityPickupItemEvent e) {
-        if(e.getEntity() instanceof Player) {
-            checkAndFilter((Player) e.getEntity());
-        }
-    }
-
-    private void checkAndFilter(Player p) {
-        if (inventoryFilter != null && !inventoryFilter.isDisabled()) {
-            for (ItemStack item : p.getInventory().getContents()) {
-                if (item != null && item.getType() == inventoryFilter.getItem().getType() && item.hasItemMeta() && inventoryFilter.isItem(item)) {
-                    if (SlimefunUtils.canPlayerUseItem(p, item, true)) {
-                        PlayerProfile.getBackpack(item, backpack -> DynaTech.runSync(() -> filterInventory(p, backpack)));
-                    }
-                }
-            }
-        }
-    }
-
-    private void filterInventory(@Nonnull Player p, @Nonnull PlayerBackpack backpack) {
-        List<String> blacklistedStrings = new ArrayList<String>();
-        if (backpack.getInventory().isEmpty()) {
-            blacklistedMaterials.clear();
-            blacklistedStrings.clear();
-        }
-
-        for (ItemStack item : backpack.getInventory().getContents()) {
-            if (item != null && item.getType() != Material.AIR) {
-                //Leaving this here to dont have to deal with checking if its using a default or custom name ie if they are farming custom items like SfItems.
-                blacklistedMaterials.add(item.getType());
-                blacklistedStrings.add(item.getItemMeta().getDisplayName());
-            }
-        }
-
-        //CANT DROP AIR SO HAVE TO ITERATE THROUGH THE INVENTORY
-        Inventory inv = p.getInventory();
-        for (ItemStack item : inv.getStorageContents()) {
-            if (item != null && blacklistedMaterials.contains(item.getType()) && blacklistedStrings.contains(item.getItemMeta().getDisplayName())) {
-                    inv.remove(item);
-                    break;
-            }
-        }
-    }
-    
-}
+package id.universenetwork.sfa_loader.addons.dynatech.listeners;
+
+import id.universenetwork.sfa_loader.addons.dynatech.DynaTech;
+import id.universenetwork.sfa_loader.addons.dynatech.items.tools.InventoryFilter;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Events;
+import io.github.thebusybiscuit.slimefun4.api.player.PlayerBackpack;
+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;
+import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
+import org.bukkit.Material;
+import org.bukkit.entity.Player;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+import org.bukkit.event.entity.EntityPickupItemEvent;
+import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+import java.util.ArrayList;
+import java.util.EnumSet;
+import java.util.List;
+import java.util.Set;
+
+public class InventoryFilterListener implements Listener {
+    private final InventoryFilter inventoryFilter;
+    private final Set<Material> blacklistedMaterials = EnumSet.noneOf(Material.class);
+
+    public InventoryFilterListener(@Nonnull InventoryFilter inventoryFilter) {
+        Events.registerListener(this);
+        this.inventoryFilter = inventoryFilter;
+    }
+
+    @EventHandler
+    public void onItemPickup(EntityPickupItemEvent e) {
+        if (e.getEntity() instanceof Player) checkAndFilter((Player) e.getEntity());
+    }
+
+    private void checkAndFilter(Player p) {
+        if (inventoryFilter != null && !inventoryFilter.isDisabled())
+            for (ItemStack item : p.getInventory().getContents())
+                if (item != null && item.getType() == inventoryFilter.getItem().getType() && item.hasItemMeta() && inventoryFilter.isItem(item))
+                    if (SlimefunUtils.canPlayerUseItem(p, item, true))
+                        PlayerProfile.getBackpack(item, backpack -> DynaTech.runSync(() -> filterInventory(p, backpack)));
+    }
+
+    private void filterInventory(@Nonnull Player p, @Nonnull PlayerBackpack backpack) {
+        List<String> blacklistedStrings = new ArrayList<String>();
+        if (backpack.getInventory().isEmpty()) {
+            blacklistedMaterials.clear();
+            blacklistedStrings.clear();
+        }
+
+        for (ItemStack item : backpack.getInventory().getContents())
+            if (item != null && item.getType() != Material.AIR) {
+                //Leaving this here to dont have to deal with checking if its using a default or custom name ie if they are farming custom items like SfItems.
+                blacklistedMaterials.add(item.getType());
+                blacklistedStrings.add(item.getItemMeta().getDisplayName());
+            }
+
+        //CANT DROP AIR SO HAVE TO ITERATE THROUGH THE INVENTORY
+        Inventory inv = p.getInventory();
+        for (ItemStack item : inv.getStorageContents())
+            if (item != null && blacklistedMaterials.contains(item.getType()) && blacklistedStrings.contains(item.getItemMeta().getDisplayName())) {
+                inv.remove(item);
+                break;
+            }
+    }
+}
diff --git a/src/main/java/me/profelements/dynatech/listeners/PicnicBasketListener.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/listeners/PicnicBasketListener.java
similarity index 65%
rename from src/main/java/me/profelements/dynatech/listeners/PicnicBasketListener.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/listeners/PicnicBasketListener.java
index f8d71e7..b25944b 100644
--- a/src/main/java/me/profelements/dynatech/listeners/PicnicBasketListener.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/listeners/PicnicBasketListener.java
@@ -1,118 +1,97 @@
-package me.profelements.dynatech.listeners;
+package id.universenetwork.sfa_loader.addons.dynatech.listeners;
 
+import id.universenetwork.sfa_loader.addons.dynatech.DynaTech;
+import id.universenetwork.sfa_loader.addons.dynatech.events.PicnicBasketFeedPlayerEvent;
+import id.universenetwork.sfa_loader.addons.dynatech.items.backpacks.PicnicBasket;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Events;
 import io.github.thebusybiscuit.exoticgarden.items.CustomFood;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.player.PlayerBackpack;
 import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;
-import me.profelements.dynatech.DynaTech;
-import me.profelements.dynatech.events.PicnicBasketFeedPlayerEvent;
-import me.profelements.dynatech.items.backpacks.PicnicBasket;
-
+import org.bukkit.Bukkit;
 import org.bukkit.Material;
 import org.bukkit.Sound;
 import org.bukkit.entity.Player;
 import org.bukkit.event.EventHandler;
 import org.bukkit.event.Listener;
 import org.bukkit.event.entity.EntityDamageEvent;
-import org.bukkit.event.entity.FoodLevelChangeEvent;
 import org.bukkit.event.entity.EntityDamageEvent.DamageCause;
+import org.bukkit.event.entity.FoodLevelChangeEvent;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.ItemStack;
 
-import java.util.HashMap;
-import java.util.Map;
-
 import javax.annotation.Nonnull;
 import javax.annotation.ParametersAreNonnullByDefault;
+import java.util.HashMap;
+import java.util.Map;
 
 public class PicnicBasketListener implements Listener {
-
-    private final DynaTech plugin;  
     private final PicnicBasket picnicBasket;
-    
+
     @ParametersAreNonnullByDefault
-    public PicnicBasketListener(DynaTech plugin,PicnicBasket picnicBasket) {
-        plugin.getServer().getPluginManager().registerEvents(this, plugin);
+    public PicnicBasketListener(PicnicBasket picnicBasket) {
+        Events.registerListener(this);
 
-        this.plugin = plugin;
         this.picnicBasket = picnicBasket;
     }
-    
-    @EventHandler 
+
+    @EventHandler
     public void onHungerLoss(FoodLevelChangeEvent e) {
-        if (e.getEntity() instanceof Player player && e.getFoodLevel() < player.getFoodLevel()) {
-            checkAndConsume(player);
+        if (e.getEntity() instanceof Player) {
+            final Player player = (Player) e.getEntity();
+            if (e.getFoodLevel() < player.getFoodLevel())
+                checkAndConsume(player);
         }
     }
 
-    @EventHandler 
+    @EventHandler
     public void onHungerDamage(EntityDamageEvent e) {
-        if (e.getEntity() instanceof Player player && e.getCause() == DamageCause.STARVATION) {
-            checkAndConsume(player);
+        if (e.getEntity() instanceof Player) {
+            if (e.getCause() == DamageCause.STARVATION)
+                checkAndConsume((Player) e.getEntity());
         }
-    }       
+    }
 
     private void checkAndConsume(@Nonnull Player p) {
-        if (picnicBasket == null || picnicBasket.isDisabled()) {
-            return; 
-        }
+        if (picnicBasket == null || picnicBasket.isDisabled()) return;
 
         for (ItemStack item : p.getInventory().getContents()) {
-            if (picnicBasket.isItem(item)) { 
+            if (picnicBasket.isItem(item)) {
                 if (picnicBasket.canUse(p, true)) {
                     takeFoodFromPicnicBasket(p, item);
-                } else { 
-                    return; 
-                }
+                } else return;
             }
         }
     }
 
     private void takeFoodFromPicnicBasket(@Nonnull Player p, @Nonnull ItemStack picnicBasket) {
         PlayerProfile.getBackpack(picnicBasket, backpack -> {
-            if (backpack != null) {
-                DynaTech.runSync(() -> consumeFood(p, picnicBasket, backpack));
-            }
+            if (backpack != null) DynaTech.runSync(() -> consumeFood(p, picnicBasket, backpack));
         });
 
     }
-    
+
     private boolean consumeFood(@Nonnull Player p, @Nonnull ItemStack picnicBasketItem, @Nonnull PlayerBackpack backpack) {
         Inventory inv = backpack.getInventory();
         int slot = -1;
 
         for (int i = 0; i < inv.getSize(); i++) {
             ItemStack item = inv.getItem(i);
-            
-            if (item != null) {
-                    slot = i; 
-            }
+
+            if (item != null) slot = i;
         }
 
         if (slot >= 0) {
-            ItemStack item = inv.getItem(slot); 
-            PicnicBasketFeedPlayerEvent event = new PicnicBasketFeedPlayerEvent(p, picnicBasket, picnicBasketItem, item); 
-            plugin.getServer().getPluginManager().callEvent(event);
+            ItemStack item = inv.getItem(slot);
+            PicnicBasketFeedPlayerEvent event = new PicnicBasketFeedPlayerEvent(p, picnicBasket, picnicBasketItem, item);
+            Bukkit.getPluginManager().callEvent(event);
 
             if (!event.isCancelled()) {
                 if (getFoodItems().keySet().contains(item.getType()) && (p.getFoodLevel() + getFoodItems().get(item.getType())) <= 20) {
-                    p.setFoodLevel(p.getFoodLevel() + getFoodItems().get(item.getType())); 
+                    p.setFoodLevel(p.getFoodLevel() + getFoodItems().get(item.getType()));
                     p.setSaturation(p.getSaturation() + 4F);
                     p.playSound(p.getLocation(), Sound.ENTITY_PLAYER_BURP, 1F, 1F);
-                    
-                    
-                    if (item.getAmount() > 1) {
-                        item.setAmount(item.getAmount() - 1); 
-                    } else {
-                        inv.setItem(slot, null); 
-                    }
 
-                    backpack.markDirty();
-                    return true;    
-                } else if (DynaTech.isExoticGardenInstalled() && SlimefunItem.getByItem(item) instanceof CustomFood customFood && (p.getFoodLevel() + customFood.getFoodValue()) <= 20) {
-                    p.setFoodLevel(p.getFoodLevel() + customFood.getFoodValue()); 
-                    p.setSaturation(p.getSaturation() + 4F);
-                    p.playSound(p.getLocation(), Sound.ENTITY_PLAYER_BURP, 1F, 1F); 
 
                     if (item.getAmount() > 1) {
                         item.setAmount(item.getAmount() - 1);
@@ -120,11 +99,24 @@ public class PicnicBasketListener implements Listener {
                         inv.setItem(slot, null);
                     }
 
-                   backpack.markDirty();
-                   return true;
-                } else { 
+                    backpack.markDirty();
+                    return true;
+                } else if (DynaTech.isExoticGardenInstalled() && SlimefunItem.getByItem(item) instanceof CustomFood) {
+                    CustomFood customFood = (CustomFood) SlimefunItem.getByItem(item);
+                    if ((p.getFoodLevel() + customFood.getFoodValue()) <= 20) {
+                        p.setFoodLevel(p.getFoodLevel() + customFood.getFoodValue());
+                        p.setSaturation(p.getSaturation() + 4F);
+                        p.playSound(p.getLocation(), Sound.ENTITY_PLAYER_BURP, 1F, 1F);
+
+                        if (item.getAmount() > 1) item.setAmount(item.getAmount() - 1);
+                        else inv.setItem(slot, null);
+
+                        backpack.markDirty();
+                        return true;
+                    }
+                } else {
                     //TODO: THIS SHOULD NEVER HAPPEN IF IT DOES SOMETHING DID A BIG NO NO
-                    return false; 
+                    return false;
                 }
             }
         }
@@ -133,7 +125,7 @@ public class PicnicBasketListener implements Listener {
 
     private Map<Material, Integer> getFoodItems() {
         Map<Material, Integer> foods = new HashMap<Material, Integer>();
-                
+
         foods.put(Material.COOKED_PORKCHOP, 8);
         foods.put(Material.PUMPKIN_PIE, 8);
         foods.put(Material.COOKED_BEEF, 8);
@@ -164,5 +156,5 @@ public class PicnicBasketListener implements Listener {
         foods.put(Material.TROPICAL_FISH, 1);
 
         return foods;
-    } 
+    }
 }
diff --git a/src/main/java/me/profelements/dynatech/setup/DynaTechItemsSetup.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/setup/DynaTechItemsSetup.java
similarity index 58%
rename from src/main/java/me/profelements/dynatech/setup/DynaTechItemsSetup.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/setup/DynaTechItemsSetup.java
index 32b57d9..28157b3 100644
--- a/src/main/java/me/profelements/dynatech/setup/DynaTechItemsSetup.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/setup/DynaTechItemsSetup.java
@@ -1,8 +1,23 @@
-package me.profelements.dynatech.setup;
+package id.universenetwork.sfa_loader.addons.dynatech.setup;
 
-import io.github.mooy1.infinityexpansion.items.mobdata.MobData;
-import io.github.mooy1.infinityexpansion.items.mobdata.MobDataCard;
-import io.github.mooy1.infinityexpansion.items.mobdata.MobDataTier;
+import dev.j3fftw.extrautils.utils.LoreBuilderDynamic;
+import id.universenetwork.sfa_loader.AddonsLoader;
+import id.universenetwork.sfa_loader.addons.dynatech.DynaTech;
+import id.universenetwork.sfa_loader.addons.dynatech.DynaTechItems;
+import id.universenetwork.sfa_loader.addons.dynatech.items.backpacks.PicnicBasket;
+import id.universenetwork.sfa_loader.addons.dynatech.items.backpacks.SoulboundPicnicBacket;
+import id.universenetwork.sfa_loader.addons.dynatech.items.electric.*;
+import id.universenetwork.sfa_loader.addons.dynatech.items.electric.generators.*;
+import id.universenetwork.sfa_loader.addons.dynatech.items.electric.growthchambers.*;
+import id.universenetwork.sfa_loader.addons.dynatech.items.electric.machines.MineralizedApiary;
+import id.universenetwork.sfa_loader.addons.dynatech.items.electric.machines.Orechid;
+import id.universenetwork.sfa_loader.addons.dynatech.items.electric.transfer.*;
+import id.universenetwork.sfa_loader.addons.dynatech.items.misc.*;
+import id.universenetwork.sfa_loader.addons.dynatech.items.tools.*;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.mobdata.MobData;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.mobdata.MobDataCard;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.mobdata.MobDataTier;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.SlimefunAddonInstance;
 import io.github.thebusybiscuit.slimefun4.api.SlimefunAddon;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -15,588 +30,533 @@ import io.github.thebusybiscuit.slimefun4.libraries.dough.items.ItemUtils;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.skins.PlayerHead;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.skins.PlayerSkin;
 import io.github.thebusybiscuit.slimefun4.utils.LoreBuilder;
-import me.profelements.dynatech.DynaTech;
-import me.profelements.dynatech.DynaTechItems;
-import me.profelements.dynatech.items.backpacks.PicnicBasket;
-import me.profelements.dynatech.items.backpacks.SoulboundPicnicBacket;
-import me.profelements.dynatech.items.electric.AntigravityBubble;
-import me.profelements.dynatech.items.electric.BandaidManager;
-import me.profelements.dynatech.items.electric.BarbedWire;
-import me.profelements.dynatech.items.electric.FurnaceController;
-import me.profelements.dynatech.items.electric.KitchenAutoCrafter;
-import me.profelements.dynatech.items.electric.MaterialHive;
-import me.profelements.dynatech.items.electric.PotionSprinkler;
-import me.profelements.dynatech.items.electric.SeedPlucker;
-import me.profelements.dynatech.items.electric.WeatherController;
-import me.profelements.dynatech.items.electric.WirelessCharger;
-import me.profelements.dynatech.items.electric.machines.MineralizedApiary;
-import me.profelements.dynatech.items.electric.machines.Orechid;
-import me.profelements.dynatech.items.electric.generators.ChippingGenerator;
-import me.profelements.dynatech.items.electric.generators.CulinaryGenerator;
-import me.profelements.dynatech.items.electric.generators.DragonEggGenerator;
-import me.profelements.dynatech.items.electric.generators.HydroGenerator;
-import me.profelements.dynatech.items.electric.generators.StardustReactor;
-import me.profelements.dynatech.items.electric.growthchambers.GrowthChamber;
-import me.profelements.dynatech.items.electric.growthchambers.GrowthChamberEnd;
-import me.profelements.dynatech.items.electric.growthchambers.GrowthChamberEndMK2;
-import me.profelements.dynatech.items.electric.growthchambers.GrowthChamberMK2;
-import me.profelements.dynatech.items.electric.growthchambers.GrowthChamberNether;
-import me.profelements.dynatech.items.electric.growthchambers.GrowthChamberNetherMK2;
-import me.profelements.dynatech.items.electric.growthchambers.GrowthChamberOcean;
-import me.profelements.dynatech.items.electric.growthchambers.GrowthChamberOceanMK2;
-import me.profelements.dynatech.items.electric.transfer.Tesseract;
-import me.profelements.dynatech.items.electric.transfer.WirelessEnergyBank;
-import me.profelements.dynatech.items.electric.transfer.WirelessEnergyPoint;
-import me.profelements.dynatech.items.electric.transfer.WirelessItemInput;
-import me.profelements.dynatech.items.electric.transfer.WirelessItemOutput;
-import me.profelements.dynatech.items.misc.Bee;
-import me.profelements.dynatech.items.misc.ItemBand;
-import me.profelements.dynatech.items.misc.MobDropItem;
-import me.profelements.dynatech.items.misc.StarDustMeteor;
-import me.profelements.dynatech.items.misc.VexGem;
-import me.profelements.dynatech.items.misc.WitherGolem;
-import me.profelements.dynatech.items.tools.AngelGem;
-import me.profelements.dynatech.items.tools.DimensionalHome;
-import me.profelements.dynatech.items.tools.ElectricalStimulator;
-import me.profelements.dynatech.items.tools.InventoryFilter;
-import me.profelements.dynatech.items.tools.LiquidTank;
-import me.profelements.dynatech.items.tools.Scoop;
-import me.profelements.dynatech.items.tools.TesseractBinder;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 
-import dev.j3fftw.extrautils.utils.LoreBuilderDynamic;
-
-import javax.annotation.Nonnull;
-
 public class DynaTechItemsSetup {
-
-    private DynaTechItemsSetup() {}
-
-    public static void setup(@Nonnull DynaTech plugin) {
+    public static void setup() {
 
         //General
         //Resources
         new SlimefunItem(DynaTechItems.DT_RESOURCES, DynaTechItems.STAINLESS_STEEL, RecipeType.SMELTERY,
-        new ItemStack[] {
-            new ItemStack(Material.IRON_INGOT), SlimefunItems.IRON_DUST, SlimefunItems.ZINC_DUST,
+            new ItemStack[]{
+                new ItemStack(Material.IRON_INGOT), SlimefunItems.IRON_DUST, SlimefunItems.ZINC_DUST,
                 null, null, null,
                 null, null, null,
-        }).register(plugin);
+            }).register(SlimefunAddonInstance.getSFAInstance());
 
         new SlimefunItem(DynaTechItems.DT_RESOURCES, DynaTechItems.STAINLESS_STEEL_ROTOR, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
+            new ItemStack[]{
                 null, DynaTechItems.STAINLESS_STEEL, null,
                 DynaTechItems.STAINLESS_STEEL, new ItemStack(Material.IRON_BLOCK), DynaTechItems.STAINLESS_STEEL,
                 null, DynaTechItems.STAINLESS_STEEL, null
-        }).register(plugin);
-        
+            }).register(SlimefunAddonInstance.getSFAInstance());
+
         new SlimefunItem(DynaTechItems.DT_RESOURCES, DynaTechItems.ANCIENT_MACHINE_CORE, RecipeType.MAGIC_WORKBENCH,
-            new ItemStack[] {
+            new ItemStack[]{
                 SlimefunItems.LEAD_INGOT, SlimefunItems.MAGIC_LUMP_1, SlimefunItems.LEAD_INGOT,
                 SlimefunItems.MAGIC_LUMP_1, new ItemStack(Material.REDSTONE_BLOCK), SlimefunItems.MAGIC_LUMP_1,
                 SlimefunItems.LEAD_INGOT, SlimefunItems.MAGIC_LUMP_1, SlimefunItems.LEAD_INGOT
-        }).register(plugin);
+            }).register(SlimefunAddonInstance.getSFAInstance());
 
         new SlimefunItem(DynaTechItems.DT_RESOURCES, DynaTechItems.MACHINE_SCRAP, RecipeType.GRIND_STONE,
-            new ItemStack[] {
-                    SlimefunItems.PROGRAMMABLE_ANDROID, null, null,
-                    null, null, null,
-                    null, null, null,
-        }, new SlimefunItemStack(DynaTechItems.MACHINE_SCRAP, 8)).register(plugin);
-                
+            new ItemStack[]{
+                SlimefunItems.PROGRAMMABLE_ANDROID, null, null,
+                null, null, null,
+                null, null, null,
+            }, new SlimefunItemStack(DynaTechItems.MACHINE_SCRAP, 8)).register(SlimefunAddonInstance.getSFAInstance());
+
         new SlimefunItem(DynaTechItems.DT_RESOURCES, DynaTechItems.ADVANCED_MACHINE_SCRAP, RecipeType.GRIND_STONE,
-            new ItemStack[] {
+            new ItemStack[]{
                 SlimefunItems.PROGRAMMABLE_ANDROID_2, null, null,
                 null, null, null,
                 null, null, null,
-        }, new SlimefunItemStack(DynaTechItems.ADVANCED_MACHINE_SCRAP, 8)).register(plugin);
+            }, new SlimefunItemStack(DynaTechItems.ADVANCED_MACHINE_SCRAP, 8)).register(SlimefunAddonInstance.getSFAInstance());
 
-        new VexGem(DynaTechItems.DT_RESOURCES, DynaTechItems.VEX_GEM, RecipeType.MOB_DROP, 
-            new ItemStack[] {
+        new VexGem(DynaTechItems.DT_RESOURCES, DynaTechItems.VEX_GEM, RecipeType.MOB_DROP,
+            new ItemStack[]{
                 null, null, null,
                 null, new CustomItemStack(PlayerHead.getItemStack(PlayerSkin.fromHashCode("c2ec5a516617ff1573cd2f9d5f3969f56d5575c4ff4efefabd2a18dc7ab98cd")), "&aVex"), null,
                 null, null, null
-        }).register(plugin);
-        
-        RecipeType.MAGIC_WORKBENCH.register(new ItemStack[] {
+            }).register(SlimefunAddonInstance.getSFAInstance());
+
+        RecipeType.MAGIC_WORKBENCH.register(new ItemStack[]{
             null, SlimefunItems.SYNTHETIC_SAPPHIRE, null,
             new ItemStack(Material.PHANTOM_MEMBRANE), SlimefunItems.MAGIC_LUMP_3, new ItemStack(Material.PHANTOM_MEMBRANE),
             DynaTechItems.STAR_DUST, DynaTechItems.STAR_DUST, DynaTechItems.STAR_DUST
         }, DynaTechItems.VEX_GEM);
 
         new SlimefunItem(DynaTechItems.DT_RESOURCES, DynaTechItems.STAR_DUST, RecipeType.GRIND_STONE,
-            new ItemStack[] {
+            new ItemStack[]{
                 StarDustMeteor.STARDUST_METEOR, null, null,
                 null, null, null,
                 null, null, null
-        }).register(plugin);
-            
-        new StarDustMeteor(DynaTechItems.DT_RESOURCES).register(plugin);
+            }).register(SlimefunAddonInstance.getSFAInstance());
+
+        new StarDustMeteor(DynaTechItems.DT_RESOURCES).register(SlimefunAddonInstance.getSFAInstance());
 
-        new MobDropItem(DynaTechItems.DT_RESOURCES, DynaTechItems.GHOSTLY_ESSENCE, RecipeType.MOB_DROP, 
-            new ItemStack[] {
+        new MobDropItem(DynaTechItems.DT_RESOURCES, DynaTechItems.GHOSTLY_ESSENCE, RecipeType.MOB_DROP,
+            new ItemStack[]{
                 null, null, null,
                 null, new CustomItemStack(PlayerHead.getItemStack(PlayerSkin.fromHashCode("c2ec5a516617ff1573cd2f9d5f3969f56d5575c4ff4efefabd2a18dc7ab98cd")), "&aVex"), null,
                 null, null, null
-        }, 80).register(plugin);
+            }, 80).register(SlimefunAddonInstance.getSFAInstance());
 
         new SlimefunItem(DynaTechItems.DT_RESOURCES, DynaTechItems.TESSERACTING_OBJ, RecipeType.ANCIENT_ALTAR,
-            new ItemStack[] {
-                DynaTechItems.GHOSTLY_ESSENCE, SlimefunItems.ENDER_RUNE, DynaTechItems.VEX_GEM, 
-                SlimefunItems.ENDER_RUNE, new ItemStack(Material.WITHER_ROSE), SlimefunItems.ENDER_RUNE, 
+            new ItemStack[]{
+                DynaTechItems.GHOSTLY_ESSENCE, SlimefunItems.ENDER_RUNE, DynaTechItems.VEX_GEM,
+                SlimefunItems.ENDER_RUNE, new ItemStack(Material.WITHER_ROSE), SlimefunItems.ENDER_RUNE,
                 DynaTechItems.VEX_GEM, SlimefunItems.ENDER_RUNE, DynaTechItems.GHOSTLY_ESSENCE
             }
-        ).register(plugin);
+        ).register(SlimefunAddonInstance.getSFAInstance());
 
         new Bee(DynaTechItems.DT_RESOURCES, DynaTechItems.BEE, DynaTechItems.DynaTechScoop,
-            new ItemStack[] {
+            new ItemStack[]{
                 null, null, null,
                 null, new CustomItemStack(PlayerHead.getItemStack(PlayerSkin.fromHashCode("12724a9a4cdd68ba49415560e5be40b4a1c47cb5be1d66aedb52a30e62ef2d47")), "&aAny Bee"), null,
                 null, null, null
             }, 2
-        ).register(plugin);
+        ).register(SlimefunAddonInstance.getSFAInstance());
 
         new Bee(DynaTechItems.DT_RESOURCES, DynaTechItems.ROBOTIC_BEE, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
+            new ItemStack[]{
                 SlimefunItems.REINFORCED_ALLOY_INGOT, SlimefunItems.REINFORCED_ALLOY_INGOT, SlimefunItems.REINFORCED_ALLOY_INGOT,
                 SlimefunItems.SYNTHETIC_SAPPHIRE, DynaTechItems.MACHINE_SCRAP, SlimefunItems.SYNTHETIC_SAPPHIRE,
                 SlimefunItems.REINFORCED_ALLOY_INGOT, DynaTechItems.ANCIENT_MACHINE_CORE, SlimefunItems.REINFORCED_ALLOY_INGOT
             }, 7
-        ).register(plugin);
+        ).register(SlimefunAddonInstance.getSFAInstance());
 
         new Bee(DynaTechItems.DT_RESOURCES, DynaTechItems.ADVANCED_ROBOTIC_BEE, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
+            new ItemStack[]{
                 SlimefunItems.REINFORCED_PLATE, SlimefunItems.REINFORCED_PLATE, SlimefunItems.REINFORCED_PLATE,
                 DynaTechItems.VEX_GEM, DynaTechItems.ADVANCED_MACHINE_SCRAP, DynaTechItems.VEX_GEM,
                 SlimefunItems.GOLD_24K_BLOCK, DynaTechItems.ANCIENT_MACHINE_CORE, SlimefunItems.GOLD_24K_BLOCK
             }, 11
-        ).register(plugin);
+        ).register(SlimefunAddonInstance.getSFAInstance());
+
 
-        
         //Machines
         //Generators
 
 
         //Materials
-        
 
-        
+
         //Tools
         new PicnicBasket(27, DynaTechItems.DT_TOOLS, DynaTechItems.PICNIC_BASKET, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
+            new ItemStack[]{
                 SlimefunItems.CLOTH, SlimefunItems.CLOTH, SlimefunItems.CLOTH,
                 new ItemStack(Material.BAMBOO), SlimefunItems.COOLER, new ItemStack(Material.BAMBOO),
                 SlimefunItems.HEATING_COIL, new ItemStack(Material.BAMBOO), SlimefunItems.COOLING_UNIT
-        }).register(plugin);
-        
+            }).register(SlimefunAddonInstance.getSFAInstance());
+
         new SoulboundPicnicBacket(27, DynaTechItems.DT_TOOLS, DynaTechItems.SOULBOUND_PICNIC_BASKET, RecipeType.MAGIC_WORKBENCH,
-                new ItemStack[] {
+            new ItemStack[]{
                 new ItemStack(Material.CRYING_OBSIDIAN), SlimefunItems.ENDER_RUNE, new ItemStack(Material.CRYING_OBSIDIAN),
                 SlimefunItems.ENDER_RUNE, DynaTechItems.PICNIC_BASKET, SlimefunItems.ENDER_RUNE,
                 new ItemStack(Material.CRYING_OBSIDIAN), SlimefunItems.ENDER_RUNE, new ItemStack(Material.CRYING_OBSIDIAN)
-        }).register(plugin);
+            }).register(SlimefunAddonInstance.getSFAInstance());
 
         new InventoryFilter(DynaTechItems.DT_TOOLS, DynaTechItems.INVENTORY_FILTER, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
+            new ItemStack[]{
                 SlimefunItems.REINFORCED_CLOTH, new ItemStack(Material.IRON_BARS), SlimefunItems.REINFORCED_CLOTH,
                 new ItemStack(Material.IRON_BARS), null, new ItemStack(Material.IRON_BARS),
                 SlimefunItems.REINFORCED_CLOTH, new ItemStack(Material.IRON_BARS), SlimefunItems.REINFORCED_CLOTH
-        }).register(plugin);
+            }).register(SlimefunAddonInstance.getSFAInstance());
 
         new ElectricalStimulator(DynaTechItems.DT_TOOLS, DynaTechItems.ELECTRICAL_STIMULATOR, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
+            new ItemStack[]{
                 DynaTechItems.STAINLESS_STEEL, null, DynaTechItems.STAINLESS_STEEL,
                 DynaTechItems.STAINLESS_STEEL, SlimefunItems.FOOD_FABRICATOR, DynaTechItems.STAINLESS_STEEL,
                 SlimefunItems.PLASTIC_SHEET, SlimefunItems.PLASTIC_SHEET, SlimefunItems.PLASTIC_SHEET
-        }).register(plugin);
+            }).register(SlimefunAddonInstance.getSFAInstance());
 
         new AngelGem(DynaTechItems.DT_TOOLS, DynaTechItems.ANGEL_GEM, RecipeType.ANCIENT_ALTAR,
-            new ItemStack[] {
+            new ItemStack[]{
                 new ItemStack(Material.NETHERITE_INGOT), SlimefunItems.NUCLEAR_REACTOR, new ItemStack(Material.NETHERITE_INGOT),
                 SlimefunItems.GOLD_24K_BLOCK, DynaTechItems.VEX_GEM, SlimefunItems.GOLD_24K_BLOCK,
                 SlimefunItems.BLISTERING_INGOT_3, DynaTechItems.STAINLESS_STEEL_ROTOR, SlimefunItems.BLISTERING_INGOT_3
-        }).register(plugin);
+            }).register(SlimefunAddonInstance.getSFAInstance());
 
         new Scoop(DynaTechItems.DT_TOOLS, DynaTechItems.SCOOP, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
+            new ItemStack[]{
                 new ItemStack(Material.WHITE_WOOL), new ItemStack(Material.WHITE_WOOL), new ItemStack(Material.WHITE_WOOL),
                 new ItemStack(Material.WHITE_WOOL), SlimefunItems.BATTERY, new ItemStack(Material.WHITE_WOOL),
                 null, new ItemStack(Material.STICK), null
-        }).register(plugin);
+            }).register(SlimefunAddonInstance.getSFAInstance());
 
         new DimensionalHome(DynaTechItems.DT_TOOLS, DynaTechItems.DIMENSIONAL_HOME, RecipeType.MAGIC_WORKBENCH,
-            new ItemStack[] {
+            new ItemStack[]{
                 null, null, SlimefunItems.GOLD_24K_BLOCK,
                 SlimefunItems.BRONZE_INGOT, new ItemStack(Material.BLAZE_ROD), null,
                 SlimefunItems.SYNTHETIC_SAPPHIRE, SlimefunItems.BRONZE_INGOT, null
-        }).register(plugin);
-        
+            }).register(SlimefunAddonInstance.getSFAInstance());
+
         new ItemBand(DynaTechItems.DT_TOOLS, DynaTechItems.ITEM_BAND_HEALTH, RecipeType.MAGIC_WORKBENCH,
-            new ItemStack[] {
+            new ItemStack[]{
                 new ItemStack(Material.GOLDEN_CARROT), new ItemStack(Material.NETHER_STAR), new ItemStack(Material.GOLDEN_CARROT),
                 new ItemStack(Material.NETHER_STAR), DynaTechItems.VEX_GEM, new ItemStack(Material.NETHER_STAR),
                 new ItemStack(Material.GOLDEN_CARROT), new ItemStack(Material.NETHER_STAR), new ItemStack(Material.GOLDEN_CARROT)
-            }, new PotionEffect[] {new PotionEffect(PotionEffectType.HEALTH_BOOST, 20*15, 1, true) }
-        ).register(plugin);
+            }, new PotionEffect[]{new PotionEffect(PotionEffectType.HEALTH_BOOST, 20 * 15, 1, true)}
+        ).register(SlimefunAddonInstance.getSFAInstance());
 
         new ItemBand(DynaTechItems.DT_TOOLS, DynaTechItems.ITEM_BAND_HASTE, RecipeType.MAGIC_WORKBENCH,
-            new ItemStack[] {
+            new ItemStack[]{
                 SlimefunItems.COBALT_PICKAXE, new ItemStack(Material.NETHER_STAR), SlimefunItems.COBALT_PICKAXE,
                 new ItemStack(Material.NETHER_STAR), DynaTechItems.VEX_GEM, new ItemStack(Material.NETHER_STAR),
                 SlimefunItems.COBALT_PICKAXE, new ItemStack(Material.NETHER_STAR), SlimefunItems.COBALT_PICKAXE
-            }, new PotionEffect[] {new PotionEffect(PotionEffectType.FAST_DIGGING, 20*15, 1, true) }    
-        ).register(plugin);
+            }, new PotionEffect[]{new PotionEffect(PotionEffectType.FAST_DIGGING, 20 * 15, 1, true)}
+        ).register(SlimefunAddonInstance.getSFAInstance());
 
-        new TesseractBinder(DynaTechItems.DT_TOOLS, DynaTechItems.TESSERACT_BINDER, RecipeType.MAGIC_WORKBENCH, 
-            new ItemStack[] {
+        new TesseractBinder(DynaTechItems.DT_TOOLS, DynaTechItems.TESSERACT_BINDER, RecipeType.MAGIC_WORKBENCH,
+            new ItemStack[]{
                 null, DynaTechItems.TESSERACTING_OBJ, null,
                 null, DynaTechItems.STAINLESS_STEEL, null,
                 null, DynaTechItems.STAINLESS_STEEL, null,
             }
-        ).register(plugin);
+        ).register(SlimefunAddonInstance.getSFAInstance());
 
-        if (DynaTech.isInfinityExpansionInstalled()) {
-            new MobDataCard("Vex", MobDataTier.HOSTILE, new ItemStack[] {
+        if (AddonsLoader.isAddonLoaded("InfinityExpansion")) {
+            new MobDataCard("Vex", MobDataTier.HOSTILE, new ItemStack[]{
                 new SlimefunItemStack(DynaTechItems.VEX_GEM, 16), new SlimefunItemStack(DynaTechItems.GHOSTLY_ESSENCE, 16), new SlimefunItemStack(DynaTechItems.VEX_GEM, 16),
                 new SlimefunItemStack(DynaTechItems.GHOSTLY_ESSENCE, 16), MobData.EMPTY_DATA_CARD, new SlimefunItemStack(DynaTechItems.GHOSTLY_ESSENCE, 16),
                 new SlimefunItemStack(DynaTechItems.VEX_GEM, 16), new SlimefunItemStack(DynaTechItems.GHOSTLY_ESSENCE, 16), new SlimefunItemStack(DynaTechItems.VEX_GEM, 16)
             })
-            .addDrop(DynaTechItems.VEX_GEM, 1)
-            .addDrop(DynaTechItems.GHOSTLY_ESSENCE, 9)
-            .register(plugin);
+                .addDrop(DynaTechItems.VEX_GEM, 1)
+                .addDrop(DynaTechItems.GHOSTLY_ESSENCE, 9)
+                .register(SlimefunAddonInstance.getSFAInstance());
 
-            new MobDataCard("Phantom", MobDataTier.HOSTILE, new ItemStack[] {
+            new MobDataCard("Phantom", MobDataTier.HOSTILE, new ItemStack[]{
                 new ItemStack(Material.PHANTOM_MEMBRANE, 16), new ItemStack(Material.PHANTOM_MEMBRANE, 16), new ItemStack(Material.PHANTOM_MEMBRANE, 16),
                 new ItemStack(Material.PHANTOM_MEMBRANE, 16), MobData.EMPTY_DATA_CARD, new ItemStack(Material.PHANTOM_MEMBRANE, 16),
                 new ItemStack(Material.PHANTOM_MEMBRANE, 16), new ItemStack(Material.PHANTOM_MEMBRANE, 16), new ItemStack(Material.PHANTOM_MEMBRANE, 16),
             })
-            .addDrop(Material.PHANTOM_MEMBRANE, 0.25f)
-            .register(plugin);
+                .addDrop(Material.PHANTOM_MEMBRANE, 0.25f)
+                .register(SlimefunAddonInstance.getSFAInstance());
         }
-        
-        new WitherGolem(DynaTechItems.DT_TOOLS, DynaTechItems.WITHER_GOLEM).register(plugin);
+
+        new WitherGolem(DynaTechItems.DT_TOOLS, DynaTechItems.WITHER_GOLEM).register(SlimefunAddonInstance.getSFAInstance());
 
         //Machines
         if (DynaTech.isExoticGardenInstalled()) {
             new KitchenAutoCrafter(DynaTechItems.DT_MACHINES, DynaTechItems.KITCHEN_AUTO_CRAFTER, RecipeType.ENHANCED_CRAFTING_TABLE,
-                new ItemStack[] {
-                new ItemStack(Material.BRICK), SlimefunItems.ELECTRIC_FURNACE, new ItemStack(Material.BRICK),
-                DynaTechItems.STAINLESS_STEEL, SlimefunItems.GOLD_24K_BLOCK, DynaTechItems.STAINLESS_STEEL,
-                new ItemStack(Material.TERRACOTTA), new ItemStack(Material.TERRACOTTA), new ItemStack(Material.TERRACOTTA),
-            })
-            .setCapacity(512)
-            .setEnergyConsumption(16)
-            .register(plugin); 
+                new ItemStack[]{
+                    new ItemStack(Material.BRICK), SlimefunItems.ELECTRIC_FURNACE, new ItemStack(Material.BRICK),
+                    DynaTechItems.STAINLESS_STEEL, SlimefunItems.GOLD_24K_BLOCK, DynaTechItems.STAINLESS_STEEL,
+                    new ItemStack(Material.TERRACOTTA), new ItemStack(Material.TERRACOTTA), new ItemStack(Material.TERRACOTTA),
+                })
+                .setCapacity(512)
+                .setEnergyConsumption(16)
+                .register(SlimefunAddonInstance.getSFAInstance());
         }
-       
+
         new GrowthChamber(DynaTechItems.DT_MACHINES, DynaTechItems.GROWTH_CHAMBER, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
-                SlimefunItems.HARDENED_GLASS,SlimefunItems.TREE_GROWTH_ACCELERATOR,SlimefunItems.HARDENED_GLASS,
-                new ItemStack(Material.BONE_BLOCK),new ItemStack(Material.GRASS_BLOCK),new ItemStack(Material.BONE_BLOCK),
-                DynaTechItems.STAINLESS_STEEL,SlimefunItems.CROP_GROWTH_ACCELERATOR_2,DynaTechItems.STAINLESS_STEEL
-        })
-        .setCapacity(512)
-        .setConsumption(32)
-        .setProcessingSpeed(1)
-        .register(plugin);
+            new ItemStack[]{
+                SlimefunItems.HARDENED_GLASS, SlimefunItems.TREE_GROWTH_ACCELERATOR, SlimefunItems.HARDENED_GLASS,
+                new ItemStack(Material.BONE_BLOCK), new ItemStack(Material.GRASS_BLOCK), new ItemStack(Material.BONE_BLOCK),
+                DynaTechItems.STAINLESS_STEEL, SlimefunItems.CROP_GROWTH_ACCELERATOR_2, DynaTechItems.STAINLESS_STEEL
+            })
+            .setCapacity(512)
+            .setConsumption(32)
+            .setProcessingSpeed(1)
+            .register(SlimefunAddonInstance.getSFAInstance());
 
         new GrowthChamberMK2(DynaTechItems.DT_MACHINES, DynaTechItems.GROWTH_CHAMBER_MK2, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
-                SlimefunItems.STEEL_PLATE,DynaTechItems.GROWTH_CHAMBER,SlimefunItems.STEEL_PLATE,
-                new ItemStack(Material.GRASS_BLOCK),new ItemStack(Material.LIME_STAINED_GLASS),new ItemStack(Material.SAND),
-                SlimefunItems.STEEL_PLATE,DynaTechItems.GROWTH_CHAMBER,SlimefunItems.STEEL_PLATE
-        })
-        .setCapacity(1024)
-        .setConsumption(128)
-        .setProcessingSpeed(3)
-        .register(plugin);
+            new ItemStack[]{
+                SlimefunItems.STEEL_PLATE, DynaTechItems.GROWTH_CHAMBER, SlimefunItems.STEEL_PLATE,
+                new ItemStack(Material.GRASS_BLOCK), new ItemStack(Material.LIME_STAINED_GLASS), new ItemStack(Material.SAND),
+                SlimefunItems.STEEL_PLATE, DynaTechItems.GROWTH_CHAMBER, SlimefunItems.STEEL_PLATE
+            })
+            .setCapacity(1024)
+            .setConsumption(128)
+            .setProcessingSpeed(3)
+            .register(SlimefunAddonInstance.getSFAInstance());
 
         new GrowthChamberEnd(DynaTechItems.DT_MACHINES, DynaTechItems.GROWTH_CHAMBER_END, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
-                SlimefunItems.HARDENED_GLASS,new ItemStack(Material.MAGENTA_STAINED_GLASS),SlimefunItems.HARDENED_GLASS,
-                new ItemStack(Material.PURPUR_BLOCK),new ItemStack(Material.CHORUS_FLOWER),new ItemStack(Material.END_STONE),
-                DynaTechItems.STAINLESS_STEEL,DynaTechItems.GROWTH_CHAMBER,DynaTechItems.STAINLESS_STEEL
-        })
-        .setCapacity(512)
-        .setConsumption(32)
-        .setProcessingSpeed(1)
-        .register(plugin);
+            new ItemStack[]{
+                SlimefunItems.HARDENED_GLASS, new ItemStack(Material.MAGENTA_STAINED_GLASS), SlimefunItems.HARDENED_GLASS,
+                new ItemStack(Material.PURPUR_BLOCK), new ItemStack(Material.CHORUS_FLOWER), new ItemStack(Material.END_STONE),
+                DynaTechItems.STAINLESS_STEEL, DynaTechItems.GROWTH_CHAMBER, DynaTechItems.STAINLESS_STEEL
+            })
+            .setCapacity(512)
+            .setConsumption(32)
+            .setProcessingSpeed(1)
+            .register(SlimefunAddonInstance.getSFAInstance());
 
         new GrowthChamberEndMK2(DynaTechItems.DT_MACHINES, DynaTechItems.GROWTH_CHAMBER_END_MK2, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
-                SlimefunItems.STEEL_PLATE,DynaTechItems.GROWTH_CHAMBER_END,SlimefunItems.STEEL_PLATE,
-                new ItemStack(Material.PURPUR_PILLAR),new ItemStack(Material.PURPLE_STAINED_GLASS),new ItemStack(Material.END_STONE_BRICKS),
-                SlimefunItems.STEEL_PLATE,DynaTechItems.GROWTH_CHAMBER_END,SlimefunItems.STEEL_PLATE
-        })
-        .setCapacity(1024)
-        .setConsumption(128)
-        .setProcessingSpeed(3)
-        .register(plugin);
+            new ItemStack[]{
+                SlimefunItems.STEEL_PLATE, DynaTechItems.GROWTH_CHAMBER_END, SlimefunItems.STEEL_PLATE,
+                new ItemStack(Material.PURPUR_PILLAR), new ItemStack(Material.PURPLE_STAINED_GLASS), new ItemStack(Material.END_STONE_BRICKS),
+                SlimefunItems.STEEL_PLATE, DynaTechItems.GROWTH_CHAMBER_END, SlimefunItems.STEEL_PLATE
+            })
+            .setCapacity(1024)
+            .setConsumption(128)
+            .setProcessingSpeed(3)
+            .register(SlimefunAddonInstance.getSFAInstance());
 
         new GrowthChamberNether(DynaTechItems.DT_MACHINES, DynaTechItems.GROWTH_CHAMBER_NETHER, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
-                SlimefunItems.HARDENED_GLASS,new ItemStack(Material.RED_STAINED_GLASS),SlimefunItems.HARDENED_GLASS,
-                new ItemStack(Material.CRIMSON_NYLIUM),new ItemStack(Material.SOUL_SAND),new ItemStack(Material.WARPED_NYLIUM),
-                DynaTechItems.STAINLESS_STEEL,DynaTechItems.GROWTH_CHAMBER,DynaTechItems.STAINLESS_STEEL
-        })
-        .setCapacity(512)
-        .setConsumption(32)
-        .setProcessingSpeed(1)
-        .register(plugin);
+            new ItemStack[]{
+                SlimefunItems.HARDENED_GLASS, new ItemStack(Material.RED_STAINED_GLASS), SlimefunItems.HARDENED_GLASS,
+                new ItemStack(Material.CRIMSON_NYLIUM), new ItemStack(Material.SOUL_SAND), new ItemStack(Material.WARPED_NYLIUM),
+                DynaTechItems.STAINLESS_STEEL, DynaTechItems.GROWTH_CHAMBER, DynaTechItems.STAINLESS_STEEL
+            })
+            .setCapacity(512)
+            .setConsumption(32)
+            .setProcessingSpeed(1)
+            .register(SlimefunAddonInstance.getSFAInstance());
 
         new GrowthChamberNetherMK2(DynaTechItems.DT_MACHINES, DynaTechItems.GROWTH_CHAMBER_NETHER_MK2, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
-                SlimefunItems.STEEL_PLATE,DynaTechItems.GROWTH_CHAMBER_NETHER,SlimefunItems.STEEL_PLATE,
-                new ItemStack(Material.CRIMSON_NYLIUM),new ItemStack(Material.SOUL_SAND),new ItemStack(Material.WARPED_NYLIUM),
-                SlimefunItems.STEEL_PLATE,DynaTechItems.GROWTH_CHAMBER_NETHER,SlimefunItems.STEEL_PLATE
-        })
-        .setCapacity(1024)
-        .setConsumption(128)
-        .setProcessingSpeed(3)
-        .register(plugin);
+            new ItemStack[]{
+                SlimefunItems.STEEL_PLATE, DynaTechItems.GROWTH_CHAMBER_NETHER, SlimefunItems.STEEL_PLATE,
+                new ItemStack(Material.CRIMSON_NYLIUM), new ItemStack(Material.SOUL_SAND), new ItemStack(Material.WARPED_NYLIUM),
+                SlimefunItems.STEEL_PLATE, DynaTechItems.GROWTH_CHAMBER_NETHER, SlimefunItems.STEEL_PLATE
+            })
+            .setCapacity(1024)
+            .setConsumption(128)
+            .setProcessingSpeed(3)
+            .register(SlimefunAddonInstance.getSFAInstance());
 
         new GrowthChamberOcean(DynaTechItems.DT_MACHINES, DynaTechItems.GROWTH_CHAMBER_OCEAN, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
-                SlimefunItems.HARDENED_GLASS,new ItemStack(Material.CYAN_STAINED_GLASS),SlimefunItems.HARDENED_GLASS,
-                new ItemStack(Material.WATER_BUCKET),new ItemStack(Material.SAND),new ItemStack(Material.WATER_BUCKET),
-                DynaTechItems.STAINLESS_STEEL,DynaTechItems.GROWTH_CHAMBER,DynaTechItems.STAINLESS_STEEL
-        })
-        .setCapacity(512)
-        .setConsumption(32)
-        .setProcessingSpeed(1)
-        .register(plugin);
+            new ItemStack[]{
+                SlimefunItems.HARDENED_GLASS, new ItemStack(Material.CYAN_STAINED_GLASS), SlimefunItems.HARDENED_GLASS,
+                new ItemStack(Material.WATER_BUCKET), new ItemStack(Material.SAND), new ItemStack(Material.WATER_BUCKET),
+                DynaTechItems.STAINLESS_STEEL, DynaTechItems.GROWTH_CHAMBER, DynaTechItems.STAINLESS_STEEL
+            })
+            .setCapacity(512)
+            .setConsumption(32)
+            .setProcessingSpeed(1)
+            .register(SlimefunAddonInstance.getSFAInstance());
 
         new GrowthChamberOceanMK2(DynaTechItems.DT_MACHINES, DynaTechItems.GROWTH_CHAMBER_OCEAN_MK2, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
-                SlimefunItems.STEEL_PLATE,DynaTechItems.GROWTH_CHAMBER_OCEAN,SlimefunItems.STEEL_PLATE,
-                new ItemStack(Material.GRAVEL),new ItemStack(Material.LIGHT_BLUE_STAINED_GLASS),new ItemStack(Material.DIRT),
-                SlimefunItems.STEEL_PLATE,DynaTechItems.GROWTH_CHAMBER_OCEAN,SlimefunItems.STEEL_PLATE
+            new ItemStack[]{
+                SlimefunItems.STEEL_PLATE, DynaTechItems.GROWTH_CHAMBER_OCEAN, SlimefunItems.STEEL_PLATE,
+                new ItemStack(Material.GRAVEL), new ItemStack(Material.LIGHT_BLUE_STAINED_GLASS), new ItemStack(Material.DIRT),
+                SlimefunItems.STEEL_PLATE, DynaTechItems.GROWTH_CHAMBER_OCEAN, SlimefunItems.STEEL_PLATE
 
-        })
-        .setCapacity(1024)
-        .setConsumption(128)
-        .setProcessingSpeed(3)
-        .register(plugin);
+            })
+            .setCapacity(1024)
+            .setConsumption(128)
+            .setProcessingSpeed(3)
+            .register(SlimefunAddonInstance.getSFAInstance());
 
         new AntigravityBubble(DynaTechItems.DT_MACHINES, DynaTechItems.ANTIGRAVITY_BUBBLE, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
+            new ItemStack[]{
                 SlimefunItems.BLISTERING_INGOT_3, new ItemStack(Material.DIAMOND_BLOCK), SlimefunItems.BLISTERING_INGOT_3,
-                SlimefunItems.REINFORCED_ALLOY_INGOT, SlimefunItems.BIG_CAPACITOR , SlimefunItems.REINFORCED_ALLOY_INGOT,
-                SlimefunItems.REINFORCED_ALLOY_INGOT, DynaTechItems.STAINLESS_STEEL, SlimefunItems.REINFORCED_ALLOY_INGOT, 
-        })
-        .setCapacity(1024)
-        .setConsumption(128)
-        .setProcessingSpeed(1)
-        .register(plugin);
-        
+                SlimefunItems.REINFORCED_ALLOY_INGOT, SlimefunItems.BIG_CAPACITOR, SlimefunItems.REINFORCED_ALLOY_INGOT,
+                SlimefunItems.REINFORCED_ALLOY_INGOT, DynaTechItems.STAINLESS_STEEL, SlimefunItems.REINFORCED_ALLOY_INGOT,
+            })
+            .setCapacity(1024)
+            .setConsumption(128)
+            .setProcessingSpeed(1)
+            .register(SlimefunAddonInstance.getSFAInstance());
+
         new WeatherController(DynaTechItems.DT_MACHINES, DynaTechItems.WEATHER_CONTROLLER, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
-                null,SlimefunItems.HARDENED_METAL_INGOT,null,
+            new ItemStack[]{
+                null, SlimefunItems.HARDENED_METAL_INGOT, null,
                 new ItemStack(Material.WATER_BUCKET), DynaTechItems.ANCIENT_MACHINE_CORE, new ItemStack(Material.LAVA_BUCKET),
                 DynaTechItems.STAINLESS_STEEL, new ItemStack(Material.CRYING_OBSIDIAN), DynaTechItems.STAINLESS_STEEL
-        })
-        .setCapacity(512)
-        .setConsumption(32)
-        .setProcessingSpeed(1)
-        .register(plugin);
-        
+            })
+            .setCapacity(512)
+            .setConsumption(32)
+            .setProcessingSpeed(1)
+            .register(SlimefunAddonInstance.getSFAInstance());
+
         new PotionSprinkler(DynaTechItems.DT_MACHINES, DynaTechItems.POTION_SPRINKLER, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
+            new ItemStack[]{
                 new ItemStack(Material.BREWING_STAND), null, new ItemStack(Material.BREWING_STAND),
                 new ItemStack(Material.IRON_BARS), DynaTechItems.ANCIENT_MACHINE_CORE, new ItemStack(Material.IRON_BARS),
                 SlimefunItems.FERROSILICON, SlimefunItems.FERROSILICON, SlimefunItems.FERROSILICON
-        })
-        .setCapacity(256)
-        .setConsumption(32)
-        .setProcessingSpeed(1)
-        .register(plugin);
-        
+            })
+            .setCapacity(256)
+            .setConsumption(32)
+            .setProcessingSpeed(1)
+            .register(SlimefunAddonInstance.getSFAInstance());
+
         new BarbedWire(DynaTechItems.DT_MACHINES, DynaTechItems.BARBED_WIRE, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
-                new ItemStack(Material.IRON_SWORD),new ItemStack(Material.IRON_SWORD),new ItemStack(Material.IRON_SWORD),
+            new ItemStack[]{
+                new ItemStack(Material.IRON_SWORD), new ItemStack(Material.IRON_SWORD), new ItemStack(Material.IRON_SWORD),
                 DynaTechItems.STAINLESS_STEEL, new ItemStack(Material.OAK_LOG), DynaTechItems.STAINLESS_STEEL,
                 SlimefunItems.ZINC_INGOT, SlimefunItems.ZINC_INGOT, SlimefunItems.ZINC_INGOT
-        })
-        .setCapacity(1024)
-        .setConsumption(16)
-        .setProcessingSpeed(1)
-        .register(plugin);
-        
+            })
+            .setCapacity(1024)
+            .setConsumption(16)
+            .setProcessingSpeed(1)
+            .register(SlimefunAddonInstance.getSFAInstance());
+
         MaterialHive hive = new MaterialHive(DynaTechItems.DT_MACHINES, DynaTechItems.MATERIAL_HIVE, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
+            new ItemStack[]{
                 SlimefunItems.HARDENED_METAL_INGOT, SlimefunItems.SYNTHETIC_DIAMOND, SlimefunItems.HARDENED_METAL_INGOT,
                 SlimefunItems.HARDENED_METAL_INGOT, new ItemStack(Material.BEEHIVE), SlimefunItems.HARDENED_METAL_INGOT,
                 DynaTechItems.ADVANCED_MACHINE_SCRAP, DynaTechItems.MACHINE_SCRAP, DynaTechItems.ADVANCED_MACHINE_SCRAP
-        });
+            });
 
         hive
-        .setCapacity(8192)
-        .setConsumption(1024)
-        .setProcessingSpeed(1)
-        .register(plugin);   
+            .setCapacity(8192)
+            .setConsumption(1024)
+            .setProcessingSpeed(1)
+            .register(SlimefunAddonInstance.getSFAInstance());
 
-        registerMineralizedApiaries(hive, plugin);
+        registerMineralizedApiaries(hive, SlimefunAddonInstance.getSFAInstance());
 
         new WirelessCharger(DynaTechItems.DT_MACHINES, DynaTechItems.WIRELESS_CHARGER, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
+            new ItemStack[]{
                 null, SlimefunItems.GPS_TRANSMITTER, null,
                 SlimefunItems.GOLD_24K, SlimefunItems.CHARGING_BENCH, SlimefunItems.GOLD_24K,
                 null, SlimefunItems.SMALL_CAPACITOR, null
-        }, 16
+            }, 16
         )
-        .setCapacity(1024)
-        .setConsumption(16)
-        .setProcessingSpeed(1)
-        .register(plugin);
+            .setCapacity(1024)
+            .setConsumption(16)
+            .setProcessingSpeed(1)
+            .register(SlimefunAddonInstance.getSFAInstance());
 
         new SeedPlucker(DynaTechItems.DT_MACHINES, DynaTechItems.SEED_PLUCKER, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
-                SlimefunItems.HARDENED_GLASS,DynaTechItems.STAINLESS_STEEL ,SlimefunItems.HARDENED_GLASS,
-                new ItemStack(Material.BONE_BLOCK),null,new ItemStack(Material.BONE_BLOCK),
-                DynaTechItems.STAINLESS_STEEL,new ItemStack(Material.SHEARS) ,DynaTechItems.STAINLESS_STEEL                
-        })
-        .setCapacity(512)
-        .setConsumption(32)
-        .setProcessingSpeed(1)
-        .register(plugin);
-            
+            new ItemStack[]{
+                SlimefunItems.HARDENED_GLASS, DynaTechItems.STAINLESS_STEEL, SlimefunItems.HARDENED_GLASS,
+                new ItemStack(Material.BONE_BLOCK), null, new ItemStack(Material.BONE_BLOCK),
+                DynaTechItems.STAINLESS_STEEL, new ItemStack(Material.SHEARS), DynaTechItems.STAINLESS_STEEL
+            })
+            .setCapacity(512)
+            .setConsumption(32)
+            .setProcessingSpeed(1)
+            .register(SlimefunAddonInstance.getSFAInstance());
+
 
         new BandaidManager(DynaTechItems.DT_MACHINES, DynaTechItems.BANDAID_MANAGER, RecipeType.MAGIC_WORKBENCH,
-            new ItemStack[] {
+            new ItemStack[]{
                 SlimefunItems.BLANK_RUNE, DynaTechItems.ANCIENT_MACHINE_CORE, SlimefunItems.BLANK_RUNE,
                 SlimefunItems.REINFORCED_CLOTH, new ItemStack(Material.ENCHANTING_TABLE), SlimefunItems.REINFORCED_CLOTH,
                 null, SlimefunItems.WITHER_PROOF_OBSIDIAN, null
-        })
-        .setCapacity(1024)
-        .setConsumption(48)
-        .setProcessingSpeed(1)
-        .register(plugin);
-        
+            })
+            .setCapacity(1024)
+            .setConsumption(48)
+            .setProcessingSpeed(1)
+            .register(SlimefunAddonInstance.getSFAInstance());
+
         new Orechid(DynaTechItems.DT_MACHINES, DynaTechItems.ORECHID, RecipeType.MAGIC_WORKBENCH,
-            new ItemStack[] {
+            new ItemStack[]{
                 SlimefunItems.ENDER_RUNE, SlimefunItems.ENDER_RUNE, SlimefunItems.ENDER_RUNE,
                 SlimefunItems.MAGIC_LUMP_3, new ItemStack(Material.WITHER_ROSE), SlimefunItems.MAGIC_LUMP_3,
                 SlimefunItems.HARDENED_METAL_INGOT, SlimefunItems.REINFORCED_PLATE, SlimefunItems.HARDENED_METAL_INGOT
-        })
-        .setCapacity(16384)
-        .setConsumption(1024)
-        .setProcessingSpeed(1)
-        .register(plugin);
-                
+            })
+            .setCapacity(16384)
+            .setConsumption(1024)
+            .setProcessingSpeed(1)
+            .register(SlimefunAddonInstance.getSFAInstance());
+
         //Make Wireless Energy Bank and Wireless Energy more costly
-        new WirelessEnergyBank(DynaTechItems.DT_MACHINES, 10240, DynaTechItems.WIRELESS_ENERGY_BANK, RecipeType.ENHANCED_CRAFTING_TABLE, 
-            new ItemStack[] {
-                DynaTechItems.ADVANCED_MACHINE_SCRAP, DynaTechItems.WIRELESS_CHARGER, DynaTechItems.ADVANCED_MACHINE_SCRAP, 
+        new WirelessEnergyBank(DynaTechItems.DT_MACHINES, 10240, DynaTechItems.WIRELESS_ENERGY_BANK, RecipeType.ENHANCED_CRAFTING_TABLE,
+            new ItemStack[]{
+                DynaTechItems.ADVANCED_MACHINE_SCRAP, DynaTechItems.WIRELESS_CHARGER, DynaTechItems.ADVANCED_MACHINE_SCRAP,
                 DynaTechItems.WIRELESS_CHARGER, SlimefunItems.BIG_CAPACITOR, DynaTechItems.WIRELESS_CHARGER,
                 DynaTechItems.GHOSTLY_ESSENCE, DynaTechItems.WIRELESS_CHARGER, DynaTechItems.GHOSTLY_ESSENCE
-        }).register(plugin);
-        
-        new WirelessEnergyPoint(DynaTechItems.DT_MACHINES, 5120, 1024, DynaTechItems.WIRELESS_ENERGY_POINT, RecipeType.ENHANCED_CRAFTING_TABLE, 
-            new ItemStack[] {
+            }).register(SlimefunAddonInstance.getSFAInstance());
+
+        new WirelessEnergyPoint(DynaTechItems.DT_MACHINES, 5120, 1024, DynaTechItems.WIRELESS_ENERGY_POINT, RecipeType.ENHANCED_CRAFTING_TABLE,
+            new ItemStack[]{
                 SlimefunItems.ENERGY_CONNECTOR, DynaTechItems.GHOSTLY_ESSENCE, SlimefunItems.ENERGY_CONNECTOR,
                 DynaTechItems.GHOSTLY_ESSENCE, DynaTechItems.ANCIENT_MACHINE_CORE, DynaTechItems.GHOSTLY_ESSENCE,
                 SlimefunItems.ENERGY_CONNECTOR, DynaTechItems.GHOSTLY_ESSENCE, SlimefunItems.ENERGY_CONNECTOR
-        }).register(plugin);
+            }).register(SlimefunAddonInstance.getSFAInstance());
 
         new WirelessItemInput(DynaTechItems.DT_MACHINES, 1024, DynaTechItems.WIRELESS_ITEM_INPUT, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
+            new ItemStack[]{
                 SlimefunItems.CARGO_INPUT_NODE, DynaTechItems.GHOSTLY_ESSENCE, SlimefunItems.CARGO_INPUT_NODE,
                 DynaTechItems.GHOSTLY_ESSENCE, DynaTechItems.ANCIENT_MACHINE_CORE, DynaTechItems.GHOSTLY_ESSENCE,
                 SlimefunItems.CARGO_INPUT_NODE, DynaTechItems.GHOSTLY_ESSENCE, SlimefunItems.CARGO_INPUT_NODE
-        }).register(plugin);
+            }).register(SlimefunAddonInstance.getSFAInstance());
 
         new WirelessItemOutput(DynaTechItems.DT_MACHINES, 1024, DynaTechItems.WIRELESS_ITEM_OUTPUT, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
+            new ItemStack[]{
                 DynaTechItems.ADVANCED_MACHINE_SCRAP, DynaTechItems.GHOSTLY_ESSENCE, DynaTechItems.ADVANCED_MACHINE_SCRAP,
                 DynaTechItems.GHOSTLY_ESSENCE, SlimefunItems.BIG_CAPACITOR, DynaTechItems.GHOSTLY_ESSENCE,
                 SlimefunItems.CARGO_OUTPUT_NODE_2, DynaTechItems.GHOSTLY_ESSENCE, SlimefunItems.CARGO_OUTPUT_NODE_2
-        }).register(plugin);
+            }).register(SlimefunAddonInstance.getSFAInstance());
 
         new Tesseract(DynaTechItems.DT_MACHINES, 65535, 1024, DynaTechItems.TESSERACT, RecipeType.MAGIC_WORKBENCH,
-            new ItemStack[] {
+            new ItemStack[]{
                 DynaTechItems.WIRELESS_ENERGY_BANK, DynaTechItems.TESSERACTING_OBJ, DynaTechItems.WIRELESS_ITEM_INPUT,
                 DynaTechItems.TESSERACTING_OBJ, DynaTechItems.GHOSTLY_ESSENCE, DynaTechItems.TESSERACTING_OBJ,
                 DynaTechItems.WIRELESS_ITEM_OUTPUT, DynaTechItems.TESSERACTING_OBJ, DynaTechItems.WIRELESS_ENERGY_POINT
-        }).register(plugin);
+            }).register(SlimefunAddonInstance.getSFAInstance());
 
-        new FurnaceController(DynaTechItems.DT_MACHINES, DynaTechItems.EXTERNAL_HEATER, RecipeType.ENHANCED_CRAFTING_TABLE, 
-            new ItemStack[] {
+        new FurnaceController(DynaTechItems.DT_MACHINES, DynaTechItems.EXTERNAL_HEATER, RecipeType.ENHANCED_CRAFTING_TABLE,
+            new ItemStack[]{
                 DynaTechItems.STAINLESS_STEEL, SlimefunItems.HARDENED_METAL_INGOT, DynaTechItems.STAINLESS_STEEL,
                 new ItemStack(Material.OBSIDIAN), new ItemStack(Material.OBSERVER), new ItemStack(Material.OBSIDIAN),
                 new ItemStack(Material.OBSIDIAN), SlimefunItems.ENERGY_REGULATOR, new ItemStack(Material.OBSIDIAN)
-        })
-        .setCapacity(2048)
-        .setConsumption(128)
-        .setProcessingSpeed(1)
-        .register(plugin);
-
-        new LiquidTank(DynaTechItems.DT_TOOLS, DynaTechItems.LIQUID_TANK, 16000, RecipeType.ENHANCED_CRAFTING_TABLE, 
-            new ItemStack[] {
+            })
+            .setCapacity(2048)
+            .setConsumption(128)
+            .setProcessingSpeed(1)
+            .register(SlimefunAddonInstance.getSFAInstance());
+
+        new LiquidTank(DynaTechItems.DT_TOOLS, DynaTechItems.LIQUID_TANK, 16000, RecipeType.ENHANCED_CRAFTING_TABLE,
+            new ItemStack[]{
                 DynaTechItems.STAINLESS_STEEL, new ItemStack(Material.BUCKET), DynaTechItems.STAINLESS_STEEL,
                 new ItemStack(Material.BUCKET), new ItemStack(Material.BUCKET), new ItemStack(Material.BUCKET),
                 DynaTechItems.STAINLESS_STEEL, new ItemStack(Material.BUCKET), DynaTechItems.STAINLESS_STEEL,
-        }).register(plugin);
-        
+            }).register(SlimefunAddonInstance.getSFAInstance());
+
 
         //Generators
         new HydroGenerator(DynaTechItems.DT_GENERATORS, 16, 256, DynaTechItems.WATER_MILL, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
+            new ItemStack[]{
                 SlimefunItems.ALUMINUM_INGOT, SlimefunItems.SULFATE, SlimefunItems.ALUMINUM_INGOT,
                 SlimefunItems.ALUMINUM_INGOT, SlimefunItems.ENERGY_CONNECTOR, SlimefunItems.ALUMINUM_INGOT,
                 DynaTechItems.STAINLESS_STEEL_ROTOR, null, DynaTechItems.STAINLESS_STEEL_ROTOR,
-        }).register(plugin);
+            }).register(SlimefunAddonInstance.getSFAInstance());
 
         new HydroGenerator(DynaTechItems.DT_GENERATORS, 64, 512, DynaTechItems.WATER_TURBINE, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
+            new ItemStack[]{
                 DynaTechItems.WATER_MILL, SlimefunItems.REINFORCED_ALLOY_INGOT, DynaTechItems.WATER_MILL,
                 SlimefunItems.REINFORCED_ALLOY_INGOT, SlimefunItems.GOLD_8K, SlimefunItems.REINFORCED_ALLOY_INGOT,
                 DynaTechItems.WATER_MILL, SlimefunItems.REINFORCED_ALLOY_INGOT, DynaTechItems.WATER_MILL
-        }).register(plugin);
+            }).register(SlimefunAddonInstance.getSFAInstance());
 
         new DragonEggGenerator(DynaTechItems.DT_GENERATORS, DynaTechItems.DRAGON_GENERATOR, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
+            new ItemStack[]{
                 new ItemStack(Material.CRYING_OBSIDIAN), new ItemStack(Material.END_STONE), new ItemStack(Material.CRYING_OBSIDIAN),
                 new ItemStack(Material.CRYING_OBSIDIAN), SlimefunItems.LEAD_INGOT, new ItemStack(Material.CRYING_OBSIDIAN),
                 SlimefunItems.LEAD_INGOT, SlimefunItems.MEDIUM_CAPACITOR, SlimefunItems.LEAD_INGOT
-        }).register(plugin);
+            }).register(SlimefunAddonInstance.getSFAInstance());
 
-        new ChippingGenerator(DynaTechItems.DT_GENERATORS, DynaTechItems.CHIPPING_GENERATOR, RecipeType.ENHANCED_CRAFTING_TABLE, 
-            new ItemStack[] {
+        new ChippingGenerator(DynaTechItems.DT_GENERATORS, DynaTechItems.CHIPPING_GENERATOR, RecipeType.ENHANCED_CRAFTING_TABLE,
+            new ItemStack[]{
                 DynaTechItems.STAINLESS_STEEL, DynaTechItems.STAINLESS_STEEL, DynaTechItems.STAINLESS_STEEL,
-                new ItemStack(Material.DIAMOND_AXE), DynaTechItems.ANCIENT_MACHINE_CORE,new ItemStack(Material.DIAMOND_AXE),
+                new ItemStack(Material.DIAMOND_AXE), DynaTechItems.ANCIENT_MACHINE_CORE, new ItemStack(Material.DIAMOND_AXE),
                 DynaTechItems.STAINLESS_STEEL, DynaTechItems.STAINLESS_STEEL, DynaTechItems.STAINLESS_STEEL
-        })
-        .setEnergyCapacity(256)
-        .setEnergyProduction(8)
-        .setProcessingSpeed(1)
-        .register(plugin);
+            })
+            .setEnergyCapacity(256)
+            .setEnergyProduction(8)
+            .setProcessingSpeed(1)
+            .register(SlimefunAddonInstance.getSFAInstance());
 
         new CulinaryGenerator(DynaTechItems.DT_GENERATORS, DynaTechItems.CULINARY_GENERATOR, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
-                SlimefunItems.ALUMINUM_BRASS_INGOT,SlimefunItems.ALUMINUM_BRASS_INGOT,SlimefunItems.ALUMINUM_BRASS_INGOT,
+            new ItemStack[]{
+                SlimefunItems.ALUMINUM_BRASS_INGOT, SlimefunItems.ALUMINUM_BRASS_INGOT, SlimefunItems.ALUMINUM_BRASS_INGOT,
                 SlimefunItems.LEAD_DUST, SlimefunItems.SMALL_CAPACITOR, SlimefunItems.LEAD_DUST,
-                new ItemStack(Material.CAMPFIRE),new ItemStack(Material.CAMPFIRE),new ItemStack(Material.CAMPFIRE)
-        })
-        .setEnergyCapacity(256)
-        .setEnergyProduction(16)
-        .register(plugin);
-        
+                new ItemStack(Material.CAMPFIRE), new ItemStack(Material.CAMPFIRE), new ItemStack(Material.CAMPFIRE)
+            })
+            .setEnergyCapacity(256)
+            .setEnergyProduction(16)
+            .register(SlimefunAddonInstance.getSFAInstance());
+
         new StardustReactor(DynaTechItems.DT_GENERATORS, DynaTechItems.STARDUST_REACTOR, RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[] {
-                new ItemStack(Material.FIRE_CHARGE), new ItemStack(Material.FIRE_CHARGE),new ItemStack(Material.FIRE_CHARGE),
+            new ItemStack[]{
+                new ItemStack(Material.FIRE_CHARGE), new ItemStack(Material.FIRE_CHARGE), new ItemStack(Material.FIRE_CHARGE),
                 null, SlimefunItems.NUCLEAR_REACTOR, null,
-                DynaTechItems.ADVANCED_MACHINE_SCRAP, DynaTechItems.ANCIENT_MACHINE_CORE, DynaTechItems.ADVANCED_MACHINE_SCRAP    
-        })
-        .setEnergyCapacity(32676)
-        .setEnergyProduction(1024)
-        .register(plugin);
+                DynaTechItems.ADVANCED_MACHINE_SCRAP, DynaTechItems.ANCIENT_MACHINE_CORE, DynaTechItems.ADVANCED_MACHINE_SCRAP
+            })
+            .setEnergyCapacity(32676)
+            .setEnergyProduction(1024)
+            .register(SlimefunAddonInstance.getSFAInstance());
     }
 
-	private static void registerMineralizedApiaries(MaterialHive hive, SlimefunAddon plugin) {
-        for (String id: hive.slimefunItemsAccepted.getValue()) {
+    private static void registerMineralizedApiaries(MaterialHive hive, SlimefunAddon plugin) {
+        for (String id : hive.slimefunItemsAccepted.getValue()) {
             SlimefunItem item = SlimefunItem.getById(id);
 
             if (item != null) {
@@ -613,19 +573,19 @@ public class DynaTechItemsSetup {
                 );
 
                 new MineralizedApiary(DynaTechItems.DT_HIVES, apiary, RecipeType.ENHANCED_CRAFTING_TABLE,
-                new ItemStack[] {
-                    SlimefunItems.LARGE_CAPACITOR, item.getItem(), SlimefunItems.LARGE_CAPACITOR,
-                    item.getItem(), DynaTechItems.MATERIAL_HIVE, item.getItem(),
-                    DynaTechItems.MACHINE_SCRAP, DynaTechItems.VEX_GEM, DynaTechItems.MACHINE_SCRAP,
-                }, item.getItem())
-                .setCapacity(16384)
-                .setConsumption(1024)
-                .setProcessingSpeed(1)
-                .register(plugin);
+                    new ItemStack[]{
+                        SlimefunItems.LARGE_CAPACITOR, item.getItem(), SlimefunItems.LARGE_CAPACITOR,
+                        item.getItem(), DynaTechItems.MATERIAL_HIVE, item.getItem(),
+                        DynaTechItems.MACHINE_SCRAP, DynaTechItems.VEX_GEM, DynaTechItems.MACHINE_SCRAP,
+                    }, item.getItem())
+                    .setCapacity(16384)
+                    .setConsumption(1024)
+                    .setProcessingSpeed(1)
+                    .register(SlimefunAddonInstance.getSFAInstance());
             }
         }
 
-    for (String name: hive.vanillaItemsAccepted.getValue()) {
+        for (String name : hive.vanillaItemsAccepted.getValue()) {
             ItemStack item = new ItemStack(Material.matchMaterial(name));
 
             if (item != null) {
@@ -642,17 +602,17 @@ public class DynaTechItemsSetup {
                 );
 
                 new MineralizedApiary(DynaTechItems.DT_HIVES, apiary, RecipeType.ENHANCED_CRAFTING_TABLE,
-                new ItemStack[] {
-                    SlimefunItems.LARGE_CAPACITOR, item, SlimefunItems.LARGE_CAPACITOR,
-                    item, DynaTechItems.MATERIAL_HIVE, item,
-                    DynaTechItems.MACHINE_SCRAP, DynaTechItems.VEX_GEM, DynaTechItems.MACHINE_SCRAP,
-                }, item)
-                .setCapacity(16384)
-                .setConsumption(1024)
-                .setProcessingSpeed(1)
-                .register(plugin);
+                    new ItemStack[]{
+                        SlimefunItems.LARGE_CAPACITOR, item, SlimefunItems.LARGE_CAPACITOR,
+                        item, DynaTechItems.MATERIAL_HIVE, item,
+                        DynaTechItems.MACHINE_SCRAP, DynaTechItems.VEX_GEM, DynaTechItems.MACHINE_SCRAP,
+                    }, item)
+                    .setCapacity(16384)
+                    .setConsumption(1024)
+                    .setProcessingSpeed(1)
+                    .register(SlimefunAddonInstance.getSFAInstance());
             }
         }
 
-	}
+    }
 }
diff --git a/src/main/java/me/profelements/dynatech/tasks/ItemBandTask.java b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/tasks/ItemBandTask.java
similarity index 76%
rename from src/main/java/me/profelements/dynatech/tasks/ItemBandTask.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/dynatech/tasks/ItemBandTask.java
index db69aee..a420e84 100644
--- a/src/main/java/me/profelements/dynatech/tasks/ItemBandTask.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/dynatech/tasks/ItemBandTask.java
@@ -1,69 +1,65 @@
-package me.profelements.dynatech.tasks;
-
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.data.persistent.PersistentDataAPI;
-import me.profelements.dynatech.DynaTech;
-import me.profelements.dynatech.items.misc.ItemBand;
-import org.bukkit.Bukkit;
-import org.bukkit.Material;
-import org.bukkit.attribute.Attribute;
-import org.bukkit.entity.Player;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.potion.PotionEffect;
-import org.bukkit.potion.PotionEffectType;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-
-public class ItemBandTask implements Runnable {
-
-    //The value if not null will be a SlIMEFUN_ID that is an Item
-
-    public ItemBandTask() {}
-
-    @Override
-    public void run() {
-        for (Player p : Bukkit.getOnlinePlayers()) {
-            if (!p.isValid() || p.isDead()) {
-                continue;
-            }
-            for (ItemStack item : p.getEquipment().getArmorContents()) {
-                testItemBand(p, item);
-            }
-            testItemBand(p, p.getEquipment().getItemInMainHand());
-        }
-    }
-
-    private static void testItemBand(@Nonnull Player p, @Nullable ItemStack item) {
-        if (item != null && item.getType() != Material.AIR && item.hasItemMeta()) {
-            String id = PersistentDataAPI.getString(item.getItemMeta(), ItemBand.KEY);
-
-            if (id != null) {
-                SlimefunItem sfItem = SlimefunItem.getById(id);
-
-                if (sfItem instanceof ItemBand) {
-                    ItemBand itemBand = (ItemBand) sfItem;
-
-                    DynaTech.runSync(() -> {
-                        for (PotionEffect pe : itemBand.getPotionEffects()) {
-                            if (pe.getType() == PotionEffectType.HEALTH_BOOST)
-                            {
-                                double health = p.getHealth();
-                                p.addPotionEffect(pe);
-                                if (health > p.getAttribute(Attribute.GENERIC_MAX_HEALTH).getValue()) {
-                                    p.setHealth(p.getAttribute(Attribute.GENERIC_MAX_HEALTH).getValue());
-                                } else {
-                                    p.setHealth(health);
-                                }
-                                
-                            } else {
-                                p.addPotionEffect(pe);
-                            }
-                        }
-                    });
-                }
-            }
-        }
-    }
-
-}
+package id.universenetwork.sfa_loader.addons.dynatech.tasks;
+
+import id.universenetwork.sfa_loader.addons.dynatech.DynaTech;
+import id.universenetwork.sfa_loader.addons.dynatech.items.misc.ItemBand;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.data.persistent.PersistentDataAPI;
+import org.bukkit.Bukkit;
+import org.bukkit.Material;
+import org.bukkit.attribute.Attribute;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.potion.PotionEffect;
+import org.bukkit.potion.PotionEffectType;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+
+public class ItemBandTask implements Runnable {
+
+    //The value if not null will be a SlIMEFUN_ID that is an Item
+
+    public ItemBandTask() {
+    }
+
+    @Override
+    public void run() {
+        for (Player p : Bukkit.getOnlinePlayers()) {
+            if (!p.isValid() || p.isDead()) {
+                continue;
+            }
+            for (ItemStack item : p.getEquipment().getArmorContents()) {
+                testItemBand(p, item);
+            }
+            testItemBand(p, p.getEquipment().getItemInMainHand());
+        }
+    }
+
+    private static void testItemBand(@Nonnull Player p, @Nullable ItemStack item) {
+        if (item != null && item.getType() != Material.AIR && item.hasItemMeta()) {
+            String id = PersistentDataAPI.getString(item.getItemMeta(), ItemBand.KEY);
+
+            if (id != null) {
+                SlimefunItem sfItem = SlimefunItem.getById(id);
+
+                if (sfItem instanceof ItemBand) {
+                    ItemBand itemBand = (ItemBand) sfItem;
+
+                    DynaTech.runSync(() -> {
+                        for (PotionEffect pe : itemBand.getPotionEffects()) {
+                            if (pe.getType() == PotionEffectType.HEALTH_BOOST) {
+                                double health = p.getHealth();
+                                p.addPotionEffect(pe);
+                                if (health > p.getAttribute(Attribute.GENERIC_MAX_HEALTH).getValue())
+                                    p.setHealth(p.getAttribute(Attribute.GENERIC_MAX_HEALTH).getValue());
+                                else p.setHealth(health);
+
+                            } else p.addPotionEffect(pe);
+                        }
+                    });
+                }
+            }
+        }
+    }
+
+}
diff --git a/src/main/java/me/profelements/dynatech/DynaTech.java b/src/main/java/me/profelements/dynatech/DynaTech.java
deleted file mode 100644
index 8b3da93..0000000
--- a/src/main/java/me/profelements/dynatech/DynaTech.java
+++ /dev/null
@@ -1,120 +0,0 @@
-package me.profelements.dynatech;
-
-import io.github.thebusybiscuit.slimefun4.api.SlimefunAddon;
-import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.updater.GitHubBuildsUpdater;
-import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import me.profelements.dynatech.items.backpacks.PicnicBasket;
-import me.profelements.dynatech.items.misc.DimensionalHomeDimension;
-import me.profelements.dynatech.items.tools.ElectricalStimulator;
-import me.profelements.dynatech.items.tools.InventoryFilter;
-import me.profelements.dynatech.listeners.ElectricalStimulatorListener;
-import me.profelements.dynatech.listeners.InventoryFilterListener;
-import me.profelements.dynatech.listeners.PicnicBasketListener;
-import me.profelements.dynatech.setup.DynaTechItemsSetup;
-import me.profelements.dynatech.tasks.ItemBandTask;
-import org.bstats.bukkit.Metrics;
-import org.bukkit.Bukkit;
-import org.bukkit.WorldCreator;
-import org.bukkit.plugin.java.JavaPlugin;
-import org.bukkit.scheduler.BukkitTask;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-
-import com.google.common.base.Preconditions;
-
-import java.util.logging.Level;
-
-public class DynaTech extends JavaPlugin implements SlimefunAddon {
-
-    private static DynaTech instance;
-    private static boolean exoticGardenInstalled;
-    private static boolean infinityExpansionInstalled;
-
-    private int tickInterval;
-
-    @Override
-    public void onEnable() {
-        instance = this;
-        final int TICK_TIME = Slimefun.getTickerTask().getTickRate();
-        exoticGardenInstalled = Bukkit.getServer().getPluginManager().isPluginEnabled("ExoticGarden");
-        infinityExpansionInstalled = Bukkit.getServer().getPluginManager().isPluginEnabled("InfinityExpansion");
-
-        saveDefaultConfig();
-
-        new Metrics(this, 9689);
-
-        if (!getConfig().getBoolean("options.disable-dimensionalhome-world")) {
-            WorldCreator worldCreator = new WorldCreator("dimensionalhome");
-            worldCreator.generator(new DimensionalHomeDimension());
-            worldCreator.createWorld();
-        }
-
-        DynaTechItemsSetup.setup(this);
-        new PicnicBasketListener(this, (PicnicBasket) DynaTechItems.PICNIC_BASKET.getItem());
-        new ElectricalStimulatorListener(this, (ElectricalStimulator) DynaTechItems.ELECTRICAL_STIMULATOR.getItem());
-        new InventoryFilterListener(this, (InventoryFilter) DynaTechItems.INVENTORY_FILTER.getItem());
-
-        //Tasks
-        getServer().getScheduler().runTaskTimerAsynchronously(DynaTech.getInstance(), new ItemBandTask(), 0L, 5 * 20L);
-        getServer().getScheduler().runTaskTimer(DynaTech.getInstance(), () -> this.tickInterval++, 0, TICK_TIME);
-
-        if (getConfig().getBoolean("options.auto-update", true) && getDescription().getVersion().startsWith("DEV - ")) {
-            new GitHubBuildsUpdater(this, getFile(), "ProfElements/DynaTech/master").start();
-        }
-
-        //TODO: I have been updating javas left right and center 
-        if (System.getProperty("java.version").startsWith("1.8")) {
-            getLogger().log(Level.WARNING, "           DynaTech will be switching to JAVA 11        ");
-            getLogger().log(Level.WARNING, "                Please Update to JAVA 11                ");
-        }
-    }
-
-    @Override
-    public void onDisable() {
-        Bukkit.getScheduler().cancelTasks(this);
-
-        instance = null;
-    }
-
-    @Override
-    public String getBugTrackerURL() {
-        return "https://github.com/ProfElements/DynaTech/issues";
-    }
-
-    @Nonnull
-    @Override
-    public JavaPlugin getJavaPlugin() {
-        return this;
-    }
-
-    @Nonnull
-    public static DynaTech getInstance() {
-        return instance;
-    }
-
-    public int getTickInterval() {
-        return tickInterval;
-    }
-
-    public static boolean isExoticGardenInstalled() {
-        return exoticGardenInstalled;
-    }
-
-    public static boolean isInfinityExpansionInstalled() {
-        return infinityExpansionInstalled;
-    }
-
-    @Nullable
-    public static BukkitTask runSync(@Nonnull Runnable runnable) {
-        Preconditions.checkNotNull(runnable, "Cannot run null");
-
-        if (instance == null || !instance.isEnabled()) {
-            return null;
-        }
-
-        return instance.getServer().getScheduler().runTask(getInstance(), runnable);
-    }
-
-}
diff --git a/src/main/java/me/profelements/dynatech/items/misc/WitherGolem.java b/src/main/java/me/profelements/dynatech/items/misc/WitherGolem.java
deleted file mode 100644
index 7b9519a..0000000
--- a/src/main/java/me/profelements/dynatech/items/misc/WitherGolem.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package me.profelements.dynatech.items.misc;
-
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.core.multiblocks.MultiBlockMachine;
-import org.bukkit.Material;
-import org.bukkit.block.Block;
-import org.bukkit.block.BlockFace;
-import org.bukkit.entity.EntityType;
-import org.bukkit.entity.Player;
-import org.bukkit.inventory.ItemStack;
-
-import javax.annotation.Nonnull;
-
-public class WitherGolem extends MultiBlockMachine {
-  
-  public WitherGolem(ItemGroup itemGroup, SlimefunItemStack item) {
-    super(itemGroup, item, new ItemStack[] {null, new ItemStack(Material.CARVED_PUMPKIN), null, null, new ItemStack(Material.POLISHED_BLACKSTONE), null, null, new ItemStack(Material. POLISHED_BLACKSTONE), null}, BlockFace.SELF);
-  }
-
-  @Override
-  public void onInteract(@Nonnull Player p, @Nonnull Block b) {
-    Block pumpkinHead = b.getRelative(BlockFace.UP);
-    Block bottomBlackstone = b.getRelative(BlockFace.DOWN);
-  
-    p.getWorld().spawnEntity(b.getLocation().add(0.5, -1, 0.5), EntityType.WITHER_SKELETON);
-
-    pumpkinHead.setType(Material.AIR);
-    b.setType(Material.AIR);
-    bottomBlackstone.setType(Material.AIR);
-  }
-
-}
diff --git a/src/main/resources/addons-config/DynaTech/config.yml b/src/main/resources/addons-config/DynaTech/config.yml
new file mode 100644
index 0000000..abeeebc
--- /dev/null
+++ b/src/main/resources/addons-config/DynaTech/config.yml
@@ -0,0 +1 @@
+disable-dimensionalhome-world: false
diff --git a/src/main/resources/config.yml b/src/main/resources/config.yml
deleted file mode 100644
index 8e2cc58..0000000
--- a/src/main/resources/config.yml
+++ /dev/null
@@ -1,3 +0,0 @@
-options:
-  auto-update: true
-  disable-dimensionalhome-world: false
diff --git a/src/main/resources/plugin.yml b/src/main/resources/plugin.yml
deleted file mode 100644
index eada68a..0000000
--- a/src/main/resources/plugin.yml
+++ /dev/null
@@ -1,24 +0,0 @@
-## CHANGE this to the name of your plugin.
-name: DynaTech
-
-## CHANGE this to your username.
-author: ProfElements
-
-## CHANGE this to a meaninful but short description of your plugin.
-description: A slimefun addon that add random stuff I want
-
-## CHANGE this to the path of the class that extends JavaPlugin.
-main: me.profelements.dynatech.DynaTech
-
-## You can change this to link to your website or repository. You can also remove this line if you want to.
-website: https://github.com/ProfElements/DynaTech
-
-## This is required and marks Slimefun as a plugin dependency.
-depend: [Slimefun]
-softdepend: [ExoticGarden, InfinityExpansion]
-
-## This value is automatically replaced by the version specified in your pom.xml file, do not change this.
-version: ${project.version}
-
-## This is the minimum minecraft version required to run your plugin.
-api-version: 1.14
-- 
2.41.0.windows.1

