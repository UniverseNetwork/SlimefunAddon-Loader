From ff4e600dc9dec48d30faf2591ecd126afb407a6f Mon Sep 17 00:00:00 2001
From: ARVIN3108 <31arvin08@gmail.com>
Date: Wed, 12 Jul 2023 18:07:34 +0700
Subject: [PATCH] Networks

---
 pom.xml                                       | 125 +--
 .../addons}/networks/NetworkStorage.java      |   6 +-
 .../sfa_loader/addons/networks/Networks.java  |  63 ++
 .../addons/networks/command/NetworksMain.java |  60 ++
 .../listener}/ExplosiveToolListener.java      |  14 +-
 .../manager/SupportedPluginManager.java       |  34 +
 .../networks/network/GridItemRequest.java     |   7 +-
 .../addons}/networks/network/NetworkNode.java |  47 +-
 .../addons}/networks/network/NetworkRoot.java | 353 +++----
 .../networks/network/NodeDefinition.java      |   6 +-
 .../addons}/networks/network/NodeType.java    |   4 +-
 .../networks/network/SupportedRecipes.java    |  22 +-
 .../networks/network/barrel/BarrelCore.java   |   7 +-
 .../networks/network/barrel/BarrelType.java   |   5 +
 .../network/barrel/InfinityBarrel.java        |  11 +-
 .../network/barrel/NetworkStorage.java        |  25 +-
 .../network/stackcaches/BarrelIdentity.java   |   9 +-
 .../stackcaches/BlueprintInstance.java        |   8 +-
 .../network/stackcaches/CardInstance.java     |  36 +-
 .../network/stackcaches/ItemRequest.java      |   5 +-
 .../network/stackcaches/ItemStackCache.java   |   5 +-
 .../network/stackcaches/QuantumCache.java     |  29 +-
 .../networks/slimefun/NetheoPlants.java       | 100 ++
 .../slimefun/NetworkSlimefunItems.java        | 872 +++++++++++++++++
 .../networks/slimefun/NetworksItemGroups.java |  72 ++
 .../slimefun/NetworksSlimefunItemStacks.java  | 813 ++++++++++++++++
 .../slimefun/groups/DummyItemGroup.java       |   6 +-
 .../slimefun/groups/MainFlexGroup.java        |  49 +-
 .../slimefun/network/AdminDebuggable.java     |  18 +-
 .../slimefun/network/NetworkAutoCrafter.java  | 118 +--
 .../slimefun/network/NetworkBridge.java       |   7 +-
 .../slimefun/network/NetworkCell.java         |  22 +-
 .../slimefun/network/NetworkControlV.java     |  84 +-
 .../slimefun/network/NetworkControlX.java     |  82 +-
 .../slimefun/network/NetworkController.java   |  58 +-
 .../slimefun/network/NetworkDirectional.java  | 216 +++--
 .../slimefun/network/NetworkEncoder.java      |  56 +-
 .../slimefun/network/NetworkExport.java       |  97 +-
 .../slimefun/network/NetworkGrabber.java      |  27 +-
 .../slimefun/network/NetworkGreedyBlock.java  |  36 +-
 .../slimefun/network/NetworkImport.java       |  67 +-
 .../slimefun/network/NetworkMonitor.java      |   7 +-
 .../slimefun/network/NetworkObject.java       |  59 +-
 .../slimefun/network/NetworkPowerDisplay.java |  58 +-
 .../slimefun/network/NetworkPowerNode.java    |   7 +-
 .../slimefun/network/NetworkPowerOutlet.java  |  30 +-
 .../slimefun/network/NetworkPurger.java       |  86 +-
 .../slimefun/network/NetworkPusher.java       |  49 +-
 .../network/NetworkQuantumStorage.java        | 209 ++--
 .../network/NetworkQuantumWorkbench.java      |  77 +-
 .../slimefun/network/NetworkVacuum.java       |  81 +-
 .../network/NetworkVanillaGrabber.java        |  67 +-
 .../network/NetworkVanillaPusher.java         |  68 +-
 .../network/NetworkWirelessReceiver.java      |  62 +-
 .../network/NetworkWirelessTransmitter.java   | 167 ++--
 .../slimefun/network/grid/AbstractGrid.java   | 209 ++--
 .../slimefun/network/grid/GridCache.java      |   5 +-
 .../network/grid/NetworkCraftingGrid.java     |  80 +-
 .../slimefun/network/grid/NetworkGrid.java    |  24 +-
 .../networks/slimefun/tools/CanCooldown.java  |  17 +-
 .../slimefun/tools/CraftingBlueprint.java     |  33 +-
 .../slimefun/tools/NetworkAdminDebugger.java  |  17 +-
 .../networks/slimefun/tools/NetworkCard.java  |  92 ++
 .../slimefun/tools/NetworkConfigurator.java   |  48 +-
 .../slimefun/tools/NetworkCrayon.java         |  15 +-
 .../networks/slimefun/tools/NetworkProbe.java |  28 +-
 .../networks/slimefun/tools/NetworkRake.java  |  33 +-
 .../slimefun/tools/NetworkRemote.java         |  59 +-
 .../tools/NetworkWirelessConfigurator.java    |  56 +-
 .../addons/networks/utils/Keys.java           |  15 +
 .../addons}/networks/utils/NetworkUtils.java  |  42 +-
 .../addons}/networks/utils/StackUtils.java    | 329 +++----
 .../addons/networks/utils/StringUtils.java    |  87 ++
 .../addons}/networks/utils/Theme.java         |  29 +-
 .../utils/datatypes/DataTypeMethods.java      |  17 +-
 .../PersistentAmountInstanceType.java         |  18 +-
 .../datatypes/PersistentCardInstanceType.java |  18 +-
 .../PersistentCraftingBlueprintType.java      |  16 +-
 .../PersistentQuantumStorageType.java         |  20 +-
 .../io/github/sefiraat/networks/Networks.java | 122 ---
 .../networks/commands/NetworksMain.java       |  93 --
 .../networks/managers/ListenerManager.java    |  16 -
 .../managers/SupportedPluginManager.java      |  55 --
 .../networks/network/barrel/BarrelType.java   |   7 -
 .../networks/slimefun/NetheoPlants.java       | 104 --
 .../slimefun/NetworkSlimefunItems.java        | 906 ------------------
 .../networks/slimefun/NetworksItemGroups.java |  92 --
 .../slimefun/NetworksSlimefunItemStacks.java  | 818 ----------------
 .../networks/slimefun/tools/NetworkCard.java  |  95 --
 .../github/sefiraat/networks/utils/Keys.java  |  25 -
 .../sefiraat/networks/utils/StringUtils.java  |  92 --
 src/main/resources/config.yml                 |   1 -
 src/main/resources/plugin.yml                 |  17 -
 93 files changed, 3722 insertions(+), 4736 deletions(-)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/NetworkStorage.java (80%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/networks/Networks.java
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/networks/command/NetworksMain.java
 rename src/main/java/{io/github/sefiraat/networks/listeners => id/universenetwork/sfa_loader/addons/networks/listener}/ExplosiveToolListener.java (68%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/networks/manager/SupportedPluginManager.java
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/network/GridItemRequest.java (71%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/network/NetworkNode.java (79%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/network/NetworkRoot.java (75%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/network/NodeDefinition.java (92%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/network/NodeType.java (84%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/network/SupportedRecipes.java (79%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/network/barrel/BarrelCore.java (74%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/networks/network/barrel/BarrelType.java
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/network/barrel/InfinityBarrel.java (77%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/network/barrel/NetworkStorage.java (69%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/network/stackcaches/BarrelIdentity.java (76%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/network/stackcaches/BlueprintInstance.java (82%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/network/stackcaches/CardInstance.java (67%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/network/stackcaches/ItemRequest.java (87%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/network/stackcaches/ItemStackCache.java (93%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/network/stackcaches/QuantumCache.java (74%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/NetheoPlants.java
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/NetworkSlimefunItems.java
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/NetworksItemGroups.java
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/NetworksSlimefunItemStacks.java
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/groups/DummyItemGroup.java (87%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/groups/MainFlexGroup.java (80%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/AdminDebuggable.java (73%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkAutoCrafter.java (71%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkBridge.java (78%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkCell.java (77%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkControlV.java (71%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkControlX.java (70%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkController.java (64%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkDirectional.java (62%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkEncoder.java (78%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkExport.java (62%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkGrabber.java (82%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkGreedyBlock.java (73%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkImport.java (64%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkMonitor.java (77%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkObject.java (66%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkPowerDisplay.java (66%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkPowerNode.java (87%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkPowerOutlet.java (77%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkPurger.java (65%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkPusher.java (81%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkQuantumStorage.java (75%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkQuantumWorkbench.java (75%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkVacuum.java (68%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkVanillaGrabber.java (78%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkVanillaPusher.java (75%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkWirelessReceiver.java (68%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/NetworkWirelessTransmitter.java (57%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/grid/AbstractGrid.java (66%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/grid/GridCache.java (93%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/grid/NetworkCraftingGrid.java (80%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/network/grid/NetworkGrid.java (90%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/tools/CanCooldown.java (71%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/tools/CraftingBlueprint.java (65%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/tools/NetworkAdminDebugger.java (78%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/NetworkCard.java
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/tools/NetworkConfigurator.java (65%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/tools/NetworkCrayon.java (82%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/tools/NetworkProbe.java (88%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/tools/NetworkRake.java (72%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/tools/NetworkRemote.java (67%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/slimefun/tools/NetworkWirelessConfigurator.java (58%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/Keys.java
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/utils/NetworkUtils.java (73%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/utils/StackUtils.java (51%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/StringUtils.java
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/utils/Theme.java (88%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/utils/datatypes/DataTypeMethods.java (75%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/utils/datatypes/PersistentAmountInstanceType.java (78%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/utils/datatypes/PersistentCardInstanceType.java (79%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/utils/datatypes/PersistentCraftingBlueprintType.java (80%)
 rename src/main/java/{io/github/sefiraat => id/universenetwork/sfa_loader/addons}/networks/utils/datatypes/PersistentQuantumStorageType.java (77%)
 delete mode 100644 src/main/java/io/github/sefiraat/networks/Networks.java
 delete mode 100644 src/main/java/io/github/sefiraat/networks/commands/NetworksMain.java
 delete mode 100644 src/main/java/io/github/sefiraat/networks/managers/ListenerManager.java
 delete mode 100644 src/main/java/io/github/sefiraat/networks/managers/SupportedPluginManager.java
 delete mode 100644 src/main/java/io/github/sefiraat/networks/network/barrel/BarrelType.java
 delete mode 100644 src/main/java/io/github/sefiraat/networks/slimefun/NetheoPlants.java
 delete mode 100644 src/main/java/io/github/sefiraat/networks/slimefun/NetworkSlimefunItems.java
 delete mode 100644 src/main/java/io/github/sefiraat/networks/slimefun/NetworksItemGroups.java
 delete mode 100644 src/main/java/io/github/sefiraat/networks/slimefun/NetworksSlimefunItemStacks.java
 delete mode 100644 src/main/java/io/github/sefiraat/networks/slimefun/tools/NetworkCard.java
 delete mode 100644 src/main/java/io/github/sefiraat/networks/utils/Keys.java
 delete mode 100644 src/main/java/io/github/sefiraat/networks/utils/StringUtils.java
 delete mode 100644 src/main/resources/config.yml
 delete mode 100644 src/main/resources/plugin.yml

diff --git a/pom.xml b/pom.xml
index 07fc57a..1596dff 100644
--- a/pom.xml
+++ b/pom.xml
@@ -2,54 +2,19 @@
 <project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xmlns="http://maven.apache.org/POM/4.0.0"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-
     <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>id.universenetwork.sfa_loader</groupId>
+        <artifactId>Addons</artifactId>
+        <version>1.1.0</version>
+    </parent>
+
     <groupId>io.github.sefiraat</groupId>
     <artifactId>networks</artifactId>
     <version>MODIFIED_1.2.0</version>
 
-    <distributionManagement>
-        <repository>
-            <id>central</id>
-            <name>sefi-central</name>
-            <url>https://sefiraat.jfrog.io/artifactory/default-maven-local</url>
-        </repository>
-        <snapshotRepository>
-            <id>snapshots</id>
-            <name>sefi-snapshot</name>
-            <url>https://sefiraat.jfrog.io/artifactory/default-maven-local</url>
-        </snapshotRepository>
-    </distributionManagement>
-
-    <pluginRepositories>
-        <pluginRepository>
-            <releases>
-                <updatePolicy>never</updatePolicy>
-            </releases>
-            <snapshots>
-                <enabled>true</enabled>
-            </snapshots>
-            <id>snapshots</id>
-            <name>maven-snapshots</name>
-            <url>https://repository.apache.org/content/repositories/snapshots/</url>
-        </pluginRepository>
-        <pluginRepository>
-            <releases>
-                <updatePolicy>never</updatePolicy>
-            </releases>
-            <snapshots>
-                <enabled>true</enabled>
-            </snapshots>
-            <id>central</id>
-            <name>Maven Plugin Repository</name>
-            <url>https://repo1.maven.org/maven2</url>
-        </pluginRepository>
-    </pluginRepositories>
-
     <properties>
-        <maven.compiler.source>16</maven.compiler.source>
-        <maven.compiler.target>16</maven.compiler.target>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
         <sonar.projectKey>Networks</sonar.projectKey>
         <sonar.organization>sefiraat</sonar.organization>
         <sonar.host.url>https://sonarcloud.io</sonar.host.url>
@@ -67,50 +32,6 @@
 
     <build>
         <finalName>${project.name} v${project.version}</finalName>
-        <plugins>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-shade-plugin</artifactId>
-                <version>3.5.0</version>
-                <configuration>
-                    <relocations>
-                        <relocation>
-                            <pattern>org.bstats</pattern>
-                            <shadedPattern>io.github.sefiraat.networks.bstats</shadedPattern>
-                        </relocation>
-                    </relocations>
-                    <filters>
-                        <filter>
-                            <artifact>*:*</artifact>
-                            <excludes>
-                                <exclude>META-INF/*</exclude>
-                            </excludes>
-                        </filter>
-                    </filters>
-                </configuration>
-                <executions>
-                    <execution>
-                        <phase>package</phase>
-                        <goals>
-                            <goal>shade</goal>
-                        </goals>
-                    </execution>
-                </executions>
-            </plugin>
-        </plugins>
-        <defaultGoal>clean package</defaultGoal>
-        <sourceDirectory>${basedir}/src/main/java</sourceDirectory>
-
-        <resources>
-            <resource>
-                <directory>${basedir}/src/main/resources</directory>
-                <filtering>true</filtering>
-                <includes>
-                    <include>**/*.*</include>
-                    <include>tags/*.json</include>
-                </includes>
-            </resource>
-        </resources>
     </build>
 
 
@@ -119,10 +40,6 @@
             <id>spigot-repo</id>
             <url>https://hub.spigotmc.org/nexus/content/repositories/snapshots/</url>
         </repository>
-        <repository>
-            <id>jitpack.io</id>
-            <url>https://jitpack.io</url>
-        </repository>
         <repository>
             <id>jeff-media-public</id>
             <url>https://hub.jeff-media.com/nexus/repository/jeff-media-public/</url>
@@ -145,49 +62,32 @@
             <version>1.19-R0.1-SNAPSHOT</version>
             <scope>provided</scope>
         </dependency>
-        <dependency>
-            <groupId>com.github.Slimefun</groupId>
-            <artifactId>Slimefun4</artifactId>
-            <version>934ab822a6</version>
-            <scope>provided</scope>
-        </dependency>
         <dependency>
             <groupId>dev.sefiraat</groupId>
             <artifactId>SefiLib</artifactId>
             <version>0.2.6</version>
-            <scope>compile</scope>
+            <scope>provided</scope>
         </dependency>
 
         <!-- Tools etc. -->
-        <dependency>
-            <groupId>org.bstats</groupId>
-            <artifactId>bstats-bukkit</artifactId>
-            <version>3.0.2</version>
-            <scope>compile</scope>
-        </dependency>
         <dependency>
             <groupId>com.google.code.findbugs</groupId>
             <artifactId>annotations</artifactId>
             <version>3.0.1u2</version>
-        </dependency>
-        <dependency>
-            <groupId>org.projectlombok</groupId>
-            <artifactId>lombok</artifactId>
-            <version>1.18.28</version>
             <scope>provided</scope>
         </dependency>
         <dependency>
             <groupId>de.jeff_media</groupId>
             <artifactId>MorePersistentDataTypes</artifactId>
             <version>1.0.0</version>
-            <scope>compile</scope>
+            <scope>provided</scope>
         </dependency>
 
         <!-- Supported Plugins -->
         <dependency>
             <groupId>io.github.mooy1</groupId>
             <artifactId>InfinityExpansion</artifactId>
-            <version>90e11bc</version>
+            <version>MODIFIED</version>
             <scope>provided</scope>
         </dependency>
         <dependency>
@@ -202,6 +102,7 @@
             <version>2023.2</version>
             <scope>provided</scope>
         </dependency>
+        <!--suppress VulnerableLibrariesLocal -->
         <dependency>
             <groupId>com.gmail.nossr50.mcMMO</groupId>
             <artifactId>mcMMO</artifactId>
@@ -209,6 +110,4 @@
             <scope>provided</scope>
         </dependency>
     </dependencies>
-
-
-</project>
+</project>
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/NetworkStorage.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/NetworkStorage.java
similarity index 80%
rename from src/main/java/io/github/sefiraat/networks/NetworkStorage.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/NetworkStorage.java
index c87d6d2..d13b38d 100644
--- a/src/main/java/io/github/sefiraat/networks/NetworkStorage.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/NetworkStorage.java
@@ -1,7 +1,7 @@
-package io.github.sefiraat.networks;
+package id.universenetwork.sfa_loader.addons.networks;
 
-import io.github.sefiraat.networks.network.NetworkNode;
-import io.github.sefiraat.networks.network.NodeDefinition;
+import id.universenetwork.sfa_loader.addons.networks.network.NetworkNode;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeDefinition;
 import lombok.experimental.UtilityClass;
 import org.bukkit.Location;
 
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/networks/Networks.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/Networks.java
new file mode 100644
index 0000000..9b58ca6
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/Networks.java
@@ -0,0 +1,63 @@
+package id.universenetwork.sfa_loader.addons.networks;
+
+import id.universenetwork.sfa_loader.addons.networks.command.NetworksMain;
+import id.universenetwork.sfa_loader.addons.networks.listener.ExplosiveToolListener;
+import id.universenetwork.sfa_loader.addons.networks.manager.SupportedPluginManager;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.NetheoPlants;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.NetworkSlimefunItems;
+import id.universenetwork.sfa_loader.annotations.AddonHooks;
+import id.universenetwork.sfa_loader.annotations.AddonLibrary;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Events;
+import id.universenetwork.sfa_loader.managers.CommandManager;
+import id.universenetwork.sfa_loader.template.AddonTemplate;
+import id.universenetwork.sfa_loader.utils.LogUtils;
+import lombok.Getter;
+
+@AddonHooks("InfinityExpansion")
+@AddonLibrary(
+        groupId = "dev{}sefiraat",
+        artifactId = "SefiLib",
+        version = "0.2.6"
+)
+@AddonLibrary(
+        groupId = "de{}jeff_media",
+        artifactId = "MorePersistentDataTypes",
+        version = "1.0.0",
+        repository = "https://hub.jeff-media.com/nexus/repository/jeff-media-public"
+)
+public class Networks extends AddonTemplate {
+    @Getter
+    private static Networks instance;
+
+    private SupportedPluginManager supportedPluginManager;
+
+
+    @Override
+    public void onLoad() {
+        instance = this;
+
+        LogUtils.info("########################################");
+        LogUtils.info("         Networks - By Sefiraat         ");
+        LogUtils.info("########################################");
+
+        this.supportedPluginManager = new SupportedPluginManager();
+
+        setupSlimefun();
+
+        Events.registerListener(new ExplosiveToolListener());
+        CommandManager.register(new NetworksMain());
+    }
+
+    public void setupSlimefun() {
+        NetworkSlimefunItems.setup();
+        if (supportedPluginManager.isNetheopoiesis()) try {
+            NetheoPlants.setup();
+        } catch (NoClassDefFoundError e) {
+            LogUtils.severe("Netheopoiesis must be updated to meet Networks' requirements.");
+        }
+    }
+
+    public static SupportedPluginManager getSupportedPluginManager() {
+        return Networks.getInstance().supportedPluginManager;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/networks/command/NetworksMain.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/command/NetworksMain.java
new file mode 100644
index 0000000..0235a55
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/command/NetworksMain.java
@@ -0,0 +1,60 @@
+package id.universenetwork.sfa_loader.addons.networks.command;
+
+import cloud.commandframework.annotations.Argument;
+import cloud.commandframework.annotations.CommandDescription;
+import cloud.commandframework.annotations.CommandMethod;
+import cloud.commandframework.annotations.CommandPermission;
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.QuantumCache;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.network.NetworkQuantumStorage;
+import id.universenetwork.sfa_loader.addons.networks.utils.Keys;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
+import id.universenetwork.sfa_loader.addons.networks.utils.datatypes.DataTypeMethods;
+import id.universenetwork.sfa_loader.addons.networks.utils.datatypes.PersistentQuantumStorageType;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import org.bukkit.Material;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.meta.ItemMeta;
+
+public class NetworksMain {
+    @CommandMethod("networks fillquantum <amount>")
+    @CommandPermission("networks.admin")
+    @CommandDescription("/networks")
+    public void cmdNetworks(final CommandSender sender, final @Argument("amount") int amount) {
+        if (sender instanceof Player) {
+            final Player player = (Player) sender;
+
+            final ItemStack itemStack = player.getInventory().getItemInMainHand();
+            if (itemStack.getType() == Material.AIR) {
+                player.sendMessage(Theme.ERROR + "Item in hand must be a Quantum Storage.");
+                return;
+            }
+
+            SlimefunItem slimefunItem = SlimefunItem.getByItem(itemStack);
+
+            if (!(slimefunItem instanceof NetworkQuantumStorage)) {
+                player.sendMessage(Theme.ERROR + "Item in hand must be a Quantum Storage.");
+                return;
+            }
+
+            ItemMeta meta = itemStack.getItemMeta();
+            final QuantumCache quantumCache = DataTypeMethods.getCustom(
+                    meta,
+                    Keys.QUANTUM_STORAGE_INSTANCE,
+                    PersistentQuantumStorageType.TYPE
+            );
+
+            if (quantumCache == null || quantumCache.getItemStack() == null) {
+                player.sendMessage(Theme.ERROR + "This card has either not been set to an item yet or is a corrupted Quantum Storage.");
+                return;
+            }
+
+            quantumCache.setAmount(amount);
+            DataTypeMethods.setCustom(meta, Keys.QUANTUM_STORAGE_INSTANCE, PersistentQuantumStorageType.TYPE, quantumCache);
+            quantumCache.updateMetaLore(meta);
+            itemStack.setItemMeta(meta);
+            player.sendMessage(Theme.SUCCESS + "Item updated");
+        }
+    }
+}
diff --git a/src/main/java/io/github/sefiraat/networks/listeners/ExplosiveToolListener.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/listener/ExplosiveToolListener.java
similarity index 68%
rename from src/main/java/io/github/sefiraat/networks/listeners/ExplosiveToolListener.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/listener/ExplosiveToolListener.java
index c7f8da8..e959bf5 100644
--- a/src/main/java/io/github/sefiraat/networks/listeners/ExplosiveToolListener.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/listener/ExplosiveToolListener.java
@@ -1,27 +1,23 @@
-package io.github.sefiraat.networks.listeners;
+package id.universenetwork.sfa_loader.addons.networks.listener;
 
-import io.github.sefiraat.networks.slimefun.network.NetworkQuantumStorage;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.network.NetworkQuantumStorage;
 import io.github.thebusybiscuit.slimefun4.api.events.ExplosiveToolBreakBlocksEvent;
 import org.bukkit.Location;
 import org.bukkit.block.Block;
 import org.bukkit.event.EventHandler;
 import org.bukkit.event.Listener;
 
-import javax.annotation.Nonnull;
 import java.util.ArrayList;
 import java.util.List;
 
 public class ExplosiveToolListener implements Listener {
-
     @EventHandler
-    public void onExplosiveBlockBreak(@Nonnull ExplosiveToolBreakBlocksEvent event) {
+    public void onExplosiveBlockBreak(ExplosiveToolBreakBlocksEvent event) {
         final List<Block> blocksToRemove = new ArrayList<>();
         for (Block block : event.getAdditionalBlocks()) {
             final Location location = block.getLocation();
-            if (NetworkQuantumStorage.getCaches().containsKey(location)) {
-                blocksToRemove.add(block);
-            }
+            if (NetworkQuantumStorage.getCaches().containsKey(location)) blocksToRemove.add(block);
         }
         event.getAdditionalBlocks().removeAll(blocksToRemove);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/networks/manager/SupportedPluginManager.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/manager/SupportedPluginManager.java
new file mode 100644
index 0000000..6c2ea48
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/manager/SupportedPluginManager.java
@@ -0,0 +1,34 @@
+package id.universenetwork.sfa_loader.addons.networks.manager;
+
+import com.google.common.base.Preconditions;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Scheduler;
+import lombok.Getter;
+import org.bukkit.Bukkit;
+
+public class SupportedPluginManager {
+    @Getter
+    private static SupportedPluginManager instance;
+
+    @Getter
+    private final boolean netheopoiesis;
+
+    // region First Tick Only Registrations
+    @Getter
+    private boolean mcMMO;
+    @Getter
+    private boolean wildChests;
+
+    // endregion
+
+    public SupportedPluginManager() {
+        Preconditions.checkArgument(instance == null, "Cannot instantiate class");
+        instance = this;
+        this.netheopoiesis = Bukkit.getPluginManager().isPluginEnabled("Netheopoiesis");
+        Scheduler.run(1, this::firstTickRegistrations);
+    }
+
+    private void firstTickRegistrations() {
+        this.wildChests = Bukkit.getPluginManager().isPluginEnabled("WildChests");
+        this.mcMMO = Bukkit.getPluginManager().isPluginEnabled("mcMMO");
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/network/GridItemRequest.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/GridItemRequest.java
similarity index 71%
rename from src/main/java/io/github/sefiraat/networks/network/GridItemRequest.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/network/GridItemRequest.java
index 6f6fea9..b8ebe54 100644
--- a/src/main/java/io/github/sefiraat/networks/network/GridItemRequest.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/GridItemRequest.java
@@ -1,11 +1,10 @@
-package io.github.sefiraat.networks.network;
+package id.universenetwork.sfa_loader.addons.networks.network;
 
-import io.github.sefiraat.networks.network.stackcaches.ItemRequest;
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.ItemRequest;
 import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 
 public class GridItemRequest extends ItemRequest {
-
     private final Player player;
 
     public GridItemRequest(ItemStack itemStack, int amount, Player player) {
@@ -16,4 +15,4 @@ public class GridItemRequest extends ItemRequest {
     public Player getPlayer() {
         return player;
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/network/NetworkNode.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/NetworkNode.java
similarity index 79%
rename from src/main/java/io/github/sefiraat/networks/network/NetworkNode.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/network/NetworkNode.java
index 9643854..a0f4d59 100644
--- a/src/main/java/io/github/sefiraat/networks/network/NetworkNode.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/NetworkNode.java
@@ -1,8 +1,8 @@
-package io.github.sefiraat.networks.network;
+package id.universenetwork.sfa_loader.addons.networks.network;
 
-import io.github.sefiraat.networks.NetworkStorage;
-import io.github.sefiraat.networks.Networks;
-import io.github.sefiraat.networks.slimefun.network.NetworkPowerNode;
+import id.universenetwork.sfa_loader.addons.networks.NetworkStorage;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.network.NetworkPowerNode;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Scheduler;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import org.bukkit.Location;
@@ -10,7 +10,6 @@ import org.bukkit.Material;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.inventory.ItemStack;
-import org.bukkit.scheduler.BukkitRunnable;
 
 import javax.annotation.Nonnull;
 import java.util.EnumSet;
@@ -18,14 +17,13 @@ import java.util.HashSet;
 import java.util.Set;
 
 public class NetworkNode {
-
     protected static final Set<BlockFace> VALID_FACES = EnumSet.of(
-        BlockFace.UP,
-        BlockFace.DOWN,
-        BlockFace.NORTH,
-        BlockFace.EAST,
-        BlockFace.SOUTH,
-        BlockFace.WEST
+            BlockFace.UP,
+            BlockFace.DOWN,
+            BlockFace.NORTH,
+            BlockFace.EAST,
+            BlockFace.SOUTH,
+            BlockFace.WEST
     );
 
     protected final Set<NetworkNode> childrenNodes = new HashSet<>();
@@ -94,16 +92,13 @@ public class NetworkNode {
             final Location testLocation = this.nodePosition.clone().add(face.getDirection());
             final NodeDefinition testDefinition = NetworkStorage.getAllNetworkObjects().get(testLocation);
 
-            if (testDefinition == null) {
-                continue;
-            }
+            if (testDefinition == null) continue;
 
             final NodeType testType = testDefinition.getType();
 
             // Kill additional controllers if it isn't the root
-            if (testType == NodeType.CONTROLLER && !testLocation.equals(getRoot().nodePosition)) {
+            if (testType == NodeType.CONTROLLER && !testLocation.equals(getRoot().nodePosition))
                 killAdditionalController(testLocation);
-            }
 
             // Check if it's in the network already and, if not, create a child node and propagate further.
             if (testType != NodeType.CONTROLLER && !this.networkContains(testLocation)) {
@@ -124,14 +119,10 @@ public class NetworkNode {
         final Block block = location.getBlock();
         final ItemStack toDrop = BlockStorage.retrieve(block);
         if (toDrop != null) {
-            BukkitRunnable runnable = new BukkitRunnable() {
-                @Override
-                public void run() {
-                    location.getWorld().dropItemNaturally(location, toDrop);
-                    block.setType(Material.AIR);
-                }
-            };
-            runnable.runTask(Networks.getInstance());
+            Scheduler.run(() -> {
+                location.getWorld().dropItemNaturally(location, toDrop);
+                block.setType(Material.AIR);
+            });
             NetworkStorage.getAllNetworkObjects().remove(location);
         }
     }
@@ -140,9 +131,7 @@ public class NetworkNode {
         if (this.nodeType == NodeType.POWER_NODE) {
             int blockCharge = 0;
             final SlimefunItem item = BlockStorage.check(this.nodePosition);
-            if (item instanceof NetworkPowerNode powerNode) {
-                blockCharge = powerNode.getCharge(this.nodePosition);
-            }
+            if (item instanceof NetworkPowerNode) blockCharge = ((NetworkPowerNode) item).getCharge(this.nodePosition);
             return blockCharge;
         }
         return 0;
@@ -151,4 +140,4 @@ public class NetworkNode {
     public long getPower() {
         return this.power;
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/network/NetworkRoot.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/NetworkRoot.java
similarity index 75%
rename from src/main/java/io/github/sefiraat/networks/network/NetworkRoot.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/network/NetworkRoot.java
index 39f4f81..a8e1096 100644
--- a/src/main/java/io/github/sefiraat/networks/network/NetworkRoot.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/NetworkRoot.java
@@ -1,17 +1,18 @@
-package io.github.sefiraat.networks.network;
-
-import io.github.mooy1.infinityexpansion.items.storage.StorageUnit;
-import io.github.sefiraat.networks.Networks;
-import io.github.sefiraat.networks.network.barrel.InfinityBarrel;
-import io.github.sefiraat.networks.network.barrel.NetworkStorage;
-import io.github.sefiraat.networks.network.stackcaches.BarrelIdentity;
-import io.github.sefiraat.networks.network.stackcaches.ItemRequest;
-import io.github.sefiraat.networks.network.stackcaches.QuantumCache;
-import io.github.sefiraat.networks.slimefun.network.NetworkDirectional;
-import io.github.sefiraat.networks.slimefun.network.NetworkGreedyBlock;
-import io.github.sefiraat.networks.slimefun.network.NetworkPowerNode;
-import io.github.sefiraat.networks.slimefun.network.NetworkQuantumStorage;
-import io.github.sefiraat.networks.utils.StackUtils;
+package id.universenetwork.sfa_loader.addons.networks.network;
+
+import id.universenetwork.sfa_loader.AddonsLoader;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.storage.StorageCache;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.storage.StorageUnit;
+import id.universenetwork.sfa_loader.addons.networks.network.barrel.InfinityBarrel;
+import id.universenetwork.sfa_loader.addons.networks.network.barrel.NetworkStorage;
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.BarrelIdentity;
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.ItemRequest;
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.QuantumCache;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.network.NetworkDirectional;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.network.NetworkGreedyBlock;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.network.NetworkPowerNode;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.network.NetworkQuantumStorage;
+import id.universenetwork.sfa_loader.addons.networks.utils.StackUtils;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
@@ -32,7 +33,6 @@ import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
 public class NetworkRoot extends NetworkNode {
-
     private final Set<Location> nodeLocations = new HashSet<>();
     private final int maxNodes;
     private boolean isOverburdened = false;
@@ -68,24 +68,53 @@ public class NetworkRoot extends NetworkNode {
     public void registerNode(@Nonnull Location location, @Nonnull NodeType type) {
         nodeLocations.add(location);
         switch (type) {
-            case CONTROLLER -> {
-                // Nothing here guvnor
-            }
-            case BRIDGE -> bridges.add(location);
-            case STORAGE_MONITOR -> monitors.add(location);
-            case IMPORT -> importers.add(location);
-            case EXPORT -> exporters.add(location);
-            case GRID -> grids.add(location);
-            case CELL -> cells.add(location);
-            case WIPER -> wipers.add(location);
-            case GRABBER -> grabbers.add(location);
-            case PUSHER -> pushers.add(location);
-            case PURGER -> purgers.add(location);
-            case CRAFTER -> crafters.add(location);
-            case POWER_NODE -> powerNodes.add(location);
-            case POWER_DISPLAY -> powerDisplays.add(location);
-            case ENCODER -> encoders.add(location);
-            case GREEDY_BLOCK -> greedyBlocks.add(location);
+            case CONTROLLER:
+                break; // Nothing here guvnor
+            case BRIDGE:
+                bridges.add(location);
+                break;
+            case STORAGE_MONITOR:
+                monitors.add(location);
+                break;
+            case IMPORT:
+                importers.add(location);
+                break;
+            case EXPORT:
+                exporters.add(location);
+                break;
+            case GRID:
+                grids.add(location);
+                break;
+            case CELL:
+                cells.add(location);
+                break;
+            case WIPER:
+                wipers.add(location);
+                break;
+            case GRABBER:
+                grabbers.add(location);
+                break;
+            case PUSHER:
+                pushers.add(location);
+                break;
+            case PURGER:
+                purgers.add(location);
+                break;
+            case CRAFTER:
+                crafters.add(location);
+                break;
+            case POWER_NODE:
+                powerNodes.add(location);
+                break;
+            case POWER_DISPLAY:
+                powerDisplays.add(location);
+                break;
+            case ENCODER:
+                encoders.add(location);
+                break;
+            case GREEDY_BLOCK:
+                greedyBlocks.add(location);
+                break;
         }
     }
 
@@ -187,11 +216,8 @@ public class NetworkRoot extends NetworkNode {
                 newAmount = barrelIdentity.getAmount();
             } else {
                 long newLong = (long) currentAmount + (long) barrelIdentity.getAmount();
-                if (newLong > Integer.MAX_VALUE) {
-                    newAmount = Integer.MAX_VALUE;
-                } else {
-                    newAmount = currentAmount + barrelIdentity.getAmount();
-                }
+                if (newLong > Integer.MAX_VALUE) newAmount = Integer.MAX_VALUE;
+                else newAmount = currentAmount + barrelIdentity.getAmount();
             }
             itemStacks.put(barrelIdentity.getItemStack(), newAmount);
         }
@@ -208,11 +234,8 @@ public class NetworkRoot extends NetworkNode {
                 newAmount = itemStack.getAmount();
             } else {
                 long newLong = (long) currentAmount + (long) itemStack.getAmount();
-                if (newLong > Integer.MAX_VALUE) {
-                    newAmount = Integer.MAX_VALUE;
-                } else {
-                    newAmount = currentAmount + itemStack.getAmount();
-                }
+                if (newLong > Integer.MAX_VALUE) newAmount = Integer.MAX_VALUE;
+                else newAmount = currentAmount + itemStack.getAmount();
             }
             itemStacks.put(clone, newAmount);
         }
@@ -221,28 +244,22 @@ public class NetworkRoot extends NetworkNode {
             int[] slots = blockMenu.getPreset().getSlotsAccessedByItemTransport(ItemTransportFlow.WITHDRAW);
             for (int slot : slots) {
                 final ItemStack itemStack = blockMenu.getItemInSlot(slot);
-                if (itemStack == null || itemStack.getType() == Material.AIR) {
-                    continue;
-                }
+                if (itemStack == null || itemStack.getType() == Material.AIR) continue;
                 final ItemStack clone = StackUtils.getAsQuantity(itemStack, 1);
                 final Integer currentAmount = itemStacks.get(clone);
                 final int newAmount;
-                if (currentAmount == null) {
-                    newAmount = itemStack.getAmount();
-                } else {
+                if (currentAmount == null) newAmount = itemStack.getAmount();
+                else {
                     long newLong = (long) currentAmount + (long) itemStack.getAmount();
-                    if (newLong > Integer.MAX_VALUE) {
-                        newAmount = Integer.MAX_VALUE;
-                    } else {
-                        newAmount = currentAmount + itemStack.getAmount();
-                    }
+                    if (newLong > Integer.MAX_VALUE) newAmount = Integer.MAX_VALUE;
+                    else newAmount = currentAmount + itemStack.getAmount();
                 }
                 itemStacks.put(clone, newAmount);
             }
         }
 
-        for (BlockMenu blockMenu : getCellMenus()) {
-            for (ItemStack itemStack : blockMenu.getContents()) {
+        for (BlockMenu blockMenu : getCellMenus())
+            for (ItemStack itemStack : blockMenu.getContents())
                 if (itemStack != null && itemStack.getType() != Material.AIR) {
                     final ItemStack clone = itemStack.clone();
 
@@ -251,30 +268,21 @@ public class NetworkRoot extends NetworkNode {
                     final Integer currentAmount = itemStacks.get(clone);
                     int newAmount;
 
-                    if (currentAmount == null) {
-                        newAmount = itemStack.getAmount();
-                    } else {
+                    if (currentAmount == null) newAmount = itemStack.getAmount();
+                    else {
                         long newLong = (long) currentAmount + (long) itemStack.getAmount();
-                        if (newLong > Integer.MAX_VALUE) {
-                            newAmount = Integer.MAX_VALUE;
-                        } else {
-                            newAmount = currentAmount + itemStack.getAmount();
-                        }
+                        if (newLong > Integer.MAX_VALUE) newAmount = Integer.MAX_VALUE;
+                        else newAmount = currentAmount + itemStack.getAmount();
                     }
 
                     itemStacks.put(clone, newAmount);
                 }
-            }
-        }
         return itemStacks;
     }
 
     @Nonnull
     public Set<BarrelIdentity> getBarrels() {
-
-        if (this.barrels != null) {
-            return this.barrels;
-        }
+        if (this.barrels != null) return this.barrels;
 
         final Set<Location> addedLocations = ConcurrentHashMap.newKeySet();
         final Set<BarrelIdentity> barrelSet = ConcurrentHashMap.newKeySet();
@@ -282,38 +290,27 @@ public class NetworkRoot extends NetworkNode {
         for (Location cellLocation : this.monitors) {
             final BlockFace face = NetworkDirectional.getSelectedFace(cellLocation);
 
-            if (face == null) {
-                continue;
-            }
+            if (face == null) continue;
 
             final Location testLocation = cellLocation.clone().add(face.getDirection());
 
-            if (addedLocations.contains(testLocation)) {
-                continue;
-            } else {
-                addedLocations.add(testLocation);
-            }
+            if (addedLocations.contains(testLocation)) continue;
+            else addedLocations.add(testLocation);
 
             final SlimefunItem slimefunItem = BlockStorage.check(testLocation);
 
-            if (Networks.getSupportedPluginManager()
-                .isInfinityExpansion() && slimefunItem instanceof StorageUnit unit) {
+            if (AddonsLoader.isAddonLoaded("InfinityExpansion") && slimefunItem instanceof StorageUnit) {
                 final BlockMenu menu = BlockStorage.getInventory(testLocation);
-                final InfinityBarrel infinityBarrel = getInfinityBarrel(menu, unit);
-                if (infinityBarrel != null) {
-                    barrelSet.add(infinityBarrel);
-                }
+                final InfinityBarrel infinityBarrel = getInfinityBarrel(menu, (StorageUnit) slimefunItem);
+                if (infinityBarrel != null) barrelSet.add(infinityBarrel);
                 continue;
             }
 
             if (slimefunItem instanceof NetworkQuantumStorage) {
                 final BlockMenu menu = BlockStorage.getInventory(testLocation);
                 final NetworkStorage storage = getNetworkStorage(menu);
-                if (storage != null) {
-                    barrelSet.add(storage);
-                }
+                if (storage != null) barrelSet.add(storage);
             }
-
         }
 
         this.barrels = barrelSet;
@@ -326,30 +323,24 @@ public class NetworkRoot extends NetworkNode {
         final Config config = BlockStorage.getLocationInfo(blockMenu.getLocation());
         final String storedString = config.getString("stored");
 
-        if (storedString == null) {
-            return null;
-        }
+        if (storedString == null) return null;
 
         final int storedInt = Integer.parseInt(storedString);
 
-        if (itemStack == null || itemStack.getType() == Material.AIR) {
-            return null;
-        }
+        if (itemStack == null || itemStack.getType() == Material.AIR) return null;
 
-        final io.github.mooy1.infinityexpansion.items.storage.StorageCache cache = storageUnit.getCache(blockMenu.getLocation());
+        final StorageCache cache = storageUnit.getCache(blockMenu.getLocation());
 
-        if (cache == null) {
-            return null;
-        }
+        if (cache == null) return null;
 
         final ItemStack clone = itemStack.clone();
         clone.setAmount(1);
 
         return new InfinityBarrel(
-            blockMenu.getLocation(),
-            clone,
-            storedInt + itemStack.getAmount(),
-            cache
+                blockMenu.getLocation(),
+                clone,
+                storedInt + itemStack.getAmount(),
+                cache
         );
     }
 
@@ -358,29 +349,24 @@ public class NetworkRoot extends NetworkNode {
 
         final QuantumCache cache = NetworkQuantumStorage.getCaches().get(blockMenu.getLocation());
 
-        if (cache == null || cache.getItemStack() == null) {
-            return null;
-        }
+        if (cache == null || cache.getItemStack() == null) return null;
 
         final ItemStack output = blockMenu.getItemInSlot(NetworkQuantumStorage.OUTPUT_SLOT);
         final ItemStack itemStack = cache.getItemStack();
         int storedInt = cache.getAmount();
 
-        if (output != null && output.getType() != Material.AIR && StackUtils.itemsMatch(cache, output, true)) {
+        if (output != null && output.getType() != Material.AIR && StackUtils.itemsMatch(cache, output, true))
             storedInt = storedInt + output.getAmount();
-        }
 
-        if (itemStack == null || itemStack.getType() == Material.AIR) {
-            return null;
-        }
+        if (itemStack == null || itemStack.getType() == Material.AIR) return null;
 
         final ItemStack clone = itemStack.clone();
         clone.setAmount(1);
 
         return new NetworkStorage(
-            blockMenu.getLocation(),
-            clone,
-            storedInt
+                blockMenu.getLocation(),
+                clone,
+                storedInt
         );
     }
 
@@ -389,9 +375,7 @@ public class NetworkRoot extends NetworkNode {
         final Set<BlockMenu> menus = new HashSet<>();
         for (Location cellLocation : this.cells) {
             BlockMenu menu = BlockStorage.getInventory(cellLocation);
-            if (menu != null) {
-                menus.add(menu);
-            }
+            if (menu != null) menus.add(menu);
         }
         return menus;
     }
@@ -401,9 +385,7 @@ public class NetworkRoot extends NetworkNode {
         final Set<BlockMenu> menus = new HashSet<>();
         for (Location location : this.crafters) {
             BlockMenu menu = BlockStorage.getInventory(location);
-            if (menu != null) {
-                menus.add(menu);
-            }
+            if (menu != null) menus.add(menu);
         }
         return menus;
     }
@@ -413,9 +395,7 @@ public class NetworkRoot extends NetworkNode {
         final Set<BlockMenu> menus = new HashSet<>();
         for (Location location : this.greedyBlocks) {
             BlockMenu menu = BlockStorage.getInventory(location);
-            if (menu != null) {
-                menus.add(menu);
-            }
+            if (menu != null) menus.add(menu);
         }
         return menus;
     }
@@ -439,11 +419,8 @@ public class NetworkRoot extends NetworkNode {
         for (BlockMenu blockMenu : getCellMenus()) {
             for (ItemStack itemStack : blockMenu.getContents()) {
                 if (itemStack == null
-                    || itemStack.getType() == Material.AIR
-                    || !StackUtils.itemsMatch(request, itemStack, true)
-                ) {
-                    continue;
-                }
+                        || itemStack.getType() == Material.AIR
+                        || !StackUtils.itemsMatch(request, itemStack, true)) continue;
 
                 // Mark the Cell as dirty otherwise the changes will not save on shutdown
                 blockMenu.markDirty();
@@ -457,9 +434,7 @@ public class NetworkRoot extends NetworkNode {
                 }
 
                 // Escape if fulfilled request
-                if (request.getAmount() <= 0) {
-                    return stackToReturn;
-                }
+                if (request.getAmount() <= 0) return stackToReturn;
 
                 if (request.getAmount() <= itemStack.getAmount()) {
                     // We can't take more than this stack. Level to request amount, remove items and then return
@@ -481,12 +456,9 @@ public class NetworkRoot extends NetworkNode {
             for (int slot : slots) {
                 final ItemStack itemStack = blockMenu.getItemInSlot(slot);
                 if (itemStack == null || itemStack.getType() == Material.AIR || !StackUtils.itemsMatch(
-                    request,
-                    itemStack,
-                    true
-                )) {
-                    continue;
-                }
+                        request,
+                        itemStack,
+                        true)) continue;
 
                 // Stack is null, so we can fill it here
                 if (stackToReturn == null) {
@@ -497,9 +469,7 @@ public class NetworkRoot extends NetworkNode {
                 }
 
                 // Escape if fulfilled request
-                if (request.getAmount() <= 0) {
-                    return stackToReturn;
-                }
+                if (request.getAmount() <= 0) return stackToReturn;
 
                 if (request.getAmount() <= itemStack.getAmount()) {
                     stackToReturn.setAmount(stackToReturn.getAmount() + request.getAmount());
@@ -517,11 +487,8 @@ public class NetworkRoot extends NetworkNode {
         for (BlockMenu blockMenu : getGreedyBlocks()) {
             final ItemStack itemStack = blockMenu.getItemInSlot(NetworkGreedyBlock.INPUT_SLOT);
             if (itemStack == null
-                || itemStack.getType() == Material.AIR
-                || !StackUtils.itemsMatch(request, itemStack, true)
-            ) {
-                continue;
-            }
+                    || itemStack.getType() == Material.AIR
+                    || !StackUtils.itemsMatch(request, itemStack, true)) continue;
 
             // Mark the Cell as dirty otherwise the changes will not save on shutdown
             blockMenu.markDirty();
@@ -535,9 +502,7 @@ public class NetworkRoot extends NetworkNode {
             }
 
             // Escape if fulfilled request
-            if (request.getAmount() <= 0) {
-                return stackToReturn;
-            }
+            if (request.getAmount() <= 0) return stackToReturn;
 
             if (request.getAmount() <= itemStack.getAmount()) {
                 // We can't take more than this stack. Level to request amount, remove items and then return
@@ -557,15 +522,12 @@ public class NetworkRoot extends NetworkNode {
 
             final ItemStack itemStack = barrelIdentity.getItemStack();
 
-            if (itemStack == null || !StackUtils.itemsMatch(request, itemStack, true)) {
-                continue;
-            }
+            if (itemStack == null || !StackUtils.itemsMatch(request, itemStack, true)) continue;
 
             boolean infinity = barrelIdentity instanceof InfinityBarrel;
             final ItemStack fetched = barrelIdentity.requestItem(request);
-            if (fetched == null || fetched.getType() == Material.AIR || (infinity && fetched.getAmount() == 1)) {
+            if (fetched == null || fetched.getType() == Material.AIR || (infinity && fetched.getAmount() == 1))
                 continue;
-            }
 
             // Stack is null, so we can fill it here
             if (stackToReturn == null) {
@@ -576,9 +538,7 @@ public class NetworkRoot extends NetworkNode {
             }
 
             // Escape if fulfilled request
-            if (request.getAmount() <= 0) {
-                return stackToReturn;
-            }
+            if (request.getAmount() <= 0) return stackToReturn;
 
             final int preserveAmount = infinity ? fetched.getAmount() - 1 : fetched.getAmount();
 
@@ -598,11 +558,7 @@ public class NetworkRoot extends NetworkNode {
     }
 
     public boolean contains(@Nonnull ItemRequest[] requests) {
-        for (ItemRequest request : requests) {
-            if (!contains(request)) {
-                return false;
-            }
-        }
+        for (ItemRequest request : requests) if (!contains(request)) return false;
         return true;
     }
 
@@ -613,18 +569,13 @@ public class NetworkRoot extends NetworkNode {
         for (BlockMenu blockMenu : getCellMenus()) {
             for (ItemStack itemStack : blockMenu.getContents()) {
                 if (itemStack == null
-                    || itemStack.getType() == Material.AIR
-                    || !StackUtils.itemsMatch(request, itemStack, true)
-                ) {
-                    continue;
-                }
+                        || itemStack.getType() == Material.AIR
+                        || !StackUtils.itemsMatch(request, itemStack, true)) continue;
 
                 found += itemStack.getAmount();
 
                 // Escape if found all we need
-                if (found >= request.getAmount()) {
-                    return true;
-                }
+                if (found >= request.getAmount()) return true;
             }
         }
 
@@ -634,18 +585,13 @@ public class NetworkRoot extends NetworkNode {
             for (int slot : slots) {
                 final ItemStack itemStack = blockMenu.getItemInSlot(slot);
                 if (itemStack == null
-                    || itemStack.getType() == Material.AIR
-                    || !StackUtils.itemsMatch(request, itemStack, true)
-                ) {
-                    continue;
-                }
+                        || itemStack.getType() == Material.AIR
+                        || !StackUtils.itemsMatch(request, itemStack, true)) continue;
 
                 found += itemStack.getAmount();
 
                 // Escape if found all we need
-                if (found >= request.getAmount()) {
-                    return true;
-                }
+                if (found >= request.getAmount()) return true;
             }
         }
 
@@ -653,40 +599,27 @@ public class NetworkRoot extends NetworkNode {
         for (BarrelIdentity barrelIdentity : getBarrels()) {
             final ItemStack itemStack = barrelIdentity.getItemStack();
 
-            if (itemStack == null || !StackUtils.itemsMatch(request, itemStack, true)) {
-                continue;
-            }
+            if (itemStack == null || !StackUtils.itemsMatch(request, itemStack, true)) continue;
 
             if (barrelIdentity instanceof InfinityBarrel) {
-                if (barrelIdentity.getItemStack().getMaxStackSize() > 1) {
-                    found += barrelIdentity.getAmount() - 2;
-                }
-            } else {
-                found += barrelIdentity.getAmount();
-            }
+                if (barrelIdentity.getItemStack().getMaxStackSize() > 1) found += barrelIdentity.getAmount() - 2;
+            } else found += barrelIdentity.getAmount();
 
             // Escape if found all we need
-            if (found >= request.getAmount()) {
-                return true;
-            }
+            if (found >= request.getAmount()) return true;
         }
 
         // Greedy Blocks
         for (BlockMenu blockMenu : getGreedyBlocks()) {
             final ItemStack itemStack = blockMenu.getItemInSlot(NetworkGreedyBlock.INPUT_SLOT);
             if (itemStack == null
-                || itemStack.getType() == Material.AIR
-                || !StackUtils.itemsMatch(request, itemStack, true)
-            ) {
-                continue;
-            }
+                    || itemStack.getType() == Material.AIR
+                    || !StackUtils.itemsMatch(request, itemStack, true)) continue;
 
             found += itemStack.getAmount();
 
             // Escape if found all we need
-            if (found >= request.getAmount()) {
-                return true;
-            }
+            if (found >= request.getAmount()) return true;
         }
 
         return false;
@@ -697,9 +630,8 @@ public class NetworkRoot extends NetworkNode {
         for (BlockMenu blockMenu : getGreedyBlocks()) {
             final ItemStack template = blockMenu.getItemInSlot(NetworkGreedyBlock.TEMPLATE_SLOT);
 
-            if (template == null || template.getType() == Material.AIR || !StackUtils.itemsMatch(incoming, template)) {
+            if (template == null || template.getType() == Material.AIR || !StackUtils.itemsMatch(incoming, template))
                 continue;
-            }
 
             final ItemStack itemStack = blockMenu.getItemInSlot(NetworkGreedyBlock.INPUT_SLOT);
 
@@ -723,17 +655,14 @@ public class NetworkRoot extends NetworkNode {
         }
 
         // Run for matching barrels
-        for (BarrelIdentity barrelIdentity : getBarrels()) {
+        for (BarrelIdentity barrelIdentity : getBarrels())
             if (StackUtils.itemsMatch(barrelIdentity, incoming, true)) {
 
                 barrelIdentity.depositItemStack(incoming);
 
                 // All distributed, can escape
-                if (incoming.getAmount() == 0) {
-                    return;
-                }
+                if (incoming.getAmount() == 0) return;
             }
-        }
 
         // Then run for matching items in cells
         // Prepare a fallback menu and slot. This way we don't have to scan more than once
@@ -766,9 +695,7 @@ public class NetworkRoot extends NetworkNode {
                     blockMenu.markDirty();
 
                     // All distributed, can escape
-                    if (incomingStackAmount == 0) {
-                        return;
-                    }
+                    if (incomingStackAmount == 0) return;
                 }
                 i++;
             }
@@ -802,19 +729,17 @@ public class NetworkRoot extends NetworkNode {
         int removed = 0;
         for (Location node : powerNodes) {
             final SlimefunItem item = BlockStorage.check(node);
-            if (item instanceof NetworkPowerNode powerNode) {
+            if (item instanceof NetworkPowerNode) {
+                NetworkPowerNode powerNode = (NetworkPowerNode) item;
+
                 final int charge = powerNode.getCharge(node);
-                if (charge <= 0) {
-                    continue;
-                }
+                if (charge <= 0) continue;
                 final int toRemove = (int) Math.min(power - removed, charge);
                 powerNode.removeCharge(node, toRemove);
                 this.rootPower -= power;
                 removed = removed + toRemove;
             }
-            if (removed >= power) {
-                return;
-            }
+            if (removed >= power) return;
         }
     }
 
@@ -825,4 +750,4 @@ public class NetworkRoot extends NetworkNode {
     public void setDisplayParticles(boolean displayParticles) {
         this.displayParticles = displayParticles;
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/network/NodeDefinition.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/NodeDefinition.java
similarity index 92%
rename from src/main/java/io/github/sefiraat/networks/network/NodeDefinition.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/network/NodeDefinition.java
index 7cce125..a87e4d2 100644
--- a/src/main/java/io/github/sefiraat/networks/network/NodeDefinition.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/NodeDefinition.java
@@ -1,7 +1,6 @@
-package io.github.sefiraat.networks.network;
+package id.universenetwork.sfa_loader.addons.networks.network;
 
 public class NodeDefinition {
-
     private final NodeType type;
     private final long timeRegistered;
     private NetworkNode node;
@@ -36,5 +35,4 @@ public class NodeDefinition {
     public boolean isExpired() {
         return System.currentTimeMillis() > this.timeRegistered + 3000L;
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/network/NodeType.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/NodeType.java
similarity index 84%
rename from src/main/java/io/github/sefiraat/networks/network/NodeType.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/network/NodeType.java
index 75a9574..d771ec5 100644
--- a/src/main/java/io/github/sefiraat/networks/network/NodeType.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/NodeType.java
@@ -1,4 +1,4 @@
-package io.github.sefiraat.networks.network;
+package id.universenetwork.sfa_loader.addons.networks.network;
 
 public enum NodeType {
     CONTROLLER,
@@ -23,4 +23,4 @@ public enum NodeType {
     GREEDY_BLOCK,
     WIRELESS_TRANSMITTER,
     WIRELESS_RECEIVER
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/network/SupportedRecipes.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/SupportedRecipes.java
similarity index 79%
rename from src/main/java/io/github/sefiraat/networks/network/SupportedRecipes.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/network/SupportedRecipes.java
index 69907a4..1c97d0d 100644
--- a/src/main/java/io/github/sefiraat/networks/network/SupportedRecipes.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/SupportedRecipes.java
@@ -1,6 +1,6 @@
-package io.github.sefiraat.networks.network;
+package id.universenetwork.sfa_loader.addons.networks.network;
 
-import io.github.sefiraat.networks.utils.StackUtils;
+import id.universenetwork.sfa_loader.addons.networks.utils.StackUtils;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
@@ -14,7 +14,6 @@ import java.util.Map;
 
 @UtilityClass
 public final class SupportedRecipes {
-
     private static final Map<ItemStack[], ItemStack> RECIPES = new HashMap<>();
 
     static {
@@ -24,11 +23,8 @@ public final class SupportedRecipes {
                 ItemStack[] itemStacks = new ItemStack[9];
                 int i = 0;
                 for (ItemStack itemStack : item.getRecipe()) {
-                    if (itemStack == null) {
-                        itemStacks[i] = null;
-                    } else {
-                        itemStacks[i] = new ItemStack(itemStack.clone());
-                    }
+                    if (itemStack == null) itemStacks[i] = null;
+                    else itemStacks[i] = new ItemStack(itemStack.clone());
                     i++;
                 }
                 SupportedRecipes.addRecipe(itemStacks, item.getRecipeOutput());
@@ -45,16 +41,12 @@ public final class SupportedRecipes {
     }
 
     public boolean testRecipe(@Nonnull ItemStack[] input, @Nonnull ItemStack[] recipe) {
-        for (int test = 0; test < recipe.length; test++) {
-            if (!StackUtils.itemsMatch(input[test], recipe[test])) {
-                return false;
-            }
-        }
+        for (int test = 0; test < recipe.length; test++)
+            if (!StackUtils.itemsMatch(input[test], recipe[test])) return false;
         return true;
     }
 
     public static boolean allowedRecipe(@Nonnull SlimefunItem item) {
         return !(item instanceof SlimefunBackpack);
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/network/barrel/BarrelCore.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/barrel/BarrelCore.java
similarity index 74%
rename from src/main/java/io/github/sefiraat/networks/network/barrel/BarrelCore.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/network/barrel/BarrelCore.java
index fc2fdb6..bd70ea1 100644
--- a/src/main/java/io/github/sefiraat/networks/network/barrel/BarrelCore.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/barrel/BarrelCore.java
@@ -1,13 +1,12 @@
-package io.github.sefiraat.networks.network.barrel;
+package id.universenetwork.sfa_loader.addons.networks.network.barrel;
 
-import io.github.sefiraat.networks.network.stackcaches.ItemRequest;
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.ItemRequest;
 import org.bukkit.inventory.ItemStack;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 
 public interface BarrelCore {
-
     @Nullable
     ItemStack requestItem(@Nonnull ItemRequest itemRequest);
 
@@ -20,4 +19,4 @@ public interface BarrelCore {
     int getInputSlot();
 
     int getOutputSlot();
-}
+}
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/barrel/BarrelType.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/barrel/BarrelType.java
new file mode 100644
index 0000000..0acbc39
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/barrel/BarrelType.java
@@ -0,0 +1,5 @@
+package id.universenetwork.sfa_loader.addons.networks.network.barrel;
+
+public enum BarrelType {
+    NETWORKS, INFINITY, FLUFFY
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/network/barrel/InfinityBarrel.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/barrel/InfinityBarrel.java
similarity index 77%
rename from src/main/java/io/github/sefiraat/networks/network/barrel/InfinityBarrel.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/network/barrel/InfinityBarrel.java
index 60b5276..2e3a03d 100644
--- a/src/main/java/io/github/sefiraat/networks/network/barrel/InfinityBarrel.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/barrel/InfinityBarrel.java
@@ -1,8 +1,8 @@
-package io.github.sefiraat.networks.network.barrel;
+package id.universenetwork.sfa_loader.addons.networks.network.barrel;
 
-import io.github.mooy1.infinityexpansion.items.storage.StorageCache;
-import io.github.sefiraat.networks.network.stackcaches.BarrelIdentity;
-import io.github.sefiraat.networks.network.stackcaches.ItemRequest;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.storage.StorageCache;
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.BarrelIdentity;
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.ItemRequest;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import org.bukkit.Location;
@@ -13,7 +13,6 @@ import javax.annotation.Nullable;
 import javax.annotation.ParametersAreNonnullByDefault;
 
 public class InfinityBarrel extends BarrelIdentity {
-
     @Nonnull
     private final StorageCache cache;
 
@@ -44,4 +43,4 @@ public class InfinityBarrel extends BarrelIdentity {
     public int getOutputSlot() {
         return 16;
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/network/barrel/NetworkStorage.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/barrel/NetworkStorage.java
similarity index 69%
rename from src/main/java/io/github/sefiraat/networks/network/barrel/NetworkStorage.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/network/barrel/NetworkStorage.java
index 8c063b7..4116ae5 100644
--- a/src/main/java/io/github/sefiraat/networks/network/barrel/NetworkStorage.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/barrel/NetworkStorage.java
@@ -1,9 +1,9 @@
-package io.github.sefiraat.networks.network.barrel;
+package id.universenetwork.sfa_loader.addons.networks.network.barrel;
 
-import io.github.sefiraat.networks.network.stackcaches.BarrelIdentity;
-import io.github.sefiraat.networks.network.stackcaches.ItemRequest;
-import io.github.sefiraat.networks.network.stackcaches.QuantumCache;
-import io.github.sefiraat.networks.slimefun.network.NetworkQuantumStorage;
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.BarrelIdentity;
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.ItemRequest;
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.QuantumCache;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.network.NetworkQuantumStorage;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import org.bukkit.Location;
@@ -13,7 +13,6 @@ import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 
 public class NetworkStorage extends BarrelIdentity {
-
     public NetworkStorage(Location location, ItemStack itemStack, int amount) {
         super(location, itemStack, amount, BarrelType.NETWORKS);
     }
@@ -23,15 +22,11 @@ public class NetworkStorage extends BarrelIdentity {
     public ItemStack requestItem(@Nonnull ItemRequest itemRequest) {
         final BlockMenu blockMenu = BlockStorage.getInventory(this.getLocation());
 
-        if (blockMenu == null) {
-            return null;
-        }
+        if (blockMenu == null) return null;
 
         final QuantumCache cache = NetworkQuantumStorage.getCaches().get(blockMenu.getLocation());
 
-        if (cache == null) {
-            return null;
-        }
+        if (cache == null) return null;
 
         return NetworkQuantumStorage.getItemStack(cache, blockMenu, itemRequest.getAmount());
     }
@@ -41,9 +36,7 @@ public class NetworkStorage extends BarrelIdentity {
         if (BlockStorage.check(this.getLocation()) instanceof NetworkQuantumStorage) {
             final BlockMenu blockMenu = BlockStorage.getInventory(this.getLocation());
             final QuantumCache cache = NetworkQuantumStorage.getCaches().get(this.getLocation());
-            if (cache != null) {
-                NetworkQuantumStorage.tryInputItem(blockMenu.getLocation(), itemsToDeposit, cache);
-            }
+            if (cache != null) NetworkQuantumStorage.tryInputItem(blockMenu.getLocation(), itemsToDeposit, cache);
         }
     }
 
@@ -57,4 +50,4 @@ public class NetworkStorage extends BarrelIdentity {
     public int getOutputSlot() {
         return NetworkQuantumStorage.OUTPUT_SLOT;
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/network/stackcaches/BarrelIdentity.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/stackcaches/BarrelIdentity.java
similarity index 76%
rename from src/main/java/io/github/sefiraat/networks/network/stackcaches/BarrelIdentity.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/network/stackcaches/BarrelIdentity.java
index 4676119..95d209b 100644
--- a/src/main/java/io/github/sefiraat/networks/network/stackcaches/BarrelIdentity.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/stackcaches/BarrelIdentity.java
@@ -1,14 +1,13 @@
-package io.github.sefiraat.networks.network.stackcaches;
+package id.universenetwork.sfa_loader.addons.networks.network.stackcaches;
 
-import io.github.sefiraat.networks.network.barrel.BarrelCore;
-import io.github.sefiraat.networks.network.barrel.BarrelType;
+import id.universenetwork.sfa_loader.addons.networks.network.barrel.BarrelCore;
+import id.universenetwork.sfa_loader.addons.networks.network.barrel.BarrelType;
 import org.bukkit.Location;
 import org.bukkit.inventory.ItemStack;
 
 import javax.annotation.ParametersAreNonnullByDefault;
 
 public abstract class BarrelIdentity extends ItemStackCache implements BarrelCore {
-
     private final Location location;
     private final int amount;
     private final BarrelType type;
@@ -32,4 +31,4 @@ public abstract class BarrelIdentity extends ItemStackCache implements BarrelCor
     public BarrelType getType() {
         return this.type;
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/network/stackcaches/BlueprintInstance.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/stackcaches/BlueprintInstance.java
similarity index 82%
rename from src/main/java/io/github/sefiraat/networks/network/stackcaches/BlueprintInstance.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/network/stackcaches/BlueprintInstance.java
index e7125bf..4a02471 100644
--- a/src/main/java/io/github/sefiraat/networks/network/stackcaches/BlueprintInstance.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/stackcaches/BlueprintInstance.java
@@ -1,4 +1,4 @@
-package io.github.sefiraat.networks.network.stackcaches;
+package id.universenetwork.sfa_loader.addons.networks.network.stackcaches;
 
 import org.bukkit.Bukkit;
 import org.bukkit.World;
@@ -33,8 +33,6 @@ public class BlueprintInstance extends ItemStackCache {
     }
 
     public void generateVanillaRecipe(World world) {
-        if (this.recipe == null) {
-            this.recipe = Bukkit.getCraftingRecipe(this.recipeItems, world);
-        }
+        if (this.recipe == null) this.recipe = Bukkit.getCraftingRecipe(this.recipeItems, world);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/network/stackcaches/CardInstance.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/stackcaches/CardInstance.java
similarity index 67%
rename from src/main/java/io/github/sefiraat/networks/network/stackcaches/CardInstance.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/network/stackcaches/CardInstance.java
index fb8f4ad..9a3c037 100644
--- a/src/main/java/io/github/sefiraat/networks/network/stackcaches/CardInstance.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/stackcaches/CardInstance.java
@@ -1,6 +1,6 @@
-package io.github.sefiraat.networks.network.stackcaches;
+package id.universenetwork.sfa_loader.addons.networks.network.stackcaches;
 
-import io.github.sefiraat.networks.utils.Theme;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
 import org.bukkit.ChatColor;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
@@ -10,7 +10,6 @@ import javax.annotation.Nullable;
 import java.util.List;
 
 public class CardInstance extends ItemStackCache {
-
     private int amount;
     private final int limit;
 
@@ -34,9 +33,7 @@ public class CardInstance extends ItemStackCache {
 
     @Nullable
     public ItemStack withdrawItem(int amount) {
-        if (this.getItemStack() == null) {
-            return null;
-        }
+        if (this.getItemStack() == null) return null;
         final ItemStack clone = this.getItemStack().clone();
         clone.setAmount(Math.min(this.amount, amount));
         reduceAmount(clone.getAmount());
@@ -45,19 +42,14 @@ public class CardInstance extends ItemStackCache {
 
     @Nullable
     public ItemStack withdrawItem() {
-        if (this.getItemStack() == null) {
-            return null;
-        }
+        if (this.getItemStack() == null) return null;
         return withdrawItem(this.getItemStack().getMaxStackSize());
     }
 
     public void increaseAmount(int amount) {
         long total = (long) this.amount + (long) amount;
-        if (total > this.limit) {
-            this.amount = this.limit;
-        } else {
-            this.amount = this.amount + amount;
-        }
+        if (total > this.limit) this.amount = this.limit;
+        else this.amount = this.amount + amount;
     }
 
     public void reduceAmount(int amount) {
@@ -71,18 +63,12 @@ public class CardInstance extends ItemStackCache {
     }
 
     public String getLoreLine() {
-        if (this.getItemStack() == null) {
-            return Theme.WARNING + "Empty";
-        }
+        if (this.getItemStack() == null) return Theme.WARNING + "Empty";
         ItemMeta itemMeta = this.getItemMeta();
         String name;
-        if (itemMeta != null && itemMeta.hasDisplayName()) {
-            name = ChatColor.stripColor(itemMeta.getDisplayName());
-        } else if (this.getItemType() != null) {
-            name = this.getItemType().name();
-        } else {
-            name = "Unknown/Error";
-        }
+        if (itemMeta != null && itemMeta.hasDisplayName()) name = ChatColor.stripColor(itemMeta.getDisplayName());
+        else if (this.getItemType() != null) name = this.getItemType().name();
+        else name = "Unknown/Error";
         return Theme.CLICK_INFO + name + ": " + Theme.PASSIVE + this.amount;
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/network/stackcaches/ItemRequest.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/stackcaches/ItemRequest.java
similarity index 87%
rename from src/main/java/io/github/sefiraat/networks/network/stackcaches/ItemRequest.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/network/stackcaches/ItemRequest.java
index 6b986eb..2e3886f 100644
--- a/src/main/java/io/github/sefiraat/networks/network/stackcaches/ItemRequest.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/stackcaches/ItemRequest.java
@@ -1,11 +1,10 @@
-package io.github.sefiraat.networks.network.stackcaches;
+package id.universenetwork.sfa_loader.addons.networks.network.stackcaches;
 
 import org.bukkit.inventory.ItemStack;
 
 import javax.annotation.Nonnull;
 
 public class ItemRequest extends ItemStackCache {
-
     private int amount;
 
     public ItemRequest(@Nonnull ItemStack itemStack, int amount) {
@@ -24,4 +23,4 @@ public class ItemRequest extends ItemStackCache {
     public void receiveAmount(int amount) {
         this.amount = this.amount - amount;
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/network/stackcaches/ItemStackCache.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/stackcaches/ItemStackCache.java
similarity index 93%
rename from src/main/java/io/github/sefiraat/networks/network/stackcaches/ItemStackCache.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/network/stackcaches/ItemStackCache.java
index 0c90bbc..b63f48f 100644
--- a/src/main/java/io/github/sefiraat/networks/network/stackcaches/ItemStackCache.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/stackcaches/ItemStackCache.java
@@ -1,4 +1,4 @@
-package io.github.sefiraat.networks.network.stackcaches;
+package id.universenetwork.sfa_loader.addons.networks.network.stackcaches;
 
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
@@ -7,7 +7,6 @@ import org.bukkit.inventory.meta.ItemMeta;
 import javax.annotation.Nullable;
 
 public class ItemStackCache {
-
     private ItemStack itemStack;
     @Nullable
     private ItemMeta itemMeta = null;
@@ -43,4 +42,4 @@ public class ItemStackCache {
     public Material getItemType() {
         return this.itemStack.getType();
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/network/stackcaches/QuantumCache.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/stackcaches/QuantumCache.java
similarity index 74%
rename from src/main/java/io/github/sefiraat/networks/network/stackcaches/QuantumCache.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/network/stackcaches/QuantumCache.java
index e4603b6..6487277 100644
--- a/src/main/java/io/github/sefiraat/networks/network/stackcaches/QuantumCache.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/network/stackcaches/QuantumCache.java
@@ -1,6 +1,6 @@
-package io.github.sefiraat.networks.network.stackcaches;
+package id.universenetwork.sfa_loader.addons.networks.network.stackcaches;
 
-import io.github.sefiraat.networks.utils.Theme;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
 
@@ -9,7 +9,6 @@ import java.util.ArrayList;
 import java.util.List;
 
 public class QuantumCache extends ItemStackCache {
-
     @Nullable
     private final ItemMeta storedItemMeta;
     private final int limit;
@@ -41,12 +40,8 @@ public class QuantumCache extends ItemStackCache {
         long total = (long) this.amount + (long) amount;
         if (total > this.limit) {
             this.amount = this.limit;
-            if (!this.voidExcess) {
-                return (int) (total - this.limit);
-            }
-        } else {
-            this.amount = this.amount + amount;
-        }
+            if (!this.voidExcess) return (int) (total - this.limit);
+        } else this.amount = this.amount + amount;
         return 0;
     }
 
@@ -68,9 +63,7 @@ public class QuantumCache extends ItemStackCache {
 
     @Nullable
     public ItemStack withdrawItem(int amount) {
-        if (this.getItemStack() == null) {
-            return null;
-        }
+        if (this.getItemStack() == null) return null;
         final ItemStack clone = this.getItemStack().clone();
         clone.setAmount(Math.min(this.amount, amount));
         reduceAmount(clone.getAmount());
@@ -79,9 +72,7 @@ public class QuantumCache extends ItemStackCache {
 
     @Nullable
     public ItemStack withdrawItem() {
-        if (this.getItemStack() == null) {
-            return null;
-        }
+        if (this.getItemStack() == null) return null;
         return withdrawItem(this.getItemStack().getMaxStackSize());
     }
 
@@ -89,7 +80,7 @@ public class QuantumCache extends ItemStackCache {
         final List<String> lore = itemMeta.hasLore() ? itemMeta.getLore() : new ArrayList<>();
         lore.add("");
         lore.add(Theme.CLICK_INFO + "Holding: " +
-                     (this.getItemMeta() != null && this.getItemMeta().hasDisplayName() ? this.getItemMeta().getDisplayName() : this.getItemStack().getType().name())
+                (this.getItemMeta() != null && this.getItemMeta().hasDisplayName() ? this.getItemMeta().getDisplayName() : this.getItemStack().getType().name())
         );
         lore.add(Theme.CLICK_INFO + "Amount: " + this.getAmount());
         itemMeta.setLore(lore);
@@ -97,10 +88,10 @@ public class QuantumCache extends ItemStackCache {
 
     public void updateMetaLore(ItemMeta itemMeta) {
         final List<String> lore = itemMeta.hasLore() ? itemMeta.getLore() : new ArrayList<>();
-        lore.set(lore.size() - 2,Theme.CLICK_INFO + "Holding: " +
-                     (this.getItemMeta() != null && this.getItemMeta().hasDisplayName() ? this.getItemMeta().getDisplayName() : this.getItemStack().getType().name())
+        lore.set(lore.size() - 2, Theme.CLICK_INFO + "Holding: " +
+                (this.getItemMeta() != null && this.getItemMeta().hasDisplayName() ? this.getItemMeta().getDisplayName() : this.getItemStack().getType().name())
         );
         lore.set(lore.size() - 1, Theme.CLICK_INFO + "Amount: " + this.getAmount());
         itemMeta.setLore(lore);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/NetheoPlants.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/NetheoPlants.java
new file mode 100644
index 0000000..5efd714
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/NetheoPlants.java
@@ -0,0 +1,100 @@
+package id.universenetwork.sfa_loader.addons.networks.slimefun;
+
+import dev.sefiraat.netheopoiesis.api.items.DoNothingSeed;
+import dev.sefiraat.netheopoiesis.api.items.HarvestableSeed;
+import dev.sefiraat.netheopoiesis.api.plant.Growth;
+import dev.sefiraat.netheopoiesis.api.plant.GrowthStages;
+import dev.sefiraat.netheopoiesis.api.plant.Placements;
+import dev.sefiraat.netheopoiesis.implementation.Stacks;
+import dev.sefiraat.netheopoiesis.utils.Skulls;
+import dev.sefiraat.netheopoiesis.utils.Theme;
+import id.universenetwork.sfa_loader.addons.networks.utils.StackUtils;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.SlimefunAddonInstance;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
+import lombok.experimental.UtilityClass;
+
+@UtilityClass
+public class NetheoPlants {
+    // Stacks
+    public final SlimefunItemStack STONE_CHUNK_SEED = Theme.themedSeed(
+            "NTW_STONE_CHUNK_SEED",
+            Skulls.SEED_PURPLE.getPlayerHead(),
+            Theme.SEED,
+            "Stone Chunk Seed",
+            new String[]{"This seed, when fully grown, will", "provide Stone Chunks when", "harvested."},
+            Stacks.getCanBePlacedOnLore("Nether Grass (or better)")
+    );
+
+    public final SlimefunItemStack SYNTHETIC_SEED = Theme.themedSeed(
+            "NTW_SYNTHETIC_SEED",
+            Skulls.SEED_ORANGE.getPlayerHead(),
+            Theme.SEED,
+            "Synthetic Seed",
+            new String[]{"This seed does nothing."},
+            Stacks.getCanBePlacedOnLore("Nether Grass (or better)")
+    );
+
+    public final SlimefunItemStack SYNTHETIC_EMERALD_SEED = Theme.themedSeed(
+            "NTW_SYNTHETIC_EMERALD_SEED",
+            Skulls.SEED_GREEN.getPlayerHead(),
+            Theme.SEED,
+            "Synthetic Emerald Seed",
+            new String[]{"This seed, when fully grown, will", "provide Synthetic Emeralds when", "harvested."},
+            Stacks.getCanBePlacedOnLore("Voracious Dirt (or better)")
+    );
+
+    public final SlimefunItemStack SYNTHETIC_DIAMOND_SEED = Theme.themedSeed(
+            "NTW_SYNTHETIC_DIAMOND_SEED",
+            Skulls.SEED_GREEN.getPlayerHead(),
+            Theme.SEED,
+            "Synthetic Diamond Seed",
+            new String[]{"This seed, when fully grown, will", "provide Synthetic Diamonds when", "harvested."},
+            Stacks.getCanBePlacedOnLore("Voracious Dirt (or better)")
+    );
+
+    public final SlimefunItemStack FRAGMENTED_SEED = Theme.themedSeed(
+            "NTW_FRAGMENTED_SEED",
+            Skulls.SEED_GREEN.getPlayerHead(),
+            Theme.SEED,
+            "Fragmented Seed",
+            new String[]{"This seed, when fully grown, will", "provide Synthetic Emerald Shards when", "harvested."},
+            Stacks.getCanBePlacedOnLore("Voracious Dirt (or better)")
+    );
+
+    public void setup() {
+        new HarvestableSeed(STONE_CHUNK_SEED)
+                .setHarvestingResult(SlimefunItems.STONE_CHUNK)
+                .setGrowth(new Growth(GrowthStages.FUNGAL_PURPLE, Placements.NETHER_GRASS_AND_UP, 5, 0.05))
+                .addBreedingPair(Stacks.STONEY_SEED.getItemId(), Stacks.METALLIC_SEED.getItemId(), 0.2, 0.1)
+                .addFlavourProfile(0, 0, 0, 0, 0)
+                .tryRegister(SlimefunAddonInstance.getSFAInstance());
+
+        new DoNothingSeed(SYNTHETIC_SEED)
+                .setGrowth(new Growth(GrowthStages.SPIKEY_ORANGE, Placements.NETHER_GRASS_AND_UP, 0, 0.001))
+                .addBreedingPair(Stacks.COBBLED_SEED.getItemId(), Stacks.LEARNED_SEED.getItemId(), 0.01, 0)
+                .addFlavourProfile(0, 0, 5, 0, 0)
+                .tryRegister(SlimefunAddonInstance.getSFAInstance());
+
+        new HarvestableSeed(SYNTHETIC_EMERALD_SEED)
+                .setHarvestingResult(SlimefunItems.SYNTHETIC_EMERALD)
+                .setGrowth(new Growth(GrowthStages.VINEY_GREEN, Placements.VORACIOUS_AND_UP, 20, 0.05))
+                .addBreedingPair(SYNTHETIC_SEED.getItemId(), Stacks.VALUABLE_SEED.getItemId(), 0.01, 0.001)
+                .addFlavourProfile(0, 15, 0, 0, 0)
+                .tryRegister(SlimefunAddonInstance.getSFAInstance());
+
+        new HarvestableSeed(SYNTHETIC_DIAMOND_SEED)
+                .setHarvestingResult(SlimefunItems.SYNTHETIC_DIAMOND)
+                .setGrowth(new Growth(GrowthStages.VINEY_BLUE, Placements.VORACIOUS_AND_UP, 20, 0.05))
+                .addBreedingPair(SYNTHETIC_SEED.getItemId(), Stacks.PERFECTION_SEED.getItemId(), 0.01, 0.001)
+                .addFlavourProfile(15, 0, 0, 0, 0)
+                .tryRegister(SlimefunAddonInstance.getSFAInstance());
+
+        new HarvestableSeed(FRAGMENTED_SEED)
+                .setHarvestingResult(StackUtils.getAsQuantity(NetworksSlimefunItemStacks.SYNTHETIC_EMERALD_SHARD, 9))
+                .setGrowth(new Growth(GrowthStages.VINEY_GREEN, Placements.VORACIOUS_AND_UP, 10, 0.005))
+                .addBreedingPair(SYNTHETIC_SEED.getItemId(), Stacks.PERFECTION_SEED.getItemId(), 0.01, 0.001)
+                .addFlavourProfile(10, 0, 0, 0, 0)
+                .tryRegister(SlimefunAddonInstance.getSFAInstance());
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/NetworkSlimefunItems.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/NetworkSlimefunItems.java
new file mode 100644
index 0000000..a9aedb1
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/NetworkSlimefunItems.java
@@ -0,0 +1,872 @@
+package id.universenetwork.sfa_loader.addons.networks.slimefun;
+
+import id.universenetwork.sfa_loader.addons.networks.slimefun.network.*;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.network.grid.NetworkCraftingGrid;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.network.grid.NetworkGrid;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.tools.*;
+import id.universenetwork.sfa_loader.addons.networks.utils.StackUtils;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.SlimefunAddonInstance;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
+import io.github.thebusybiscuit.slimefun4.implementation.items.blocks.UnplaceableBlock;
+import lombok.experimental.UtilityClass;
+import org.bukkit.Material;
+import org.bukkit.inventory.ItemStack;
+
+@UtilityClass
+public class NetworkSlimefunItems {
+    public final UnplaceableBlock SYNTHETIC_EMERALD_SHARD;
+    public final UnplaceableBlock OPTIC_GLASS;
+    public final UnplaceableBlock OPTIC_CABLE;
+    public final UnplaceableBlock OPTIC_STAR;
+    public final UnplaceableBlock RADIOACTIVE_OPTIC_STAR;
+    public final UnplaceableBlock SHRINKING_BASE;
+    public final UnplaceableBlock SIMPLE_NANOBOTS;
+    public final UnplaceableBlock ADVANCED_NANOBOTS;
+    public final UnplaceableBlock AI_CORE;
+    public final UnplaceableBlock EMPOWERED_AI_CORE;
+    public final UnplaceableBlock PRISTINE_AI_CORE;
+    public final UnplaceableBlock INTERDIMENSIONAL_PRESENCE;
+
+    public final NetworkController NETWORK_CONTROLLER;
+    public final NetworkBridge NETWORK_BRIDGE;
+    public final NetworkMonitor NETWORK_MONITOR;
+    public final NetworkImport NETWORK_IMPORT;
+    public final NetworkExport NETWORK_EXPORT;
+    public final NetworkGrabber NETWORK_GRABBER;
+    public final NetworkPusher NETWORK_PUSHER;
+    public final NetworkControlX NETWORK_CONTROL_X;
+    public final NetworkControlV NETWORK_CONTROL_V;
+    public final NetworkVacuum NETWORK_VACUUM;
+    public final NetworkVanillaGrabber NETWORK_VANILLA_GRABBER;
+    public final NetworkVanillaPusher NETWORK_VANILLA_PUSHER;
+    public final NetworkWirelessTransmitter NETWORK_WIRELESS_TRANSMITTER;
+    public final NetworkWirelessReceiver NETWORK_WIRELESS_RECEIVER;
+    public final NetworkPurger NETWORK_TRASH;
+    public final NetworkGrid NETWORK_GRID;
+    public final NetworkCraftingGrid NETWORK_CRAFTING_GRID;
+    public final NetworkCell NETWORK_CELL;
+    public final NetworkGreedyBlock NETWORK_GREEDY_BLOCK;
+    public final NetworkQuantumWorkbench NETWORK_QUANTUM_WORKBENCH;
+    public final NetworkQuantumStorage NETWORK_QUANTUM_STORAGE_1;
+    public final NetworkQuantumStorage NETWORK_QUANTUM_STORAGE_2;
+    public final NetworkQuantumStorage NETWORK_QUANTUM_STORAGE_3;
+    public final NetworkQuantumStorage NETWORK_QUANTUM_STORAGE_4;
+    public final NetworkQuantumStorage NETWORK_QUANTUM_STORAGE_5;
+    public final NetworkQuantumStorage NETWORK_QUANTUM_STORAGE_6;
+    public final NetworkQuantumStorage NETWORK_QUANTUM_STORAGE_7;
+    public final NetworkQuantumStorage NETWORK_QUANTUM_STORAGE_8;
+    public final NetworkPowerNode NETWORK_CAPACITOR_1;
+    public final NetworkPowerNode NETWORK_CAPACITOR_2;
+    public final NetworkPowerNode NETWORK_CAPACITOR_3;
+    public final NetworkPowerNode NETWORK_CAPACITOR_4;
+    public final NetworkPowerOutlet NETWORK_POWER_OUTLET_1;
+    public final NetworkPowerOutlet NETWORK_POWER_OUTLET_2;
+    public final NetworkPowerDisplay NETWORK_POWER_DISPLAY;
+    public final NetworkEncoder NETWORK_RECIPE_ENCODER;
+    public final NetworkAutoCrafter NETWORK_AUTO_CRAFTER;
+    public final NetworkAutoCrafter NETWORK_AUTO_CRAFTER_WITHHOLDING;
+
+    public final CraftingBlueprint CRAFTING_BLUEPRINT;
+    public final NetworkProbe NETWORK_PROBE;
+    public final NetworkRemote NETWORK_REMOTE;
+    public final NetworkRemote NETWORK_REMOTE_EMPOWERED;
+    public final NetworkRemote NETWORK_REMOTE_PRISTINE;
+    public final NetworkRemote NETWORK_REMOTE_ULTIMATE;
+    public final NetworkCrayon NETWORK_CRAYON;
+    public final NetworkConfigurator NETWORK_CONFIGURATOR;
+    public final NetworkWirelessConfigurator NETWORK_WIRELESS_CONFIGURATOR;
+    public final NetworkRake NETWORK_RAKE_1;
+    public final NetworkRake NETWORK_RAKE_2;
+    public final NetworkRake NETWORK_RAKE_3;
+    public final NetworkAdminDebugger NETWORK_ADMIN_DEBUGGER;
+
+    static {
+        final ItemStack glass = new ItemStack(Material.GLASS);
+
+        SYNTHETIC_EMERALD_SHARD = new UnplaceableBlock(
+                NetworksItemGroups.MATERIALS,
+                NetworksSlimefunItemStacks.SYNTHETIC_EMERALD_SHARD,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        SlimefunItems.STONE_CHUNK, SlimefunItems.SYNTHETIC_EMERALD, null,
+                        SlimefunItems.SYNTHETIC_EMERALD, null, null,
+                        null, null, null
+                },
+                StackUtils.getAsQuantity(NetworksSlimefunItemStacks.SYNTHETIC_EMERALD_SHARD, 3)
+        );
+
+        OPTIC_GLASS = new UnplaceableBlock(
+                NetworksItemGroups.MATERIALS,
+                NetworksSlimefunItemStacks.OPTIC_GLASS,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        glass, glass, glass,
+                        glass, SYNTHETIC_EMERALD_SHARD.getItem(), glass,
+                        glass, glass, glass
+                },
+                StackUtils.getAsQuantity(NetworksSlimefunItemStacks.OPTIC_GLASS, 8)
+        );
+
+        OPTIC_CABLE = new UnplaceableBlock(
+                NetworksItemGroups.MATERIALS,
+                NetworksSlimefunItemStacks.OPTIC_CABLE,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), OPTIC_GLASS.getItem(), OPTIC_GLASS.getItem(),
+                        SlimefunItems.COPPER_WIRE, SYNTHETIC_EMERALD_SHARD.getItem(), SlimefunItems.COPPER_WIRE,
+                        OPTIC_GLASS.getItem(), OPTIC_GLASS.getItem(), OPTIC_GLASS.getItem()
+                },
+                StackUtils.getAsQuantity(NetworksSlimefunItemStacks.OPTIC_CABLE, 16)
+        );
+
+        OPTIC_STAR = new UnplaceableBlock(
+                NetworksItemGroups.MATERIALS,
+                NetworksSlimefunItemStacks.OPTIC_STAR,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
+                        OPTIC_CABLE.getItem(), new ItemStack(Material.NETHER_STAR), OPTIC_CABLE.getItem(),
+                        OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem()
+                }
+        );
+
+        RADIOACTIVE_OPTIC_STAR = new UnplaceableBlock(
+                NetworksItemGroups.MATERIALS,
+                NetworksSlimefunItemStacks.RADIOACTIVE_OPTIC_STAR,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        SlimefunItems.BLISTERING_INGOT_3, SlimefunItems.BLISTERING_INGOT_3, SlimefunItems.BLISTERING_INGOT_3,
+                        OPTIC_CABLE.getItem(), OPTIC_STAR.getItem(), OPTIC_CABLE.getItem(),
+                        SlimefunItems.BLISTERING_INGOT_3, SlimefunItems.BLISTERING_INGOT_3, SlimefunItems.BLISTERING_INGOT_3
+                }
+        );
+
+        SHRINKING_BASE = new UnplaceableBlock(
+                NetworksItemGroups.MATERIALS,
+                NetworksSlimefunItemStacks.SHRINKING_BASE,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        SlimefunItems.CORINTHIAN_BRONZE_INGOT, SlimefunItems.ANDROID_INTERFACE_ITEMS, SlimefunItems.CORINTHIAN_BRONZE_INGOT,
+                        OPTIC_CABLE.getItem(), RADIOACTIVE_OPTIC_STAR.getItem(), OPTIC_CABLE.getItem(),
+                        SlimefunItems.CORINTHIAN_BRONZE_INGOT, SlimefunItems.ANDROID_MEMORY_CORE, SlimefunItems.CORINTHIAN_BRONZE_INGOT
+                }
+        );
+
+        SIMPLE_NANOBOTS = new UnplaceableBlock(
+                NetworksItemGroups.MATERIALS,
+                NetworksSlimefunItemStacks.SIMPLE_NANOBOTS,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        SHRINKING_BASE.getItem(), SlimefunItems.PROGRAMMABLE_ANDROID
+                },
+                StackUtils.getAsQuantity(NetworksSlimefunItemStacks.SIMPLE_NANOBOTS, 4)
+        );
+
+        ADVANCED_NANOBOTS = new UnplaceableBlock(
+                NetworksItemGroups.MATERIALS,
+                NetworksSlimefunItemStacks.ADVANCED_NANOBOTS,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        SHRINKING_BASE.getItem(), SlimefunItems.PROGRAMMABLE_ANDROID_3
+                },
+                StackUtils.getAsQuantity(NetworksSlimefunItemStacks.ADVANCED_NANOBOTS, 4)
+        );
+
+        AI_CORE = new UnplaceableBlock(
+                NetworksItemGroups.MATERIALS,
+                NetworksSlimefunItemStacks.AI_CORE,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        SlimefunItems.BASIC_CIRCUIT_BOARD, SlimefunItems.ANDROID_MEMORY_CORE, SlimefunItems.BASIC_CIRCUIT_BOARD,
+                        SlimefunItems.BASIC_CIRCUIT_BOARD, ADVANCED_NANOBOTS.getItem(), SlimefunItems.BASIC_CIRCUIT_BOARD,
+                        SlimefunItems.BASIC_CIRCUIT_BOARD, SlimefunItems.ANDROID_MEMORY_CORE, SlimefunItems.BASIC_CIRCUIT_BOARD
+                }
+        );
+
+        EMPOWERED_AI_CORE = new UnplaceableBlock(
+                NetworksItemGroups.MATERIALS,
+                NetworksSlimefunItemStacks.EMPOWERED_AI_CORE,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        SlimefunItems.ADVANCED_CIRCUIT_BOARD, RADIOACTIVE_OPTIC_STAR.getItem(), SlimefunItems.ADVANCED_CIRCUIT_BOARD,
+                        SlimefunItems.ADVANCED_CIRCUIT_BOARD, AI_CORE.getItem(), SlimefunItems.ADVANCED_CIRCUIT_BOARD,
+                        SlimefunItems.ADVANCED_CIRCUIT_BOARD, RADIOACTIVE_OPTIC_STAR.getItem(), SlimefunItems.ADVANCED_CIRCUIT_BOARD
+                }
+        );
+
+        PRISTINE_AI_CORE = new UnplaceableBlock(
+                NetworksItemGroups.MATERIALS,
+                NetworksSlimefunItemStacks.PRISTINE_AI_CORE,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        SlimefunItems.NEPTUNIUM, SlimefunItems.DAMASCUS_STEEL_MULTI_TOOL, SlimefunItems.NEPTUNIUM,
+                        SlimefunItems.NEPTUNIUM, EMPOWERED_AI_CORE.getItem(), SlimefunItems.NEPTUNIUM,
+                        SlimefunItems.NEPTUNIUM, SlimefunItems.ELECTRIFIED_CRUCIBLE_3, SlimefunItems.NEPTUNIUM
+                }
+        );
+
+        INTERDIMENSIONAL_PRESENCE = new UnplaceableBlock(
+                NetworksItemGroups.MATERIALS,
+                NetworksSlimefunItemStacks.INTERDIMENSIONAL_PRESENCE,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        SlimefunItems.PLUTONIUM, SlimefunItems.REINFORCED_ALLOY_MULTI_TOOL, SlimefunItems.PLUTONIUM,
+                        SlimefunItems.PLUTONIUM, PRISTINE_AI_CORE.getItem(), SlimefunItems.PLUTONIUM,
+                        SlimefunItems.PLUTONIUM, SlimefunItems.NETHER_STAR_REACTOR, SlimefunItems.PLUTONIUM
+                }
+        );
+
+        NETWORK_CONTROLLER = new NetworkController(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_CONTROLLER,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
+                        OPTIC_CABLE.getItem(), SlimefunItems.CARGO_MANAGER, OPTIC_CABLE.getItem(),
+                        OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem()
+                }
+        );
+
+        NETWORK_BRIDGE = new NetworkBridge(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_BRIDGE,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
+                        OPTIC_CABLE.getItem(), SlimefunItems.CARGO_CONNECTOR_NODE, OPTIC_CABLE.getItem(),
+                        OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem()
+                },
+                StackUtils.getAsQuantity(NetworksSlimefunItemStacks.NETWORK_BRIDGE, 8)
+        );
+
+        NETWORK_MONITOR = new NetworkMonitor(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_MONITOR,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        NETWORK_BRIDGE.getItem(), OPTIC_CABLE.getItem(), NETWORK_BRIDGE.getItem(),
+                        OPTIC_CABLE.getItem(), SlimefunItems.CARGO_MOTOR, OPTIC_CABLE.getItem(),
+                        NETWORK_BRIDGE.getItem(), OPTIC_CABLE.getItem(), NETWORK_BRIDGE.getItem()
+                }
+        );
+
+        NETWORK_IMPORT = new NetworkImport(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_IMPORT,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        NETWORK_BRIDGE.getItem(), OPTIC_CABLE.getItem(), NETWORK_BRIDGE.getItem(),
+                        OPTIC_CABLE.getItem(), SlimefunItems.CARGO_INPUT_NODE, OPTIC_CABLE.getItem(),
+                        NETWORK_BRIDGE.getItem(), OPTIC_CABLE.getItem(), NETWORK_BRIDGE.getItem()
+                }
+        );
+
+        NETWORK_EXPORT = new NetworkExport(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_EXPORT,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        NETWORK_BRIDGE.getItem(), OPTIC_CABLE.getItem(), NETWORK_BRIDGE.getItem(),
+                        OPTIC_CABLE.getItem(), SlimefunItems.CARGO_OUTPUT_NODE_2, OPTIC_CABLE.getItem(),
+                        NETWORK_BRIDGE.getItem(), OPTIC_CABLE.getItem(), NETWORK_BRIDGE.getItem()
+                }
+        );
+
+        NETWORK_GRABBER = new NetworkGrabber(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_GRABBER,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
+                        OPTIC_CABLE.getItem(), NETWORK_IMPORT.getItem(), OPTIC_CABLE.getItem(),
+                        OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem()
+                }
+        );
+
+        NETWORK_PUSHER = new NetworkPusher(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_PUSHER,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
+                        OPTIC_CABLE.getItem(), NETWORK_EXPORT.getItem(), OPTIC_CABLE.getItem(),
+                        OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem()
+                }
+        );
+
+        NETWORK_CONTROL_X = new NetworkControlX(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_CONTROL_X,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), NetworksSlimefunItemStacks.NETWORK_POWER_DISPLAY, OPTIC_GLASS.getItem(),
+                        OPTIC_CABLE.getItem(), NetworksSlimefunItemStacks.NETWORK_GRABBER, OPTIC_CABLE.getItem(),
+                        OPTIC_GLASS.getItem(), NetworksSlimefunItemStacks.NETWORK_POWER_OUTLET_1, OPTIC_GLASS.getItem()
+                }
+        );
+
+        NETWORK_CONTROL_V = new NetworkControlV(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_CONTROL_V,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), NetworksSlimefunItemStacks.NETWORK_POWER_DISPLAY, OPTIC_GLASS.getItem(),
+                        OPTIC_CABLE.getItem(), NetworksSlimefunItemStacks.NETWORK_PUSHER, OPTIC_CABLE.getItem(),
+                        OPTIC_GLASS.getItem(), NetworksSlimefunItemStacks.NETWORK_POWER_OUTLET_1, OPTIC_GLASS.getItem()
+                }
+        );
+
+        NETWORK_VACUUM = new NetworkVacuum(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_VACUUM,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), NetworksSlimefunItemStacks.NETWORK_POWER_DISPLAY, OPTIC_GLASS.getItem(),
+                        OPTIC_CABLE.getItem(), NetworksSlimefunItemStacks.NETWORK_IMPORT, OPTIC_CABLE.getItem(),
+                        OPTIC_GLASS.getItem(), NetworksSlimefunItemStacks.NETWORK_POWER_OUTLET_1, OPTIC_GLASS.getItem()
+                }
+        );
+
+        NETWORK_VANILLA_GRABBER = new NetworkVanillaGrabber(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_VANILLA_GRABBER,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
+                        new ItemStack(Material.HOPPER), NETWORK_GRABBER.getItem(), new ItemStack(Material.HOPPER),
+                        OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem()
+                }
+        );
+
+        NETWORK_VANILLA_PUSHER = new NetworkVanillaPusher(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_VANILLA_PUSHER,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), new ItemStack(Material.HOPPER), OPTIC_GLASS.getItem(),
+                        OPTIC_CABLE.getItem(), NETWORK_PUSHER.getItem(), OPTIC_CABLE.getItem(),
+                        OPTIC_GLASS.getItem(), new ItemStack(Material.HOPPER), OPTIC_GLASS.getItem()
+                }
+        );
+
+        NETWORK_WIRELESS_TRANSMITTER = new NetworkWirelessTransmitter(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_WIRELESS_TRANSMITTER,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), ADVANCED_NANOBOTS.getItem(), OPTIC_GLASS.getItem(),
+                        OPTIC_CABLE.getItem(), NETWORK_PUSHER.getItem(), OPTIC_CABLE.getItem(),
+                        OPTIC_GLASS.getItem(), PRISTINE_AI_CORE.getItem(), OPTIC_GLASS.getItem()
+                }
+        );
+
+        NETWORK_WIRELESS_RECEIVER = new NetworkWirelessReceiver(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_WIRELESS_RECEIVER,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), SIMPLE_NANOBOTS.getItem(), OPTIC_GLASS.getItem(),
+                        OPTIC_CABLE.getItem(), NETWORK_GRABBER.getItem(), OPTIC_CABLE.getItem(),
+                        OPTIC_GLASS.getItem(), AI_CORE.getItem(), OPTIC_GLASS.getItem()
+                }
+        );
+
+        NETWORK_TRASH = new NetworkPurger(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_PURGER,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
+                        OPTIC_CABLE.getItem(), SlimefunItems.TRASH_CAN, OPTIC_CABLE.getItem(),
+                        OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem()
+                }
+        );
+
+        NETWORK_GRID = new NetworkGrid(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_GRID,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        NETWORK_BRIDGE.getItem(), OPTIC_CABLE.getItem(), NETWORK_BRIDGE.getItem(),
+                        OPTIC_CABLE.getItem(), new ItemStack(Material.NETHER_STAR), OPTIC_CABLE.getItem(),
+                        NETWORK_BRIDGE.getItem(), OPTIC_CABLE.getItem(), NETWORK_BRIDGE.getItem()
+                }
+        );
+
+        NETWORK_CRAFTING_GRID = new NetworkCraftingGrid(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_CRAFTING_GRID,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        OPTIC_STAR.getItem(), OPTIC_STAR.getItem(), OPTIC_STAR.getItem(),
+                        OPTIC_STAR.getItem(), NETWORK_GRID.getItem(), OPTIC_STAR.getItem(),
+                        OPTIC_STAR.getItem(), OPTIC_STAR.getItem(), OPTIC_STAR.getItem()
+                }
+        );
+
+        NETWORK_CELL = new NetworkCell(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_CELL,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        NETWORK_BRIDGE.getItem(), OPTIC_CABLE.getItem(), NETWORK_BRIDGE.getItem(),
+                        OPTIC_CABLE.getItem(), new ItemStack(Material.CHEST), OPTIC_CABLE.getItem(),
+                        NETWORK_BRIDGE.getItem(), OPTIC_CABLE.getItem(), NETWORK_BRIDGE.getItem()
+                }
+        );
+
+        NETWORK_GREEDY_BLOCK = new NetworkGreedyBlock(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_GREEDY_BLOCK,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        NETWORK_BRIDGE.getItem(), OPTIC_CABLE.getItem(), NETWORK_BRIDGE.getItem(),
+                        OPTIC_CABLE.getItem(), NETWORK_CELL.getItem(), OPTIC_CABLE.getItem(),
+                        NETWORK_BRIDGE.getItem(), SIMPLE_NANOBOTS.getItem(), NETWORK_BRIDGE.getItem()
+                }
+        );
+
+        NETWORK_QUANTUM_WORKBENCH = new NetworkQuantumWorkbench(
+                NetworksItemGroups.NETWORK_QUANTUMS,
+                NetworksSlimefunItemStacks.NETWORK_QUANTUM_WORKBENCH,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), SlimefunItems.ADVANCED_CIRCUIT_BOARD, OPTIC_GLASS.getItem(),
+                        OPTIC_CABLE.getItem(), NETWORK_BRIDGE.getItem(), OPTIC_CABLE.getItem(),
+                        OPTIC_GLASS.getItem(), SlimefunItems.ADVANCED_CIRCUIT_BOARD, OPTIC_GLASS.getItem()
+                }
+        );
+
+        NETWORK_QUANTUM_STORAGE_1 = new NetworkQuantumStorage(
+                NetworksItemGroups.NETWORK_QUANTUMS,
+                NetworksSlimefunItemStacks.NETWORK_QUANTUM_STORAGE_1,
+                NetworkQuantumWorkbench.TYPE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), OPTIC_GLASS.getItem(), OPTIC_GLASS.getItem(),
+                        OPTIC_CABLE.getItem(), SlimefunItems.CARGO_MOTOR, OPTIC_CABLE.getItem(),
+                        OPTIC_GLASS.getItem(), OPTIC_GLASS.getItem(), OPTIC_GLASS.getItem()
+                },
+                NetworkQuantumStorage.getSizes()[0]
+        );
+
+        NETWORK_QUANTUM_STORAGE_2 = new NetworkQuantumStorage(
+                NetworksItemGroups.NETWORK_QUANTUMS,
+                NetworksSlimefunItemStacks.NETWORK_QUANTUM_STORAGE_2,
+                NetworkQuantumWorkbench.TYPE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), SlimefunItems.ALUMINUM_BRASS_INGOT, OPTIC_GLASS.getItem(),
+                        SlimefunItems.SYNTHETIC_SAPPHIRE, NETWORK_QUANTUM_STORAGE_1.getItem(), SlimefunItems.SYNTHETIC_SAPPHIRE,
+                        OPTIC_GLASS.getItem(), SlimefunItems.ALUMINUM_BRASS_INGOT, OPTIC_GLASS.getItem()
+                },
+                NetworkQuantumStorage.getSizes()[1]
+        );
+
+        NETWORK_QUANTUM_STORAGE_3 = new NetworkQuantumStorage(
+                NetworksItemGroups.NETWORK_QUANTUMS,
+                NetworksSlimefunItemStacks.NETWORK_QUANTUM_STORAGE_3,
+                NetworkQuantumWorkbench.TYPE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), SlimefunItems.CORINTHIAN_BRONZE_INGOT, OPTIC_GLASS.getItem(),
+                        SlimefunItems.SYNTHETIC_DIAMOND, NETWORK_QUANTUM_STORAGE_2.getItem(), SlimefunItems.SYNTHETIC_DIAMOND,
+                        OPTIC_GLASS.getItem(), SlimefunItems.CORINTHIAN_BRONZE_INGOT, OPTIC_GLASS.getItem()
+                },
+                NetworkQuantumStorage.getSizes()[2]
+        );
+
+        NETWORK_QUANTUM_STORAGE_4 = new NetworkQuantumStorage(
+                NetworksItemGroups.NETWORK_QUANTUMS,
+                NetworksSlimefunItemStacks.NETWORK_QUANTUM_STORAGE_4,
+                NetworkQuantumWorkbench.TYPE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), SlimefunItems.HARDENED_METAL_INGOT, OPTIC_GLASS.getItem(),
+                        SlimefunItems.SYNTHETIC_EMERALD, NETWORK_QUANTUM_STORAGE_3.getItem(), SlimefunItems.SYNTHETIC_EMERALD,
+                        OPTIC_GLASS.getItem(), SlimefunItems.HARDENED_METAL_INGOT, OPTIC_GLASS.getItem()
+                },
+                NetworkQuantumStorage.getSizes()[3]
+        );
+
+        NETWORK_QUANTUM_STORAGE_5 = new NetworkQuantumStorage(
+                NetworksItemGroups.NETWORK_QUANTUMS,
+                NetworksSlimefunItemStacks.NETWORK_QUANTUM_STORAGE_5,
+                NetworkQuantumWorkbench.TYPE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), SlimefunItems.REINFORCED_ALLOY_INGOT, OPTIC_GLASS.getItem(),
+                        SlimefunItems.POWER_CRYSTAL, NETWORK_QUANTUM_STORAGE_4.getItem(), SlimefunItems.POWER_CRYSTAL,
+                        OPTIC_GLASS.getItem(), SlimefunItems.REINFORCED_ALLOY_INGOT, OPTIC_GLASS.getItem()
+                },
+                NetworkQuantumStorage.getSizes()[4]
+        );
+
+        NETWORK_QUANTUM_STORAGE_6 = new NetworkQuantumStorage(
+                NetworksItemGroups.NETWORK_QUANTUMS,
+                NetworksSlimefunItemStacks.NETWORK_QUANTUM_STORAGE_6,
+                NetworkQuantumWorkbench.TYPE,
+                new ItemStack[]{
+                        SlimefunItems.STEEL_PLATE, SlimefunItems.BLISTERING_INGOT, SlimefunItems.STEEL_PLATE,
+                        SlimefunItems.CARGO_MOTOR, NETWORK_QUANTUM_STORAGE_5.getItem(), SlimefunItems.CARGO_MOTOR,
+                        SlimefunItems.STEEL_PLATE, SlimefunItems.BLISTERING_INGOT, SlimefunItems.STEEL_PLATE
+                },
+                NetworkQuantumStorage.getSizes()[5]
+        );
+
+        NETWORK_QUANTUM_STORAGE_7 = new NetworkQuantumStorage(
+                NetworksItemGroups.NETWORK_QUANTUMS,
+                NetworksSlimefunItemStacks.NETWORK_QUANTUM_STORAGE_7,
+                NetworkQuantumWorkbench.TYPE,
+                new ItemStack[]{
+                        SlimefunItems.REINFORCED_PLATE, SlimefunItems.BLISTERING_INGOT_2, SlimefunItems.REINFORCED_PLATE,
+                        SlimefunItems.CARGO_CONNECTOR_NODE, NETWORK_QUANTUM_STORAGE_6.getItem(), SlimefunItems.CARGO_CONNECTOR_NODE,
+                        SlimefunItems.REINFORCED_PLATE, SlimefunItems.BLISTERING_INGOT_2, SlimefunItems.REINFORCED_PLATE
+                },
+                NetworkQuantumStorage.getSizes()[6]
+        );
+
+        NETWORK_QUANTUM_STORAGE_8 = new NetworkQuantumStorage(
+                NetworksItemGroups.NETWORK_QUANTUMS,
+                NetworksSlimefunItemStacks.NETWORK_QUANTUM_STORAGE_8,
+                NetworkQuantumWorkbench.TYPE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), SlimefunItems.BLISTERING_INGOT_3, OPTIC_GLASS.getItem(),
+                        SlimefunItems.CARGO_MANAGER, NETWORK_QUANTUM_STORAGE_7.getItem(), SlimefunItems.CARGO_MANAGER,
+                        OPTIC_GLASS.getItem(), SlimefunItems.BLISTERING_INGOT_3, OPTIC_GLASS.getItem()
+                },
+                NetworkQuantumStorage.getSizes()[7]
+        );
+
+        NETWORK_CAPACITOR_1 = new NetworkPowerNode(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_CAPACITOR_1,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
+                        OPTIC_CABLE.getItem(), SlimefunItems.MEDIUM_CAPACITOR, OPTIC_CABLE.getItem(),
+                        OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem()
+                },
+                1000
+        );
+
+        NETWORK_CAPACITOR_2 = new NetworkPowerNode(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_CAPACITOR_2,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        NETWORK_CAPACITOR_1.getItem(), NETWORK_CAPACITOR_1.getItem(), NETWORK_CAPACITOR_1.getItem(),
+                        NETWORK_CAPACITOR_1.getItem(), SlimefunItems.BIG_CAPACITOR, NETWORK_CAPACITOR_1.getItem(),
+                        NETWORK_CAPACITOR_1.getItem(), NETWORK_CAPACITOR_1.getItem(), NETWORK_CAPACITOR_1.getItem()
+                },
+                10000
+        );
+
+        NETWORK_CAPACITOR_3 = new NetworkPowerNode(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_CAPACITOR_3,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        NETWORK_CAPACITOR_2.getItem(), NETWORK_CAPACITOR_2.getItem(), NETWORK_CAPACITOR_2.getItem(),
+                        NETWORK_CAPACITOR_2.getItem(), SlimefunItems.LARGE_CAPACITOR, NETWORK_CAPACITOR_2.getItem(),
+                        NETWORK_CAPACITOR_2.getItem(), NETWORK_CAPACITOR_2.getItem(), NETWORK_CAPACITOR_2.getItem()
+                },
+                100000
+        );
+
+        NETWORK_CAPACITOR_4 = new NetworkPowerNode(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_CAPACITOR_4,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        NETWORK_CAPACITOR_3.getItem(), NETWORK_CAPACITOR_3.getItem(), NETWORK_CAPACITOR_3.getItem(),
+                        NETWORK_CAPACITOR_3.getItem(), SlimefunItems.CARBONADO_EDGED_CAPACITOR, NETWORK_CAPACITOR_3.getItem(),
+                        NETWORK_CAPACITOR_3.getItem(), NETWORK_CAPACITOR_3.getItem(), NETWORK_CAPACITOR_3.getItem()
+                },
+                1000000
+        );
+
+        NETWORK_POWER_OUTLET_1 = new NetworkPowerOutlet(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_POWER_OUTLET_1,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), OPTIC_GLASS.getItem(), OPTIC_GLASS.getItem(),
+                        OPTIC_GLASS.getItem(), SlimefunItems.ENERGY_CONNECTOR, OPTIC_GLASS.getItem(),
+                        OPTIC_GLASS.getItem(), OPTIC_GLASS.getItem(), OPTIC_GLASS.getItem()
+                },
+                500
+        );
+
+        NETWORK_POWER_OUTLET_2 = new NetworkPowerOutlet(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_POWER_OUTLET_2,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        NETWORK_POWER_OUTLET_1.getItem(), OPTIC_GLASS.getItem(), NETWORK_POWER_OUTLET_1.getItem(),
+                        OPTIC_GLASS.getItem(), SlimefunItems.ENERGY_CONNECTOR, OPTIC_GLASS.getItem(),
+                        NETWORK_POWER_OUTLET_1.getItem(), OPTIC_GLASS.getItem(), NETWORK_POWER_OUTLET_1.getItem()
+                },
+                2000
+        );
+
+        NETWORK_POWER_DISPLAY = new NetworkPowerDisplay(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_POWER_DISPLAY,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), SlimefunItems.ENERGY_REGULATOR, OPTIC_GLASS.getItem(),
+                        OPTIC_CABLE.getItem(), NETWORK_CAPACITOR_1.getItem(), OPTIC_CABLE.getItem(),
+                        OPTIC_GLASS.getItem(), SlimefunItems.ENERGY_CONNECTOR, OPTIC_GLASS.getItem()
+                }
+        );
+
+        NETWORK_RECIPE_ENCODER = new NetworkEncoder(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_RECIPE_ENCODER,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        SlimefunItems.BASIC_CIRCUIT_BOARD, SlimefunItems.ANDROID_MEMORY_CORE, SlimefunItems.BASIC_CIRCUIT_BOARD,
+                        SlimefunItems.BASIC_CIRCUIT_BOARD, SlimefunItems.ENHANCED_AUTO_CRAFTER, SlimefunItems.BASIC_CIRCUIT_BOARD,
+                        SlimefunItems.BASIC_CIRCUIT_BOARD, SlimefunItems.CARGO_MOTOR, SlimefunItems.BASIC_CIRCUIT_BOARD
+                }
+        );
+
+        NETWORK_AUTO_CRAFTER = new NetworkAutoCrafter(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_AUTO_CRAFTER,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
+                        OPTIC_CABLE.getItem(), SIMPLE_NANOBOTS.getItem(), OPTIC_CABLE.getItem(),
+                        OPTIC_GLASS.getItem(), SlimefunItems.ENHANCED_AUTO_CRAFTER, OPTIC_GLASS.getItem()
+                },
+                64,
+                false
+        );
+
+        NETWORK_AUTO_CRAFTER_WITHHOLDING = new NetworkAutoCrafter(
+                NetworksItemGroups.NETWORK_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_AUTO_CRAFTER_WITHHOLDING,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
+                        OPTIC_CABLE.getItem(), ADVANCED_NANOBOTS.getItem(), OPTIC_CABLE.getItem(),
+                        OPTIC_GLASS.getItem(), NETWORK_AUTO_CRAFTER.getItem(), OPTIC_GLASS.getItem()
+                },
+                128,
+                true
+        );
+
+        CRAFTING_BLUEPRINT = new CraftingBlueprint(
+                NetworksItemGroups.TOOLS,
+                NetworksSlimefunItemStacks.CRAFTING_BLUEPRINT,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        OPTIC_CABLE.getItem(), OPTIC_CABLE.getItem(), OPTIC_CABLE.getItem(),
+                        OPTIC_CABLE.getItem(), new ItemStack(Material.PAPER), OPTIC_CABLE.getItem(),
+                        OPTIC_CABLE.getItem(), OPTIC_CABLE.getItem(), OPTIC_CABLE.getItem()
+                }
+        );
+
+        NETWORK_PROBE = new NetworkProbe(
+                NetworksItemGroups.TOOLS,
+                NetworksSlimefunItemStacks.NETWORK_PROBE,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        null, SlimefunItems.DURALUMIN_INGOT, null,
+                        null, OPTIC_CABLE.getItem(), null,
+                        null, NETWORK_BRIDGE.getItem(), null
+                }
+        );
+
+        NETWORK_REMOTE = new NetworkRemote(
+                NetworksItemGroups.TOOLS,
+                NetworksSlimefunItemStacks.NETWORK_REMOTE,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        null, NETWORK_GRID.getItem(), null,
+                        null, AI_CORE.getItem(), null,
+                        null, OPTIC_STAR.getItem(), null
+                },
+                NetworkRemote.getRanges()[0]
+        );
+
+        NETWORK_REMOTE_EMPOWERED = new NetworkRemote(
+                NetworksItemGroups.TOOLS,
+                NetworksSlimefunItemStacks.NETWORK_REMOTE_EMPOWERED,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        null, NETWORK_REMOTE.getItem(), null,
+                        null, EMPOWERED_AI_CORE.getItem(), null,
+                        null, NETWORK_REMOTE.getItem(), null
+                },
+                NetworkRemote.getRanges()[1]
+        );
+
+        NETWORK_REMOTE_PRISTINE = new NetworkRemote(
+                NetworksItemGroups.TOOLS,
+                NetworksSlimefunItemStacks.NETWORK_REMOTE_PRISTINE,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        null, NETWORK_REMOTE_EMPOWERED.getItem(), null,
+                        null, PRISTINE_AI_CORE.getItem(), null,
+                        null, NETWORK_REMOTE_EMPOWERED.getItem(), null
+                },
+                NetworkRemote.getRanges()[2]
+        );
+
+        NETWORK_REMOTE_ULTIMATE = new NetworkRemote(
+                NetworksItemGroups.TOOLS,
+                NetworksSlimefunItemStacks.NETWORK_REMOTE_ULTIMATE,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        null, NETWORK_REMOTE_PRISTINE.getItem(), null,
+                        null, INTERDIMENSIONAL_PRESENCE.getItem(), null,
+                        null, NETWORK_REMOTE_PRISTINE.getItem(), null
+                },
+                NetworkRemote.getRanges()[3]
+        );
+
+        NETWORK_CRAYON = new NetworkCrayon(
+                NetworksItemGroups.TOOLS,
+                NetworksSlimefunItemStacks.NETWORK_CRAYON,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        null, OPTIC_CABLE.getItem(), null,
+                        null, new ItemStack(Material.HONEYCOMB), null,
+                        null, new ItemStack(Material.HONEYCOMB), null
+                }
+        );
+
+        NETWORK_CONFIGURATOR = new NetworkConfigurator(
+                NetworksItemGroups.TOOLS,
+                NetworksSlimefunItemStacks.NETWORK_CONFIGURATOR,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        null, RADIOACTIVE_OPTIC_STAR.getItem(), null,
+                        null, NETWORK_CRAYON.getItem(), null,
+                        null, AI_CORE.getItem(), null
+                }
+        );
+
+        NETWORK_WIRELESS_CONFIGURATOR = new NetworkWirelessConfigurator(
+                NetworksItemGroups.TOOLS,
+                NetworksSlimefunItemStacks.NETWORK_WIRELESS_CONFIGURATOR,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        null, RADIOACTIVE_OPTIC_STAR.getItem(), null,
+                        null, NETWORK_CONFIGURATOR.getItem(), null,
+                        null, INTERDIMENSIONAL_PRESENCE.getItem(), null
+                }
+        );
+
+        NETWORK_RAKE_1 = new NetworkRake(
+                NetworksItemGroups.TOOLS,
+                NetworksSlimefunItemStacks.NETWORK_RAKE_1,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        null, RADIOACTIVE_OPTIC_STAR.getItem(), null,
+                        null, new ItemStack(Material.DIAMOND_SWORD), null,
+                        null, SYNTHETIC_EMERALD_SHARD.getItem(), null
+                },
+                250
+        );
+
+        NETWORK_RAKE_2 = new NetworkRake(
+                NetworksItemGroups.TOOLS,
+                NetworksSlimefunItemStacks.NETWORK_RAKE_2,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        null, RADIOACTIVE_OPTIC_STAR.getItem(), null,
+                        null, NETWORK_RAKE_1.getItem(), null,
+                        null, AI_CORE.getItem(), null
+                },
+                1000
+        );
+
+        NETWORK_RAKE_3 = new NetworkRake(
+                NetworksItemGroups.TOOLS,
+                NetworksSlimefunItemStacks.NETWORK_RAKE_3,
+                RecipeType.ENHANCED_CRAFTING_TABLE,
+                new ItemStack[]{
+                        null, RADIOACTIVE_OPTIC_STAR.getItem(), null,
+                        null, NETWORK_RAKE_2.getItem(), null,
+                        null, EMPOWERED_AI_CORE.getItem(), null
+                },
+                9999
+        );
+
+        NETWORK_ADMIN_DEBUGGER = new NetworkAdminDebugger(
+                NetworksItemGroups.DISABLED_ITEMS,
+                NetworksSlimefunItemStacks.NETWORK_DEBUG_STICK,
+                RecipeType.NULL,
+                new ItemStack[]{}
+        );
+    }
+
+    public static void setup() {
+        SYNTHETIC_EMERALD_SHARD.register(SlimefunAddonInstance.getSFAInstance());
+        OPTIC_GLASS.register(SlimefunAddonInstance.getSFAInstance());
+        OPTIC_CABLE.register(SlimefunAddonInstance.getSFAInstance());
+        OPTIC_STAR.register(SlimefunAddonInstance.getSFAInstance());
+        RADIOACTIVE_OPTIC_STAR.register(SlimefunAddonInstance.getSFAInstance());
+        SHRINKING_BASE.register(SlimefunAddonInstance.getSFAInstance());
+        SIMPLE_NANOBOTS.register(SlimefunAddonInstance.getSFAInstance());
+        ADVANCED_NANOBOTS.register(SlimefunAddonInstance.getSFAInstance());
+        AI_CORE.register(SlimefunAddonInstance.getSFAInstance());
+        EMPOWERED_AI_CORE.register(SlimefunAddonInstance.getSFAInstance());
+        PRISTINE_AI_CORE.register(SlimefunAddonInstance.getSFAInstance());
+        INTERDIMENSIONAL_PRESENCE.register(SlimefunAddonInstance.getSFAInstance());
+
+        NETWORK_CONTROLLER.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_BRIDGE.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_MONITOR.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_IMPORT.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_EXPORT.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_GRABBER.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_PUSHER.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_CONTROL_X.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_CONTROL_V.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_VACUUM.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_VANILLA_GRABBER.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_VANILLA_PUSHER.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_WIRELESS_TRANSMITTER.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_WIRELESS_RECEIVER.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_TRASH.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_GRID.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_CRAFTING_GRID.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_CELL.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_GREEDY_BLOCK.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_QUANTUM_WORKBENCH.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_QUANTUM_STORAGE_1.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_QUANTUM_STORAGE_2.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_QUANTUM_STORAGE_3.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_QUANTUM_STORAGE_4.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_QUANTUM_STORAGE_5.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_QUANTUM_STORAGE_6.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_QUANTUM_STORAGE_7.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_QUANTUM_STORAGE_8.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_CAPACITOR_1.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_CAPACITOR_2.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_CAPACITOR_3.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_CAPACITOR_4.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_POWER_OUTLET_1.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_POWER_OUTLET_2.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_POWER_DISPLAY.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_RECIPE_ENCODER.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_AUTO_CRAFTER.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_AUTO_CRAFTER_WITHHOLDING.register(SlimefunAddonInstance.getSFAInstance());
+
+        CRAFTING_BLUEPRINT.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_PROBE.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_REMOTE.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_REMOTE_EMPOWERED.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_REMOTE_PRISTINE.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_REMOTE_ULTIMATE.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_CRAYON.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_CONFIGURATOR.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_WIRELESS_CONFIGURATOR.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_RAKE_1.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_RAKE_2.register(SlimefunAddonInstance.getSFAInstance());
+        NETWORK_RAKE_3.register(SlimefunAddonInstance.getSFAInstance());
+
+        NETWORK_ADMIN_DEBUGGER.register(SlimefunAddonInstance.getSFAInstance());
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/NetworksItemGroups.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/NetworksItemGroups.java
new file mode 100644
index 0000000..05fad02
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/NetworksItemGroups.java
@@ -0,0 +1,72 @@
+package id.universenetwork.sfa_loader.addons.networks.slimefun;
+
+import id.universenetwork.sfa_loader.addons.networks.slimefun.groups.DummyItemGroup;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.groups.MainFlexGroup;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.SlimefunAddonInstance;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import lombok.experimental.UtilityClass;
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+
+@UtilityClass
+public final class NetworksItemGroups {
+    public static final MainFlexGroup MAIN = new MainFlexGroup(
+            AbstractAddon.createKey("main"), new CustomItemStack(
+            new ItemStack(Material.BLACK_STAINED_GLASS), Theme.MAIN.getColor() + "Networks")
+    );
+
+    public static final DummyItemGroup MATERIALS = new DummyItemGroup(
+            AbstractAddon.createKey("materials"), new CustomItemStack(
+            new ItemStack(Material.WHITE_STAINED_GLASS), Theme.MAIN.getColor() + "Crafting Materials")
+    );
+
+    public static final DummyItemGroup TOOLS = new DummyItemGroup(
+            AbstractAddon.createKey("tools"), new CustomItemStack(
+            new ItemStack(Material.PAINTING), Theme.MAIN.getColor() + "Network Management Tools")
+    );
+
+    public static final DummyItemGroup NETWORK_ITEMS = new DummyItemGroup(
+            AbstractAddon.createKey("network_items"), new CustomItemStack(
+            new ItemStack(Material.BLACK_STAINED_GLASS), Theme.MAIN.getColor() + "Network Items")
+    );
+
+    public static final DummyItemGroup NETWORK_QUANTUMS = new DummyItemGroup(
+            AbstractAddon.createKey("network_quantums"), new CustomItemStack(
+            new ItemStack(Material.WHITE_TERRACOTTA), Theme.MAIN.getColor() + "Network Quantum Storage Devices")
+    );
+
+    public static final ItemGroup DISABLED_ITEMS = new HiddenItemGroup(
+            AbstractAddon.createKey("disabled_items"), new CustomItemStack(
+            new ItemStack(Material.BARRIER), Theme.MAIN.getColor() + "Disabled/Removed Items"
+    )
+    );
+
+    static {
+        // Slimefun Registry
+        NetworksItemGroups.MAIN.register(SlimefunAddonInstance.getSFAInstance());
+        NetworksItemGroups.MATERIALS.register(SlimefunAddonInstance.getSFAInstance());
+        NetworksItemGroups.TOOLS.register(SlimefunAddonInstance.getSFAInstance());
+        NetworksItemGroups.NETWORK_ITEMS.register(SlimefunAddonInstance.getSFAInstance());
+        NetworksItemGroups.NETWORK_QUANTUMS.register(SlimefunAddonInstance.getSFAInstance());
+        NetworksItemGroups.DISABLED_ITEMS.register(SlimefunAddonInstance.getSFAInstance());
+    }
+
+    public static class HiddenItemGroup extends ItemGroup {
+
+        public HiddenItemGroup(NamespacedKey key, ItemStack item) {
+            super(key, item);
+        }
+
+        @Override
+        public boolean isHidden(@Nonnull Player p) {
+            return true;
+        }
+    }
+}
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/NetworksSlimefunItemStacks.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/NetworksSlimefunItemStacks.java
new file mode 100644
index 0000000..5bd2ba9
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/NetworksSlimefunItemStacks.java
@@ -0,0 +1,813 @@
+package id.universenetwork.sfa_loader.addons.networks.slimefun;
+
+import id.universenetwork.sfa_loader.addons.networks.slimefun.network.NetworkQuantumStorage;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.tools.NetworkRemote;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.collections.Pair;
+import lombok.experimental.UtilityClass;
+import org.bukkit.ChatColor;
+import org.bukkit.Material;
+import org.bukkit.enchantments.Enchantment;
+import org.bukkit.inventory.ItemFlag;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.meta.ItemMeta;
+
+import javax.annotation.Nonnull;
+import java.text.MessageFormat;
+
+/**
+ * Creating SlimefunItemstacks here due to some items being created in Enums so this will
+ * act as a one-stop-shop for the stacks themselves.
+ */
+@UtilityClass
+public class NetworksSlimefunItemStacks {
+    // Materials
+    public final SlimefunItemStack SYNTHETIC_EMERALD_SHARD;
+    public final SlimefunItemStack OPTIC_GLASS;
+    public final SlimefunItemStack OPTIC_CABLE;
+    public final SlimefunItemStack OPTIC_STAR;
+    public final SlimefunItemStack RADIOACTIVE_OPTIC_STAR;
+    public final SlimefunItemStack SHRINKING_BASE;
+    public final SlimefunItemStack SIMPLE_NANOBOTS;
+    public final SlimefunItemStack ADVANCED_NANOBOTS;
+    public final SlimefunItemStack AI_CORE;
+    public final SlimefunItemStack EMPOWERED_AI_CORE;
+    public final SlimefunItemStack PRISTINE_AI_CORE;
+    public final SlimefunItemStack INTERDIMENSIONAL_PRESENCE;
+
+    // Network Items
+    public final SlimefunItemStack NETWORK_CONTROLLER;
+    public final SlimefunItemStack NETWORK_BRIDGE;
+    public final SlimefunItemStack NETWORK_MONITOR;
+    public final SlimefunItemStack NETWORK_IMPORT;
+    public final SlimefunItemStack NETWORK_EXPORT;
+    public final SlimefunItemStack NETWORK_GRABBER;
+    public final SlimefunItemStack NETWORK_PUSHER;
+    public final SlimefunItemStack NETWORK_CONTROL_X;
+    public final SlimefunItemStack NETWORK_CONTROL_V;
+    public final SlimefunItemStack NETWORK_VACUUM;
+    public final SlimefunItemStack NETWORK_VANILLA_GRABBER;
+    public final SlimefunItemStack NETWORK_VANILLA_PUSHER;
+    public final SlimefunItemStack NETWORK_WIRELESS_TRANSMITTER;
+    public final SlimefunItemStack NETWORK_WIRELESS_RECEIVER;
+    public final SlimefunItemStack NETWORK_PURGER;
+    public final SlimefunItemStack NETWORK_GRID;
+    public final SlimefunItemStack NETWORK_CRAFTING_GRID;
+    public final SlimefunItemStack NETWORK_CELL;
+    public final SlimefunItemStack NETWORK_GREEDY_BLOCK;
+    public final SlimefunItemStack NETWORK_QUANTUM_WORKBENCH;
+    public final SlimefunItemStack NETWORK_QUANTUM_STORAGE_1;
+    public final SlimefunItemStack NETWORK_QUANTUM_STORAGE_2;
+    public final SlimefunItemStack NETWORK_QUANTUM_STORAGE_3;
+    public final SlimefunItemStack NETWORK_QUANTUM_STORAGE_4;
+    public final SlimefunItemStack NETWORK_QUANTUM_STORAGE_5;
+    public final SlimefunItemStack NETWORK_QUANTUM_STORAGE_6;
+    public final SlimefunItemStack NETWORK_QUANTUM_STORAGE_7;
+    public final SlimefunItemStack NETWORK_QUANTUM_STORAGE_8;
+    public final SlimefunItemStack NETWORK_CAPACITOR_1;
+    public final SlimefunItemStack NETWORK_CAPACITOR_2;
+    public final SlimefunItemStack NETWORK_CAPACITOR_3;
+    public final SlimefunItemStack NETWORK_CAPACITOR_4;
+    public final SlimefunItemStack NETWORK_POWER_OUTLET_1;
+    public final SlimefunItemStack NETWORK_POWER_OUTLET_2;
+    public final SlimefunItemStack NETWORK_POWER_DISPLAY;
+    public final SlimefunItemStack NETWORK_RECIPE_ENCODER;
+    public final SlimefunItemStack NETWORK_AUTO_CRAFTER;
+    public final SlimefunItemStack NETWORK_AUTO_CRAFTER_WITHHOLDING;
+
+    // Tools
+    public final SlimefunItemStack CRAFTING_BLUEPRINT;
+    public final SlimefunItemStack NETWORK_PROBE;
+    public final SlimefunItemStack NETWORK_REMOTE;
+    public final SlimefunItemStack NETWORK_REMOTE_EMPOWERED;
+    public final SlimefunItemStack NETWORK_REMOTE_PRISTINE;
+    public final SlimefunItemStack NETWORK_REMOTE_ULTIMATE;
+    public final SlimefunItemStack NETWORK_CRAYON;
+    public final SlimefunItemStack NETWORK_CONFIGURATOR;
+    public final SlimefunItemStack NETWORK_WIRELESS_CONFIGURATOR;
+    public final SlimefunItemStack NETWORK_RAKE_1;
+    public final SlimefunItemStack NETWORK_RAKE_2;
+    public final SlimefunItemStack NETWORK_RAKE_3;
+    public final SlimefunItemStack NETWORK_DEBUG_STICK;
+
+    static {
+        SYNTHETIC_EMERALD_SHARD = Theme.themedSlimefunItemStack(
+                "NTW_SYNTHETIC_EMERALD_SHARD",
+                new ItemStack(Material.LIME_DYE),
+                Theme.CRAFTING,
+                "Synthetic Emerald Shard",
+                "A shard of synthetic emerald that",
+                "is the backbone for information",
+                "transference."
+        );
+
+        OPTIC_GLASS = Theme.themedSlimefunItemStack(
+                "NTW_OPTIC_GLASS",
+                new ItemStack(Material.GLASS),
+                Theme.CRAFTING,
+                "Optic Glass",
+                "A simple glass that is able to",
+                "transfer small bits of information."
+        );
+
+        OPTIC_CABLE = Theme.themedSlimefunItemStack(
+                "NTW_OPTIC_CABLE",
+                new ItemStack(Material.STRING),
+                Theme.CRAFTING,
+                "Optic Cable",
+                "A simple wire that is able to",
+                "transfer large bits of information."
+        );
+
+        OPTIC_STAR = Theme.themedSlimefunItemStack(
+                "NTW_OPTIC_STAR",
+                new ItemStack(Material.NETHER_STAR),
+                Theme.CRAFTING,
+                "Optic Star",
+                "A crystalline star structure that",
+                "can transfer large bits of information."
+        );
+
+        RADIOACTIVE_OPTIC_STAR = Theme.themedSlimefunItemStack(
+                "NTW_RADIOACTIVE_OPTIC_STAR",
+                getPreEnchantedItemStack(Material.NETHER_STAR, true, new Pair<>(Enchantment.ARROW_DAMAGE, 1)),
+                Theme.CRAFTING,
+                "Radioactive Optic Star",
+                "A crystalline star structure that",
+                "can store insane amounts of information."
+        );
+
+        SHRINKING_BASE = Theme.themedSlimefunItemStack(
+                "NTW_SHRINKING_BASE",
+                getPreEnchantedItemStack(Material.PISTON, true, new Pair<>(Enchantment.ARROW_DAMAGE, 1)),
+                Theme.CRAFTING,
+                "Shrinking Base",
+                "An advanced construct able to make",
+                "big things go small."
+        );
+
+        SIMPLE_NANOBOTS = Theme.themedSlimefunItemStack(
+                "NTW_SIMPLE_NANOBOTS",
+                new ItemStack(Material.MELON_SEEDS),
+                Theme.CRAFTING,
+                "Simple Nanobots",
+                "Teeny Tiny little bots that can",
+                "help you with precise tasks."
+        );
+
+        ADVANCED_NANOBOTS = Theme.themedSlimefunItemStack(
+                "NTW_ADVANCED_NANOBOTS",
+                getPreEnchantedItemStack(Material.MELON_SEEDS, true, new Pair<>(Enchantment.ARROW_DAMAGE, 1)),
+                Theme.CRAFTING,
+                "Advanced Nanobots",
+                "Teeny Tiny little bots that can",
+                "help you with precise tasks.",
+                "This version is smarter and faster."
+        );
+
+        AI_CORE = Theme.themedSlimefunItemStack(
+                "NTW_AI_CORE",
+                new ItemStack(Material.BRAIN_CORAL_BLOCK),
+                Theme.CRAFTING,
+                "A.I. Core",
+                "A burgeoning artificial intelligence",
+                "resides within this weak shell."
+        );
+
+        EMPOWERED_AI_CORE = Theme.themedSlimefunItemStack(
+                "NTW_EMPOWERED_AI_CORE",
+                new ItemStack(Material.TUBE_CORAL_BLOCK),
+                Theme.CRAFTING,
+                "Empowered A.I. Core",
+                "A flourishing artificial intelligence",
+                "resides within this shell."
+        );
+
+        PRISTINE_AI_CORE = Theme.themedSlimefunItemStack(
+                "NTW_PRISTINE_AI_CORE",
+                getPreEnchantedItemStack(Material.TUBE_CORAL_BLOCK, true, new Pair<>(Enchantment.ARROW_DAMAGE, 1)),
+                Theme.CRAFTING,
+                "Pristine A.I. Core",
+                "A perfected artificial intelligence",
+                "resides within this defined shell."
+        );
+
+        INTERDIMENSIONAL_PRESENCE = Theme.themedSlimefunItemStack(
+                "NTW_INTERDIMENSIONAL_PRESENCE",
+                getPreEnchantedItemStack(Material.ARMOR_STAND, true, new Pair<>(Enchantment.ARROW_DAMAGE, 1)),
+                Theme.CRAFTING,
+                "Interdimensional Presence",
+                "An artificial intelligence that has",
+                "grown too powerful for just a",
+                "single dimension."
+        );
+
+        NETWORK_CONTROLLER = Theme.themedSlimefunItemStack(
+                "NTW_CONTROLLER",
+                new ItemStack(Material.BLACK_STAINED_GLASS),
+                Theme.MACHINE,
+                "Network Controller"
+                , "The Network controller is the brain",
+                "for the whole network. Max 1 per network."
+        );
+
+        NETWORK_BRIDGE = Theme.themedSlimefunItemStack(
+                "NTW_BRIDGE",
+                new ItemStack(Material.WHITE_STAINED_GLASS),
+                Theme.MACHINE,
+                "Network Bridge"
+                , "The bridge allows you to cheaply",
+                "connect network objects together."
+        );
+
+        NETWORK_MONITOR = Theme.themedSlimefunItemStack(
+                "NTW_MONITOR",
+                new ItemStack(Material.GREEN_STAINED_GLASS),
+                Theme.MACHINE,
+                "Network Monitor",
+                "The Network Monitor allows simple",
+                "import/export interaction with adjacent",
+                "objects.",
+                "",
+                "Currently Supports:",
+                "Infinity Barrels",
+                "Network Shells"
+        );
+
+        NETWORK_IMPORT = Theme.themedSlimefunItemStack(
+                "NTW_IMPORT",
+                new ItemStack(Material.RED_STAINED_GLASS),
+                Theme.MACHINE,
+                "Network Importer",
+                "The Network Importer brings any",
+                "item inside it into the network, up",
+                "to 9 stacks per SF tick.",
+                "Accepts items in from cargo."
+        );
+
+        NETWORK_EXPORT = Theme.themedSlimefunItemStack(
+                "NTW_EXPORT",
+                new ItemStack(Material.BLUE_STAINED_GLASS),
+                Theme.MACHINE,
+                "Network Exporter",
+                "The Network Exporter can be set to",
+                "constantly export 1 stack of any",
+                "given item.",
+                "Accepts item withdrawal from cargo."
+        );
+
+        NETWORK_GRABBER = Theme.themedSlimefunItemStack(
+                "NTW_GRABBER",
+                new ItemStack(Material.MAGENTA_STAINED_GLASS),
+                Theme.MACHINE,
+                "Network Grabber",
+                "The Network Grabber will try",
+                "to grab the first item it finds",
+                "from within the selected machine."
+        );
+
+        NETWORK_PUSHER = Theme.themedSlimefunItemStack(
+                "NTW_PUSHER",
+                new ItemStack(Material.BROWN_STAINED_GLASS),
+                Theme.MACHINE,
+                "Network Pusher",
+                "The Network Pusher will try",
+                "to push a matching item from a",
+                "given item into the chosen machine."
+        );
+
+        NETWORK_CONTROL_X = Theme.themedSlimefunItemStack(
+                "NTW_CONTROL_X",
+                new ItemStack(Material.WHITE_GLAZED_TERRACOTTA),
+                Theme.MACHINE,
+                "Network Control: X",
+                "The Network Control: X will try",
+                "to 'cut' a block out of the world",
+                "and put it into the Network.",
+                "Only works on Vanilla blocks without",
+                "inventories.",
+                "",
+                MessageFormat.format("{0}Network Drain: {1}{2}/cut", Theme.CLICK_INFO, Theme.PASSIVE, 100)
+        );
+
+        NETWORK_CONTROL_V = Theme.themedSlimefunItemStack(
+                "NTW_CONTROL_V",
+                new ItemStack(Material.PURPLE_GLAZED_TERRACOTTA),
+                Theme.MACHINE,
+                "Network Control: V",
+                "The Network Control: V will try",
+                "to 'paste' a block from the Network",
+                "into the world.",
+                "Only works with Vanilla blocks.",
+                "",
+                MessageFormat.format("{0}Network Drain: {1}{2}/paste", Theme.CLICK_INFO, Theme.PASSIVE, 100)
+        );
+
+        NETWORK_VACUUM = Theme.themedSlimefunItemStack(
+                "NTW_VACUUM",
+                new ItemStack(Material.ORANGE_GLAZED_TERRACOTTA),
+                Theme.MACHINE,
+                "Network Vacuum",
+                "The Network Vacuum will suck",
+                "items into itself within a",
+                "4 x 4 range centered on itself.",
+                "Vacuumed items will try to push",
+                "into the Network.",
+                "",
+                MessageFormat.format("{0}Network Drain: {1}{2}/tick", Theme.CLICK_INFO, Theme.PASSIVE, 100)
+        );
+
+        NETWORK_VANILLA_GRABBER = Theme.themedSlimefunItemStack(
+                "NTW_VANILLA_GRABBER",
+                new ItemStack(Material.ORANGE_STAINED_GLASS),
+                Theme.MACHINE,
+                "Network Vanilla Grabber",
+                "The Network Vanilla Pusher will try",
+                "to grab the first possible item from",
+                "the chosen vanilla inventory.",
+                "You need to grab items from this",
+                "node using a Grabber."
+        );
+
+        NETWORK_VANILLA_PUSHER = Theme.themedSlimefunItemStack(
+                "NTW_VANILLA_PUSHER",
+                new ItemStack(Material.LIME_STAINED_GLASS),
+                Theme.MACHINE,
+                "Network Vanilla Pusher",
+                "The Network Vanilla Pusher will try",
+                "to push any item inside itself into",
+                "the chosen vanilla inventory.",
+                "You need to push items into this",
+                "node from a Pusher."
+        );
+
+        NETWORK_WIRELESS_TRANSMITTER = Theme.themedSlimefunItemStack(
+                "NTW_NETWORK_WIRELESS_TRANSMITTER",
+                new ItemStack(Material.CYAN_STAINED_GLASS),
+                Theme.MACHINE,
+                "Network Wireless Transmitter",
+                "The Network Wireless Transmitter will",
+                "try to transmit any item inside itself",
+                "to a linked Network Wireless Receiver",
+                "located within the same world.",
+                "Use the Wireless Configurator to",
+                "setup the Wireless Transmitter.",
+                "Requires 500 Network Power per transfer."
+        );
+
+        NETWORK_WIRELESS_RECEIVER = Theme.themedSlimefunItemStack(
+                "NTW_NETWORK_WIRELESS_RECEIVER",
+                new ItemStack(Material.PURPLE_STAINED_GLASS),
+                Theme.MACHINE,
+                "Network Wireless Receiver",
+                "The Network Wireless Receiver is",
+                "able to receive items from a linked",
+                "wireless transmitter located within",
+                "the same world.",
+                "It will try to push received items",
+                "into the Network each tick."
+        );
+
+        NETWORK_PURGER = Theme.themedSlimefunItemStack(
+                "NTW_TRASH",
+                new ItemStack(Material.OBSERVER),
+                Theme.MACHINE,
+                "Network Purger",
+                "The Network Purger will pull",
+                "matching items from the network",
+                "and instantly void them.",
+                "Use with great care!"
+        );
+
+        NETWORK_GRID = Theme.themedSlimefunItemStack(
+                "NTW_GRID",
+                new ItemStack(Material.NOTE_BLOCK),
+                Theme.MACHINE,
+                "Network Grid",
+                "The Network Grid shows you all",
+                "the items you have in the network",
+                "and lets you insert or withdraw",
+                "directly."
+        );
+
+        NETWORK_CRAFTING_GRID = Theme.themedSlimefunItemStack(
+                "NTW_CRAFTING_GRID",
+                new ItemStack(Material.REDSTONE_LAMP),
+                Theme.MACHINE,
+                "Network Crafting Grid",
+                "The Network Crafting Grid acts",
+                "like a normal grid but displays less",
+                "items but allows crafting using items",
+                "directly from the network."
+        );
+
+        NETWORK_CELL = Theme.themedSlimefunItemStack(
+                "NTW_CELL",
+                new ItemStack(Material.HONEYCOMB_BLOCK),
+                Theme.MACHINE,
+                "Network Cell",
+                "The Network Cell is a large",
+                "(double chest) inventory that can",
+                "be accessed both from the network",
+                "and in the world."
+        );
+
+        NETWORK_GREEDY_BLOCK = Theme.themedSlimefunItemStack(
+                "NTW_GREEDY_BLOCK",
+                new ItemStack(Material.SHROOMLIGHT),
+                Theme.MACHINE,
+                "Network Greedy Block",
+                "The Network Greedy Block can",
+                "be set to one item which it will",
+                "then greedily hold on to a single",
+                "stack of. If more incoming items",
+                "do not fit, they will not enter",
+                "the network."
+        );
+
+        NETWORK_QUANTUM_WORKBENCH = Theme.themedSlimefunItemStack(
+                "NTW_QUANTUM_WORKBENCH",
+                new ItemStack(Material.DRIED_KELP_BLOCK),
+                Theme.MACHINE,
+                "Network Quantum Workbench",
+                "Allows the crafting of Quantum Storages."
+        );
+
+
+        NETWORK_QUANTUM_STORAGE_1 = Theme.themedSlimefunItemStack(
+                "NTW_QUANTUM_STORAGE_1",
+                new ItemStack(Material.WHITE_TERRACOTTA),
+                Theme.MACHINE,
+                "Network Quantum Storage (4K)",
+                "Stores " + NetworkQuantumStorage.getSizes()[0] + " items",
+                "",
+                "Stores items in mass quantities within",
+                "a quantum singularity."
+        );
+
+        NETWORK_QUANTUM_STORAGE_2 = Theme.themedSlimefunItemStack(
+                "NTW_QUANTUM_STORAGE_2",
+                new ItemStack(Material.LIGHT_GRAY_TERRACOTTA),
+                Theme.MACHINE,
+                "Network Quantum Storage (32K)",
+                "Stores " + NetworkQuantumStorage.getSizes()[1] + " items",
+                "",
+                "Stores items in mass quantities within",
+                "a quantum singularity."
+        );
+
+        NETWORK_QUANTUM_STORAGE_3 = Theme.themedSlimefunItemStack(
+                "NTW_QUANTUM_STORAGE_3",
+                new ItemStack(Material.GRAY_TERRACOTTA),
+                Theme.MACHINE,
+                "Network Quantum Storage (262K)",
+                "Stores " + NetworkQuantumStorage.getSizes()[2] + " items",
+                "",
+                "Stores items in mass quantities within",
+                "a quantum singularity."
+        );
+
+        NETWORK_QUANTUM_STORAGE_4 = Theme.themedSlimefunItemStack(
+                "NTW_QUANTUM_STORAGE_4",
+                new ItemStack(Material.BROWN_TERRACOTTA),
+                Theme.MACHINE,
+                "Network Quantum Storage (2M)",
+                "Stores " + NetworkQuantumStorage.getSizes()[3] + " items",
+                "",
+                "Stores items in mass quantities within",
+                "a quantum singularity."
+        );
+
+        NETWORK_QUANTUM_STORAGE_5 = Theme.themedSlimefunItemStack(
+                "NTW_QUANTUM_STORAGE_5",
+                new ItemStack(Material.BLACK_TERRACOTTA),
+                Theme.MACHINE,
+                "Network Quantum Storage (16M)",
+                "Stores " + NetworkQuantumStorage.getSizes()[4] + " items",
+                "",
+                "Stores items in mass quantities within",
+                "a quantum singularity."
+        );
+
+        NETWORK_QUANTUM_STORAGE_6 = Theme.themedSlimefunItemStack(
+                "NTW_QUANTUM_STORAGE_6",
+                new ItemStack(Material.PURPLE_TERRACOTTA),
+                Theme.MACHINE,
+                "Network Quantum Storage (134M)",
+                "Stores " + NetworkQuantumStorage.getSizes()[5] + " items",
+                "",
+                "Stores items in mass quantities within",
+                "a quantum singularity."
+        );
+
+        NETWORK_QUANTUM_STORAGE_7 = Theme.themedSlimefunItemStack(
+                "NTW_QUANTUM_STORAGE_7",
+                new ItemStack(Material.MAGENTA_TERRACOTTA),
+                Theme.MACHINE,
+                "Network Quantum Storage (1B)",
+                "Stores " + NetworkQuantumStorage.getSizes()[6] + " items",
+                "",
+                "Stores items in mass quantities within",
+                "a quantum singularity."
+        );
+
+        NETWORK_QUANTUM_STORAGE_8 = Theme.themedSlimefunItemStack(
+                "NTW_QUANTUM_STORAGE_8",
+                new ItemStack(Material.RED_TERRACOTTA),
+                Theme.MACHINE,
+                "Network Quantum Storage (∞)",
+                "Stores ∞ items... almost",
+                "",
+                "Stores items in mass quantities within",
+                "a quantum singularity."
+        );
+
+        NETWORK_CAPACITOR_1 = Theme.themedSlimefunItemStack(
+                "NTW_CAPACITOR_1",
+                new ItemStack(Material.BROWN_GLAZED_TERRACOTTA),
+                Theme.MACHINE,
+                "Network Capacitor (1)",
+                "The Network Capacitor can take",
+                "power in and store it for use",
+                "within the network.",
+                "",
+                MessageFormat.format("{0}Capacity: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, 1000)
+        );
+
+        NETWORK_CAPACITOR_2 = Theme.themedSlimefunItemStack(
+                "NTW_CAPACITOR_2",
+                new ItemStack(Material.GREEN_GLAZED_TERRACOTTA),
+                Theme.MACHINE,
+                "Network Capacitor (2)",
+                "The Network Capacitor can take",
+                "power in and store it for use",
+                "within the network.",
+                "",
+                MessageFormat.format("{0}Capacity: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, 10000)
+        );
+
+        NETWORK_CAPACITOR_3 = Theme.themedSlimefunItemStack(
+                "NTW_CAPACITOR_3",
+                new ItemStack(Material.BLACK_GLAZED_TERRACOTTA),
+                Theme.MACHINE,
+                "Network Capacitor (3)",
+                "The Network Capacitor can take",
+                "power in and store it for use",
+                "within the network.",
+                "",
+                MessageFormat.format("{0}Capacity: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, 100000)
+        );
+
+        NETWORK_CAPACITOR_4 = Theme.themedSlimefunItemStack(
+                "NTW_CAPACITOR_4",
+                new ItemStack(Material.GRAY_GLAZED_TERRACOTTA),
+                Theme.MACHINE,
+                "Network Capacitor (4)",
+                "The Network Capacitor can take",
+                "power in and store it for use",
+                "within the network.",
+                "",
+                MessageFormat.format("{0}Capacity: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, 1000000)
+        );
+
+        NETWORK_POWER_OUTLET_1 = Theme.themedSlimefunItemStack(
+                "NTW_POWER_OUTLET_1",
+                new ItemStack(Material.YELLOW_GLAZED_TERRACOTTA),
+                Theme.MACHINE,
+                "Network Power Outlet (1)",
+                "The Network Capacitor can take",
+                "power from the Network to power",
+                "machines or feed back into an",
+                "EnergyNet network.",
+                "",
+                "Operates at a 20% loss rate.",
+                "",
+                MessageFormat.format("{0}Max Transfer: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, 500)
+        );
+
+        NETWORK_POWER_OUTLET_2 = Theme.themedSlimefunItemStack(
+                "NTW_POWER_OUTLET_2",
+                new ItemStack(Material.RED_GLAZED_TERRACOTTA),
+                Theme.MACHINE,
+                "Network Power Outlet (2)",
+                "The Network Capacitor can take",
+                "power from the Network to power",
+                "machines or feed back into an",
+                "EnergyNet network.",
+                "",
+                "Operates at a 20% loss rate.",
+                "",
+                MessageFormat.format("{0}Max Transfer: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, 2000)
+        );
+
+        NETWORK_POWER_DISPLAY = Theme.themedSlimefunItemStack(
+                "NTW_POWER_DISPLAY",
+                new ItemStack(Material.TINTED_GLASS),
+                Theme.MACHINE,
+                "Network Power Display",
+                "The Network Power Display will",
+                "display the power in the network.",
+                "Simple, right?"
+        );
+
+        NETWORK_RECIPE_ENCODER = Theme.themedSlimefunItemStack(
+                "NTW_RECIPE_ENCODER",
+                new ItemStack(Material.TARGET),
+                Theme.MACHINE,
+                "Network Recipe Encoder",
+                "Used to form a Crafting Blueprint",
+                "from input items.",
+                "",
+                MessageFormat.format("{0}Network Drain: {1}{2}/encode", Theme.CLICK_INFO, Theme.PASSIVE, 20000)
+        );
+
+        NETWORK_AUTO_CRAFTER = Theme.themedSlimefunItemStack(
+                "NTW_AUTO_CRAFTER",
+                new ItemStack(Material.BLACK_GLAZED_TERRACOTTA),
+                Theme.MACHINE,
+                "Network Auto Crafter",
+                "The Network Auto Crafter accepts",
+                "a crafting blueprint. When the",
+                "blueprint output item is requested",
+                "while there is none in the network",
+                "it will be crafted if you have",
+                "materials.",
+                "",
+                MessageFormat.format("{0}Network Drain: {1}{2}/craft", Theme.CLICK_INFO, Theme.PASSIVE, 64)
+        );
+
+        NETWORK_AUTO_CRAFTER_WITHHOLDING = Theme.themedSlimefunItemStack(
+                "NTW_AUTO_CRAFTER_WITHHOLDING",
+                new ItemStack(Material.WHITE_GLAZED_TERRACOTTA),
+                Theme.MACHINE,
+                "Network Auto Crafter (Withholding)",
+                "The Network Auto Crafter accepts",
+                "a crafting blueprint. When the",
+                "blueprint output item is requested",
+                "while there is none in the network",
+                "it will be crafted if you have",
+                "materials.",
+                "",
+                "A Withholding Crafter will keep",
+                "a stack in the output and stop",
+                "crafting. The stack can been seen",
+                "in the Network and also allows for",
+                "cargo.",
+                "",
+                MessageFormat.format("{0}Network Drain: {1}{2}/craft", Theme.CLICK_INFO, Theme.PASSIVE, 128)
+        );
+
+        CRAFTING_BLUEPRINT = Theme.themedSlimefunItemStack(
+                "NTW_CRAFTING_BLUEPRINT",
+                new ItemStack(Material.BLUE_DYE),
+                Theme.TOOL,
+                "Crafting Blueprint",
+                "A blank blueprint that can",
+                "be used to store a crafting",
+                "recipe."
+        );
+
+        NETWORK_PROBE = Theme.themedSlimefunItemStack(
+                "NTW_PROBE",
+                new ItemStack(Material.CLOCK),
+                Theme.TOOL,
+                "Network Probe",
+                "When used on a controller, this will",
+                "show the nodes on the network."
+        );
+
+        NETWORK_REMOTE = Theme.themedSlimefunItemStack(
+                "NTW_REMOTE",
+                new ItemStack(Material.PAINTING),
+                Theme.TOOL,
+                "Network Remote",
+                "Opens a bound grid wirelessly.",
+                "The grid must be chunk loaded.",
+                "",
+                MessageFormat.format("{0}Range: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, NetworkRemote.getRanges()[0])
+        );
+
+        NETWORK_REMOTE_EMPOWERED = Theme.themedSlimefunItemStack(
+                "NTW_REMOTE_EMPOWERED",
+                new ItemStack(Material.ITEM_FRAME),
+                Theme.TOOL,
+                "Network Remote Empowered",
+                "Opens a bound grid wirelessly.",
+                "The grid must be chunk loaded.",
+                "",
+                MessageFormat.format("{0}Range: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, NetworkRemote.getRanges()[1])
+        );
+
+        NETWORK_REMOTE_PRISTINE = Theme.themedSlimefunItemStack(
+                "NTW_REMOTE_PRISTINE",
+                new ItemStack(Material.GLOW_ITEM_FRAME),
+                Theme.TOOL,
+                "Network Remote Pristine",
+                "Opens a bound grid wirelessly.",
+                "The grid must be chunk loaded.",
+                "",
+                MessageFormat.format("{0}Range: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, "Unlimited")
+        );
+
+        NETWORK_REMOTE_ULTIMATE = Theme.themedSlimefunItemStack(
+                "NTW_REMOTE_ULTIMATE",
+                getPreEnchantedItemStack(Material.GLOW_ITEM_FRAME, true, new Pair<>(Enchantment.ARROW_DAMAGE, 1)),
+                Theme.TOOL,
+                "Network Remote Ultimate",
+                "Opens a bound grid wirelessly.",
+                "The grid must be chunk loaded.",
+                "",
+                MessageFormat.format("{0}Range: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, "Cross Dimensional")
+        );
+
+        NETWORK_CRAYON = Theme.themedSlimefunItemStack(
+                "NTW_CRAYON",
+                new ItemStack(Material.RED_CANDLE),
+                Theme.TOOL,
+                "Network Crayon",
+                "When used on a controller, this will",
+                "enable particle display from specific",
+                "blocks when working."
+        );
+
+        NETWORK_CONFIGURATOR = Theme.themedSlimefunItemStack(
+                "NTW_CONFIGURATOR",
+                new ItemStack(Material.BLAZE_ROD),
+                Theme.TOOL,
+                "Network Configurator",
+                "Used to copy and paste the",
+                "configurations of directional",
+                "interfaces.",
+                "",
+                MessageFormat.format("{0}Right Click: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, "Apply Config"),
+                MessageFormat.format("{0}Shift Right Click: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, "Store Config")
+        );
+
+        NETWORK_WIRELESS_CONFIGURATOR = Theme.themedSlimefunItemStack(
+                "NTW_WIRELESS_CONFIGURATOR",
+                new ItemStack(Material.BLAZE_ROD),
+                Theme.TOOL,
+                "Network Wireless Configurator",
+                "Used to store a Receiver location",
+                "and then to apply to a Transmitter",
+                "",
+                MessageFormat.format("{0}Right Click: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, "Store Receiver Location"),
+                MessageFormat.format("{0}Shift Right Click: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, "Set Location to Transmitter")
+        );
+
+        NETWORK_RAKE_1 = Theme.themedSlimefunItemStack(
+                "NTW_RAKE_1",
+                new ItemStack(Material.TWISTING_VINES),
+                Theme.TOOL,
+                "Network Rake (1)",
+                "Right click a Network Object to",
+                "break it instantly.",
+                "",
+                ChatColor.YELLOW + "250 Uses " + ChatColor.GRAY + "left"
+        );
+
+        NETWORK_RAKE_2 = Theme.themedSlimefunItemStack(
+                "NTW_RAKE_2",
+                new ItemStack(Material.WEEPING_VINES),
+                Theme.TOOL,
+                "Network Rake (2)",
+                "Right click a Network Object to",
+                "break it instantly.",
+                "",
+                ChatColor.YELLOW + "1000 Uses " + ChatColor.GRAY + "left"
+        );
+
+        NETWORK_RAKE_3 = Theme.themedSlimefunItemStack(
+                "NTW_RAKE_3",
+                getPreEnchantedItemStack(Material.WEEPING_VINES, true, new Pair<>(Enchantment.LUCK, 1)),
+                Theme.TOOL,
+                "Network Rake (3)",
+                "Right click a Network Object to",
+                "break it instantly.",
+                "",
+                ChatColor.YELLOW + "9999 Uses " + ChatColor.GRAY + "left"
+        );
+
+        NETWORK_DEBUG_STICK = Theme.themedSlimefunItemStack(
+                "NTW_DEBUG_STICK",
+                getPreEnchantedItemStack(Material.STICK, true, new Pair<>(Enchantment.LUCK, 1)),
+                Theme.TOOL,
+                "Network Debug Stick",
+                "Right click a Network Object to",
+                "turn on debugging."
+        );
+    }
+
+    @Nonnull
+    @SafeVarargs
+    public static ItemStack getPreEnchantedItemStack(Material material, boolean hide, @Nonnull Pair<Enchantment, Integer>... enchantments) {
+        ItemStack itemStack = new ItemStack(material);
+        ItemMeta itemMeta = itemStack.getItemMeta();
+        for (Pair<Enchantment, Integer> pair : enchantments)
+            itemMeta.addEnchant(pair.getFirstValue(), pair.getSecondValue(), true);
+        if (hide) itemMeta.addItemFlags(ItemFlag.HIDE_ENCHANTS);
+        itemStack.setItemMeta(itemMeta);
+        return itemStack;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/groups/DummyItemGroup.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/groups/DummyItemGroup.java
similarity index 87%
rename from src/main/java/io/github/sefiraat/networks/slimefun/groups/DummyItemGroup.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/groups/DummyItemGroup.java
index 30247b8..5ac892a 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/groups/DummyItemGroup.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/groups/DummyItemGroup.java
@@ -1,4 +1,4 @@
-package io.github.sefiraat.networks.slimefun.groups;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.groups;
 
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import org.bukkit.NamespacedKey;
@@ -8,7 +8,6 @@ import org.bukkit.inventory.ItemStack;
 import javax.annotation.ParametersAreNonnullByDefault;
 
 public class DummyItemGroup extends ItemGroup {
-
     @ParametersAreNonnullByDefault
     public DummyItemGroup(NamespacedKey key, ItemStack item) {
         super(key, item);
@@ -19,5 +18,4 @@ public class DummyItemGroup extends ItemGroup {
     public boolean isHidden(Player p) {
         return true;
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/groups/MainFlexGroup.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/groups/MainFlexGroup.java
similarity index 80%
rename from src/main/java/io/github/sefiraat/networks/slimefun/groups/MainFlexGroup.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/groups/MainFlexGroup.java
index d1fb8a9..c6033d0 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/groups/MainFlexGroup.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/groups/MainFlexGroup.java
@@ -1,7 +1,7 @@
-package io.github.sefiraat.networks.slimefun.groups;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.groups;
 
-import io.github.sefiraat.networks.slimefun.NetworksItemGroups;
-import io.github.sefiraat.networks.utils.Theme;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.NetworksItemGroups;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.groups.FlexItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;
@@ -24,14 +24,13 @@ import javax.annotation.ParametersAreNonnullByDefault;
  * @noinspection deprecation
  */
 public class MainFlexGroup extends FlexItemGroup {
-
     private static final ItemStack DOCS_ITEM_STACK = Theme.themedItemStack(
-        Material.BOOK,
-        Theme.GUIDE,
-        "Documentation Wiki",
-        "Click to get the link to the",
-        "documentation Wiki for Networks",
-        "and other Sefiraat addons."
+            Material.BOOK,
+            Theme.GUIDE,
+            "Documentation Wiki",
+            "Click to get the link to the",
+            "documentation Wiki for Networks",
+            "and other Sefiraat addons."
     );
 
     private static final int GUIDE_BACK = 1;
@@ -42,10 +41,10 @@ public class MainFlexGroup extends FlexItemGroup {
     private static final int NETWORK_QUANTUMS = 13;
 
     private static final int[] HEADER = new int[]{
-        0, 1, 2, 3, 4, 5, 6, 7, 8
+            0, 1, 2, 3, 4, 5, 6, 7, 8
     };
     private static final int[] FOOTER = new int[]{
-        45, 46, 47, 48, 49, 50, 51, 52, 53
+            45, 46, 47, 48, 49, 50, 51, 52, 53
     };
 
     public MainFlexGroup(NamespacedKey key, ItemStack item) {
@@ -63,13 +62,11 @@ public class MainFlexGroup extends FlexItemGroup {
     public void open(Player p, PlayerProfile profile, SlimefunGuideMode mode) {
         final ChestMenu chestMenu = new ChestMenu(Theme.MAIN.getColor() + "Networks");
 
-        for (int slot : HEADER) {
+        for (int slot : HEADER)
             chestMenu.addItem(slot, ChestMenuUtils.getBackground(), (player1, i1, itemStack, clickAction) -> false);
-        }
 
-        for (int slot : FOOTER) {
+        for (int slot : FOOTER)
             chestMenu.addItem(slot, ChestMenuUtils.getBackground(), (player1, i1, itemStack, clickAction) -> false);
-        }
 
         chestMenu.setEmptySlotsClickable(false);
         setupPage(p, profile, mode, chestMenu);
@@ -85,11 +82,11 @@ public class MainFlexGroup extends FlexItemGroup {
 
         // Back
         menu.replaceExistingItem(
-            GUIDE_BACK,
-            ChestMenuUtils.getBackButton(
-                player,
-                Slimefun.getLocalization().getMessage("guide.back.guide")
-            )
+                GUIDE_BACK,
+                ChestMenuUtils.getBackButton(
+                        player,
+                        Slimefun.getLocalization().getMessage("guide.back.guide")
+                )
         );
         menu.addMenuClickHandler(GUIDE_BACK, (player1, slot, itemStack, clickAction) -> {
             SlimefunGuide.openMainMenu(profile, mode, 1);
@@ -109,25 +106,25 @@ public class MainFlexGroup extends FlexItemGroup {
         // Materials
         menu.replaceExistingItem(MATERIALS, NetworksItemGroups.MATERIALS.getItem(player));
         menu.addMenuClickHandler(MATERIALS, (player1, i1, itemStack1, clickAction) ->
-            openPage(profile, NetworksItemGroups.MATERIALS, mode, 1)
+                openPage(profile, NetworksItemGroups.MATERIALS, mode, 1)
         );
 
         // Tools
         menu.replaceExistingItem(TOOLS, NetworksItemGroups.TOOLS.getItem(player));
         menu.addMenuClickHandler(TOOLS, (player1, i1, itemStack1, clickAction) ->
-            openPage(profile, NetworksItemGroups.TOOLS, mode, 1)
+                openPage(profile, NetworksItemGroups.TOOLS, mode, 1)
         );
 
         // Network Items
         menu.replaceExistingItem(NETWORK_ITEMS, NetworksItemGroups.NETWORK_ITEMS.getItem(player));
         menu.addMenuClickHandler(NETWORK_ITEMS, (player1, i1, itemStack1, clickAction) ->
-            openPage(profile, NetworksItemGroups.NETWORK_ITEMS, mode, 1)
+                openPage(profile, NetworksItemGroups.NETWORK_ITEMS, mode, 1)
         );
 
         // Network Quantums
         menu.replaceExistingItem(NETWORK_QUANTUMS, NetworksItemGroups.NETWORK_QUANTUMS.getItem(player));
         menu.addMenuClickHandler(NETWORK_QUANTUMS, (player1, i1, itemStack1, clickAction) ->
-            openPage(profile, NetworksItemGroups.NETWORK_QUANTUMS, mode, 1)
+                openPage(profile, NetworksItemGroups.NETWORK_QUANTUMS, mode, 1)
         );
     }
 
@@ -137,4 +134,4 @@ public class MainFlexGroup extends FlexItemGroup {
         SlimefunGuide.openItemGroup(profile, itemGroup, mode, page);
         return false;
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/AdminDebuggable.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/AdminDebuggable.java
similarity index 73%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/AdminDebuggable.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/AdminDebuggable.java
index fba961f..219e9b4 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/AdminDebuggable.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/AdminDebuggable.java
@@ -1,16 +1,14 @@
-package io.github.sefiraat.networks.slimefun.network;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
 
-import io.github.sefiraat.networks.Networks;
-import io.github.sefiraat.networks.utils.Theme;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
+import id.universenetwork.sfa_loader.utils.LogUtils;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import org.bukkit.Location;
 import org.bukkit.entity.Player;
 
 import javax.annotation.Nonnull;
-import java.util.logging.Level;
 
 public interface AdminDebuggable {
-
     String DEBUG_KEY = "network_debugging";
 
     default boolean isDebug(@Nonnull Location location) {
@@ -35,10 +33,10 @@ public interface AdminDebuggable {
     default void sendDebugMessage(@Nonnull Location location, @Nonnull String string) {
         if (isDebug(location)) {
             final String locationString = "W[" + location.getWorld().getName() + "] " +
-                "X[" + location.getBlockX() + "] " +
-                "Y[" + location.getBlockY() + "] " +
-                "Z[" + location.getBlockZ() + "] ";
-            Networks.getInstance().getJavaPlugin().getLogger().log(Level.INFO, locationString + " - " + string);
+                    "X[" + location.getBlockX() + "] " +
+                    "Y[" + location.getBlockY() + "] " +
+                    "Z[" + location.getBlockZ() + "] ";
+            LogUtils.info(locationString + " - " + string);
         }
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkAutoCrafter.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkAutoCrafter.java
similarity index 71%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkAutoCrafter.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkAutoCrafter.java
index 112d56f..2048d6a 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkAutoCrafter.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkAutoCrafter.java
@@ -1,19 +1,19 @@
-package io.github.sefiraat.networks.slimefun.network;
-
-import io.github.sefiraat.networks.NetworkStorage;
-import io.github.sefiraat.networks.network.NetworkRoot;
-import io.github.sefiraat.networks.network.NodeDefinition;
-import io.github.sefiraat.networks.network.NodeType;
-import io.github.sefiraat.networks.network.SupportedRecipes;
-import io.github.sefiraat.networks.network.stackcaches.BlueprintInstance;
-import io.github.sefiraat.networks.network.stackcaches.ItemRequest;
-import io.github.sefiraat.networks.slimefun.NetworkSlimefunItems;
-import io.github.sefiraat.networks.slimefun.tools.CraftingBlueprint;
-import io.github.sefiraat.networks.utils.Keys;
-import io.github.sefiraat.networks.utils.StackUtils;
-import io.github.sefiraat.networks.utils.Theme;
-import io.github.sefiraat.networks.utils.datatypes.DataTypeMethods;
-import io.github.sefiraat.networks.utils.datatypes.PersistentCraftingBlueprintType;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
+
+import id.universenetwork.sfa_loader.addons.networks.NetworkStorage;
+import id.universenetwork.sfa_loader.addons.networks.network.NetworkRoot;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeDefinition;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeType;
+import id.universenetwork.sfa_loader.addons.networks.network.SupportedRecipes;
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.BlueprintInstance;
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.ItemRequest;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.NetworkSlimefunItems;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.tools.CraftingBlueprint;
+import id.universenetwork.sfa_loader.addons.networks.utils.Keys;
+import id.universenetwork.sfa_loader.addons.networks.utils.StackUtils;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
+import id.universenetwork.sfa_loader.addons.networks.utils.datatypes.DataTypeMethods;
+import id.universenetwork.sfa_loader.addons.networks.utils.datatypes.PersistentCraftingBlueprintType;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -42,9 +42,8 @@ import java.util.Map;
 import java.util.Optional;
 
 public class NetworkAutoCrafter extends NetworkObject {
-
     private static final int[] BACKGROUND_SLOTS = new int[]{
-        3, 4, 5, 12, 13, 14, 21, 22, 23
+            3, 4, 5, 12, 13, 14, 21, 22, 23
     };
     private static final int[] BLUEPRINT_BACKGROUND = new int[]{0, 1, 2, 9, 11, 18, 19, 20};
     private static final int[] OUTPUT_BACKGROUND = new int[]{6, 7, 8, 15, 17, 24, 25, 26};
@@ -53,11 +52,11 @@ public class NetworkAutoCrafter extends NetworkObject {
     private static final int OUTPUT_SLOT = 16;
 
     public static final CustomItemStack BLUEPRINT_BACKGROUND_STACK = new CustomItemStack(
-        Material.BLUE_STAINED_GLASS_PANE, Theme.PASSIVE + "Crafting Blueprint"
+            Material.BLUE_STAINED_GLASS_PANE, Theme.PASSIVE + "Crafting Blueprint"
     );
 
     public static final CustomItemStack OUTPUT_BACKGROUND_STACK = new CustomItemStack(
-        Material.GREEN_STAINED_GLASS_PANE, Theme.PASSIVE + "Output"
+            Material.GREEN_STAINED_GLASS_PANE, Theme.PASSIVE + "Output"
     );
 
     private final int chargePerCraft;
@@ -75,21 +74,21 @@ public class NetworkAutoCrafter extends NetworkObject {
         this.getSlotsToDrop().add(OUTPUT_SLOT);
 
         addItemHandler(
-            new BlockTicker() {
-                @Override
-                public boolean isSynchronized() {
-                    return false;
-                }
+                new BlockTicker() {
+                    @Override
+                    public boolean isSynchronized() {
+                        return false;
+                    }
 
-                @Override
-                public void tick(Block block, SlimefunItem slimefunItem, Config config) {
-                    BlockMenu blockMenu = BlockStorage.getInventory(block);
-                    if (blockMenu != null) {
-                        addToRegistry(block);
-                        craftPreFlight(blockMenu);
+                    @Override
+                    public void tick(Block block, SlimefunItem slimefunItem, Config config) {
+                        BlockMenu blockMenu = BlockStorage.getInventory(block);
+                        if (blockMenu != null) {
+                            addToRegistry(block);
+                            craftPreFlight(blockMenu);
+                        }
                     }
                 }
-            }
         );
     }
 
@@ -121,7 +120,7 @@ public class NetworkAutoCrafter extends NetworkObject {
         final long networkCharge = root.getRootPower();
 
         if (networkCharge > this.chargePerCraft) {
-            final SlimefunItem item = SlimefunItem.getByItem(blueprint);
+            final SlimefunItem item = getByItem(blueprint);
 
             if (!(item instanceof CraftingBlueprint)) {
                 return;
@@ -133,9 +132,7 @@ public class NetworkAutoCrafter extends NetworkObject {
                 final ItemMeta blueprintMeta = blueprint.getItemMeta();
                 final Optional<BlueprintInstance> optional = DataTypeMethods.getOptionalCustom(blueprintMeta, Keys.BLUEPRINT_INSTANCE, PersistentCraftingBlueprintType.TYPE);
 
-                if (optional.isEmpty()) {
-                    return;
-                }
+                if (!optional.isPresent()) return;
 
                 instance = optional.get();
                 setCache(blockMenu, instance);
@@ -144,14 +141,11 @@ public class NetworkAutoCrafter extends NetworkObject {
             final ItemStack output = blockMenu.getItemInSlot(OUTPUT_SLOT);
 
             if (output != null
-                && output.getType() != Material.AIR
-                && (output.getAmount() + instance.getItemStack().getAmount() >= output.getMaxStackSize() || !StackUtils.itemsMatch(instance, output, true))) {
+                    && output.getType() != Material.AIR
+                    && (output.getAmount() + instance.getItemStack().getAmount() >= output.getMaxStackSize() || !StackUtils.itemsMatch(instance, output, true)))
                 return;
-            }
 
-            if (tryCraft(blockMenu, instance, root)) {
-                root.removeRootPower(this.chargePerCraft);
-            }
+            if (tryCraft(blockMenu, instance, root)) root.removeRootPower(this.chargePerCraft);
         }
     }
 
@@ -171,11 +165,8 @@ public class NetworkAutoCrafter extends NetworkObject {
             }
         }
 
-        for (Map.Entry<ItemStack, Integer> entry : requiredItems.entrySet()) {
-            if (!root.contains(new ItemRequest(entry.getKey(), entry.getValue()))) {
-                return false;
-            }
-        }
+        for (Map.Entry<ItemStack, Integer> entry : requiredItems.entrySet())
+            if (!root.contains(new ItemRequest(entry.getKey(), entry.getValue()))) return false;
 
         // Then fetch the actual items
         for (int i = 0; i < 9; i++) {
@@ -183,20 +174,17 @@ public class NetworkAutoCrafter extends NetworkObject {
             if (requested != null) {
                 final ItemStack fetched = root.getItemStack(new ItemRequest(instance.getRecipeItems()[i], 1));
                 inputs[i] = fetched;
-            } else {
-                inputs[i] = null;
-            }
+            } else inputs[i] = null;
         }
 
         ItemStack crafted = null;
 
         // Go through each slimefun recipe, test and set the ItemStack if found
-        for (Map.Entry<ItemStack[], ItemStack> entry : SupportedRecipes.getRecipes().entrySet()) {
+        for (Map.Entry<ItemStack[], ItemStack> entry : SupportedRecipes.getRecipes().entrySet())
             if (SupportedRecipes.testRecipe(inputs, entry.getKey())) {
                 crafted = entry.getValue().clone();
                 break;
             }
-        }
 
         // If no slimefun recipe found, try a vanilla one
         if (crafted == null) {
@@ -218,38 +206,27 @@ public class NetworkAutoCrafter extends NetworkObject {
 
         // Push item
         final Location location = blockMenu.getLocation().clone().add(0.5, 1.1, 0.5);
-        if (root.isDisplayParticles()) {
-            location.getWorld().spawnParticle(Particle.WAX_OFF, location, 0, 0, 4, 0);
-        }
+        if (root.isDisplayParticles()) location.getWorld().spawnParticle(Particle.WAX_OFF, location, 0, 0, 4, 0);
         blockMenu.pushItem(crafted, OUTPUT_SLOT);
         return true;
     }
 
     private void returnItems(@Nonnull NetworkRoot root, @Nonnull ItemStack[] inputs) {
-        for (ItemStack input : inputs) {
-            if (input != null) {
-                root.addItemStack(input);
-            }
-        }
+        for (ItemStack input : inputs) if (input != null) root.addItemStack(input);
     }
 
     public void releaseCache(@Nonnull BlockMenu blockMenu) {
-        if (blockMenu.hasViewer()) {
-            INSTANCE_MAP.remove(blockMenu.getLocation());
-        }
+        if (blockMenu.hasViewer()) INSTANCE_MAP.remove(blockMenu.getLocation());
     }
 
     public void setCache(@Nonnull BlockMenu blockMenu, @Nonnull BlueprintInstance blueprintInstance) {
-        if (!blockMenu.hasViewer()) {
-            INSTANCE_MAP.putIfAbsent(blockMenu.getLocation().clone(), blueprintInstance);
-        }
+        if (!blockMenu.hasViewer()) INSTANCE_MAP.putIfAbsent(blockMenu.getLocation().clone(), blueprintInstance);
     }
 
 
     @Override
     public void postRegister() {
         new BlockMenuPreset(this.getId(), this.getItemName()) {
-
             @Override
             public void init() {
                 drawBackground(BACKGROUND_SLOTS);
@@ -260,16 +237,15 @@ public class NetworkAutoCrafter extends NetworkObject {
             @Override
             public boolean canOpen(@Nonnull Block block, @Nonnull Player player) {
                 return NetworkSlimefunItems.NETWORK_AUTO_CRAFTER.canUse(player, false)
-                    && Slimefun.getProtectionManager().hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
+                        && Slimefun.getProtectionManager().hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
             }
 
             @Override
             public int[] getSlotsAccessedByItemTransport(ItemTransportFlow flow) {
-                if (NetworkAutoCrafter.this.withholding && flow == ItemTransportFlow.WITHDRAW) {
+                if (NetworkAutoCrafter.this.withholding && flow == ItemTransportFlow.WITHDRAW)
                     return new int[]{OUTPUT_SLOT};
-                }
                 return new int[0];
             }
         };
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkBridge.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkBridge.java
similarity index 78%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkBridge.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkBridge.java
index 154d046..2288cdc 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkBridge.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkBridge.java
@@ -1,14 +1,13 @@
-package io.github.sefiraat.networks.slimefun.network;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
 
-import io.github.sefiraat.networks.network.NodeType;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeType;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import org.bukkit.inventory.ItemStack;
 
 public class NetworkBridge extends NetworkObject {
-
     public NetworkBridge(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, ItemStack recipeOutput) {
         super(itemGroup, item, recipeType, recipe, recipeOutput, NodeType.BRIDGE);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkCell.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkCell.java
similarity index 77%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkCell.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkCell.java
index 54dffab..edef37d 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkCell.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkCell.java
@@ -1,7 +1,7 @@
-package io.github.sefiraat.networks.slimefun.network;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
 
-import io.github.sefiraat.networks.network.NodeType;
-import io.github.sefiraat.networks.slimefun.NetworkSlimefunItems;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeType;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.NetworkSlimefunItems;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -18,29 +18,23 @@ import java.util.ArrayList;
 import java.util.List;
 
 public class NetworkCell extends NetworkObject {
-
     private static final int[] SLOTS;
 
     static {
         List<Integer> integers = new ArrayList<>();
-        for (int i = 0; i < 54; i++) {
-            integers.add(i);
-        }
+        for (int i = 0; i < 54; i++) integers.add(i);
         SLOTS = integers.stream().mapToInt(Integer::intValue).toArray();
     }
 
     public NetworkCell(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe, NodeType.CELL);
 
-        for (int slot : SLOTS) {
-            this.getSlotsToDrop().add(slot);
-        }
+        for (int slot : SLOTS) this.getSlotsToDrop().add(slot);
     }
 
     @Override
     public void postRegister() {
         new BlockMenuPreset(this.getId(), this.getItemName()) {
-
             @Override
             public void init() {
                 setSize(54);
@@ -49,15 +43,13 @@ public class NetworkCell extends NetworkObject {
             @Override
             public boolean canOpen(@Nonnull Block block, @Nonnull Player player) {
                 return NetworkSlimefunItems.NETWORK_CELL.canUse(player, false)
-                    && Slimefun.getProtectionManager().hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
+                        && Slimefun.getProtectionManager().hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
             }
 
             @Override
             public int[] getSlotsAccessedByItemTransport(ItemTransportFlow flow) {
                 return new int[]{0};
             }
-
         };
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkControlV.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkControlV.java
similarity index 71%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkControlV.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkControlV.java
index 3aff871..33e100a 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkControlV.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkControlV.java
@@ -1,15 +1,15 @@
-package io.github.sefiraat.networks.slimefun.network;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
 
 import com.gmail.nossr50.mcMMO;
 import dev.sefiraat.sefilib.misc.ParticleUtils;
 import dev.sefiraat.sefilib.world.LocationUtils;
-import io.github.sefiraat.networks.NetworkStorage;
-import io.github.sefiraat.networks.Networks;
-import io.github.sefiraat.networks.managers.SupportedPluginManager;
-import io.github.sefiraat.networks.network.NodeDefinition;
-import io.github.sefiraat.networks.network.NodeType;
-import io.github.sefiraat.networks.network.stackcaches.ItemRequest;
-import io.github.sefiraat.networks.utils.Theme;
+import id.universenetwork.sfa_loader.addons.networks.NetworkStorage;
+import id.universenetwork.sfa_loader.addons.networks.manager.SupportedPluginManager;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeDefinition;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeType;
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.ItemRequest;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Scheduler;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -20,11 +20,7 @@ import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction
 import io.github.thebusybiscuit.slimefun4.utils.tags.SlimefunTag;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
-import org.bukkit.Bukkit;
-import org.bukkit.Color;
-import org.bukkit.Material;
-import org.bukkit.OfflinePlayer;
-import org.bukkit.Particle;
+import org.bukkit.*;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.inventory.ItemStack;
@@ -36,7 +32,7 @@ import java.util.UUID;
 public class NetworkControlV extends NetworkDirectional {
 
     private static final int[] BACKGROUND_SLOTS = new int[]{
-        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 20, 22, 23, 24, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
+            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 20, 22, 23, 24, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
     };
     private static final int[] TEMPLATE_BACKGROUND = new int[]{16};
     private static final int TEMPLATE_SLOT = 25;
@@ -49,7 +45,7 @@ public class NetworkControlV extends NetworkDirectional {
     private static final int REQUIRED_POWER = 100;
 
     public static final CustomItemStack TEMPLATE_BACKGROUND_STACK = new CustomItemStack(
-        Material.BLUE_STAINED_GLASS_PANE, Theme.PASSIVE + "Paste items matching template"
+            Material.BLUE_STAINED_GLASS_PANE, Theme.PASSIVE + "Paste items matching template"
     );
 
     public NetworkControlV(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
@@ -60,77 +56,55 @@ public class NetworkControlV extends NetworkDirectional {
     @Override
     protected void onTick(@Nullable BlockMenu blockMenu, @Nonnull Block block) {
         super.onTick(blockMenu, block);
-        if (blockMenu != null) {
-            tryPasteBlock(blockMenu);
-        }
+        if (blockMenu != null) tryPasteBlock(blockMenu);
     }
 
     private void tryPasteBlock(@Nonnull BlockMenu blockMenu) {
         final NodeDefinition definition = NetworkStorage.getAllNetworkObjects().get(blockMenu.getLocation());
 
-        if (definition == null || definition.getNode() == null) {
-            return;
-        }
+        if (definition == null || definition.getNode() == null) return;
 
-        if (definition.getNode().getRoot().getRootPower() < REQUIRED_POWER) {
-            return;
-        }
+        if (definition.getNode().getRoot().getRootPower() < REQUIRED_POWER) return;
 
         final BlockFace direction = getCurrentDirection(blockMenu);
 
-        if (direction == BlockFace.SELF) {
-            return;
-        }
+        if (direction == BlockFace.SELF) return;
 
         final Block targetBlock = blockMenu.getBlock().getRelative(direction);
         final Material material = targetBlock.getType();
 
-        if (!material.isAir()) {
-            return;
-        }
+        if (!material.isAir()) return;
 
         final ItemStack templateStack = blockMenu.getItemInSlot(TEMPLATE_SLOT);
 
-        if (templateStack == null) {
-            return;
-        }
+        if (templateStack == null) return;
 
         final Material templateMaterial = templateStack.getType();
 
-        if (!templateMaterial.isBlock() || SlimefunTag.SENSITIVE_MATERIALS.isTagged(templateMaterial)) {
-            return;
-        }
+        if (!templateMaterial.isBlock() || SlimefunTag.SENSITIVE_MATERIALS.isTagged(templateMaterial)) return;
 
-        final SlimefunItem slimefunItem = SlimefunItem.getByItem(templateStack);
+        final SlimefunItem slimefunItem = getByItem(templateStack);
 
-        if (slimefunItem != null) {
-            return;
-        }
+        if (slimefunItem != null) return;
 
         final UUID uuid = UUID.fromString(BlockStorage.getLocationInfo(blockMenu.getLocation(), OWNER_KEY));
         final OfflinePlayer offlinePlayer = Bukkit.getOfflinePlayer(uuid);
 
-        if (!Slimefun.getProtectionManager().hasPermission(offlinePlayer, targetBlock, Interaction.PLACE_BLOCK)) {
-            return;
-        }
+        if (!Slimefun.getProtectionManager().hasPermission(offlinePlayer, targetBlock, Interaction.PLACE_BLOCK)) return;
 
         final ItemRequest request = new ItemRequest(templateStack.clone(), 1);
         final ItemStack fetchedStack = definition.getNode().getRoot().getItemStack(request);
 
-        if (fetchedStack == null || fetchedStack.getAmount() < 1) {
-            return;
-        }
+        if (fetchedStack == null || fetchedStack.getAmount() < 1) return;
 
-        Bukkit.getScheduler().runTask(Networks.getInstance(), bukkitTask -> {
+        Scheduler.run(() -> {
             targetBlock.setType(fetchedStack.getType(), true);
-            if (SupportedPluginManager.getInstance().isMcMMO()) {
-                mcMMO.getPlaceStore().setTrue(targetBlock);
-            }
+            if (SupportedPluginManager.getInstance().isMcMMO()) mcMMO.getPlaceStore().setTrue(targetBlock);
             ParticleUtils.displayParticleRandomly(
-                LocationUtils.centre(targetBlock.getLocation()),
-                Particle.ELECTRIC_SPARK,
-                1,
-                5
+                    LocationUtils.centre(targetBlock.getLocation()),
+                    Particle.ELECTRIC_SPARK,
+                    1,
+                    5
             );
         });
     }
@@ -192,4 +166,4 @@ public class NetworkControlV extends NetworkDirectional {
     protected Particle.DustOptions getDustOptions() {
         return new Particle.DustOptions(Color.MAROON, 1);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkControlX.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkControlX.java
similarity index 70%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkControlX.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkControlX.java
index a1b7642..f24cc17 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkControlX.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkControlX.java
@@ -1,12 +1,12 @@
-package io.github.sefiraat.networks.slimefun.network;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
 
 import dev.sefiraat.sefilib.misc.ParticleUtils;
 import dev.sefiraat.sefilib.world.LocationUtils;
-import io.github.sefiraat.networks.NetworkStorage;
-import io.github.sefiraat.networks.Networks;
-import io.github.sefiraat.networks.network.NodeDefinition;
-import io.github.sefiraat.networks.network.NodeType;
-import io.github.sefiraat.networks.utils.Theme;
+import id.universenetwork.sfa_loader.addons.networks.NetworkStorage;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeDefinition;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeType;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Scheduler;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -18,11 +18,7 @@ import io.github.thebusybiscuit.slimefun4.libraries.paperlib.PaperLib;
 import io.github.thebusybiscuit.slimefun4.libraries.paperlib.features.blockstatesnapshot.BlockStateSnapshotResult;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
-import org.bukkit.Bukkit;
-import org.bukkit.Color;
-import org.bukkit.Material;
-import org.bukkit.OfflinePlayer;
-import org.bukkit.Particle;
+import org.bukkit.*;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.inventory.InventoryHolder;
@@ -33,9 +29,8 @@ import javax.annotation.Nullable;
 import java.util.UUID;
 
 public class NetworkControlX extends NetworkDirectional {
-
     private static final int[] BACKGROUND_SLOTS = new int[]{
-        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 20, 22, 23, 24, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
+            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 20, 22, 23, 24, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
     };
     private static final int[] TEMPLATE_BACKGROUND = new int[]{16};
     private static final int TEMPLATE_SLOT = 25;
@@ -48,9 +43,9 @@ public class NetworkControlX extends NetworkDirectional {
     private static final int REQUIRED_POWER = 100;
 
     public static final CustomItemStack TEMPLATE_BACKGROUND_STACK = new CustomItemStack(
-        Material.BLUE_STAINED_GLASS_PANE,
-        Theme.PASSIVE + "Cut items matching template.",
-        Theme.PASSIVE + "Leaving blank will cut anything"
+            Material.BLUE_STAINED_GLASS_PANE,
+            Theme.PASSIVE + "Cut items matching template.",
+            Theme.PASSIVE + "Leaving blank will cut anything"
     );
     private static final Particle.DustOptions DUST_OPTIONS = new Particle.DustOptions(Color.GRAY, 1);
 
@@ -61,79 +56,58 @@ public class NetworkControlX extends NetworkDirectional {
     @Override
     protected void onTick(@Nullable BlockMenu blockMenu, @Nonnull Block block) {
         super.onTick(blockMenu, block);
-        if (blockMenu != null) {
-            tryBreakBlock(blockMenu);
-        }
+        if (blockMenu != null) tryBreakBlock(blockMenu);
     }
 
     private void tryBreakBlock(@Nonnull BlockMenu blockMenu) {
         final NodeDefinition definition = NetworkStorage.getAllNetworkObjects().get(blockMenu.getLocation());
 
-        if (definition == null || definition.getNode() == null) {
-            return;
-        }
+        if (definition == null || definition.getNode() == null) return;
 
-        if (definition.getNode().getRoot().getRootPower() < REQUIRED_POWER) {
-            return;
-        }
+        if (definition.getNode().getRoot().getRootPower() < REQUIRED_POWER) return;
 
         final BlockFace direction = getCurrentDirection(blockMenu);
 
-        if (direction == BlockFace.SELF) {
-            return;
-        }
+        if (direction == BlockFace.SELF) return;
 
         final Block targetBlock = blockMenu.getBlock().getRelative(direction);
         final Material material = targetBlock.getType();
 
-        if (material.getHardness() < 0 || material.isAir()) {
-            return;
-        }
+        if (material.getHardness() < 0 || material.isAir()) return;
 
         final SlimefunItem slimefunItem = BlockStorage.check(targetBlock);
 
-        if (slimefunItem != null) {
-            return;
-        }
+        if (slimefunItem != null) return;
 
         final ItemStack templateStack = blockMenu.getItemInSlot(TEMPLATE_SLOT);
         boolean mustMatch = templateStack != null && !templateStack.getType().isAir();
 
         if ((mustMatch && (targetBlock.getType() != templateStack.getType()))
-            || (SlimefunItem.getByItem(templateStack) != null)
-        ) {
-            return;
-        }
+                || (getByItem(templateStack) != null)) return;
 
         final UUID uuid = UUID.fromString(BlockStorage.getLocationInfo(blockMenu.getLocation(), OWNER_KEY));
         final OfflinePlayer offlinePlayer = Bukkit.getOfflinePlayer(uuid);
 
-        if (!Slimefun.getProtectionManager().hasPermission(offlinePlayer, targetBlock, Interaction.BREAK_BLOCK)) {
-            return;
-        }
+        if (!Slimefun.getProtectionManager().hasPermission(offlinePlayer, targetBlock, Interaction.BREAK_BLOCK)) return;
 
         final ItemStack resultStack = new ItemStack(material, 1);
 
         definition.getNode().getRoot().addItemStack(resultStack);
 
-        if (resultStack.getAmount() == 0) {
-            Bukkit.getScheduler().runTask(Networks.getInstance(), bukkitTask -> {
-                final BlockStateSnapshotResult blockState = PaperLib.getBlockState(targetBlock, true);
+        if (resultStack.getAmount() == 0) Scheduler.run(() -> {
+            final BlockStateSnapshotResult blockState = PaperLib.getBlockState(targetBlock, true);
 
-                if (blockState.getState() instanceof InventoryHolder) {
-                    return;
-                }
+            if (blockState.getState() instanceof InventoryHolder) return;
 
-                targetBlock.setType(Material.AIR, true);
-                ParticleUtils.displayParticleRandomly(
+            targetBlock.setType(Material.AIR, true);
+            ParticleUtils.displayParticleRandomly(
                     LocationUtils.centre(targetBlock.getLocation()),
                     1,
                     5,
                     DUST_OPTIONS
-                );
-                definition.getNode().getRoot().removeRootPower(REQUIRED_POWER);
-            });
-        }
+            );
+            definition.getNode().getRoot().removeRootPower(REQUIRED_POWER);
+        });
     }
 
     @Nonnull
@@ -193,4 +167,4 @@ public class NetworkControlX extends NetworkDirectional {
     protected Particle.DustOptions getDustOptions() {
         return DUST_OPTIONS;
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkController.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkController.java
similarity index 64%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkController.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkController.java
index eeb1f04..13e076f 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkController.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkController.java
@@ -1,9 +1,9 @@
-package io.github.sefiraat.networks.slimefun.network;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
 
-import io.github.sefiraat.networks.NetworkStorage;
-import io.github.sefiraat.networks.network.NetworkNode;
-import io.github.sefiraat.networks.network.NetworkRoot;
-import io.github.sefiraat.networks.network.NodeType;
+import id.universenetwork.sfa_loader.addons.networks.NetworkStorage;
+import id.universenetwork.sfa_loader.addons.networks.network.NetworkNode;
+import id.universenetwork.sfa_loader.addons.networks.network.NetworkRoot;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeType;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
@@ -24,7 +24,6 @@ import java.util.Map;
 import java.util.Set;
 
 public class NetworkController extends NetworkObject {
-
     private static final String CRAYON = "crayon";
     private static final Map<Location, NetworkRoot> NETWORKS = new HashMap<>();
     private static final Set<Location> CRAYONS = new HashSet<>();
@@ -39,40 +38,36 @@ public class NetworkController extends NetworkObject {
         addItemSetting(maxNodes);
 
         addItemHandler(
-            new BlockTicker() {
-                @Override
-                public boolean isSynchronized() {
-                    return false;
-                }
+                new BlockTicker() {
+                    @Override
+                    public boolean isSynchronized() {
+                        return false;
+                    }
 
-                @Override
-                public void tick(Block block, SlimefunItem item, Config data) {
+                    @Override
+                    public void tick(Block block, SlimefunItem item, Config data) {
 
-                    if (!firstTickMap.containsKey(block.getLocation())) {
-                        onFirstTick(block, data);
-                        firstTickMap.put(block.getLocation(), true);
-                    }
+                        if (!firstTickMap.containsKey(block.getLocation())) {
+                            onFirstTick(block, data);
+                            firstTickMap.put(block.getLocation(), true);
+                        }
 
-                    addToRegistry(block);
-                    NetworkRoot networkRoot = new NetworkRoot(block.getLocation(), NodeType.CONTROLLER, maxNodes.getValue());
-                    networkRoot.addAllChildren();
+                        addToRegistry(block);
+                        NetworkRoot networkRoot = new NetworkRoot(block.getLocation(), NodeType.CONTROLLER, maxNodes.getValue());
+                        networkRoot.addAllChildren();
 
-                    boolean crayon = CRAYONS.contains(block.getLocation());
-                    if (crayon) {
-                        networkRoot.setDisplayParticles(true);
-                    }
+                        boolean crayon = CRAYONS.contains(block.getLocation());
+                        if (crayon) networkRoot.setDisplayParticles(true);
 
-                    NETWORKS.put(block.getLocation(), networkRoot);
+                        NETWORKS.put(block.getLocation(), networkRoot);
+                    }
                 }
-            }
         );
     }
 
     private void onFirstTick(@Nonnull Block block, @Nonnull Config data) {
         final String crayon = data.getString(CRAYON);
-        if (Boolean.parseBoolean(crayon)) {
-            CRAYONS.add(block.getLocation());
-        }
+        if (Boolean.parseBoolean(crayon)) CRAYONS.add(block.getLocation());
     }
 
     public static Map<Location, NetworkRoot> getNetworks() {
@@ -98,8 +93,7 @@ public class NetworkController extends NetworkObject {
     }
 
     public static void wipeNetwork(@Nonnull Location location) {
-        for (NetworkNode node : NETWORKS.remove(location).getChildrenNodes()) {
+        for (NetworkNode node : NETWORKS.remove(location).getChildrenNodes())
             NetworkStorage.removeNode(node.getNodePosition());
-        }
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkDirectional.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkDirectional.java
similarity index 62%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkDirectional.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkDirectional.java
index 9ae1582..e50fbd4 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkDirectional.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkDirectional.java
@@ -1,9 +1,9 @@
-package io.github.sefiraat.networks.slimefun.network;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
 
-import io.github.sefiraat.networks.NetworkStorage;
-import io.github.sefiraat.networks.network.NodeType;
-import io.github.sefiraat.networks.utils.NetworkUtils;
-import io.github.sefiraat.networks.utils.Theme;
+import id.universenetwork.sfa_loader.addons.networks.NetworkStorage;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeType;
+import id.universenetwork.sfa_loader.addons.networks.utils.NetworkUtils;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
@@ -40,14 +40,9 @@ import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 import javax.annotation.OverridingMethodsMustInvokeSuper;
 import javax.annotation.ParametersAreNonnullByDefault;
-import java.util.EnumSet;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
+import java.util.*;
 
 public abstract class NetworkDirectional extends NetworkObject {
-
     private static final int NORTH_SLOT = 12;
     private static final int SOUTH_SLOT = 30;
     private static final int EAST_SLOT = 22;
@@ -59,12 +54,12 @@ public abstract class NetworkDirectional extends NetworkObject {
     protected static final String OWNER_KEY = "uuid";
 
     private static final Set<BlockFace> VALID_FACES = EnumSet.of(
-        BlockFace.UP,
-        BlockFace.DOWN,
-        BlockFace.NORTH,
-        BlockFace.EAST,
-        BlockFace.SOUTH,
-        BlockFace.WEST
+            BlockFace.UP,
+            BlockFace.DOWN,
+            BlockFace.NORTH,
+            BlockFace.EAST,
+            BlockFace.SOUTH,
+            BlockFace.WEST
     );
 
     private static final Map<Location, BlockFace> SELECTED_DIRECTION_MAP = new HashMap<>();
@@ -77,44 +72,41 @@ public abstract class NetworkDirectional extends NetworkObject {
         addItemSetting(this.tickRate);
 
         addItemHandler(
-            new BlockPlaceHandler(false) {
-                @Override
-                public void onPlayerPlace(@Nonnull BlockPlaceEvent event) {
-                    NetworkStorage.removeNode(event.getBlock().getLocation());
-                    BlockStorage.addBlockInfo(event.getBlock(), OWNER_KEY, event.getPlayer().getUniqueId().toString());
-                    BlockStorage.addBlockInfo(event.getBlock(), DIRECTION, BlockFace.SELF.name());
-                    NetworkUtils.applyConfig(NetworkDirectional.this, BlockStorage.getInventory(event.getBlock()), event.getPlayer());
-                }
-            },
-            new BlockTicker() {
-
-                private int tick = 1;
+                new BlockPlaceHandler(false) {
+                    @Override
+                    public void onPlayerPlace(@Nonnull BlockPlaceEvent event) {
+                        NetworkStorage.removeNode(event.getBlock().getLocation());
+                        BlockStorage.addBlockInfo(event.getBlock(), OWNER_KEY, event.getPlayer().getUniqueId().toString());
+                        BlockStorage.addBlockInfo(event.getBlock(), DIRECTION, BlockFace.SELF.name());
+                        NetworkUtils.applyConfig(NetworkDirectional.this, BlockStorage.getInventory(event.getBlock()), event.getPlayer());
+                    }
+                },
+                new BlockTicker() {
+                    private int tick = 1;
 
-                @Override
-                public boolean isSynchronized() {
-                    return runSync();
-                }
+                    @Override
+                    public boolean isSynchronized() {
+                        return runSync();
+                    }
 
-                @Override
-                public void tick(Block block, SlimefunItem slimefunItem, Config config) {
-                    if (tick <= 1) {
-                        final BlockMenu blockMenu = BlockStorage.getInventory(block);
-                        onTick(blockMenu, block);
+                    @Override
+                    public void tick(Block block, SlimefunItem slimefunItem, Config config) {
+                        if (tick <= 1) {
+                            final BlockMenu blockMenu = BlockStorage.getInventory(block);
+                            onTick(blockMenu, block);
+                        }
                     }
-                }
 
-                @Override
-                public void uniqueTick() {
-                    tick = tick <= 1 ? tickRate.getValue() : tick - 1;
+                    @Override
+                    public void uniqueTick() {
+                        tick = tick <= 1 ? tickRate.getValue() : tick - 1;
+                    }
                 }
-            }
         );
     }
 
     private void updateGui(@Nullable BlockMenu blockMenu) {
-        if (blockMenu == null || !blockMenu.hasViewer()) {
-            return;
-        }
+        if (blockMenu == null || !blockMenu.hasViewer()) return;
 
         BlockFace direction = getCurrentDirection(blockMenu);
 
@@ -123,24 +115,50 @@ public abstract class NetworkDirectional extends NetworkObject {
             final SlimefunItem slimefunItem = BlockStorage.check(block);
             if (slimefunItem != null) {
                 switch (blockFace) {
-                    case NORTH -> blockMenu.replaceExistingItem(getNorthSlot(), getDirectionalSlotPane(blockFace, slimefunItem, blockFace == direction));
-                    case SOUTH -> blockMenu.replaceExistingItem(getSouthSlot(), getDirectionalSlotPane(blockFace, slimefunItem, blockFace == direction));
-                    case EAST -> blockMenu.replaceExistingItem(getEastSlot(), getDirectionalSlotPane(blockFace, slimefunItem, blockFace == direction));
-                    case WEST -> blockMenu.replaceExistingItem(getWestSlot(), getDirectionalSlotPane(blockFace, slimefunItem, blockFace == direction));
-                    case UP -> blockMenu.replaceExistingItem(getUpSlot(), getDirectionalSlotPane(blockFace, slimefunItem, blockFace == direction));
-                    case DOWN -> blockMenu.replaceExistingItem(getDownSlot(), getDirectionalSlotPane(blockFace, slimefunItem, blockFace == direction));
-                    default -> throw new IllegalStateException("Unexpected value: " + blockFace);
+                    case NORTH:
+                        blockMenu.replaceExistingItem(getNorthSlot(), getDirectionalSlotPane(blockFace, slimefunItem, blockFace == direction));
+                        break;
+                    case SOUTH:
+                        blockMenu.replaceExistingItem(getSouthSlot(), getDirectionalSlotPane(blockFace, slimefunItem, blockFace == direction));
+                        break;
+                    case EAST:
+                        blockMenu.replaceExistingItem(getEastSlot(), getDirectionalSlotPane(blockFace, slimefunItem, blockFace == direction));
+                        break;
+                    case WEST:
+                        blockMenu.replaceExistingItem(getWestSlot(), getDirectionalSlotPane(blockFace, slimefunItem, blockFace == direction));
+                        break;
+                    case UP:
+                        blockMenu.replaceExistingItem(getUpSlot(), getDirectionalSlotPane(blockFace, slimefunItem, blockFace == direction));
+                        break;
+                    case DOWN:
+                        blockMenu.replaceExistingItem(getDownSlot(), getDirectionalSlotPane(blockFace, slimefunItem, blockFace == direction));
+                        break;
+                    default:
+                        throw new IllegalStateException("Unexpected value: " + blockFace);
                 }
             } else {
                 final Material material = block.getType();
                 switch (blockFace) {
-                    case NORTH -> blockMenu.replaceExistingItem(getNorthSlot(), getDirectionalSlotPane(blockFace, material, blockFace == direction));
-                    case SOUTH -> blockMenu.replaceExistingItem(getSouthSlot(), getDirectionalSlotPane(blockFace, material, blockFace == direction));
-                    case EAST -> blockMenu.replaceExistingItem(getEastSlot(), getDirectionalSlotPane(blockFace, material, blockFace == direction));
-                    case WEST -> blockMenu.replaceExistingItem(getWestSlot(), getDirectionalSlotPane(blockFace, material, blockFace == direction));
-                    case UP -> blockMenu.replaceExistingItem(getUpSlot(), getDirectionalSlotPane(blockFace, material, blockFace == direction));
-                    case DOWN -> blockMenu.replaceExistingItem(getDownSlot(), getDirectionalSlotPane(blockFace, material, blockFace == direction));
-                    default -> throw new IllegalStateException("Unexpected value: " + blockFace);
+                    case NORTH:
+                        blockMenu.replaceExistingItem(getNorthSlot(), getDirectionalSlotPane(blockFace, material, blockFace == direction));
+                        break;
+                    case SOUTH:
+                        blockMenu.replaceExistingItem(getSouthSlot(), getDirectionalSlotPane(blockFace, material, blockFace == direction));
+                        break;
+                    case EAST:
+                        blockMenu.replaceExistingItem(getEastSlot(), getDirectionalSlotPane(blockFace, material, blockFace == direction));
+                        break;
+                    case WEST:
+                        blockMenu.replaceExistingItem(getWestSlot(), getDirectionalSlotPane(blockFace, material, blockFace == direction));
+                        break;
+                    case UP:
+                        blockMenu.replaceExistingItem(getUpSlot(), getDirectionalSlotPane(blockFace, material, blockFace == direction));
+                        break;
+                    case DOWN:
+                        blockMenu.replaceExistingItem(getDownSlot(), getDirectionalSlotPane(blockFace, material, blockFace == direction));
+                        break;
+                    default:
+                        throw new IllegalStateException("Unexpected value: " + blockFace);
                 }
             }
         }
@@ -166,14 +184,12 @@ public abstract class NetworkDirectional extends NetworkObject {
     @Override
     public void postRegister() {
         new BlockMenuPreset(this.getId(), this.getItemName()) {
-
             @Override
             public void init() {
                 drawBackground(getBackgroundSlots());
 
-                if (getOtherBackgroundSlots() != null && getOtherBackgroundStack() != null) {
+                if (getOtherBackgroundSlots() != null && getOtherBackgroundStack() != null)
                     drawBackground(getOtherBackgroundStack(), getOtherBackgroundSlots());
-                }
 
                 addItem(getNorthSlot(), getDirectionalSlotPane(BlockFace.NORTH, Material.AIR, false), (player, i, itemStack, clickAction) -> false);
                 addItem(getSouthSlot(), getDirectionalSlotPane(BlockFace.SOUTH, Material.AIR, false), (player, i, itemStack, clickAction) -> false);
@@ -192,49 +208,41 @@ public abstract class NetworkDirectional extends NetworkObject {
                     // This likely means a block was placed before I made it directional
                     direction = BlockFace.SELF;
                     BlockStorage.addBlockInfo(blockMenu.getLocation(), DIRECTION, BlockFace.SELF.name());
-                } else {
-                    direction = BlockFace.valueOf(string);
-                }
+                } else direction = BlockFace.valueOf(string);
                 SELECTED_DIRECTION_MAP.put(blockMenu.getLocation().clone(), direction);
 
                 blockMenu.addMenuClickHandler(getNorthSlot(), (player, i, itemStack, clickAction) ->
-                    directionClick(player, clickAction, blockMenu, BlockFace.NORTH));
+                        directionClick(player, clickAction, blockMenu, BlockFace.NORTH));
                 blockMenu.addMenuClickHandler(getSouthSlot(), (player, i, itemStack, clickAction) ->
-                    directionClick(player, clickAction, blockMenu, BlockFace.SOUTH));
+                        directionClick(player, clickAction, blockMenu, BlockFace.SOUTH));
                 blockMenu.addMenuClickHandler(getEastSlot(), (player, i, itemStack, clickAction) ->
-                    directionClick(player, clickAction, blockMenu, BlockFace.EAST));
+                        directionClick(player, clickAction, blockMenu, BlockFace.EAST));
                 blockMenu.addMenuClickHandler(getWestSlot(), (player, i, itemStack, clickAction) ->
-                    directionClick(player, clickAction, blockMenu, BlockFace.WEST));
+                        directionClick(player, clickAction, blockMenu, BlockFace.WEST));
                 blockMenu.addMenuClickHandler(getUpSlot(), (player, i, itemStack, clickAction) ->
-                    directionClick(player, clickAction, blockMenu, BlockFace.UP));
+                        directionClick(player, clickAction, blockMenu, BlockFace.UP));
                 blockMenu.addMenuClickHandler(getDownSlot(), (player, i, itemStack, clickAction) ->
-                    directionClick(player, clickAction, blockMenu, BlockFace.DOWN));
+                        directionClick(player, clickAction, blockMenu, BlockFace.DOWN));
             }
 
             @Override
             public boolean canOpen(@Nonnull Block block, @Nonnull Player player) {
                 return this.getSlimefunItem().canUse(player, false)
-                    && Slimefun.getProtectionManager().hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
+                        && Slimefun.getProtectionManager().hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
             }
 
             @Override
             public int[] getSlotsAccessedByItemTransport(ItemTransportFlow flow) {
-                if (flow == ItemTransportFlow.INSERT) {
-                    return getInputSlots();
-                } else {
-                    return getOutputSlots();
-                }
+                if (flow == ItemTransportFlow.INSERT) return getInputSlots();
+                else return getOutputSlots();
             }
         };
     }
 
     @ParametersAreNonnullByDefault
     public boolean directionClick(Player player, ClickAction action, BlockMenu blockMenu, BlockFace blockFace) {
-        if (action.isShiftClicked()) {
-            openDirection(player, blockMenu, blockFace);
-        } else {
-            setDirection(blockMenu, blockFace);
-        }
+        if (action.isShiftClicked()) openDirection(player, blockMenu, blockFace);
+        else setDirection(blockMenu, blockFace);
         return false;
     }
 
@@ -245,10 +253,8 @@ public abstract class NetworkDirectional extends NetworkObject {
             final Location location = targetMenu.getLocation();
             final SlimefunItem item = BlockStorage.check(location);
             if (item.canUse(player, true)
-                && Slimefun.getProtectionManager().hasPermission(player, blockMenu.getLocation(), Interaction.INTERACT_BLOCK)
-            ) {
-                targetMenu.open(player);
-            }
+                    && Slimefun.getProtectionManager().hasPermission(player, blockMenu.getLocation(), Interaction.INTERACT_BLOCK)
+            ) targetMenu.open(player);
         }
     }
 
@@ -261,7 +267,7 @@ public abstract class NetworkDirectional extends NetworkObject {
     @Nonnull
     protected int[] getBackgroundSlots() {
         return new int[]{
-            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 21, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
+                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 21, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
         };
     }
 
@@ -303,24 +309,28 @@ public abstract class NetworkDirectional extends NetworkObject {
         return new int[]{};
     }
 
-    public int[] getInputSlots() { return new int[0]; }
+    public int[] getInputSlots() {
+        return new int[0];
+    }
 
-    public int[] getOutputSlots() { return new int[0]; }
+    public int[] getOutputSlots() {
+        return new int[0];
+    }
 
     @Nonnull
     public static ItemStack getDirectionalSlotPane(@Nonnull BlockFace blockFace, @Nonnull SlimefunItem slimefunItem, boolean active) {
         final ItemStack displayStack = new CustomItemStack(
-            slimefunItem.getItem(),
-            Theme.PASSIVE + "Direction " + blockFace.name() + " (" + ChatColor.stripColor(slimefunItem.getItemName()) + ")"
+                slimefunItem.getItem(),
+                Theme.PASSIVE + "Direction " + blockFace.name() + " (" + ChatColor.stripColor(slimefunItem.getItemName()) + ")"
         );
         final ItemMeta itemMeta = displayStack.getItemMeta();
         if (active) {
             itemMeta.addEnchant(Enchantment.LUCK, 1, true);
             itemMeta.addItemFlags(ItemFlag.HIDE_ENCHANTS);
         }
-        itemMeta.setLore(List.of(
-            Theme.CLICK_INFO + "Left Click: " + Theme.PASSIVE + "Set Direction",
-            Theme.CLICK_INFO + "Shift Left Click: " + Theme.PASSIVE + "Open Target Block"
+        itemMeta.setLore(Arrays.asList(
+                Theme.CLICK_INFO + "Left Click: " + Theme.PASSIVE + "Set Direction",
+                Theme.CLICK_INFO + "Shift Left Click: " + Theme.PASSIVE + "Open Target Block"
         ));
         displayStack.setItemMeta(itemMeta);
         return displayStack;
@@ -330,25 +340,25 @@ public abstract class NetworkDirectional extends NetworkObject {
     public static ItemStack getDirectionalSlotPane(@Nonnull BlockFace blockFace, @Nonnull Material blockMaterial, boolean active) {
         if (blockMaterial.isItem() && !blockMaterial.isAir()) {
             final ItemStack displayStack = new CustomItemStack(
-                blockMaterial,
-                Theme.PASSIVE + "Direction " + blockFace.name() + " (" + blockMaterial.name() + ")"
+                    blockMaterial,
+                    Theme.PASSIVE + "Direction " + blockFace.name() + " (" + blockMaterial.name() + ")"
             );
             final ItemMeta itemMeta = displayStack.getItemMeta();
             if (active) {
                 itemMeta.addEnchant(Enchantment.LUCK, 1, true);
                 itemMeta.addItemFlags(ItemFlag.HIDE_ENCHANTS);
             }
-            itemMeta.setLore(List.of(
-                Theme.CLICK_INFO + "Left Click: " + Theme.PASSIVE + "Set Direction",
-                Theme.CLICK_INFO + "Shift Left Click: " + Theme.PASSIVE + "Open Target Block"
+            itemMeta.setLore(Arrays.asList(
+                    Theme.CLICK_INFO + "Left Click: " + Theme.PASSIVE + "Set Direction",
+                    Theme.CLICK_INFO + "Shift Left Click: " + Theme.PASSIVE + "Open Target Block"
             ));
             displayStack.setItemMeta(itemMeta);
             return displayStack;
         } else {
             Material material = active ? Material.GREEN_STAINED_GLASS_PANE : Material.RED_STAINED_GLASS_PANE;
             return new CustomItemStack(
-                material,
-                ChatColor.GRAY + "Set direction: " + blockFace.name()
+                    material,
+                    ChatColor.GRAY + "Set direction: " + blockFace.name()
             );
         }
     }
@@ -368,4 +378,4 @@ public abstract class NetworkDirectional extends NetworkObject {
         final Location displayLocation = location.clone().add(0.5, 0.5, 0.5).add(faceVector);
         location.getWorld().spawnParticle(Particle.REDSTONE, displayLocation, 0, pushVector.getX(), pushVector.getY(), pushVector.getZ(), getDustOptions());
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkEncoder.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkEncoder.java
similarity index 78%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkEncoder.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkEncoder.java
index e6137bf..91c72ad 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkEncoder.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkEncoder.java
@@ -1,16 +1,15 @@
-package io.github.sefiraat.networks.slimefun.network;
-
-import io.github.sefiraat.networks.NetworkStorage;
-import io.github.sefiraat.networks.network.NetworkRoot;
-import io.github.sefiraat.networks.network.NodeDefinition;
-import io.github.sefiraat.networks.network.NodeType;
-import io.github.sefiraat.networks.network.SupportedRecipes;
-import io.github.sefiraat.networks.slimefun.NetworkSlimefunItems;
-import io.github.sefiraat.networks.slimefun.tools.CraftingBlueprint;
-import io.github.sefiraat.networks.utils.StackUtils;
-import io.github.sefiraat.networks.utils.Theme;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
+
+import id.universenetwork.sfa_loader.addons.networks.NetworkStorage;
+import id.universenetwork.sfa_loader.addons.networks.network.NetworkRoot;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeDefinition;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeType;
+import id.universenetwork.sfa_loader.addons.networks.network.SupportedRecipes;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.NetworkSlimefunItems;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.tools.CraftingBlueprint;
+import id.universenetwork.sfa_loader.addons.networks.utils.StackUtils;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
@@ -29,17 +28,16 @@ import javax.annotation.Nonnull;
 import java.util.Map;
 
 public class NetworkEncoder extends NetworkObject {
-
     private static final int[] BACKGROUND = new int[]{
-        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 17, 18, 20, 24, 25, 26, 27, 28, 29, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
+            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15, 17, 18, 20, 24, 25, 26, 27, 28, 29, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
     };
 
     private static final int[] RECIPE_SLOTS = new int[]{
-        12, 13, 14, 21, 22, 23, 30, 31, 32
+            12, 13, 14, 21, 22, 23, 30, 31, 32
     };
 
     private static final int[] BLUEPRINT_BACK = new int[]{
-        10, 28
+            10, 28
     };
 
     private static final int BLANK_BLUEPRINT_SLOT = 19;
@@ -49,11 +47,11 @@ public class NetworkEncoder extends NetworkObject {
     private static final int CHARGE_COST = 20000;
 
     public static final CustomItemStack BLUEPRINT_BACK_STACK = new CustomItemStack(
-        Material.BLUE_STAINED_GLASS_PANE, Theme.PASSIVE + "Blank Blueprint"
+            Material.BLUE_STAINED_GLASS_PANE, Theme.PASSIVE + "Blank Blueprint"
     );
 
     public static final CustomItemStack ENCODE_STACK = new CustomItemStack(
-        Material.BLUE_STAINED_GLASS_PANE, Theme.PASSIVE + "Click to encode when valid"
+            Material.BLUE_STAINED_GLASS_PANE, Theme.PASSIVE + "Click to encode when valid"
     );
 
     public NetworkEncoder(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
@@ -69,7 +67,6 @@ public class NetworkEncoder extends NetworkObject {
     @Override
     public void postRegister() {
         new BlockMenuPreset(this.getId(), this.getItemName()) {
-
             @Override
             public void init() {
                 drawBackground(BACKGROUND);
@@ -89,7 +86,7 @@ public class NetworkEncoder extends NetworkObject {
             @Override
             public boolean canOpen(@Nonnull Block block, @Nonnull Player player) {
                 return NetworkSlimefunItems.NETWORK_RECIPE_ENCODER.canUse(player, false)
-                    && Slimefun.getProtectionManager().hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
+                        && Slimefun.getProtectionManager().hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
             }
 
             @Override
@@ -102,9 +99,7 @@ public class NetworkEncoder extends NetworkObject {
     public void tryEncode(@Nonnull Player player, @Nonnull BlockMenu blockMenu) {
         final NodeDefinition definition = NetworkStorage.getAllNetworkObjects().get(blockMenu.getLocation());
 
-        if (definition == null || definition.getNode() == null) {
-            return;
-        }
+        if (definition == null || definition.getNode() == null) return;
 
         final NetworkRoot root = definition.getNode().getRoot();
         final long networkCharge = root.getRootPower();
@@ -123,7 +118,7 @@ public class NetworkEncoder extends NetworkObject {
 
         ItemStack blueprint = blockMenu.getItemInSlot(BLANK_BLUEPRINT_SLOT);
 
-        if (!(SlimefunItem.getByItem(blueprint) instanceof CraftingBlueprint)) {
+        if (!(getByItem(blueprint) instanceof CraftingBlueprint)) {
             player.sendMessage(Theme.WARNING + "You need to provide a blank blueprint");
             return;
         }
@@ -143,17 +138,14 @@ public class NetworkEncoder extends NetworkObject {
         ItemStack crafted = null;
 
         // Go through each slimefun recipe, test and set the ItemStack if found
-        for (Map.Entry<ItemStack[], ItemStack> entry : SupportedRecipes.getRecipes().entrySet()) {
+        for (Map.Entry<ItemStack[], ItemStack> entry : SupportedRecipes.getRecipes().entrySet())
             if (SupportedRecipes.testRecipe(inputs, entry.getKey())) {
                 crafted = new ItemStack(entry.getValue().clone());
                 break;
             }
-        }
 
         // If no slimefun recipe found, try a vanilla one
-        if (crafted == null) {
-            crafted = Bukkit.craftItem(inputs.clone(), player.getWorld(), player);
-        }
+        if (crafted == null) crafted = Bukkit.craftItem(inputs.clone(), player.getWorld(), player);
 
         // If no item crafted OR result doesn't fit, escape
         if (crafted.getType() == Material.AIR) {
@@ -168,12 +160,10 @@ public class NetworkEncoder extends NetworkObject {
 
         for (int recipeSlot : RECIPE_SLOTS) {
             ItemStack slotItem = blockMenu.getItemInSlot(recipeSlot);
-            if (slotItem != null) {
-                slotItem.setAmount(slotItem.getAmount() - 1);
-            }
+            if (slotItem != null) slotItem.setAmount(slotItem.getAmount() - 1);
         }
 
         blockMenu.pushItem(blueprintClone, OUTPUT_SLOT);
         root.removeRootPower(CHARGE_COST);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkExport.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkExport.java
similarity index 62%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkExport.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkExport.java
index a4f6ec4..24f8bee 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkExport.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkExport.java
@@ -1,11 +1,11 @@
-package io.github.sefiraat.networks.slimefun.network;
-
-import io.github.sefiraat.networks.NetworkStorage;
-import io.github.sefiraat.networks.network.NodeDefinition;
-import io.github.sefiraat.networks.network.NodeType;
-import io.github.sefiraat.networks.network.stackcaches.ItemRequest;
-import io.github.sefiraat.networks.slimefun.NetworkSlimefunItems;
-import io.github.sefiraat.networks.utils.Theme;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
+
+import id.universenetwork.sfa_loader.addons.networks.NetworkStorage;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeDefinition;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeType;
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.ItemRequest;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.NetworkSlimefunItems;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
@@ -32,7 +32,6 @@ import javax.annotation.Nonnull;
 import java.util.List;
 
 public class NetworkExport extends NetworkObject {
-
     private static final int[] BACKGROUND_SLOTS = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 17, 18, 22, 26, 27, 31, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44};
     private static final int TEST_ITEM_SLOT = 20;
     private static final int[] TEST_ITEM_BACKDROP = {10, 11, 12, 19, 21, 28, 29, 30};
@@ -40,13 +39,13 @@ public class NetworkExport extends NetworkObject {
     private static final int[] OUTPUT_ITEM_BACKDROP = {14, 15, 16, 23, 25, 32, 33, 34};
 
     private static final CustomItemStack TEST_BACKDROP_STACK = new CustomItemStack(
-        Material.GREEN_STAINED_GLASS_PANE,
-        Theme.SUCCESS + "Export Item Matching"
+            Material.GREEN_STAINED_GLASS_PANE,
+            Theme.SUCCESS + "Export Item Matching"
     );
 
     private static final CustomItemStack OUTPUT_BACKDROP_STACK = new CustomItemStack(
-        Material.ORANGE_STAINED_GLASS_PANE,
-        Theme.SUCCESS + "Output Slot"
+            Material.ORANGE_STAINED_GLASS_PANE,
+            Theme.SUCCESS + "Output Slot"
     );
 
     private final ItemSetting<Integer> tickRate;
@@ -60,67 +59,59 @@ public class NetworkExport extends NetworkObject {
         this.getSlotsToDrop().add(OUTPUT_ITEM_SLOT);
 
         addItemHandler(
-            new BlockTicker() {
-
-                private int tick = 1;
+                new BlockTicker() {
+                    private int tick = 1;
 
-                @Override
-                public boolean isSynchronized() {
-                    return false;
-                }
+                    @Override
+                    public boolean isSynchronized() {
+                        return false;
+                    }
 
-                @Override
-                public void tick(Block block, SlimefunItem item, Config data) {
-                    if (tick <= 1) {
-                        final BlockMenu blockMenu = BlockStorage.getInventory(block);
-                        addToRegistry(block);
-                        tryFetchItem(blockMenu);
+                    @Override
+                    public void tick(Block block, SlimefunItem item, Config data) {
+                        if (tick <= 1) {
+                            final BlockMenu blockMenu = BlockStorage.getInventory(block);
+                            addToRegistry(block);
+                            tryFetchItem(blockMenu);
+                        }
                     }
-                }
 
-                @Override
-                public void uniqueTick() {
-                    tick = tick <= 1 ? tickRate.getValue() : tick - 1;
-                }
-            },
-            new BlockBreakHandler(true, true) {
-                @Override
-                public void onPlayerBreak(BlockBreakEvent e, ItemStack item, List<ItemStack> drops) {
-                    BlockMenu blockMenu = BlockStorage.getInventory(e.getBlock());
-                    blockMenu.dropItems(blockMenu.getLocation(), TEST_ITEM_SLOT);
-                    blockMenu.dropItems(blockMenu.getLocation(), OUTPUT_ITEM_SLOT);
+                    @Override
+                    public void uniqueTick() {
+                        tick = tick <= 1 ? tickRate.getValue() : tick - 1;
+                    }
+                },
+                new BlockBreakHandler(true, true) {
+                    @Override
+                    public void onPlayerBreak(BlockBreakEvent e, ItemStack item, List<ItemStack> drops) {
+                        BlockMenu blockMenu = BlockStorage.getInventory(e.getBlock());
+                        blockMenu.dropItems(blockMenu.getLocation(), TEST_ITEM_SLOT);
+                        blockMenu.dropItems(blockMenu.getLocation(), OUTPUT_ITEM_SLOT);
+                    }
                 }
-            }
         );
     }
 
     private void tryFetchItem(@Nonnull BlockMenu blockMenu) {
         final NodeDefinition definition = NetworkStorage.getAllNetworkObjects().get(blockMenu.getLocation());
 
-        if (definition.getNode() == null) {
-            return;
-        }
+        if (definition.getNode() == null) return;
 
         ItemStack testItem = blockMenu.getItemInSlot(TEST_ITEM_SLOT);
         ItemStack itemInOutput = blockMenu.getItemInSlot(OUTPUT_ITEM_SLOT);
 
-        if (testItem == null || (itemInOutput != null && itemInOutput.getType() != Material.AIR)) {
-            return;
-        }
+        if (testItem == null || (itemInOutput != null && itemInOutput.getType() != Material.AIR)) return;
 
         ItemStack clone = testItem.clone();
 
         ItemRequest itemRequest = new ItemRequest(clone, clone.getMaxStackSize());
         ItemStack retrieved = definition.getNode().getRoot().getItemStack(itemRequest);
-        if (retrieved != null) {
-            blockMenu.pushItem(retrieved, OUTPUT_ITEM_SLOT);
-        }
+        if (retrieved != null) blockMenu.pushItem(retrieved, OUTPUT_ITEM_SLOT);
     }
 
     @Override
     public void postRegister() {
         new BlockMenuPreset(this.getId(), this.getItemName()) {
-
             @Override
             public void init() {
                 drawBackground(BACKGROUND_SLOTS);
@@ -131,16 +122,14 @@ public class NetworkExport extends NetworkObject {
             @Override
             public boolean canOpen(@Nonnull Block block, @Nonnull Player player) {
                 return NetworkSlimefunItems.NETWORK_GRID.canUse(player, false)
-                    && Slimefun.getProtectionManager().hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
+                        && Slimefun.getProtectionManager().hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
             }
 
             @Override
             public int[] getSlotsAccessedByItemTransport(ItemTransportFlow flow) {
-                if (flow == ItemTransportFlow.WITHDRAW) {
-                    return new int[]{OUTPUT_ITEM_SLOT};
-                }
+                if (flow == ItemTransportFlow.WITHDRAW) return new int[]{OUTPUT_ITEM_SLOT};
                 return new int[0];
             }
         };
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkGrabber.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkGrabber.java
similarity index 82%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkGrabber.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkGrabber.java
index d77379e..ea2bfc8 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkGrabber.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkGrabber.java
@@ -1,8 +1,8 @@
-package io.github.sefiraat.networks.slimefun.network;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
 
-import io.github.sefiraat.networks.NetworkStorage;
-import io.github.sefiraat.networks.network.NodeDefinition;
-import io.github.sefiraat.networks.network.NodeType;
+import id.universenetwork.sfa_loader.addons.networks.NetworkStorage;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeDefinition;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeType;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -20,8 +20,6 @@ import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 
 public class NetworkGrabber extends NetworkDirectional {
-
-
     public NetworkGrabber(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe, NodeType.GRABBER);
     }
@@ -29,24 +27,18 @@ public class NetworkGrabber extends NetworkDirectional {
     @Override
     protected void onTick(@Nullable BlockMenu blockMenu, @Nonnull Block block) {
         super.onTick(blockMenu, block);
-        if (blockMenu != null) {
-            tryGrabItem(blockMenu);
-        }
+        if (blockMenu != null) tryGrabItem(blockMenu);
     }
 
     private void tryGrabItem(@Nonnull BlockMenu blockMenu) {
         final NodeDefinition definition = NetworkStorage.getAllNetworkObjects().get(blockMenu.getLocation());
 
-        if (definition == null || definition.getNode() == null) {
-            return;
-        }
+        if (definition == null || definition.getNode() == null) return;
 
         final BlockFace direction = this.getCurrentDirection(blockMenu);
         final BlockMenu targetMenu = BlockStorage.getInventory(blockMenu.getBlock().getRelative(direction));
 
-        if (targetMenu == null) {
-            return;
-        }
+        if (targetMenu == null) return;
 
         int[] slots = targetMenu.getPreset().getSlotsAccessedByItemTransport(targetMenu, ItemTransportFlow.WITHDRAW, null);
 
@@ -56,9 +48,8 @@ public class NetworkGrabber extends NetworkDirectional {
             if (itemStack != null && itemStack.getType() != Material.AIR) {
                 int before = itemStack.getAmount();
                 definition.getNode().getRoot().addItemStack(itemStack);
-                if (definition.getNode().getRoot().isDisplayParticles() && itemStack.getAmount() < before) {
+                if (definition.getNode().getRoot().isDisplayParticles() && itemStack.getAmount() < before)
                     showParticle(blockMenu.getLocation(), direction);
-                }
                 break;
             }
         }
@@ -68,4 +59,4 @@ public class NetworkGrabber extends NetworkDirectional {
     protected Particle.DustOptions getDustOptions() {
         return new Particle.DustOptions(Color.FUCHSIA, 1);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkGreedyBlock.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkGreedyBlock.java
similarity index 73%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkGreedyBlock.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkGreedyBlock.java
index 55d5cb5..417c5ac 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkGreedyBlock.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkGreedyBlock.java
@@ -1,8 +1,8 @@
-package io.github.sefiraat.networks.slimefun.network;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
 
-import io.github.sefiraat.networks.network.NodeType;
-import io.github.sefiraat.networks.slimefun.NetworkSlimefunItems;
-import io.github.sefiraat.networks.utils.Theme;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeType;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.NetworkSlimefunItems;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -19,27 +19,26 @@ import org.bukkit.inventory.ItemStack;
 import javax.annotation.Nonnull;
 
 public class NetworkGreedyBlock extends NetworkObject {
-
     public static final int TEMPLATE_SLOT = 10;
     public static final int INPUT_SLOT = 16;
     private static final int[] BACKGROUND_SLOTS = new int[]{
-        3, 4, 5, 12, 13, 14, 21, 22, 23
+            3, 4, 5, 12, 13, 14, 21, 22, 23
     };
     private static final int[] BACKGROUND_SLOTS_TEMPLATE = new int[]{
-        0,1,2,9,11,18,19,20
+            0, 1, 2, 9, 11, 18, 19, 20
     };
     private static final int[] BACKGROUND_SLOTS_INPUT = new int[]{
-        6,7,8,15,17,24,25,26
+            6, 7, 8, 15, 17, 24, 25, 26
     };
 
     private static final CustomItemStack TEMPLATE_BACKGROUND_STACK = new CustomItemStack(
-        Material.GREEN_STAINED_GLASS_PANE,
-        Theme.SUCCESS + "Store items matching"
+            Material.GREEN_STAINED_GLASS_PANE,
+            Theme.SUCCESS + "Store items matching"
     );
 
     private static final CustomItemStack STORAGE_BACKGROUND_STACK = new CustomItemStack(
-        Material.ORANGE_STAINED_GLASS_PANE,
-        Theme.SUCCESS + "Storage"
+            Material.ORANGE_STAINED_GLASS_PANE,
+            Theme.SUCCESS + "Storage"
     );
 
     public NetworkGreedyBlock(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
@@ -51,7 +50,6 @@ public class NetworkGreedyBlock extends NetworkObject {
     @Override
     public void postRegister() {
         new BlockMenuPreset(this.getId(), this.getItemName()) {
-
             @Override
             public void init() {
                 drawBackground(BACKGROUND_SLOTS);
@@ -62,19 +60,15 @@ public class NetworkGreedyBlock extends NetworkObject {
             @Override
             public boolean canOpen(@Nonnull Block block, @Nonnull Player player) {
                 return NetworkSlimefunItems.NETWORK_CELL.canUse(player, false)
-                    && Slimefun.getProtectionManager()
-                    .hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
+                        && Slimefun.getProtectionManager()
+                        .hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
             }
 
             @Override
             public int[] getSlotsAccessedByItemTransport(ItemTransportFlow flow) {
-                if (flow == ItemTransportFlow.INSERT) {
-                    return new int[]{INPUT_SLOT};
-                }
+                if (flow == ItemTransportFlow.INSERT) return new int[]{INPUT_SLOT};
                 return new int[]{0};
             }
-
         };
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkImport.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkImport.java
similarity index 64%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkImport.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkImport.java
index c7411a5..532120f 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkImport.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkImport.java
@@ -1,9 +1,9 @@
-package io.github.sefiraat.networks.slimefun.network;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
 
-import io.github.sefiraat.networks.NetworkStorage;
-import io.github.sefiraat.networks.network.NodeDefinition;
-import io.github.sefiraat.networks.network.NodeType;
-import io.github.sefiraat.networks.slimefun.NetworkSlimefunItems;
+import id.universenetwork.sfa_loader.addons.networks.NetworkStorage;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeDefinition;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeType;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.NetworkSlimefunItems;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
@@ -26,7 +26,6 @@ import org.bukkit.inventory.ItemStack;
 import javax.annotation.Nonnull;
 
 public class NetworkImport extends NetworkObject {
-
     private static final int[] INPUT_SLOTS = new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8};
 
     private final ItemSetting<Integer> tickRate;
@@ -37,50 +36,43 @@ public class NetworkImport extends NetworkObject {
         this.tickRate = new IntRangeSetting(this, "tick_rate", 1, 1, 10);
         addItemSetting(this.tickRate);
 
-        for (int inputSlot : INPUT_SLOTS) {
-            this.getSlotsToDrop().add(inputSlot);
-        }
+        for (int inputSlot : INPUT_SLOTS) this.getSlotsToDrop().add(inputSlot);
 
         addItemHandler(
-            new BlockTicker() {
-
-                private int tick = 1;
+                new BlockTicker() {
+                    private int tick = 1;
 
-                @Override
-                public boolean isSynchronized() {
-                    return false;
-                }
+                    @Override
+                    public boolean isSynchronized() {
+                        return false;
+                    }
 
-                @Override
-                public void tick(Block block, SlimefunItem item, Config data) {
-                    if (tick <= 1) {
-                        final BlockMenu blockMenu = BlockStorage.getInventory(block);
-                        addToRegistry(block);
-                        tryAddItem(blockMenu);
+                    @Override
+                    public void tick(Block block, SlimefunItem item, Config data) {
+                        if (tick <= 1) {
+                            final BlockMenu blockMenu = BlockStorage.getInventory(block);
+                            addToRegistry(block);
+                            tryAddItem(blockMenu);
+                        }
                     }
-                }
 
-                @Override
-                public void uniqueTick() {
-                    tick = tick <= 1 ? tickRate.getValue() : tick - 1;
+                    @Override
+                    public void uniqueTick() {
+                        tick = tick <= 1 ? tickRate.getValue() : tick - 1;
+                    }
                 }
-            }
         );
     }
 
     private void tryAddItem(@Nonnull BlockMenu blockMenu) {
         final NodeDefinition definition = NetworkStorage.getAllNetworkObjects().get(blockMenu.getLocation());
 
-        if (definition.getNode() == null) {
-            return;
-        }
+        if (definition.getNode() == null) return;
 
         for (int inputSlot : INPUT_SLOTS) {
             final ItemStack itemStack = blockMenu.getItemInSlot(inputSlot);
 
-            if (itemStack == null || itemStack.getType() == Material.AIR) {
-                continue;
-            }
+            if (itemStack == null || itemStack.getType() == Material.AIR) continue;
             definition.getNode().getRoot().addItemStack(itemStack);
         }
     }
@@ -88,7 +80,6 @@ public class NetworkImport extends NetworkObject {
     @Override
     public void postRegister() {
         new BlockMenuPreset(this.getId(), this.getItemName()) {
-
             @Override
             public void init() {
                 setSize(9);
@@ -97,16 +88,14 @@ public class NetworkImport extends NetworkObject {
             @Override
             public boolean canOpen(@Nonnull Block block, @Nonnull Player player) {
                 return NetworkSlimefunItems.NETWORK_GRID.canUse(player, false)
-                    && Slimefun.getProtectionManager().hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
+                        && Slimefun.getProtectionManager().hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
             }
 
             @Override
             public int[] getSlotsAccessedByItemTransport(ItemTransportFlow flow) {
-                if (flow == ItemTransportFlow.INSERT) {
-                    return INPUT_SLOTS;
-                }
+                if (flow == ItemTransportFlow.INSERT) return INPUT_SLOTS;
                 return new int[0];
             }
         };
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkMonitor.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkMonitor.java
similarity index 77%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkMonitor.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkMonitor.java
index 39c23a7..5abc0e8 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkMonitor.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkMonitor.java
@@ -1,14 +1,13 @@
-package io.github.sefiraat.networks.slimefun.network;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
 
-import io.github.sefiraat.networks.network.NodeType;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeType;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import org.bukkit.inventory.ItemStack;
 
 public class NetworkMonitor extends NetworkDirectional {
-
     public NetworkMonitor(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe, NodeType.STORAGE_MONITOR);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkObject.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkObject.java
similarity index 66%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkObject.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkObject.java
index 9a0ee81..6f531b8 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkObject.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkObject.java
@@ -1,8 +1,8 @@
-package io.github.sefiraat.networks.slimefun.network;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
 
-import io.github.sefiraat.networks.NetworkStorage;
-import io.github.sefiraat.networks.network.NodeDefinition;
-import io.github.sefiraat.networks.network.NodeType;
+import id.universenetwork.sfa_loader.addons.networks.NetworkStorage;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeDefinition;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeType;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -24,7 +24,6 @@ import java.util.ArrayList;
 import java.util.List;
 
 public abstract class NetworkObject extends SlimefunItem implements AdminDebuggable {
-
     @Getter
     private final NodeType nodeType;
     @Getter
@@ -38,26 +37,25 @@ public abstract class NetworkObject extends SlimefunItem implements AdminDebugga
         super(itemGroup, item, recipeType, recipe, recipeOutput);
         this.nodeType = type;
         addItemHandler(
-            new BlockTicker() {
-
-                @Override
-                public boolean isSynchronized() {
-                    return runSync();
-                }
-
-                @Override
-                public void tick(Block b, SlimefunItem item, Config data) {
-                    addToRegistry(b);
+                new BlockTicker() {
+                    @Override
+                    public boolean isSynchronized() {
+                        return runSync();
+                    }
+
+                    @Override
+                    public void tick(Block b, SlimefunItem item, Config data) {
+                        addToRegistry(b);
+                    }
+                },
+                new BlockBreakHandler(false, false) {
+                    @Override
+                    @ParametersAreNonnullByDefault
+                    public void onPlayerBreak(BlockBreakEvent event, ItemStack item, List<ItemStack> drops) {
+                        preBreak(event);
+                        onBreak(event);
+                    }
                 }
-            },
-            new BlockBreakHandler(false, false) {
-                @Override
-                @ParametersAreNonnullByDefault
-                public void onPlayerBreak(BlockBreakEvent event, ItemStack item, List<ItemStack> drops) {
-                    preBreak(event);
-                    onBreak(event);
-                }
-            }
         );
     }
 
@@ -69,23 +67,16 @@ public abstract class NetworkObject extends SlimefunItem implements AdminDebugga
     }
 
     protected void preBreak(@Nonnull BlockBreakEvent event) {
-
     }
 
     protected void onBreak(@Nonnull BlockBreakEvent event) {
         final Location location = event.getBlock().getLocation();
         final BlockMenu blockMenu = BlockStorage.getInventory(event.getBlock());
 
-        if (blockMenu != null) {
-            for (int i : this.slotsToDrop) {
-                blockMenu.dropItems(location, i);
-            }
-        }
+        if (blockMenu != null) for (int i : this.slotsToDrop) blockMenu.dropItems(location, i);
         NetworkStorage.removeNode(location);
 
-        if (this.nodeType == NodeType.CONTROLLER) {
-            NetworkController.wipeNetwork(location);
-        }
+        if (this.nodeType == NodeType.CONTROLLER) NetworkController.wipeNetwork(location);
 
         BlockStorage.clearBlockInfo(location);
     }
@@ -93,4 +84,4 @@ public abstract class NetworkObject extends SlimefunItem implements AdminDebugga
     public boolean runSync() {
         return false;
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkPowerDisplay.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkPowerDisplay.java
similarity index 66%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkPowerDisplay.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkPowerDisplay.java
index 10e53cd..857f5ba 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkPowerDisplay.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkPowerDisplay.java
@@ -1,11 +1,11 @@
-package io.github.sefiraat.networks.slimefun.network;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
 
-import io.github.sefiraat.networks.NetworkStorage;
-import io.github.sefiraat.networks.network.NetworkRoot;
-import io.github.sefiraat.networks.network.NodeDefinition;
-import io.github.sefiraat.networks.network.NodeType;
-import io.github.sefiraat.networks.slimefun.NetworkSlimefunItems;
-import io.github.sefiraat.networks.utils.Theme;
+import id.universenetwork.sfa_loader.addons.networks.NetworkStorage;
+import id.universenetwork.sfa_loader.addons.networks.network.NetworkRoot;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeDefinition;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeType;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.NetworkSlimefunItems;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -27,36 +27,35 @@ import org.bukkit.inventory.ItemStack;
 import javax.annotation.Nonnull;
 
 public class NetworkPowerDisplay extends NetworkObject {
-
     private static final int[] BACKGROUND_SLOTS = new int[]{
-        0, 1, 2, 3, 5, 6, 7, 8
+            0, 1, 2, 3, 5, 6, 7, 8
     };
     private static final int DISPLAY_SLOT = 4;
 
     private static final CustomItemStack EMPTY = new CustomItemStack(
-        Material.RED_STAINED_GLASS_PANE,
-        Theme.CLICK_INFO + "Status",
-        Theme.PASSIVE + "Disconnected"
+            Material.RED_STAINED_GLASS_PANE,
+            Theme.CLICK_INFO + "Status",
+            Theme.PASSIVE + "Disconnected"
     );
 
     public NetworkPowerDisplay(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe, NodeType.POWER_DISPLAY);
         addItemHandler(
-            new BlockTicker() {
-                @Override
-                public boolean isSynchronized() {
-                    return false;
-                }
+                new BlockTicker() {
+                    @Override
+                    public boolean isSynchronized() {
+                        return false;
+                    }
 
-                @Override
-                public void tick(Block block, SlimefunItem slimefunItem, Config config) {
-                    BlockMenu blockMenu = BlockStorage.getInventory(block);
-                    if (blockMenu != null) {
-                        addToRegistry(block);
-                        setDisplay(blockMenu);
+                    @Override
+                    public void tick(Block block, SlimefunItem slimefunItem, Config config) {
+                        BlockMenu blockMenu = BlockStorage.getInventory(block);
+                        if (blockMenu != null) {
+                            addToRegistry(block);
+                            setDisplay(blockMenu);
+                        }
                     }
                 }
-            }
         );
     }
 
@@ -78,7 +77,6 @@ public class NetworkPowerDisplay extends NetworkObject {
     @Override
     public void postRegister() {
         new BlockMenuPreset(this.getId(), this.getItemName()) {
-
             @Override
             public void init() {
                 drawBackground(BACKGROUND_SLOTS);
@@ -88,7 +86,7 @@ public class NetworkPowerDisplay extends NetworkObject {
             @Override
             public boolean canOpen(@Nonnull Block block, @Nonnull Player player) {
                 return NetworkSlimefunItems.NETWORK_POWER_DISPLAY.canUse(player, false)
-                    && Slimefun.getProtectionManager().hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
+                        && Slimefun.getProtectionManager().hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
             }
 
             @Override
@@ -100,9 +98,9 @@ public class NetworkPowerDisplay extends NetworkObject {
 
     private static CustomItemStack getChargeStack(long charge) {
         return new CustomItemStack(
-            Material.GREEN_STAINED_GLASS_PANE,
-            Theme.CLICK_INFO + "Status",
-            Theme.PASSIVE + "Current Network Charge: " + charge + "j"
+                Material.GREEN_STAINED_GLASS_PANE,
+                Theme.CLICK_INFO + "Status",
+                Theme.PASSIVE + "Current Network Charge: " + charge + "j"
         );
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkPowerNode.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkPowerNode.java
similarity index 87%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkPowerNode.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkPowerNode.java
index 9596652..a28be57 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkPowerNode.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkPowerNode.java
@@ -1,6 +1,6 @@
-package io.github.sefiraat.networks.slimefun.network;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
 
-import io.github.sefiraat.networks.network.NodeType;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeType;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -11,7 +11,6 @@ import org.bukkit.inventory.ItemStack;
 import javax.annotation.Nonnull;
 
 public class NetworkPowerNode extends NetworkObject implements EnergyNetComponent {
-
     private final int capacity;
 
     public NetworkPowerNode(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, int capacity) {
@@ -29,4 +28,4 @@ public class NetworkPowerNode extends NetworkObject implements EnergyNetComponen
     public int getCapacity() {
         return this.capacity;
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkPowerOutlet.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkPowerOutlet.java
similarity index 77%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkPowerOutlet.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkPowerOutlet.java
index 066830f..e14293b 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkPowerOutlet.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkPowerOutlet.java
@@ -1,9 +1,9 @@
-package io.github.sefiraat.networks.slimefun.network;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
 
-import io.github.sefiraat.networks.NetworkStorage;
-import io.github.sefiraat.networks.network.NetworkRoot;
-import io.github.sefiraat.networks.network.NodeDefinition;
-import io.github.sefiraat.networks.network.NodeType;
+import id.universenetwork.sfa_loader.addons.networks.NetworkStorage;
+import id.universenetwork.sfa_loader.addons.networks.network.NetworkRoot;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeDefinition;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeType;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -19,7 +19,6 @@ import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 
 public class NetworkPowerOutlet extends NetworkDirectional {
-
     private final int rate;
 
     public NetworkPowerOutlet(ItemGroup itemGroup,
@@ -49,30 +48,23 @@ public class NetworkPowerOutlet extends NetworkDirectional {
         final Block targetBlock = b.getRelative(blockFace);
         final SlimefunItem slimefunItem = BlockStorage.check(targetBlock);
 
-        if (!(slimefunItem instanceof EnergyNetComponent component) || slimefunItem instanceof NetworkObject) {
-            return;
-        }
+        if (!(slimefunItem instanceof EnergyNetComponent) || slimefunItem instanceof NetworkObject) return;
+        EnergyNetComponent component = (EnergyNetComponent) slimefunItem;
 
         final String charge = BlockStorage.getLocationInfo(targetBlock.getLocation(), "energy-charge");
         int chargeInt = 0;
-        if (charge != null) {
-            chargeInt = Integer.parseInt(charge);
-        }
+        if (charge != null) chargeInt = Integer.parseInt(charge);
 
         final int capacity = component.getCapacity();
         final int space = capacity - chargeInt;
 
-        if (space <= 0) {
-            return;
-        }
+        if (space <= 0) return;
 
         final int possibleGeneration = Math.min(rate, space);
         final NetworkRoot root = definition.getNode().getRoot();
         final long power = root.getRootPower();
 
-        if (power <= 0) {
-            return;
-        }
+        if (power <= 0) return;
 
         final int gen = power < possibleGeneration ? (int) power : possibleGeneration;
         final int chargeToRemove = (int) (gen * 1.2);
@@ -80,4 +72,4 @@ public class NetworkPowerOutlet extends NetworkDirectional {
         component.addCharge(targetBlock.getLocation(), gen);
         root.removeRootPower(chargeToRemove);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkPurger.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkPurger.java
similarity index 65%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkPurger.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkPurger.java
index b430464..3a09544 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkPurger.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkPurger.java
@@ -1,11 +1,11 @@
-package io.github.sefiraat.networks.slimefun.network;
-
-import io.github.sefiraat.networks.NetworkStorage;
-import io.github.sefiraat.networks.network.NodeDefinition;
-import io.github.sefiraat.networks.network.NodeType;
-import io.github.sefiraat.networks.network.stackcaches.ItemRequest;
-import io.github.sefiraat.networks.slimefun.NetworkSlimefunItems;
-import io.github.sefiraat.networks.utils.Theme;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
+
+import id.universenetwork.sfa_loader.addons.networks.NetworkStorage;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeDefinition;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeType;
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.ItemRequest;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.NetworkSlimefunItems;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
@@ -34,14 +34,13 @@ import javax.annotation.Nonnull;
 import java.util.List;
 
 public class NetworkPurger extends NetworkObject {
-
     private static final int[] BACKGROUND_SLOTS = {0, 1, 2, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26};
     private static final int TEST_ITEM_SLOT = 13;
     private static final int[] TEST_ITEM_BACKDROP = {3, 4, 5, 12, 14, 21, 22, 23};
 
     private static final CustomItemStack TEST_BACKDROP_STACK = new CustomItemStack(
-        Material.GREEN_STAINED_GLASS_PANE,
-        Theme.SUCCESS + "Purge Item Matching"
+            Material.GREEN_STAINED_GLASS_PANE,
+            Theme.SUCCESS + "Purge Item Matching"
     );
 
     private final ItemSetting<Integer> tickRate;
@@ -54,51 +53,46 @@ public class NetworkPurger extends NetworkObject {
         this.getSlotsToDrop().add(TEST_ITEM_SLOT);
 
         addItemHandler(
-            new BlockTicker() {
-
-                private int tick = 1;
+                new BlockTicker() {
+                    private int tick = 1;
 
-                @Override
-                public boolean isSynchronized() {
-                    return false;
-                }
+                    @Override
+                    public boolean isSynchronized() {
+                        return false;
+                    }
 
-                @Override
-                public void tick(Block block, SlimefunItem item, Config data) {
-                    if (tick <= 1) {
-                        final BlockMenu blockMenu = BlockStorage.getInventory(block);
-                        addToRegistry(block);
-                        tryKillItem(blockMenu);
+                    @Override
+                    public void tick(Block block, SlimefunItem item, Config data) {
+                        if (tick <= 1) {
+                            final BlockMenu blockMenu = BlockStorage.getInventory(block);
+                            addToRegistry(block);
+                            tryKillItem(blockMenu);
+                        }
                     }
-                }
 
-                @Override
-                public void uniqueTick() {
-                    tick = tick <= 1 ? tickRate.getValue() : tick - 1;
-                }
-            },
-            new BlockBreakHandler(true, true) {
-                @Override
-                public void onPlayerBreak(BlockBreakEvent e, ItemStack item, List<ItemStack> drops) {
-                    BlockMenu blockMenu = BlockStorage.getInventory(e.getBlock());
-                    blockMenu.dropItems(blockMenu.getLocation(), TEST_ITEM_SLOT);
+                    @Override
+                    public void uniqueTick() {
+                        tick = tick <= 1 ? tickRate.getValue() : tick - 1;
+                    }
+                },
+                new BlockBreakHandler(true, true) {
+                    @Override
+                    public void onPlayerBreak(BlockBreakEvent e, ItemStack item, List<ItemStack> drops) {
+                        BlockMenu blockMenu = BlockStorage.getInventory(e.getBlock());
+                        blockMenu.dropItems(blockMenu.getLocation(), TEST_ITEM_SLOT);
+                    }
                 }
-            }
         );
     }
 
     private void tryKillItem(@Nonnull BlockMenu blockMenu) {
         final NodeDefinition definition = NetworkStorage.getAllNetworkObjects().get(blockMenu.getLocation());
 
-        if (definition == null || definition.getNode() == null) {
-            return;
-        }
+        if (definition == null || definition.getNode() == null) return;
 
         ItemStack testItem = blockMenu.getItemInSlot(TEST_ITEM_SLOT);
 
-        if (testItem == null) {
-            return;
-        }
+        if (testItem == null) return;
 
         ItemStack clone = testItem.clone();
         clone.setAmount(1);
@@ -108,16 +102,14 @@ public class NetworkPurger extends NetworkObject {
         if (retrieved != null) {
             retrieved.setAmount(0);
             Location location = blockMenu.getLocation().clone().add(0.5, 1.2, 0.5);
-            if (definition.getNode().getRoot().isDisplayParticles()) {
+            if (definition.getNode().getRoot().isDisplayParticles())
                 location.getWorld().spawnParticle(Particle.SMOKE_NORMAL, location, 0, 0, 0.05, 0);
-            }
         }
     }
 
     @Override
     public void postRegister() {
         new BlockMenuPreset(this.getId(), this.getItemName()) {
-
             @Override
             public void init() {
                 drawBackground(BACKGROUND_SLOTS);
@@ -127,7 +119,7 @@ public class NetworkPurger extends NetworkObject {
             @Override
             public boolean canOpen(@Nonnull Block block, @Nonnull Player player) {
                 return NetworkSlimefunItems.NETWORK_GRID.canUse(player, false)
-                    && Slimefun.getProtectionManager().hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
+                        && Slimefun.getProtectionManager().hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
             }
 
             @Override
@@ -136,4 +128,4 @@ public class NetworkPurger extends NetworkObject {
             }
         };
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkPusher.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkPusher.java
similarity index 81%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkPusher.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkPusher.java
index 57dad76..5672dae 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkPusher.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkPusher.java
@@ -1,11 +1,11 @@
-package io.github.sefiraat.networks.slimefun.network;
-
-import io.github.sefiraat.networks.NetworkStorage;
-import io.github.sefiraat.networks.network.NodeDefinition;
-import io.github.sefiraat.networks.network.NodeType;
-import io.github.sefiraat.networks.network.stackcaches.ItemRequest;
-import io.github.sefiraat.networks.utils.StackUtils;
-import io.github.sefiraat.networks.utils.Theme;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
+
+import id.universenetwork.sfa_loader.addons.networks.NetworkStorage;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeDefinition;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeType;
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.ItemRequest;
+import id.universenetwork.sfa_loader.addons.networks.utils.StackUtils;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -24,9 +24,8 @@ import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 
 public class NetworkPusher extends NetworkDirectional {
-
     private static final int[] BACKGROUND_SLOTS = new int[]{
-        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 20, 22, 23, 24, 26, 27, 28, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
+            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 18, 20, 22, 23, 24, 26, 27, 28, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
     };
     private static final int[] TEMPLATE_BACKGROUND = new int[]{16};
     private static final int[] TEMPLATE_SLOTS = new int[]{25, 34};
@@ -38,7 +37,7 @@ public class NetworkPusher extends NetworkDirectional {
     private static final int DOWN_SLOT = 32;
 
     public static final CustomItemStack TEMPLATE_BACKGROUND_STACK = new CustomItemStack(
-        Material.BLUE_STAINED_GLASS_PANE, Theme.PASSIVE + "Push items matching template"
+            Material.BLUE_STAINED_GLASS_PANE, Theme.PASSIVE + "Push items matching template"
     );
 
     public NetworkPusher(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
@@ -51,31 +50,23 @@ public class NetworkPusher extends NetworkDirectional {
     @Override
     protected void onTick(@Nullable BlockMenu blockMenu, @Nonnull Block block) {
         super.onTick(blockMenu, block);
-        if (blockMenu != null) {
-            tryPushItem(blockMenu);
-        }
+        if (blockMenu != null) tryPushItem(blockMenu);
     }
 
     private void tryPushItem(@Nonnull BlockMenu blockMenu) {
         final NodeDefinition definition = NetworkStorage.getAllNetworkObjects().get(blockMenu.getLocation());
 
-        if (definition == null || definition.getNode() == null) {
-            return;
-        }
+        if (definition == null || definition.getNode() == null) return;
 
         final BlockFace direction = getCurrentDirection(blockMenu);
         final BlockMenu targetMenu = BlockStorage.getInventory(blockMenu.getBlock().getRelative(direction));
 
-        if (targetMenu == null) {
-            return;
-        }
+        if (targetMenu == null) return;
 
         for (int itemSlot : this.getItemSlots()) {
             final ItemStack testItem = blockMenu.getItemInSlot(itemSlot);
 
-            if (testItem == null || testItem.getType() == Material.AIR) {
-                continue;
-            }
+            if (testItem == null || testItem.getType() == Material.AIR) continue;
 
             final ItemStack clone = testItem.clone();
             clone.setAmount(1);
@@ -88,19 +79,15 @@ public class NetworkPusher extends NetworkDirectional {
 
                 if (itemStack != null && itemStack.getType() != Material.AIR) {
                     final int space = itemStack.getMaxStackSize() - itemStack.getAmount();
-                    if (space > 0 && StackUtils.itemsMatch(itemRequest, itemStack, true)) {
-                        itemRequest.setAmount(space);
-                    } else {
-                        continue;
-                    }
+                    if (space > 0 && StackUtils.itemsMatch(itemRequest, itemStack, true)) itemRequest.setAmount(space);
+                    else continue;
                 }
 
                 ItemStack retrieved = definition.getNode().getRoot().getItemStack(itemRequest);
                 if (retrieved != null) {
                     targetMenu.pushItem(retrieved, slots);
-                    if (definition.getNode().getRoot().isDisplayParticles()) {
+                    if (definition.getNode().getRoot().isDisplayParticles())
                         showParticle(blockMenu.getLocation(), direction);
-                    }
                 }
                 break;
             }
@@ -164,4 +151,4 @@ public class NetworkPusher extends NetworkDirectional {
     protected Particle.DustOptions getDustOptions() {
         return new Particle.DustOptions(Color.MAROON, 1);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkQuantumStorage.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkQuantumStorage.java
similarity index 75%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkQuantumStorage.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkQuantumStorage.java
index bd33de9..97d0c66 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkQuantumStorage.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkQuantumStorage.java
@@ -1,12 +1,13 @@
-package io.github.sefiraat.networks.slimefun.network;
-
-import io.github.sefiraat.networks.network.stackcaches.QuantumCache;
-import io.github.sefiraat.networks.utils.Keys;
-import io.github.sefiraat.networks.utils.StackUtils;
-import io.github.sefiraat.networks.utils.StringUtils;
-import io.github.sefiraat.networks.utils.Theme;
-import io.github.sefiraat.networks.utils.datatypes.DataTypeMethods;
-import io.github.sefiraat.networks.utils.datatypes.PersistentQuantumStorageType;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
+
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.QuantumCache;
+import id.universenetwork.sfa_loader.addons.networks.utils.Keys;
+import id.universenetwork.sfa_loader.addons.networks.utils.StackUtils;
+import id.universenetwork.sfa_loader.addons.networks.utils.StringUtils;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
+import id.universenetwork.sfa_loader.addons.networks.utils.datatypes.DataTypeMethods;
+import id.universenetwork.sfa_loader.addons.networks.utils.datatypes.PersistentQuantumStorageType;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -44,16 +45,15 @@ import java.util.List;
 import java.util.Map;
 
 public class NetworkQuantumStorage extends SlimefunItem implements DistinctiveItem {
-
     private static final int[] SIZES = new int[]{
-        4096,
-        32768,
-        262144,
-        2097152,
-        16777216,
-        134217728,
-        1073741824,
-        Integer.MAX_VALUE
+            4096,
+            32768,
+            262144,
+            2097152,
+            16777216,
+            134217728,
+            1073741824,
+            Integer.MAX_VALUE
     };
 
     public static final String BS_AMOUNT = "stored_amount";
@@ -65,32 +65,32 @@ public class NetworkQuantumStorage extends SlimefunItem implements DistinctiveIt
     public static final int OUTPUT_SLOT = 7;
 
     private static final ItemStack BACK_INPUT = new CustomItemStack(
-        Material.GREEN_STAINED_GLASS_PANE,
-        Theme.PASSIVE + "Input"
+            Material.GREEN_STAINED_GLASS_PANE,
+            Theme.PASSIVE + "Input"
     );
 
     private static final ItemStack BACK_ITEM = new CustomItemStack(
-        Material.BLUE_STAINED_GLASS_PANE,
-        Theme.PASSIVE + "Item Stored"
+            Material.BLUE_STAINED_GLASS_PANE,
+            Theme.PASSIVE + "Item Stored"
     );
 
     private static final ItemStack NO_ITEM = new CustomItemStack(
-        Material.RED_STAINED_GLASS_PANE,
-        Theme.ERROR + "No Registered Item",
-        Theme.PASSIVE + "Click the icon below while",
-        Theme.PASSIVE + "holding an item to register it."
+            Material.RED_STAINED_GLASS_PANE,
+            Theme.ERROR + "No Registered Item",
+            Theme.PASSIVE + "Click the icon below while",
+            Theme.PASSIVE + "holding an item to register it."
     );
 
     private static final ItemStack SET_ITEM = new CustomItemStack(
-        Material.LIME_STAINED_GLASS_PANE,
-        Theme.SUCCESS + "Set Item",
-        Theme.PASSIVE + "Drag an item on top of this pane to register it.",
-        Theme.PASSIVE + "Shift Click to change voiding"
+            Material.LIME_STAINED_GLASS_PANE,
+            Theme.SUCCESS + "Set Item",
+            Theme.PASSIVE + "Drag an item on top of this pane to register it.",
+            Theme.PASSIVE + "Shift Click to change voiding"
     );
 
     private static final ItemStack BACK_OUTPUT = new CustomItemStack(
-        Material.ORANGE_STAINED_GLASS_PANE,
-        Theme.PASSIVE + "Output"
+            Material.ORANGE_STAINED_GLASS_PANE,
+            Theme.PASSIVE + "Output"
     );
 
     private static final int[] INPUT_SLOTS = new int[]{0, 2};
@@ -102,7 +102,7 @@ public class NetworkQuantumStorage extends SlimefunItem implements DistinctiveIt
 
     static {
         final ItemMeta itemMeta = NO_ITEM.getItemMeta();
-        PersistentDataAPI.setBoolean(itemMeta, Keys.newKey("display"), true);
+        PersistentDataAPI.setBoolean(itemMeta, AbstractAddon.createKey("display"), true);
         NO_ITEM.setItemMeta(itemMeta);
     }
 
@@ -119,30 +119,30 @@ public class NetworkQuantumStorage extends SlimefunItem implements DistinctiveIt
     @Override
     public void preRegister() {
         addItemHandler(
-            new BlockTicker() {
-                @Override
-                public boolean isSynchronized() {
-                    return false;
-                }
+                new BlockTicker() {
+                    @Override
+                    public boolean isSynchronized() {
+                        return false;
+                    }
 
-                @Override
-                public void tick(Block b, SlimefunItem item, Config data) {
-                    onTick(b);
-                }
-            },
-            new BlockBreakHandler(false, false) {
-                @Override
-                @ParametersAreNonnullByDefault
-                public void onPlayerBreak(BlockBreakEvent event, ItemStack item, List<ItemStack> drops) {
-                    onBreak(event);
-                }
-            },
-            new BlockPlaceHandler(false) {
-                @Override
-                public void onPlayerPlace(@Nonnull BlockPlaceEvent event) {
-                    onPlace(event);
+                    @Override
+                    public void tick(Block b, SlimefunItem item, Config data) {
+                        onTick(b);
+                    }
+                },
+                new BlockBreakHandler(false, false) {
+                    @Override
+                    @ParametersAreNonnullByDefault
+                    public void onPlayerBreak(BlockBreakEvent event, ItemStack item, List<ItemStack> drops) {
+                        onBreak(event);
+                    }
+                },
+                new BlockPlaceHandler(false) {
+                    @Override
+                    public void onPlayerPlace(@Nonnull BlockPlaceEvent event) {
+                        onPlace(event);
+                    }
                 }
-            }
         );
     }
 
@@ -156,27 +156,21 @@ public class NetworkQuantumStorage extends SlimefunItem implements DistinctiveIt
 
         final QuantumCache cache = CACHES.get(blockMenu.getLocation());
 
-        if (cache == null) {
-            return;
-        }
+        if (cache == null) return;
 
-        if (blockMenu.hasViewer()) {
-            updateDisplayItem(blockMenu, cache);
-        }
+        if (blockMenu.hasViewer()) updateDisplayItem(blockMenu, cache);
 
         // Move items from the input slot into the card
         final ItemStack input = blockMenu.getItemInSlot(INPUT_SLOT);
-        if (input != null && input.getType() != Material.AIR) {
+        if (input != null && input.getType() != Material.AIR)
             tryInputItem(blockMenu.getLocation(), new ItemStack[]{input}, cache);
-        }
 
         // Output items
         final ItemStack output = blockMenu.getItemInSlot(OUTPUT_SLOT);
         ItemStack fetched = null;
-        if (output == null || output.getType() == Material.AIR) {
-            // No item in output, try output
-            fetched = cache.withdrawItem();
-        } else if (StackUtils.itemsMatch(cache, output, true) && output.getAmount() < output.getMaxStackSize()) {
+        // No item in output, try output
+        if (output == null || output.getType() == Material.AIR) fetched = cache.withdrawItem();
+        else if (StackUtils.itemsMatch(cache, output, true) && output.getAmount() < output.getMaxStackSize()) {
             // There is an item, but it's not filled so lets top it up if we can
             final int requestAmount = output.getMaxStackSize() - output.getAmount();
             fetched = cache.withdrawItem(requestAmount);
@@ -201,9 +195,7 @@ public class NetworkQuantumStorage extends SlimefunItem implements DistinctiveIt
     private void setItem(@Nonnull BlockMenu blockMenu, @Nonnull Player player) {
         final ItemStack itemStack = player.getItemOnCursor().clone();
 
-        if (isBlacklisted(itemStack)) {
-            return;
-        }
+        if (isBlacklisted(itemStack)) return;
 
         final QuantumCache cache = CACHES.get(blockMenu.getLocation());
         if (cache == null || cache.getAmount() > 0) {
@@ -220,18 +212,11 @@ public class NetworkQuantumStorage extends SlimefunItem implements DistinctiveIt
     @Override
     public void postRegister() {
         new BlockMenuPreset(this.getId(), this.getItemName()) {
-
             @Override
             public void init() {
-                for (int i : INPUT_SLOTS) {
-                    addItem(i, BACK_INPUT, (p, slot, item, action) -> false);
-                }
-                for (int i : ITEM_SLOTS) {
-                    addItem(i, BACK_ITEM, (p, slot, item, action) -> false);
-                }
-                for (int i : OUTPUT_SLOTS) {
-                    addItem(i, BACK_OUTPUT, (p, slot, item, action) -> false);
-                }
+                for (int i : INPUT_SLOTS) addItem(i, BACK_INPUT, (p, slot, item, action) -> false);
+                for (int i : ITEM_SLOTS) addItem(i, BACK_ITEM, (p, slot, item, action) -> false);
+                for (int i : OUTPUT_SLOTS) addItem(i, BACK_OUTPUT, (p, slot, item, action) -> false);
                 addItem(ITEM_SET_SLOT, SET_ITEM, (p, slot, item, action) -> false);
                 addMenuClickHandler(ITEM_SLOT, ChestMenuUtils.getEmptyClickHandler());
                 drawBackground(BACKGROUND_SLOTS);
@@ -244,30 +229,22 @@ public class NetworkQuantumStorage extends SlimefunItem implements DistinctiveIt
 
             @Override
             public int[] getSlotsAccessedByItemTransport(ItemTransportFlow flow) {
-                if (flow == ItemTransportFlow.INSERT) {
-                    return new int[]{INPUT_SLOT};
-                } else if (flow == ItemTransportFlow.WITHDRAW) {
-                    return new int[]{OUTPUT_SLOT};
-                }
+                if (flow == ItemTransportFlow.INSERT) return new int[]{INPUT_SLOT};
+                else if (flow == ItemTransportFlow.WITHDRAW) return new int[]{OUTPUT_SLOT};
                 return new int[0];
             }
 
             @Override
             public void newInstance(@Nonnull BlockMenu menu, @Nonnull Block block) {
                 menu.addMenuClickHandler(ITEM_SET_SLOT, (p, slot, item, action) -> {
-                    if (action.isShiftClicked()) {
-                        toggleVoid(menu);
-                    } else {
-                        setItem(menu, p);
-                    }
+                    if (action.isShiftClicked()) toggleVoid(menu);
+                    else setItem(menu, p);
                     return false;
                 });
 
                 // Cache may exist if placed with items held inside.
                 QuantumCache cache = CACHES.get(block.getLocation());
-                if (cache == null) {
-                    cache = addCache(menu);
-                }
+                if (cache == null) cache = addCache(menu);
                 updateDisplayItem(menu, cache);
             }
         };
@@ -295,9 +272,7 @@ public class NetworkQuantumStorage extends SlimefunItem implements DistinctiveIt
             final ItemStack clone = itemStack.clone();
             final ItemMeta itemMeta = clone.getItemMeta();
             final List<String> lore = itemMeta.getLore();
-            for (int i = 0; i < 3; i++) {
-                lore.remove(lore.size() - 1);
-            }
+            for (int i = 0; i < 3; i++) lore.remove(lore.size() - 1);
             itemMeta.setLore(lore.isEmpty() ? null : lore);
             clone.setItemMeta(itemMeta);
 
@@ -309,7 +284,7 @@ public class NetworkQuantumStorage extends SlimefunItem implements DistinctiveIt
     }
 
     private boolean isDisplayItem(@Nonnull ItemStack itemStack) {
-        return PersistentDataAPI.getBoolean(itemStack.getItemMeta(), Keys.newKey("display"));
+        return PersistentDataAPI.getBoolean(itemStack.getItemMeta(), AbstractAddon.createKey("display"));
     }
 
     protected void onBreak(@Nonnull BlockBreakEvent event) {
@@ -330,9 +305,7 @@ public class NetworkQuantumStorage extends SlimefunItem implements DistinctiveIt
                 event.setDropItems(false);
             }
 
-            for (int i : this.slotsToDrop) {
-                blockMenu.dropItems(location, i);
-            }
+            for (int i : this.slotsToDrop) blockMenu.dropItems(location, i);
         }
     }
 
@@ -341,9 +314,7 @@ public class NetworkQuantumStorage extends SlimefunItem implements DistinctiveIt
         final ItemMeta itemMeta = itemStack.getItemMeta();
         final QuantumCache cache = DataTypeMethods.getCustom(itemMeta, Keys.QUANTUM_STORAGE_INSTANCE, PersistentQuantumStorageType.TYPE);
 
-        if (cache == null) {
-            return;
-        }
+        if (cache == null) return;
 
         syncBlock(event.getBlock().getLocation(), cache);
         CACHES.put(event.getBlock().getLocation(), cache);
@@ -355,13 +326,9 @@ public class NetworkQuantumStorage extends SlimefunItem implements DistinctiveIt
 
     @ParametersAreNonnullByDefault
     public static void tryInputItem(Location location, ItemStack[] input, QuantumCache cache) {
-        if (cache.getItemStack() == null) {
-            return;
-        }
+        if (cache.getItemStack() == null) return;
         for (ItemStack itemStack : input) {
-            if (isBlacklisted(itemStack)) {
-                continue;
-            }
+            if (isBlacklisted(itemStack)) continue;
             if (StackUtils.itemsMatch(cache, itemStack, true)) {
                 int leftover = cache.increaseAmount(itemStack.getAmount());
                 itemStack.setAmount(leftover);
@@ -372,16 +339,14 @@ public class NetworkQuantumStorage extends SlimefunItem implements DistinctiveIt
 
     private static boolean isBlacklisted(@Nonnull ItemStack itemStack) {
         return itemStack.getType() == Material.AIR
-            || itemStack.getType().getMaxDurability() < 0
-            || Tag.SHULKER_BOXES.isTagged(itemStack.getType());
+                || itemStack.getType().getMaxDurability() < 0
+                || Tag.SHULKER_BOXES.isTagged(itemStack.getType());
     }
 
     @ParametersAreNonnullByDefault
     @Nullable
     public static ItemStack getItemStack(@Nonnull QuantumCache cache, @Nonnull BlockMenu blockMenu) {
-        if (cache.getItemStack() == null || cache.getAmount() <= 0) {
-            return null;
-        }
+        if (cache.getItemStack() == null || cache.getAmount() <= 0) return null;
         return getItemStack(cache, blockMenu, cache.getItemStack().getMaxStackSize());
     }
 
@@ -394,16 +359,13 @@ public class NetworkQuantumStorage extends SlimefunItem implements DistinctiveIt
             ItemStack fetched = cache.withdrawItem(amount);
 
             if (output != null
-                && output.getType() != Material.AIR
-                && StackUtils.itemsMatch(cache, output, true)
-            ) {
+                    && output.getType() != Material.AIR
+                    && StackUtils.itemsMatch(cache, output, true)) {
                 // We have an output item we can use also
                 if (fetched == null || fetched.getType() == Material.AIR) {
                     // Storage is totally empty - just use output slot
                     fetched = output.clone();
-                    if (fetched.getAmount() > amount) {
-                        fetched.setAmount(amount);
-                    }
+                    if (fetched.getAmount() > amount) fetched.setAmount(amount);
                     output.setAmount(output.getAmount() - fetched.getAmount());
                 } else {
                     // Storage has content, lets add on top of it
@@ -422,9 +384,8 @@ public class NetworkQuantumStorage extends SlimefunItem implements DistinctiveIt
     }
 
     private static void updateDisplayItem(@Nonnull BlockMenu menu, @Nonnull QuantumCache cache) {
-        if (cache.getItemStack() == null) {
-            menu.replaceExistingItem(ITEM_SLOT, NO_ITEM);
-        } else {
+        if (cache.getItemStack() == null) menu.replaceExistingItem(ITEM_SLOT, NO_ITEM);
+        else {
             final ItemStack itemStack = cache.getItemStack().clone();
             final ItemMeta itemMeta = itemStack.getItemMeta();
             final List<String> lore = itemMeta.hasLore() ? itemMeta.getLore() : new ArrayList<>();
@@ -455,4 +416,4 @@ public class NetworkQuantumStorage extends SlimefunItem implements DistinctiveIt
     public boolean canStack(@Nonnull ItemMeta sfItemMeta, @Nonnull ItemMeta itemMeta) {
         return sfItemMeta.getPersistentDataContainer().equals(itemMeta.getPersistentDataContainer());
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkQuantumWorkbench.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkQuantumWorkbench.java
similarity index 75%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkQuantumWorkbench.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkQuantumWorkbench.java
index 3e069f5..e15274a 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkQuantumWorkbench.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkQuantumWorkbench.java
@@ -1,10 +1,11 @@
-package io.github.sefiraat.networks.slimefun.network;
-
-import io.github.sefiraat.networks.network.stackcaches.QuantumCache;
-import io.github.sefiraat.networks.utils.Keys;
-import io.github.sefiraat.networks.utils.Theme;
-import io.github.sefiraat.networks.utils.datatypes.DataTypeMethods;
-import io.github.sefiraat.networks.utils.datatypes.PersistentQuantumStorageType;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
+
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.QuantumCache;
+import id.universenetwork.sfa_loader.addons.networks.utils.Keys;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
+import id.universenetwork.sfa_loader.addons.networks.utils.datatypes.DataTypeMethods;
+import id.universenetwork.sfa_loader.addons.networks.utils.datatypes.PersistentQuantumStorageType;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -32,32 +33,31 @@ import java.util.List;
 import java.util.Map;
 
 public class NetworkQuantumWorkbench extends SlimefunItem {
-
     private static final int[] BACKGROUND_SLOTS = {
-        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 22, 24, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
+            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 16, 17, 18, 22, 24, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
     };
     private static final int[] RECIPE_SLOTS = {
-        10, 11, 12, 19, 20, 21, 28, 29, 30
+            10, 11, 12, 19, 20, 21, 28, 29, 30
     };
     private static final int CRAFT_SLOT = 23;
     private static final int OUTPUT_SLOT = 25;
 
     private static final CustomItemStack CRAFT_BUTTON_STACK = new CustomItemStack(
-        Material.CRAFTING_TABLE,
-        Theme.CLICK_INFO + "Click to entangle"
+            Material.CRAFTING_TABLE,
+            Theme.CLICK_INFO + "Click to entangle"
     );
 
     private static final Map<ItemStack[], ItemStack> RECIPES = new HashMap<>();
 
     public static final RecipeType TYPE = new RecipeType(
-        Keys.newKey("quantum-workbench"),
-        Theme.themedItemStack(
-            Material.BRAIN_CORAL_BLOCK,
-            Theme.MACHINE,
-            "Quantum Workbench",
-            "Crafted using the Quantum Workbench."
-        ),
-        NetworkQuantumWorkbench::addRecipe
+            AbstractAddon.createKey("quantum-workbench"),
+            Theme.themedItemStack(
+                    Material.BRAIN_CORAL_BLOCK,
+                    Theme.MACHINE,
+                    "Quantum Workbench",
+                    "Crafted using the Quantum Workbench."
+            ),
+            NetworkQuantumWorkbench::addRecipe
     );
 
     @ParametersAreNonnullByDefault
@@ -82,14 +82,12 @@ public class NetworkQuantumWorkbench extends SlimefunItem {
             @Override
             public boolean canOpen(@Nonnull Block block, @Nonnull Player player) {
                 return BlockStorage.check(block).canUse(player, false)
-                    && Slimefun.getProtectionManager().hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
+                        && Slimefun.getProtectionManager().hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
             }
 
             @Override
             public int[] getSlotsAccessedByItemTransport(ItemTransportFlow flow) {
-                if (flow == ItemTransportFlow.WITHDRAW) {
-                    return new int[]{OUTPUT_SLOT};
-                }
+                if (flow == ItemTransportFlow.WITHDRAW) return new int[]{OUTPUT_SLOT};
                 return new int[0];
             }
 
@@ -107,9 +105,7 @@ public class NetworkQuantumWorkbench extends SlimefunItem {
         final ItemStack itemInOutput = menu.getItemInSlot(OUTPUT_SLOT);
 
         // Quick escape, we only allow crafting if the output is empty
-        if (itemInOutput != null) {
-            return;
-        }
+        if (itemInOutput != null) return;
 
         final ItemStack[] inputs = new ItemStack[RECIPE_SLOTS.length];
         int i = 0;
@@ -124,12 +120,11 @@ public class NetworkQuantumWorkbench extends SlimefunItem {
         ItemStack crafted = null;
 
         // Go through each recipe, test and set the ItemStack if found
-        for (Map.Entry<ItemStack[], ItemStack> entry : RECIPES.entrySet()) {
+        for (Map.Entry<ItemStack[], ItemStack> entry : RECIPES.entrySet())
             if (testRecipe(inputs, entry.getKey())) {
                 crafted = entry.getValue().clone();
                 break;
             }
-        }
 
         if (crafted != null) {
             final ItemStack coreItem = inputs[4];
@@ -143,10 +138,10 @@ public class NetworkQuantumWorkbench extends SlimefunItem {
 
                 if (oldCache != null) {
                     final QuantumCache newCache = new QuantumCache(
-                        oldCache.getItemStack().clone(),
-                        oldCache.getAmount(),
-                        newQuantum.getMaxAmount(),
-                        oldCache.isVoidExcess()
+                            oldCache.getItemStack().clone(),
+                            oldCache.getAmount(),
+                            newQuantum.getMaxAmount(),
+                            oldCache.isVoidExcess()
                     );
                     DataTypeMethods.setCustom(newMeta, Keys.QUANTUM_STORAGE_INSTANCE, PersistentQuantumStorageType.TYPE, newCache);
                     newCache.addMetaLore(newMeta);
@@ -155,20 +150,14 @@ public class NetworkQuantumWorkbench extends SlimefunItem {
             }
 
             menu.pushItem(crafted, OUTPUT_SLOT);
-            for (int recipeSlot : RECIPE_SLOTS) {
-                if (menu.getItemInSlot(recipeSlot) != null) {
-                    menu.consumeItem(recipeSlot, 1, true);
-                }
-            }
+            for (int recipeSlot : RECIPE_SLOTS)
+                if (menu.getItemInSlot(recipeSlot) != null) menu.consumeItem(recipeSlot, 1, true);
         }
     }
 
     private boolean testRecipe(ItemStack[] input, ItemStack[] recipe) {
-        for (int test = 0; test < recipe.length; test++) {
-            if (!SlimefunUtils.isItemSimilar(input[test], recipe[test], true, false)) {
-                return false;
-            }
-        }
+        for (int test = 0; test < recipe.length; test++)
+            if (!SlimefunUtils.isItemSimilar(input[test], recipe[test], true, false)) return false;
         return true;
     }
 
@@ -186,4 +175,4 @@ public class NetworkQuantumWorkbench extends SlimefunItem {
     public static void addRecipe(ItemStack[] input, ItemStack output) {
         RECIPES.put(input, output);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkVacuum.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkVacuum.java
similarity index 68%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkVacuum.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkVacuum.java
index a9b731a..3e46878 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkVacuum.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkVacuum.java
@@ -1,11 +1,11 @@
-package io.github.sefiraat.networks.slimefun.network;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
 
 import dev.sefiraat.sefilib.misc.ParticleUtils;
-import io.github.sefiraat.networks.NetworkStorage;
-import io.github.sefiraat.networks.Networks;
-import io.github.sefiraat.networks.network.NodeDefinition;
-import io.github.sefiraat.networks.network.NodeType;
-import io.github.sefiraat.networks.slimefun.NetworkSlimefunItems;
+import id.universenetwork.sfa_loader.addons.networks.NetworkStorage;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeDefinition;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeType;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.NetworkSlimefunItems;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Scheduler;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
@@ -21,7 +21,6 @@ import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
 import me.mrCookieSlime.Slimefun.api.item_transport.ItemTransportFlow;
-import org.bukkit.Bukkit;
 import org.bukkit.Color;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -37,7 +36,6 @@ import java.util.Collection;
 import java.util.Optional;
 
 public class NetworkVacuum extends NetworkObject {
-
     private static final int[] INPUT_SLOTS = new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8};
 
     private final ItemSetting<Integer> tickRate;
@@ -50,35 +48,32 @@ public class NetworkVacuum extends NetworkObject {
         this.vacuumRange = new IntRangeSetting(this, "vacuum_range", 1, 2, 5);
         addItemSetting(this.tickRate, this.vacuumRange);
 
-        for (int inputSlot : INPUT_SLOTS) {
-            this.getSlotsToDrop().add(inputSlot);
-        }
+        for (int inputSlot : INPUT_SLOTS) this.getSlotsToDrop().add(inputSlot);
 
         addItemHandler(
-            new BlockTicker() {
-
-                private int tick = 1;
+                new BlockTicker() {
+                    private int tick = 1;
 
-                @Override
-                public boolean isSynchronized() {
-                    return false;
-                }
+                    @Override
+                    public boolean isSynchronized() {
+                        return false;
+                    }
 
-                @Override
-                public void tick(Block block, SlimefunItem item, Config data) {
-                    if (tick <= 1) {
-                        final BlockMenu blockMenu = BlockStorage.getInventory(block);
-                        addToRegistry(block);
-                        tryAddItem(blockMenu);
-                        Bukkit.getScheduler().runTask(Networks.getInstance(), bukkitTask -> findItem(blockMenu));
+                    @Override
+                    public void tick(Block block, SlimefunItem item, Config data) {
+                        if (tick <= 1) {
+                            final BlockMenu blockMenu = BlockStorage.getInventory(block);
+                            addToRegistry(block);
+                            tryAddItem(blockMenu);
+                            Scheduler.run(() -> findItem(blockMenu));
+                        }
                     }
-                }
 
-                @Override
-                public void uniqueTick() {
-                    tick = tick <= 1 ? tickRate.getValue() : tick - 1;
+                    @Override
+                    public void uniqueTick() {
+                        tick = tick <= 1 ? tickRate.getValue() : tick - 1;
+                    }
                 }
-            }
         );
     }
 
@@ -89,11 +84,10 @@ public class NetworkVacuum extends NetworkObject {
                 final Location location = blockMenu.getLocation().clone().add(0.5, 0.5, 0.5);
                 final int range = this.vacuumRange.getValue();
                 Collection<Entity> items = location.getWorld()
-                    .getNearbyEntities(location, range, range, range, Item.class::isInstance);
+                        .getNearbyEntities(location, range, range, range, Item.class::isInstance);
                 Optional<Entity> optionalEntity = items.stream().findFirst();
-                if (optionalEntity.isEmpty() || !(optionalEntity.get() instanceof Item item)) {
-                    return;
-                }
+                if (!optionalEntity.isPresent() || !(optionalEntity.get() instanceof Item)) return;
+                Item item = (Item) optionalEntity.get();
                 if (item.getPickupDelay() <= 0 && !SlimefunUtils.hasNoPickupFlag(item)) {
                     final ItemStack itemStack = item.getItemStack();
                     blockMenu.replaceExistingItem(inputSlot, itemStack);
@@ -108,16 +102,12 @@ public class NetworkVacuum extends NetworkObject {
     private void tryAddItem(@Nonnull BlockMenu blockMenu) {
         final NodeDefinition definition = NetworkStorage.getAllNetworkObjects().get(blockMenu.getLocation());
 
-        if (definition.getNode() == null) {
-            return;
-        }
+        if (definition.getNode() == null) return;
 
         for (int inputSlot : INPUT_SLOTS) {
             final ItemStack itemStack = blockMenu.getItemInSlot(inputSlot);
 
-            if (itemStack == null || itemStack.getType() == Material.AIR) {
-                continue;
-            }
+            if (itemStack == null || itemStack.getType() == Material.AIR) continue;
             definition.getNode().getRoot().addItemStack(itemStack);
         }
     }
@@ -125,7 +115,6 @@ public class NetworkVacuum extends NetworkObject {
     @Override
     public void postRegister() {
         new BlockMenuPreset(this.getId(), this.getItemName()) {
-
             @Override
             public void init() {
                 setSize(9);
@@ -134,17 +123,15 @@ public class NetworkVacuum extends NetworkObject {
             @Override
             public boolean canOpen(@Nonnull Block block, @Nonnull Player player) {
                 return NetworkSlimefunItems.NETWORK_GRID.canUse(player, false)
-                    && Slimefun.getProtectionManager()
-                    .hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
+                        && Slimefun.getProtectionManager()
+                        .hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
             }
 
             @Override
             public int[] getSlotsAccessedByItemTransport(ItemTransportFlow flow) {
-                if (flow == ItemTransportFlow.INSERT) {
-                    return INPUT_SLOTS;
-                }
+                if (flow == ItemTransportFlow.INSERT) return INPUT_SLOTS;
                 return new int[0];
             }
         };
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkVanillaGrabber.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkVanillaGrabber.java
similarity index 78%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkVanillaGrabber.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkVanillaGrabber.java
index f5f9fd5..374ede2 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkVanillaGrabber.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkVanillaGrabber.java
@@ -1,10 +1,10 @@
-package io.github.sefiraat.networks.slimefun.network;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
 
 import com.bgsoftware.wildchests.api.WildChestsAPI;
-import io.github.sefiraat.networks.NetworkStorage;
-import io.github.sefiraat.networks.Networks;
-import io.github.sefiraat.networks.network.NodeDefinition;
-import io.github.sefiraat.networks.network.NodeType;
+import id.universenetwork.sfa_loader.addons.networks.NetworkStorage;
+import id.universenetwork.sfa_loader.addons.networks.Networks;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeDefinition;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeType;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -12,19 +12,11 @@ import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
-import org.bukkit.Bukkit;
-import org.bukkit.Color;
-import org.bukkit.Material;
-import org.bukkit.OfflinePlayer;
-import org.bukkit.Particle;
+import org.bukkit.*;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.block.BlockState;
-import org.bukkit.inventory.BrewerInventory;
-import org.bukkit.inventory.FurnaceInventory;
-import org.bukkit.inventory.Inventory;
-import org.bukkit.inventory.InventoryHolder;
-import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.*;
 import org.bukkit.inventory.meta.PotionMeta;
 import org.bukkit.potion.PotionType;
 
@@ -33,9 +25,8 @@ import javax.annotation.Nullable;
 import java.util.UUID;
 
 public class NetworkVanillaGrabber extends NetworkDirectional {
-
     private static final int[] BACKGROUND_SLOTS = new int[]{
-        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 20, 22, 23, 24, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
+            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 20, 22, 23, 24, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
     };
     private static final int OUTPUT_SLOT = 25;
     private static final int NORTH_SLOT = 11;
@@ -63,18 +54,13 @@ public class NetworkVanillaGrabber extends NetworkDirectional {
     }
 
     private void tryGrabItem(@Nonnull BlockMenu blockMenu) {
-
         final ItemStack itemInSlot = blockMenu.getItemInSlot(OUTPUT_SLOT);
 
-        if (itemInSlot != null && itemInSlot.getType() != Material.AIR) {
-            return;
-        }
+        if (itemInSlot != null && itemInSlot.getType() != Material.AIR) return;
 
         final NodeDefinition definition = NetworkStorage.getAllNetworkObjects().get(blockMenu.getLocation());
 
-        if (definition == null || definition.getNode() == null) {
-            return;
-        }
+        if (definition == null || definition.getNode() == null) return;
 
         final BlockFace direction = getCurrentDirection(blockMenu);
         final Block block = blockMenu.getBlock();
@@ -82,15 +68,13 @@ public class NetworkVanillaGrabber extends NetworkDirectional {
         final UUID uuid = UUID.fromString(BlockStorage.getLocationInfo(block.getLocation(), OWNER_KEY));
         final OfflinePlayer offlinePlayer = Bukkit.getOfflinePlayer(uuid);
 
-        if (!Slimefun.getProtectionManager().hasPermission(offlinePlayer, targetBlock, Interaction.INTERACT_BLOCK)) {
+        if (!Slimefun.getProtectionManager().hasPermission(offlinePlayer, targetBlock, Interaction.INTERACT_BLOCK))
             return;
-        }
 
         final BlockState blockState = targetBlock.getState();
 
-        if (!(blockState instanceof InventoryHolder holder)) {
-            return;
-        }
+        if (!(blockState instanceof InventoryHolder)) return;
+        InventoryHolder holder = (InventoryHolder) blockState;
 
         boolean wildChests = Networks.getSupportedPluginManager().isWildChests();
         boolean isChest = wildChests && WildChestsAPI.getChest(targetBlock.getLocation()) != null;
@@ -106,16 +90,19 @@ public class NetworkVanillaGrabber extends NetworkDirectional {
         sendDebugMessage(block.getLocation(), "WildChest test passed.");
         final Inventory inventory = holder.getInventory();
 
-        if (inventory instanceof FurnaceInventory furnaceInventory) {
+        if (inventory instanceof FurnaceInventory) {
+            FurnaceInventory furnaceInventory = (FurnaceInventory) inventory;
+
             final ItemStack furnaceInventoryResult = furnaceInventory.getResult();
             final ItemStack furnaceInventoryFuel = furnaceInventory.getFuel();
             grabItem(blockMenu, furnaceInventoryResult);
 
-            if (furnaceInventoryFuel != null && furnaceInventoryFuel.getType() == Material.BUCKET) {
+            if (furnaceInventoryFuel != null && furnaceInventoryFuel.getType() == Material.BUCKET)
                 grabItem(blockMenu, furnaceInventoryFuel);
-            }
 
-        } else if (inventory instanceof BrewerInventory brewerInventory) {
+        } else if (inventory instanceof BrewerInventory) {
+            BrewerInventory brewerInventory = (BrewerInventory) inventory;
+
             for (int i = 0; i < 3; i++) {
                 final ItemStack stack = brewerInventory.getContents()[i];
                 if (stack != null && stack.getType() == Material.POTION) {
@@ -126,13 +113,7 @@ public class NetworkVanillaGrabber extends NetworkDirectional {
                     }
                 }
             }
-        } else {
-            for (ItemStack stack : inventory.getContents()) {
-                if (grabItem(blockMenu, stack)) {
-                    return;
-                }
-            }
-        }
+        } else for (ItemStack stack : inventory.getContents()) if (grabItem(blockMenu, stack)) return;
     }
 
     private boolean grabItem(@Nonnull BlockMenu blockMenu, @Nullable ItemStack stack) {
@@ -140,9 +121,7 @@ public class NetworkVanillaGrabber extends NetworkDirectional {
             blockMenu.replaceExistingItem(OUTPUT_SLOT, stack.clone());
             stack.setAmount(0);
             return true;
-        } else {
-            return false;
-        }
+        } else return false;
     }
 
     @Nonnull
@@ -195,4 +174,4 @@ public class NetworkVanillaGrabber extends NetworkDirectional {
     protected Particle.DustOptions getDustOptions() {
         return new Particle.DustOptions(Color.MAROON, 1);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkVanillaPusher.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkVanillaPusher.java
similarity index 75%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkVanillaPusher.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkVanillaPusher.java
index 802f47d..69eb3be 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkVanillaPusher.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkVanillaPusher.java
@@ -1,10 +1,10 @@
-package io.github.sefiraat.networks.slimefun.network;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
 
 import com.bgsoftware.wildchests.api.WildChestsAPI;
-import io.github.sefiraat.networks.NetworkStorage;
-import io.github.sefiraat.networks.Networks;
-import io.github.sefiraat.networks.network.NodeDefinition;
-import io.github.sefiraat.networks.network.NodeType;
+import id.universenetwork.sfa_loader.addons.networks.NetworkStorage;
+import id.universenetwork.sfa_loader.addons.networks.Networks;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeDefinition;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeType;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -13,28 +13,19 @@ import io.github.thebusybiscuit.slimefun4.libraries.dough.inventory.InvUtils;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
-import org.bukkit.Bukkit;
-import org.bukkit.Color;
-import org.bukkit.Material;
-import org.bukkit.OfflinePlayer;
-import org.bukkit.Particle;
+import org.bukkit.*;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.block.BlockState;
-import org.bukkit.inventory.BrewerInventory;
-import org.bukkit.inventory.FurnaceInventory;
-import org.bukkit.inventory.Inventory;
-import org.bukkit.inventory.InventoryHolder;
-import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.*;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 import java.util.UUID;
 
 public class NetworkVanillaPusher extends NetworkDirectional {
-
     private static final int[] BACKGROUND_SLOTS = new int[]{
-        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 20, 22, 23, 24, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
+            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 20, 22, 23, 24, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
     };
     private static final int INPUT_SLOT = 25;
     private static final int NORTH_SLOT = 11;
@@ -47,8 +38,7 @@ public class NetworkVanillaPusher extends NetworkDirectional {
     public NetworkVanillaPusher(ItemGroup itemGroup,
                                 SlimefunItemStack item,
                                 RecipeType recipeType,
-                                ItemStack[] recipe
-    ) {
+                                ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe, NodeType.PUSHER);
         this.getSlotsToDrop().add(INPUT_SLOT);
     }
@@ -56,17 +46,13 @@ public class NetworkVanillaPusher extends NetworkDirectional {
     @Override
     protected void onTick(@Nullable BlockMenu blockMenu, @Nonnull Block block) {
         super.onTick(blockMenu, block);
-        if (blockMenu != null) {
-            tryPushItem(blockMenu);
-        }
+        if (blockMenu != null) tryPushItem(blockMenu);
     }
 
     private void tryPushItem(@Nonnull BlockMenu blockMenu) {
         final NodeDefinition definition = NetworkStorage.getAllNetworkObjects().get(blockMenu.getLocation());
 
-        if (definition == null || definition.getNode() == null) {
-            return;
-        }
+        if (definition == null || definition.getNode() == null) return;
 
         final BlockFace direction = getCurrentDirection(blockMenu);
         final Block block = blockMenu.getBlock();
@@ -74,22 +60,18 @@ public class NetworkVanillaPusher extends NetworkDirectional {
         final UUID uuid = UUID.fromString(BlockStorage.getLocationInfo(block.getLocation(), OWNER_KEY));
         final OfflinePlayer offlinePlayer = Bukkit.getOfflinePlayer(uuid);
 
-        if (!Slimefun.getProtectionManager().hasPermission(offlinePlayer, targetBlock, Interaction.INTERACT_BLOCK)) {
+        if (!Slimefun.getProtectionManager().hasPermission(offlinePlayer, targetBlock, Interaction.INTERACT_BLOCK))
             return;
-        }
 
         final BlockState blockState = targetBlock.getState();
 
-        if (!(blockState instanceof InventoryHolder holder)) {
-            return;
-        }
+        if (!(blockState instanceof InventoryHolder)) return;
+        InventoryHolder holder = (InventoryHolder) blockState;
 
         final Inventory inventory = holder.getInventory();
         final ItemStack stack = blockMenu.getItemInSlot(INPUT_SLOT);
 
-        if (stack == null || stack.getType() == Material.AIR) {
-            return;
-        }
+        if (stack == null || stack.getType() == Material.AIR) return;
 
         boolean wildChests = Networks.getSupportedPluginManager().isWildChests();
         boolean isChest = wildChests && WildChestsAPI.getChest(targetBlock.getLocation()) != null;
@@ -97,14 +79,14 @@ public class NetworkVanillaPusher extends NetworkDirectional {
         sendDebugMessage(block.getLocation(), "WildChests detected: " + wildChests);
         sendDebugMessage(block.getLocation(), "Block detected as chest: " + isChest);
 
-        if (inventory instanceof FurnaceInventory furnace) {
+        if (inventory instanceof FurnaceInventory) {
+            FurnaceInventory furnace = (FurnaceInventory) inventory;
             handleFurnace(stack, furnace);
-        } else if (inventory instanceof BrewerInventory brewer) {
+        } else if (inventory instanceof BrewerInventory) {
+            BrewerInventory brewer = (BrewerInventory) inventory;
             handleBrewingStand(stack, brewer);
-        } else if (wildChests && isChest) {
-            sendDebugMessage(block.getLocation(), "WildChest test failed, escaping");
-            return;
-        } else if (InvUtils.fits(holder.getInventory(), stack)) {
+        } else if (wildChests && isChest) sendDebugMessage(block.getLocation(), "WildChest test failed, escaping");
+        else if (InvUtils.fits(holder.getInventory(), stack)) {
             sendDebugMessage(block.getLocation(), "WildChest test passed.");
             holder.getInventory().addItem(stack);
             stack.setAmount(0);
@@ -113,13 +95,11 @@ public class NetworkVanillaPusher extends NetworkDirectional {
 
     private void handleFurnace(@Nonnull ItemStack stack, @Nonnull FurnaceInventory furnace) {
         if (stack.getType().isFuel()
-            && (furnace.getFuel() == null || furnace.getFuel().getType() == Material.AIR)
-        ) {
+                && (furnace.getFuel() == null || furnace.getFuel().getType() == Material.AIR)) {
             furnace.setFuel(stack.clone());
             stack.setAmount(0);
         } else if (!stack.getType().isFuel()
-            && (furnace.getSmelting() == null || furnace.getSmelting().getType() == Material.AIR)
-        ) {
+                && (furnace.getSmelting() == null || furnace.getSmelting().getType() == Material.AIR)) {
             furnace.setSmelting(stack.clone());
             stack.setAmount(0);
         }
@@ -198,4 +178,4 @@ public class NetworkVanillaPusher extends NetworkDirectional {
     protected Particle.DustOptions getDustOptions() {
         return new Particle.DustOptions(Color.MAROON, 1);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkWirelessReceiver.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkWirelessReceiver.java
similarity index 68%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkWirelessReceiver.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkWirelessReceiver.java
index 7ec8617..c00945b 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkWirelessReceiver.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkWirelessReceiver.java
@@ -1,10 +1,10 @@
-package io.github.sefiraat.networks.slimefun.network;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
 
-import io.github.sefiraat.networks.NetworkStorage;
-import io.github.sefiraat.networks.network.NodeDefinition;
-import io.github.sefiraat.networks.network.NodeType;
-import io.github.sefiraat.networks.slimefun.NetworkSlimefunItems;
-import io.github.sefiraat.networks.utils.Theme;
+import id.universenetwork.sfa_loader.addons.networks.NetworkStorage;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeDefinition;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeType;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.NetworkSlimefunItems;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -26,20 +26,19 @@ import org.bukkit.inventory.ItemStack;
 import javax.annotation.Nonnull;
 
 public class NetworkWirelessReceiver extends NetworkObject {
-
     public static final int RECEIVED_SLOT = 13;
 
     private static final int[] BACKGROUND_SLOTS = new int[]{
-        0, 1, 2, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26
+            0, 1, 2, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26
     };
 
     private static final int[] RECEIVED_SLOTS_TEMPLATE = new int[]{
-        3, 4, 5, 12, 14, 21, 22, 23
+            3, 4, 5, 12, 14, 21, 22, 23
     };
 
     private static final CustomItemStack RECEIVED_BACKGROUND_STACK = new CustomItemStack(
-        Material.GREEN_STAINED_GLASS_PANE,
-        Theme.SUCCESS + "Received items"
+            Material.GREEN_STAINED_GLASS_PANE,
+            Theme.SUCCESS + "Received items"
     );
 
     public NetworkWirelessReceiver(ItemGroup itemGroup,
@@ -51,45 +50,39 @@ public class NetworkWirelessReceiver extends NetworkObject {
         this.getSlotsToDrop().add(RECEIVED_SLOT);
 
         addItemHandler(
-            new BlockTicker() {
-                @Override
-                public boolean isSynchronized() {
-                    return false;
-                }
+                new BlockTicker() {
+                    @Override
+                    public boolean isSynchronized() {
+                        return false;
+                    }
 
-                @Override
-                public void tick(Block block, SlimefunItem slimefunItem, Config config) {
-                    BlockMenu blockMenu = BlockStorage.getInventory(block);
-                    if (blockMenu != null) {
-                        addToRegistry(block);
-                        onTick(blockMenu);
+                    @Override
+                    public void tick(Block block, SlimefunItem slimefunItem, Config config) {
+                        BlockMenu blockMenu = BlockStorage.getInventory(block);
+                        if (blockMenu != null) {
+                            addToRegistry(block);
+                            onTick(blockMenu);
+                        }
                     }
                 }
-            }
         );
     }
 
     private void onTick(@Nonnull BlockMenu blockMenu) {
         final NodeDefinition definition = NetworkStorage.getAllNetworkObjects().get(blockMenu.getLocation());
 
-        if (definition == null || definition.getNode() == null) {
-            return;
-        }
+        if (definition == null || definition.getNode() == null) return;
 
         final ItemStack itemStack = blockMenu.getItemInSlot(RECEIVED_SLOT);
 
-        if (itemStack == null || itemStack.getType() == Material.AIR) {
-            return;
-        }
+        if (itemStack == null || itemStack.getType() == Material.AIR) return;
 
         definition.getNode().getRoot().addItemStack(itemStack);
-
     }
 
     @Override
     public void postRegister() {
         new BlockMenuPreset(this.getId(), this.getItemName()) {
-
             @Override
             public void init() {
                 drawBackground(BACKGROUND_SLOTS);
@@ -99,8 +92,8 @@ public class NetworkWirelessReceiver extends NetworkObject {
             @Override
             public boolean canOpen(@Nonnull Block block, @Nonnull Player player) {
                 return NetworkSlimefunItems.NETWORK_CELL.canUse(player, false)
-                    && Slimefun.getProtectionManager()
-                    .hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
+                        && Slimefun.getProtectionManager()
+                        .hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
             }
 
             @Override
@@ -110,5 +103,4 @@ public class NetworkWirelessReceiver extends NetworkObject {
 
         };
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkWirelessTransmitter.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkWirelessTransmitter.java
similarity index 57%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkWirelessTransmitter.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkWirelessTransmitter.java
index 1c9509b..11893f3 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/NetworkWirelessTransmitter.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/NetworkWirelessTransmitter.java
@@ -1,11 +1,11 @@
-package io.github.sefiraat.networks.slimefun.network;
-
-import io.github.sefiraat.networks.NetworkStorage;
-import io.github.sefiraat.networks.network.NodeDefinition;
-import io.github.sefiraat.networks.network.NodeType;
-import io.github.sefiraat.networks.network.stackcaches.ItemRequest;
-import io.github.sefiraat.networks.slimefun.NetworkSlimefunItems;
-import io.github.sefiraat.networks.utils.Theme;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network;
+
+import id.universenetwork.sfa_loader.addons.networks.NetworkStorage;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeDefinition;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeType;
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.ItemRequest;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.NetworkSlimefunItems;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -32,20 +32,19 @@ import java.util.HashMap;
 import java.util.Map;
 
 public class NetworkWirelessTransmitter extends NetworkObject {
-
     public static final int TEMPLATE_SLOT = 13;
 
     private static final int[] BACKGROUND_SLOTS = new int[]{
-        0, 1, 2, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26
+            0, 1, 2, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26
     };
 
     private static final int[] BACKGROUND_SLOTS_TEMPLATE = new int[]{
-        3, 4, 5, 12, 14, 21, 22, 23
+            3, 4, 5, 12, 14, 21, 22, 23
     };
 
     private static final CustomItemStack TEMPLATE_BACKGROUND_STACK = new CustomItemStack(
-        Material.GREEN_STAINED_GLASS_PANE,
-        Theme.SUCCESS + "Transmit items matching"
+            Material.GREEN_STAINED_GLASS_PANE,
+            Theme.SUCCESS + "Transmit items matching"
     );
 
     private static final String LINKED_LOCATION_KEY_X = "linked-location-x";
@@ -60,81 +59,74 @@ public class NetworkWirelessTransmitter extends NetworkObject {
     public NetworkWirelessTransmitter(ItemGroup itemGroup,
                                       SlimefunItemStack item,
                                       RecipeType recipeType,
-                                      ItemStack[] recipe
-    ) {
+                                      ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe, NodeType.WIRELESS_TRANSMITTER);
         this.getSlotsToDrop().add(TEMPLATE_SLOT);
 
         addItemHandler(
-            new BlockTicker() {
-                private final Map<Location, Integer> tickMap = new HashMap<>();
-                private final Map<Location, Boolean> firstTick = new HashMap<>();
+                new BlockTicker() {
+                    private final Map<Location, Integer> tickMap = new HashMap<>();
+                    private final Map<Location, Boolean> firstTick = new HashMap<>();
 
-                @Override
-                public boolean isSynchronized() {
-                    return false;
-                }
+                    @Override
+                    public boolean isSynchronized() {
+                        return false;
+                    }
 
-                @Override
-                public void tick(Block block, SlimefunItem slimefunItem, Config config) {
-                    BlockMenu blockMenu = BlockStorage.getInventory(block);
-                    if (blockMenu != null) {
-                        addToRegistry(block);
-
-                        boolean isFirstTick = firstTick.getOrDefault(block.getLocation(), true);
-                        if (isFirstTick) {
-                            final String xString = BlockStorage.getLocationInfo(
-                                block.getLocation(),
-                                LINKED_LOCATION_KEY_X
-                            );
-                            final String yString = BlockStorage.getLocationInfo(
-                                block.getLocation(),
-                                LINKED_LOCATION_KEY_Y
-                            );
-                            final String zString = BlockStorage.getLocationInfo(
-                                block.getLocation(),
-                                LINKED_LOCATION_KEY_Z
-                            );
-                            if (xString != null && yString != null && zString != null) {
-                                final Location linkedLocation = new Location(
-                                    block.getWorld(),
-                                    Integer.parseInt(xString),
-                                    Integer.parseInt(yString),
-                                    Integer.parseInt(zString)
+                    @Override
+                    public void tick(Block block, SlimefunItem slimefunItem, Config config) {
+                        BlockMenu blockMenu = BlockStorage.getInventory(block);
+                        if (blockMenu != null) {
+                            addToRegistry(block);
+
+                            boolean isFirstTick = firstTick.getOrDefault(block.getLocation(), true);
+                            if (isFirstTick) {
+                                final String xString = BlockStorage.getLocationInfo(
+                                        block.getLocation(),
+                                        LINKED_LOCATION_KEY_X
+                                );
+                                final String yString = BlockStorage.getLocationInfo(
+                                        block.getLocation(),
+                                        LINKED_LOCATION_KEY_Y
                                 );
-                                linkedLocations.put(block.getLocation(), linkedLocation);
+                                final String zString = BlockStorage.getLocationInfo(
+                                        block.getLocation(),
+                                        LINKED_LOCATION_KEY_Z
+                                );
+                                if (xString != null && yString != null && zString != null) {
+                                    final Location linkedLocation = new Location(
+                                            block.getWorld(),
+                                            Integer.parseInt(xString),
+                                            Integer.parseInt(yString),
+                                            Integer.parseInt(zString)
+                                    );
+                                    linkedLocations.put(block.getLocation(), linkedLocation);
+                                }
+                                firstTick.put(block.getLocation(), false);
                             }
-                            firstTick.put(block.getLocation(), false);
-                        }
 
-                        int tick = tickMap.getOrDefault(block.getLocation(), 0);
-                        if (tick >= TICKS_PER) {
-                            onTick(blockMenu);
-                            tickMap.remove(block.getLocation());
-                            tick = 0;
-                        } else {
-                            tick++;
+                            int tick = tickMap.getOrDefault(block.getLocation(), 0);
+                            if (tick >= TICKS_PER) {
+                                onTick(blockMenu);
+                                tickMap.remove(block.getLocation());
+                                tick = 0;
+                            } else tick++;
+                            tickMap.put(block.getLocation(), tick + 1);
                         }
-                        tickMap.put(block.getLocation(), tick + 1);
                     }
                 }
-            }
         );
     }
 
     private void onTick(@Nonnull BlockMenu blockMenu) {
         final NodeDefinition definition = NetworkStorage.getAllNetworkObjects().get(blockMenu.getLocation());
 
-        if (definition == null || definition.getNode() == null) {
-            return;
-        }
+        if (definition == null || definition.getNode() == null) return;
 
         final Location location = blockMenu.getLocation();
         final Location linkedLocation = linkedLocations.get(location);
 
-        if (linkedLocation == null) {
-            return;
-        }
+        if (linkedLocation == null) return;
 
         final SlimefunItem slimefunItem = BlockStorage.check(linkedLocation);
 
@@ -149,16 +141,12 @@ public class NetworkWirelessTransmitter extends NetworkObject {
         if (itemStack == null || itemStack.getType() == Material.AIR) {
             final ItemStack templateStack = blockMenu.getItemInSlot(TEMPLATE_SLOT);
 
-            if (templateStack == null || templateStack.getType() == Material.AIR) {
-                return;
-            }
+            if (templateStack == null || templateStack.getType() == Material.AIR) return;
 
-            if (definition.getNode().getRoot().getRootPower() < REQUIRED_POWER) {
-                return;
-            }
+            if (definition.getNode().getRoot().getRootPower() < REQUIRED_POWER) return;
 
             final ItemStack stackToPush = definition.getNode().getRoot().getItemStack(
-                new ItemRequest(templateStack.clone(), templateStack.getMaxStackSize())
+                    new ItemRequest(templateStack.clone(), templateStack.getMaxStackSize())
             );
 
             if (stackToPush != null) {
@@ -168,20 +156,20 @@ public class NetworkWirelessTransmitter extends NetworkObject {
                     final Location particleLocation = blockMenu.getLocation().clone().add(0.5, 1.1, 0.5);
                     final Location particleLocation2 = linkedBlockMenu.getLocation().clone().add(0.5, 2.1, 0.5);
                     particleLocation.getWorld().spawnParticle(
-                        Particle.WAX_ON,
-                        particleLocation,
-                        0,
-                        0,
-                        4,
-                        0
+                            Particle.WAX_ON,
+                            particleLocation,
+                            0,
+                            0,
+                            4,
+                            0
                     );
                     particleLocation2.getWorld().spawnParticle(
-                        Particle.WAX_OFF,
-                        particleLocation2,
-                        0,
-                        0,
-                        -4,
-                        0
+                            Particle.WAX_OFF,
+                            particleLocation2,
+                            0,
+                            0,
+                            -4,
+                            0
                     );
                 }
             }
@@ -191,7 +179,6 @@ public class NetworkWirelessTransmitter extends NetworkObject {
     @Override
     public void postRegister() {
         new BlockMenuPreset(this.getId(), this.getItemName()) {
-
             @Override
             public void init() {
                 drawBackground(BACKGROUND_SLOTS);
@@ -201,15 +188,14 @@ public class NetworkWirelessTransmitter extends NetworkObject {
             @Override
             public boolean canOpen(@Nonnull Block block, @Nonnull Player player) {
                 return NetworkSlimefunItems.NETWORK_CELL.canUse(player, false)
-                    && Slimefun.getProtectionManager()
-                    .hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
+                        && Slimefun.getProtectionManager()
+                        .hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
             }
 
             @Override
             public int[] getSlotsAccessedByItemTransport(ItemTransportFlow flow) {
                 return new int[]{0};
             }
-
         };
     }
 
@@ -225,5 +211,4 @@ public class NetworkWirelessTransmitter extends NetworkObject {
         BlockStorage.addBlockInfo(block, LINKED_LOCATION_KEY_Y, String.valueOf(linkedLocation.getBlockY()));
         BlockStorage.addBlockInfo(block, LINKED_LOCATION_KEY_Z, String.valueOf(linkedLocation.getBlockZ()));
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/grid/AbstractGrid.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/grid/AbstractGrid.java
similarity index 66%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/grid/AbstractGrid.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/grid/AbstractGrid.java
index 21f882d..74fcc2e 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/grid/AbstractGrid.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/grid/AbstractGrid.java
@@ -1,13 +1,13 @@
-package io.github.sefiraat.networks.slimefun.network.grid;
-
-import io.github.sefiraat.networks.NetworkStorage;
-import io.github.sefiraat.networks.network.GridItemRequest;
-import io.github.sefiraat.networks.network.NetworkRoot;
-import io.github.sefiraat.networks.network.NodeDefinition;
-import io.github.sefiraat.networks.network.NodeType;
-import io.github.sefiraat.networks.slimefun.network.NetworkObject;
-import io.github.sefiraat.networks.utils.StackUtils;
-import io.github.sefiraat.networks.utils.Theme;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network.grid;
+
+import id.universenetwork.sfa_loader.addons.networks.NetworkStorage;
+import id.universenetwork.sfa_loader.addons.networks.network.GridItemRequest;
+import id.universenetwork.sfa_loader.addons.networks.network.NetworkRoot;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeDefinition;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeType;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.network.NetworkObject;
+import id.universenetwork.sfa_loader.addons.networks.utils.StackUtils;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
@@ -34,52 +34,43 @@ import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 import javax.annotation.ParametersAreNonnullByDefault;
 import java.text.MessageFormat;
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
+import java.util.*;
+import java.util.stream.Collectors;
 
 public abstract class AbstractGrid extends NetworkObject {
-
     private static final CustomItemStack BLANK_SLOT_STACK = new CustomItemStack(
-        Material.LIGHT_GRAY_STAINED_GLASS_PANE,
-        " "
+            Material.LIGHT_GRAY_STAINED_GLASS_PANE,
+            " "
     );
 
     private static final CustomItemStack PAGE_PREVIOUS_STACK = new CustomItemStack(
-        Material.RED_STAINED_GLASS_PANE,
-        Theme.CLICK_INFO.getColor() + "Previous Page"
+            Material.RED_STAINED_GLASS_PANE, Theme.CLICK_INFO.getColor() + "Previous Page"
     );
 
     private static final CustomItemStack PAGE_NEXT_STACK = new CustomItemStack(
-        Material.RED_STAINED_GLASS_PANE,
-        Theme.CLICK_INFO.getColor() + "Next Page"
+            Material.RED_STAINED_GLASS_PANE, Theme.CLICK_INFO.getColor() + "Next Page"
     );
 
     private static final CustomItemStack CHANGE_SORT_STACK = new CustomItemStack(
-        Material.BLUE_STAINED_GLASS_PANE,
-        Theme.CLICK_INFO.getColor() + "Change Sort Order"
+            Material.BLUE_STAINED_GLASS_PANE, Theme.CLICK_INFO.getColor() + "Change Sort Order"
     );
 
     private static final CustomItemStack FILTER_STACK = new CustomItemStack(
-        Material.NAME_TAG,
-        Theme.CLICK_INFO.getColor() + "Set Filter (Right Click to Clear)"
+            Material.NAME_TAG, Theme.CLICK_INFO.getColor() + "Set Filter (Right Click to Clear)"
     );
 
     private static final Comparator<Map.Entry<ItemStack, Integer>> ALPHABETICAL_SORT = Comparator.comparing(
-        itemStackIntegerEntry -> {
-            ItemStack itemStack = itemStackIntegerEntry.getKey();
-            SlimefunItem slimefunItem = SlimefunItem.getByItem(itemStack);
-            if (slimefunItem != null) {
-                return ChatColor.stripColor(slimefunItem.getItemName());
-            } else {
-                ItemMeta itemMeta = itemStackIntegerEntry.getKey().getItemMeta();
-                return itemMeta.hasDisplayName()
-                    ? ChatColor.stripColor(itemMeta.getDisplayName())
-                    : itemStackIntegerEntry.getKey().getType().name();
+            itemStackIntegerEntry -> {
+                ItemStack itemStack = itemStackIntegerEntry.getKey();
+                SlimefunItem slimefunItem = SlimefunItem.getByItem(itemStack);
+                if (slimefunItem != null) return ChatColor.stripColor(slimefunItem.getItemName());
+                else {
+                    ItemMeta itemMeta = itemStackIntegerEntry.getKey().getItemMeta();
+                    return itemMeta.hasDisplayName()
+                            ? ChatColor.stripColor(itemMeta.getDisplayName())
+                            : itemStackIntegerEntry.getKey().getType().name();
+                }
             }
-        }
     );
 
     private static final Comparator<Map.Entry<ItemStack, Integer>> NUMERICAL_SORT = Map.Entry.comparingByValue();
@@ -95,53 +86,46 @@ public abstract class AbstractGrid extends NetworkObject {
         addItemSetting(this.tickRate);
 
         addItemHandler(
-            new BlockTicker() {
-
-                private int tick = 1;
+                new BlockTicker() {
+                    private int tick = 1;
 
-                @Override
-                public boolean isSynchronized() {
-                    return false;
-                }
+                    @Override
+                    public boolean isSynchronized() {
+                        return false;
+                    }
 
-                @Override
-                public void tick(Block block, SlimefunItem item, Config data) {
-                    if (tick <= 1) {
-                        final BlockMenu blockMenu = BlockStorage.getInventory(block);
-                        addToRegistry(block);
-                        tryAddItem(blockMenu);
-                        updateDisplay(blockMenu);
+                    @Override
+                    public void tick(Block block, SlimefunItem item, Config data) {
+                        if (tick <= 1) {
+                            final BlockMenu blockMenu = BlockStorage.getInventory(block);
+                            addToRegistry(block);
+                            tryAddItem(blockMenu);
+                            updateDisplay(blockMenu);
+                        }
                     }
-                }
 
-                @Override
-                public void uniqueTick() {
-                    tick = tick <= 1 ? tickRate.getValue() : tick - 1;
+                    @Override
+                    public void uniqueTick() {
+                        tick = tick <= 1 ? tickRate.getValue() : tick - 1;
+                    }
                 }
-            }
         );
     }
 
     protected void tryAddItem(@Nonnull BlockMenu blockMenu) {
         final ItemStack itemStack = blockMenu.getItemInSlot(getInputSlot());
 
-        if (itemStack == null || itemStack.getType() == Material.AIR) {
-            return;
-        }
+        if (itemStack == null || itemStack.getType() == Material.AIR) return;
 
         final NodeDefinition definition = NetworkStorage.getAllNetworkObjects().get(blockMenu.getLocation());
-        if (definition.getNode() == null) {
-            return;
-        }
+        if (definition.getNode() == null) return;
 
         definition.getNode().getRoot().addItemStack(itemStack);
     }
 
     protected void updateDisplay(@Nonnull BlockMenu blockMenu) {
         // No viewer - lets not bother updating
-        if (!blockMenu.hasViewer()) {
-            return;
-        }
+        if (!blockMenu.hasViewer()) return;
 
         final NodeDefinition definition = NetworkStorage.getAllNetworkObjects().get(blockMenu.getLocation());
 
@@ -166,9 +150,7 @@ public abstract class AbstractGrid extends NetworkObject {
         }
 
         // Reset selected page if it no longer exists due to items being removed
-        if (gridCache.getPage() > pages) {
-            gridCache.setPage(0);
-        }
+        if (gridCache.getPage() > pages) gridCache.setPage(0);
 
         final int start = gridCache.getPage() * getDisplaySlots().length;
         final int end = Math.min(start + getDisplaySlots().length, entries.size());
@@ -183,11 +165,8 @@ public abstract class AbstractGrid extends NetworkObject {
                 final ItemMeta itemMeta = displayStack.getItemMeta();
                 List<String> lore = itemMeta.getLore();
 
-                if (lore == null) {
-                    lore = getLoreAddition(entry.getValue());
-                } else {
-                    lore.addAll(getLoreAddition(entry.getValue()));
-                }
+                if (lore == null) lore = getLoreAddition(entry.getValue());
+                else lore.addAll(getLoreAddition(entry.getValue()));
 
                 itemMeta.setLore(lore);
                 displayStack.setItemMeta(itemMeta);
@@ -212,36 +191,29 @@ public abstract class AbstractGrid extends NetworkObject {
 
     @Nonnull
     protected List<Map.Entry<ItemStack, Integer>> getEntries(@Nonnull NetworkRoot networkRoot, @Nonnull GridCache cache) {
-        return networkRoot.getAllNetworkItems().entrySet().stream()
-            .filter(entry -> {
-                if (cache.getFilter() == null) {
-                    return true;
-                }
-
-                final ItemStack itemStack = entry.getKey();
-                String name = itemStack.getType().name().toLowerCase(Locale.ROOT);
-                if (itemStack.hasItemMeta()) {
-                    final ItemMeta itemMeta = itemStack.getItemMeta();
-                    if (itemMeta.hasDisplayName()) {
-                        name = ChatColor.stripColor(itemMeta.getDisplayName().toLowerCase(Locale.ROOT));
+        return networkRoot.getAllNetworkItems().entrySet().stream().filter(entry -> {
+                    if (cache.getFilter() == null) return true;
+
+                    final ItemStack itemStack = entry.getKey();
+                    String name = itemStack.getType().name().toLowerCase(Locale.ROOT);
+                    if (itemStack.hasItemMeta()) {
+                        final ItemMeta itemMeta = itemStack.getItemMeta();
+                        if (itemMeta.hasDisplayName())
+                            name = ChatColor.stripColor(itemMeta.getDisplayName().toLowerCase(Locale.ROOT));
                     }
-                }
-                return name.contains(cache.getFilter());
-            })
-            .sorted(cache.getSortOrder() == GridCache.SortOrder.ALPHABETICAL ? ALPHABETICAL_SORT : NUMERICAL_SORT.reversed())
-            .toList();
+                    return name.contains(cache.getFilter());
+                })
+                .sorted(cache.getSortOrder() == GridCache.SortOrder.ALPHABETICAL ? ALPHABETICAL_SORT : NUMERICAL_SORT.reversed())
+                .collect(Collectors.toList());
     }
 
     protected boolean setFilter(@Nonnull Player player, @Nonnull BlockMenu blockMenu, @Nonnull GridCache gridCache, @Nonnull ClickAction action) {
-        if (action.isRightClicked()) {
-            gridCache.setFilter(null);
-        } else {
+        if (action.isRightClicked()) gridCache.setFilter(null);
+        else {
             player.closeInventory();
             player.sendMessage(Theme.WARNING + "Type what you would like to filter this grid to");
             ChatUtils.awaitInput(player, s -> {
-                if (s.isBlank()) {
-                    return;
-                }
+                if (s.isEmpty()) return;
                 gridCache.setFilter(s.toLowerCase(Locale.ROOT));
                 player.sendMessage(Theme.SUCCESS + "Filter applied");
             });
@@ -252,9 +224,7 @@ public abstract class AbstractGrid extends NetworkObject {
     @ParametersAreNonnullByDefault
     protected void retrieveItem(Player player, NodeDefinition definition, @Nullable ItemStack itemStack, ClickAction action, BlockMenu blockMenu) {
         // Todo Item can be null here. No idea how - investigate later
-        if (itemStack == null || itemStack.getType() == Material.AIR) {
-            return;
-        }
+        if (itemStack == null || itemStack.getType() == Material.AIR) return;
 
         final ItemStack clone = itemStack.clone();
         final ItemMeta cloneMeta = clone.getItemMeta();
@@ -266,17 +236,12 @@ public abstract class AbstractGrid extends NetworkObject {
         clone.setItemMeta(cloneMeta);
         int amount = 1;
 
-        if (action.isRightClicked()) {
-            amount = clone.getMaxStackSize();
-        }
+        if (action.isRightClicked()) amount = clone.getMaxStackSize();
 
         final GridItemRequest request = new GridItemRequest(clone, amount, player);
 
-        if (action.isShiftClicked()) {
-            addToInventory(player, definition, request, action);
-        } else {
-            addToCursor(player, definition, request, action);
-        }
+        if (action.isShiftClicked()) addToInventory(player, definition, request, action);
+        else addToCursor(player, definition, request, action);
 
         updateDisplay(blockMenu);
     }
@@ -285,15 +250,11 @@ public abstract class AbstractGrid extends NetworkObject {
     private void addToInventory(Player player, NodeDefinition definition, GridItemRequest request, ClickAction action) {
         ItemStack requestingStack = definition.getNode().getRoot().getItemStack(request);
 
-        if (requestingStack == null) {
-            return;
-        }
+        if (requestingStack == null) return;
 
         HashMap<Integer, ItemStack> remnant = player.getInventory().addItem(requestingStack);
         requestingStack = remnant.values().stream().findFirst().orElse(null);
-        if (requestingStack != null) {
-            definition.getNode().getRoot().addItemStack(requestingStack);
-        }
+        if (requestingStack != null) definition.getNode().getRoot().addItemStack(requestingStack);
     }
 
     @ParametersAreNonnullByDefault
@@ -301,9 +262,7 @@ public abstract class AbstractGrid extends NetworkObject {
         final ItemStack cursor = player.getItemOnCursor();
 
         // Quickly check if the cursor has an item and if we can add more to it
-        if (cursor.getType() != Material.AIR && !canAddMore(action, cursor, request)) {
-            return;
-        }
+        if (cursor.getType() != Material.AIR && !canAddMore(action, cursor, request)) return;
 
         ItemStack requestingStack = definition.getNode().getRoot().getItemStack(request);
         setCursor(player, cursor, requestingStack);
@@ -311,18 +270,16 @@ public abstract class AbstractGrid extends NetworkObject {
 
     private void setCursor(Player player, ItemStack cursor, ItemStack requestingStack) {
         if (requestingStack != null) {
-            if (cursor.getType() != Material.AIR) {
-                requestingStack.setAmount(cursor.getAmount() + 1);
-            }
+            if (cursor.getType() != Material.AIR) requestingStack.setAmount(cursor.getAmount() + 1);
             player.setItemOnCursor(requestingStack);
         }
     }
 
     private boolean canAddMore(@Nonnull ClickAction action, @Nonnull ItemStack cursor, @Nonnull GridItemRequest request) {
         return !action.isRightClicked()
-            && request.getAmount() == 1
-            && cursor.getAmount() < cursor.getMaxStackSize()
-            && StackUtils.itemsMatch(request, cursor, true);
+                && request.getAmount() == 1
+                && cursor.getAmount() < cursor.getMaxStackSize()
+                && StackUtils.itemsMatch(request, cursor, true);
     }
 
     @Override
@@ -374,9 +331,9 @@ public abstract class AbstractGrid extends NetworkObject {
     @Nonnull
     private static List<String> getLoreAddition(int amount) {
         final MessageFormat format = new MessageFormat("{0}Amount: {1}{2}", Locale.ROOT);
-        return List.of(
-            "",
-            format.format(new Object[]{Theme.CLICK_INFO.getColor(), Theme.PASSIVE.getColor(), amount}, new StringBuffer(), null).toString()
+        return Arrays.asList(
+                "",
+                format.format(new Object[]{Theme.CLICK_INFO.getColor(), Theme.PASSIVE.getColor(), amount}, new StringBuffer(), null).toString()
         );
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/grid/GridCache.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/grid/GridCache.java
similarity index 93%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/grid/GridCache.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/grid/GridCache.java
index c9128a8..a8b15ab 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/grid/GridCache.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/grid/GridCache.java
@@ -1,10 +1,9 @@
-package io.github.sefiraat.networks.slimefun.network.grid;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network.grid;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 
 public class GridCache {
-
     private int page;
     private int maxPages;
     @Nonnull
@@ -56,4 +55,4 @@ public class GridCache {
         ALPHABETICAL,
         NUMBER
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/grid/NetworkCraftingGrid.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/grid/NetworkCraftingGrid.java
similarity index 80%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/grid/NetworkCraftingGrid.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/grid/NetworkCraftingGrid.java
index c1c90c0..072185d 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/grid/NetworkCraftingGrid.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/grid/NetworkCraftingGrid.java
@@ -1,11 +1,11 @@
-package io.github.sefiraat.networks.slimefun.network.grid;
-
-import io.github.sefiraat.networks.NetworkStorage;
-import io.github.sefiraat.networks.network.GridItemRequest;
-import io.github.sefiraat.networks.network.NodeDefinition;
-import io.github.sefiraat.networks.network.SupportedRecipes;
-import io.github.sefiraat.networks.slimefun.NetworkSlimefunItems;
-import io.github.sefiraat.networks.utils.Theme;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network.grid;
+
+import id.universenetwork.sfa_loader.addons.networks.NetworkStorage;
+import id.universenetwork.sfa_loader.addons.networks.network.GridItemRequest;
+import id.universenetwork.sfa_loader.addons.networks.network.NodeDefinition;
+import id.universenetwork.sfa_loader.addons.networks.network.SupportedRecipes;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.NetworkSlimefunItems;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -28,17 +28,16 @@ import java.util.HashMap;
 import java.util.Map;
 
 public class NetworkCraftingGrid extends AbstractGrid {
-
     private static final int[] BACKGROUND_SLOTS = {
-        0, 1, 3, 4, 5, 14, 23, 32, 33, 35, 41, 42, 44, 45, 47, 49, 50, 51, 52, 53
+            0, 1, 3, 4, 5, 14, 23, 32, 33, 35, 41, 42, 44, 45, 47, 49, 50, 51, 52, 53
     };
 
     private static final int[] DISPLAY_SLOTS = {
-        9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 27, 28, 29, 30, 31, 36, 37, 38, 39, 40
+            9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 27, 28, 29, 30, 31, 36, 37, 38, 39, 40
     };
 
     private static final int[] CRAFT_ITEMS = {
-        6, 7, 8, 15, 16, 17, 24, 25, 26
+            6, 7, 8, 15, 16, 17, 24, 25, 26
     };
 
     private static final int INPUT_SLOT = 2;
@@ -51,10 +50,10 @@ public class NetworkCraftingGrid extends AbstractGrid {
     private static final int CRAFT_OUTPUT_SLOT = 43;
 
     private static final CustomItemStack CRAFT_BUTTON_STACK = new CustomItemStack(
-        Material.CRAFTING_TABLE,
-        Theme.CLICK_INFO.getColor() + "Craft",
-        Theme.CLICK_INFO + "Left Click: " + Theme.PASSIVE + "Try to Craft",
-        Theme.CLICK_INFO + "Shift Left Click: " + Theme.PASSIVE + "Try to return items"
+            Material.CRAFTING_TABLE,
+            Theme.CLICK_INFO.getColor() + "Craft",
+            Theme.CLICK_INFO + "Left Click: " + Theme.PASSIVE + "Try to Craft",
+            Theme.CLICK_INFO + "Shift Left Click: " + Theme.PASSIVE + "Try to return items"
     );
 
     private static final Map<Location, GridCache> CACHE_MAP = new HashMap<>();
@@ -62,9 +61,7 @@ public class NetworkCraftingGrid extends AbstractGrid {
 
     public NetworkCraftingGrid(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe);
-        for (int craftItem : CRAFT_ITEMS) {
-            this.getSlotsToDrop().add(craftItem);
-        }
+        for (int craftItem : CRAFT_ITEMS) this.getSlotsToDrop().add(craftItem);
         this.getSlotsToDrop().add(CRAFT_OUTPUT_SLOT);
     }
 
@@ -77,7 +74,6 @@ public class NetworkCraftingGrid extends AbstractGrid {
     @Override
     public BlockMenuPreset getPreset() {
         return new BlockMenuPreset(this.getId(), this.getItemName()) {
-
             @Override
             public void init() {
                 drawBackground(BACKGROUND_SLOTS);
@@ -86,7 +82,7 @@ public class NetworkCraftingGrid extends AbstractGrid {
             @Override
             public boolean canOpen(@Nonnull Block block, @Nonnull Player player) {
                 return NetworkSlimefunItems.NETWORK_GRID.canUse(player, false)
-                    && Slimefun.getProtectionManager().hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
+                        && Slimefun.getProtectionManager().hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
             }
 
             @Override
@@ -117,11 +113,9 @@ public class NetworkCraftingGrid extends AbstractGrid {
                 menu.replaceExistingItem(getChangeSort(), getChangeSortStack());
                 menu.addMenuClickHandler(getChangeSort(), (p, slot, item, action) -> {
                     GridCache gridCache = getCacheMap().get(menu.getLocation());
-                    if (gridCache.getSortOrder() == GridCache.SortOrder.ALPHABETICAL) {
+                    if (gridCache.getSortOrder() == GridCache.SortOrder.ALPHABETICAL)
                         gridCache.setSortOrder(GridCache.SortOrder.NUMBER);
-                    } else {
-                        gridCache.setSortOrder(GridCache.SortOrder.ALPHABETICAL);
-                    }
+                    else gridCache.setSortOrder(GridCache.SortOrder.ALPHABETICAL);
                     getCacheMap().put(menu.getLocation(), gridCache);
                     return false;
                 });
@@ -139,11 +133,8 @@ public class NetworkCraftingGrid extends AbstractGrid {
 
                 menu.replaceExistingItem(CRAFT_BUTTON_SLOT, CRAFT_BUTTON_STACK);
                 menu.addMenuClickHandler(CRAFT_BUTTON_SLOT, (player, slot, item, action) -> {
-                    if (action.isShiftClicked()) {
-                        tryReturnItems(menu);
-                    } else {
-                        tryCraft(menu, player);
-                    }
+                    if (action.isShiftClicked()) tryReturnItems(menu);
+                    else tryCraft(menu, player);
                     return false;
                 });
             }
@@ -194,9 +185,7 @@ public class NetworkCraftingGrid extends AbstractGrid {
     private void tryCraft(@Nonnull BlockMenu menu, @Nonnull Player player) {
         // Get node and, if it doesn't exist - escape
         final NodeDefinition definition = NetworkStorage.getAllNetworkObjects().get(menu.getLocation());
-        if (definition.getNode() == null) {
-            return;
-        }
+        if (definition.getNode() == null) return;
 
         // Get the recipe input
         final ItemStack[] inputs = new ItemStack[CRAFT_ITEMS.length];
@@ -210,22 +199,17 @@ public class NetworkCraftingGrid extends AbstractGrid {
         ItemStack crafted = null;
 
         // Go through each slimefun recipe, test and set the ItemStack if found
-        for (Map.Entry<ItemStack[], ItemStack> entry : SupportedRecipes.getRecipes().entrySet()) {
+        for (Map.Entry<ItemStack[], ItemStack> entry : SupportedRecipes.getRecipes().entrySet())
             if (SupportedRecipes.testRecipe(inputs, entry.getKey())) {
                 crafted = entry.getValue().clone();
                 break;
             }
-        }
 
         // If no slimefun recipe found, try a vanilla one
-        if (crafted == null) {
-            crafted = Bukkit.craftItem(inputs, player.getWorld(), player);
-        }
+        if (crafted == null) crafted = Bukkit.craftItem(inputs, player.getWorld(), player);
 
         // If no item crafted OR result doesn't fit, escape
-        if (crafted.getType() == Material.AIR || !menu.fits(crafted, CRAFT_OUTPUT_SLOT)) {
-            return;
-        }
+        if (crafted.getType() == Material.AIR || !menu.fits(crafted, CRAFT_OUTPUT_SLOT)) return;
 
         // Push item
         menu.pushItem(crafted, CRAFT_OUTPUT_SLOT);
@@ -243,9 +227,7 @@ public class NetworkCraftingGrid extends AbstractGrid {
                     // Process item request
                     final GridItemRequest request = new GridItemRequest(itemInSlotClone, 1, player);
                     final ItemStack requestingStack = definition.getNode().getRoot().getItemStack(request);
-                    if (requestingStack != null) {
-                        menu.replaceExistingItem(recipeSlot, requestingStack);
-                    }
+                    if (requestingStack != null) menu.replaceExistingItem(recipeSlot, requestingStack);
                 }
             }
         }
@@ -255,17 +237,13 @@ public class NetworkCraftingGrid extends AbstractGrid {
         // Get node and, if it doesn't exist - escape
         final NodeDefinition definition = NetworkStorage.getAllNetworkObjects().get(menu.getLocation());
 
-        if (definition.getNode() == null) {
-            return;
-        }
+        if (definition.getNode() == null) return;
 
         for (int recipeSlot : CRAFT_ITEMS) {
             final ItemStack stack = menu.getItemInSlot(recipeSlot);
 
-            if (stack == null || stack.getType() == Material.AIR) {
-                continue;
-            }
+            if (stack == null || stack.getType() == Material.AIR) continue;
             definition.getNode().getRoot().addItemStack(stack);
         }
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/network/grid/NetworkGrid.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/grid/NetworkGrid.java
similarity index 90%
rename from src/main/java/io/github/sefiraat/networks/slimefun/network/grid/NetworkGrid.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/grid/NetworkGrid.java
index 135b875..86dd614 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/network/grid/NetworkGrid.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/network/grid/NetworkGrid.java
@@ -1,6 +1,6 @@
-package io.github.sefiraat.networks.slimefun.network.grid;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.network.grid;
 
-import io.github.sefiraat.networks.slimefun.NetworkSlimefunItems;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.NetworkSlimefunItems;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -19,18 +19,17 @@ import java.util.HashMap;
 import java.util.Map;
 
 public class NetworkGrid extends AbstractGrid {
-
     private static final int[] BACKGROUND_SLOTS = {
-        17, 26
+            17, 26
     };
 
     private static final int[] DISPLAY_SLOTS = {
-        0, 1, 2, 3, 4, 5, 6, 7,
-        9, 10, 11, 12, 13, 14, 15, 16,
-        18, 19, 20, 21, 22, 23, 24, 25,
-        27, 28, 29, 30, 31, 32, 33, 34,
-        36, 37, 38, 39, 40, 41, 42, 43,
-        45, 46, 47, 48, 49, 50, 51, 52
+            0, 1, 2, 3, 4, 5, 6, 7,
+            9, 10, 11, 12, 13, 14, 15, 16,
+            18, 19, 20, 21, 22, 23, 24, 25,
+            27, 28, 29, 30, 31, 32, 33, 34,
+            36, 37, 38, 39, 40, 41, 42, 43,
+            45, 46, 47, 48, 49, 50, 51, 52
     };
 
     private static final int INPUT_SLOT = 8;
@@ -51,7 +50,6 @@ public class NetworkGrid extends AbstractGrid {
     @Nonnull
     protected BlockMenuPreset getPreset() {
         return new BlockMenuPreset(this.getId(), this.getItemName()) {
-
             @Override
             public void init() {
                 drawBackground(getBackgroundSlots());
@@ -61,7 +59,7 @@ public class NetworkGrid extends AbstractGrid {
             @Override
             public boolean canOpen(@Nonnull Block block, @Nonnull Player player) {
                 return NetworkSlimefunItems.NETWORK_GRID.canUse(player, false)
-                    && Slimefun.getProtectionManager().hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
+                        && Slimefun.getProtectionManager().hasPermission(player, block.getLocation(), Interaction.INTERACT_BLOCK);
             }
 
             @Override
@@ -148,4 +146,4 @@ public class NetworkGrid extends AbstractGrid {
     protected int getFilterSlot() {
         return FILTER;
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/tools/CanCooldown.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/CanCooldown.java
similarity index 71%
rename from src/main/java/io/github/sefiraat/networks/slimefun/tools/CanCooldown.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/CanCooldown.java
index f4a7184..079271a 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/tools/CanCooldown.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/CanCooldown.java
@@ -1,7 +1,7 @@
-package io.github.sefiraat.networks.slimefun.tools;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.tools;
 
-import io.github.sefiraat.networks.utils.StackUtils;
-import io.github.sefiraat.networks.utils.Theme;
+import id.universenetwork.sfa_loader.addons.networks.utils.StackUtils;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
 import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 
@@ -9,7 +9,6 @@ import javax.annotation.Nullable;
 import javax.annotation.ParametersAreNonnullByDefault;
 
 public interface CanCooldown {
-
     /**
      * The duration, in seconds, this item will go on cooldown for
      *
@@ -25,17 +24,13 @@ public interface CanCooldown {
     @ParametersAreNonnullByDefault
     default boolean canBeUsed(@Nullable Player player, ItemStack itemStack) {
         if (StackUtils.isOnCooldown(itemStack)) {
-            if (player != null) {
-                player.sendMessage(Theme.WARNING + "This is still on cooldown");
-            }
+            if (player != null) player.sendMessage(Theme.WARNING + "This is still on cooldown");
             return false;
-        } else {
-            return true;
-        }
+        } else return true;
     }
 
     @ParametersAreNonnullByDefault
     default void putOnCooldown(ItemStack itemStack) {
         StackUtils.putOnCooldown(itemStack, this.cooldownDuration());
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/tools/CraftingBlueprint.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/CraftingBlueprint.java
similarity index 65%
rename from src/main/java/io/github/sefiraat/networks/slimefun/tools/CraftingBlueprint.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/CraftingBlueprint.java
index aa47359..a264ce7 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/tools/CraftingBlueprint.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/CraftingBlueprint.java
@@ -1,11 +1,11 @@
-package io.github.sefiraat.networks.slimefun.tools;
-
-import io.github.sefiraat.networks.network.stackcaches.BlueprintInstance;
-import io.github.sefiraat.networks.utils.Keys;
-import io.github.sefiraat.networks.utils.StringUtils;
-import io.github.sefiraat.networks.utils.Theme;
-import io.github.sefiraat.networks.utils.datatypes.DataTypeMethods;
-import io.github.sefiraat.networks.utils.datatypes.PersistentCraftingBlueprintType;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.tools;
+
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.BlueprintInstance;
+import id.universenetwork.sfa_loader.addons.networks.utils.Keys;
+import id.universenetwork.sfa_loader.addons.networks.utils.StringUtils;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
+import id.universenetwork.sfa_loader.addons.networks.utils.datatypes.DataTypeMethods;
+import id.universenetwork.sfa_loader.addons.networks.utils.datatypes.PersistentCraftingBlueprintType;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -19,7 +19,6 @@ import java.util.ArrayList;
 import java.util.List;
 
 public class CraftingBlueprint extends UnplaceableBlock {
-
     public CraftingBlueprint(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe);
     }
@@ -39,24 +38,18 @@ public class CraftingBlueprint extends UnplaceableBlock {
                 continue;
             }
             ItemMeta recipeItemMeta = item.getItemMeta();
-            if (recipeItemMeta.hasDisplayName()) {
+            if (recipeItemMeta.hasDisplayName())
                 lore.add(Theme.PASSIVE + ChatColor.stripColor(recipeItemMeta.getDisplayName()));
-            } else {
-                lore.add(Theme.PASSIVE + StringUtils.toTitleCase(item.getType().name()));
-            }
+            else lore.add(Theme.PASSIVE + StringUtils.toTitleCase(item.getType().name()));
         }
 
         lore.add("");
         lore.add(Theme.CLICK_INFO + "Outputting");
 
-        if (outputMeta.hasDisplayName()) {
-            lore.add(Theme.PASSIVE + ChatColor.stripColor(outputMeta.getDisplayName()));
-        } else {
-            lore.add(Theme.PASSIVE + StringUtils.toTitleCase(output.getType().name()));
-        }
+        if (outputMeta.hasDisplayName()) lore.add(Theme.PASSIVE + ChatColor.stripColor(outputMeta.getDisplayName()));
+        else lore.add(Theme.PASSIVE + StringUtils.toTitleCase(output.getType().name()));
         itemMeta.setLore(lore);
 
         blueprint.setItemMeta(itemMeta);
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/tools/NetworkAdminDebugger.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/NetworkAdminDebugger.java
similarity index 78%
rename from src/main/java/io/github/sefiraat/networks/slimefun/tools/NetworkAdminDebugger.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/NetworkAdminDebugger.java
index 51899e1..3eefc64 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/tools/NetworkAdminDebugger.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/NetworkAdminDebugger.java
@@ -1,7 +1,7 @@
-package io.github.sefiraat.networks.slimefun.tools;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.tools;
 
-import io.github.sefiraat.networks.slimefun.network.AdminDebuggable;
-import io.github.sefiraat.networks.utils.Theme;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.network.AdminDebuggable;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
 import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
@@ -16,14 +16,11 @@ import org.bukkit.inventory.ItemStack;
 import java.util.Optional;
 
 public class NetworkAdminDebugger extends SlimefunItem {
-
     public NetworkAdminDebugger(ItemGroup itemGroup,
                                 SlimefunItemStack item,
                                 RecipeType recipeType,
-                                ItemStack[] recipe
-    ) {
+                                ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe);
-
     }
 
     @Override
@@ -41,10 +38,10 @@ public class NetworkAdminDebugger extends SlimefunItem {
                 player.sendMessage(Theme.ERROR + "You can only use this tool as an op'd player.");
                 return;
             }
-            if (slimefunItem instanceof AdminDebuggable debuggable) {
-                debuggable.toggle(block.getLocation(), player);
+            if (slimefunItem instanceof AdminDebuggable) {
+                ((AdminDebuggable) slimefunItem).toggle(block.getLocation(), player);
                 e.cancel();
             }
         }
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/NetworkCard.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/NetworkCard.java
new file mode 100644
index 0000000..29dfbac
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/NetworkCard.java
@@ -0,0 +1,92 @@
+package id.universenetwork.sfa_loader.addons.networks.slimefun.tools;
+
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.CardInstance;
+import id.universenetwork.sfa_loader.addons.networks.utils.Keys;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
+import id.universenetwork.sfa_loader.addons.networks.utils.datatypes.DataTypeMethods;
+import id.universenetwork.sfa_loader.addons.networks.utils.datatypes.PersistentCardInstanceType;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
+import org.bukkit.Material;
+import org.bukkit.Tag;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.meta.ItemMeta;
+
+import javax.annotation.Nonnull;
+
+public class NetworkCard extends SlimefunItem {
+    private static final int[] SIZES = new int[]{
+            4096,
+            32768,
+            262144,
+            2097152,
+            16777216,
+            134217728,
+            1073741824,
+            Integer.MAX_VALUE
+    };
+
+    private final int size;
+
+    public NetworkCard(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, int size) {
+        super(itemGroup, item, recipeType, recipe);
+        this.size = size;
+        addItemHandler((ItemUseHandler) e -> {
+            final Player player = e.getPlayer();
+            final ItemStack card = player.getInventory().getItemInMainHand();
+            final ItemStack stackToSet = player.getInventory().getItemInOffHand().clone();
+
+            e.cancel();
+            if (card.getAmount() > 1) {
+                player.sendMessage(Theme.WARNING + "Unstack cards before assigning an item.");
+                return;
+            }
+
+            if (isBlacklisted(stackToSet)) {
+                player.sendMessage(Theme.WARNING + "This type of item cannot be stored in a Network Card.");
+                return;
+            }
+
+            final SlimefunItem cardItem = SlimefunItem.getByItem(card);
+            if (cardItem instanceof NetworkCard) {
+                NetworkCard networkCard = (NetworkCard) cardItem;
+
+                final ItemMeta cardMeta = card.getItemMeta();
+                final CardInstance cardInstance = DataTypeMethods.getCustom(
+                        cardMeta,
+                        Keys.CARD_INSTANCE,
+                        PersistentCardInstanceType.TYPE,
+                        new CardInstance(null, 0, networkCard.getSize())
+                );
+
+                if (cardInstance.getAmount() > 0) {
+                    e.getPlayer().sendMessage(Theme.WARNING + "A card must be empty before trying to assign an item.");
+                    return;
+                }
+
+                cardInstance.setItemStack(stackToSet);
+                DataTypeMethods.setCustom(cardMeta, Keys.CARD_INSTANCE, PersistentCardInstanceType.TYPE, cardInstance);
+                cardInstance.updateLore(cardMeta);
+                card.setItemMeta(cardMeta);
+            }
+        });
+    }
+
+    private boolean isBlacklisted(@Nonnull ItemStack itemStack) {
+        return itemStack.getType() == Material.AIR
+                || itemStack.getType().getMaxDurability() < 0
+                || Tag.SHULKER_BOXES.isTagged(itemStack.getType());
+    }
+
+    public int getSize() {
+        return this.size;
+    }
+
+    public static int[] getSizes() {
+        return SIZES;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/tools/NetworkConfigurator.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/NetworkConfigurator.java
similarity index 65%
rename from src/main/java/io/github/sefiraat/networks/slimefun/tools/NetworkConfigurator.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/NetworkConfigurator.java
index 971cfd3..d4932f2 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/tools/NetworkConfigurator.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/NetworkConfigurator.java
@@ -1,14 +1,12 @@
-package io.github.sefiraat.networks.slimefun.tools;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.tools;
 
 import de.jeff_media.morepersistentdatatypes.DataType;
-import io.github.sefiraat.networks.slimefun.network.NetworkDirectional;
-import io.github.sefiraat.networks.slimefun.network.NetworkPusher;
-import io.github.sefiraat.networks.utils.Keys;
-import io.github.sefiraat.networks.utils.NetworkUtils;
-import io.github.sefiraat.networks.utils.StackUtils;
-import io.github.sefiraat.networks.utils.Theme;
-import io.github.sefiraat.networks.utils.datatypes.DataTypeMethods;
-import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.network.NetworkDirectional;
+import id.universenetwork.sfa_loader.addons.networks.utils.Keys;
+import id.universenetwork.sfa_loader.addons.networks.utils.NetworkUtils;
+import id.universenetwork.sfa_loader.addons.networks.utils.StackUtils;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
+import id.universenetwork.sfa_loader.addons.networks.utils.datatypes.DataTypeMethods;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -19,8 +17,6 @@ import io.github.thebusybiscuit.slimefun4.libraries.dough.data.persistent.Persis
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
-import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.entity.Player;
@@ -31,34 +27,26 @@ import javax.annotation.Nonnull;
 import java.util.Optional;
 
 public class NetworkConfigurator extends SlimefunItem {
-
     public NetworkConfigurator(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe);
         addItemHandler(
-            new ItemUseHandler() {
-                @Override
-                public void onRightClick(PlayerRightClickEvent e) {
+                (ItemUseHandler) e -> {
                     final Player player = e.getPlayer();
                     final Optional<Block> optional = e.getClickedBlock();
                     if (optional.isPresent()) {
                         final Block block = optional.get();
                         final SlimefunItem slimefunItem = BlockStorage.check(block);
                         if (Slimefun.getProtectionManager().hasPermission(player, block, Interaction.INTERACT_BLOCK)
-                            && slimefunItem instanceof NetworkDirectional directional
-                        ) {
+                                && slimefunItem instanceof NetworkDirectional) {
+                            NetworkDirectional directional = (NetworkDirectional) slimefunItem;
+
                             final BlockMenu blockMenu = BlockStorage.getInventory(block);
-                            if (player.isSneaking()) {
-                                setConfigurator(directional, e.getItem(), blockMenu, player);
-                            } else {
-                                NetworkUtils.applyConfig(directional, e.getItem(), blockMenu, player);
-                            }
-                        } else {
-                            player.sendMessage(Theme.ERROR + "Must target a directional Networks interface.");
-                        }
+                            if (player.isSneaking()) setConfigurator(directional, e.getItem(), blockMenu, player);
+                            else NetworkUtils.applyConfig(directional, e.getItem(), blockMenu, player);
+                        } else player.sendMessage(Theme.ERROR + "Must target a directional Networks interface.");
                     }
                     e.cancel();
                 }
-            }
         );
     }
 
@@ -78,15 +66,11 @@ public class NetworkConfigurator extends SlimefunItem {
             int i = 0;
             for (int slot : directional.getItemSlots()) {
                 final ItemStack possibleStack = blockMenu.getItemInSlot(slot);
-                if (possibleStack != null) {
-                    itemStacks[i] = StackUtils.getAsQuantity(blockMenu.getItemInSlot(slot), 1);
-                }
+                if (possibleStack != null) itemStacks[i] = StackUtils.getAsQuantity(blockMenu.getItemInSlot(slot), 1);
                 i++;
             }
             DataTypeMethods.setCustom(itemMeta, Keys.ITEM, DataType.ITEM_STACK_ARRAY, itemStacks);
-        } else {
-            PersistentDataAPI.remove(itemMeta, Keys.ITEM);
-        }
+        } else PersistentDataAPI.remove(itemMeta, Keys.ITEM);
 
         DataTypeMethods.setCustom(itemMeta, Keys.FACE, DataType.STRING, blockFace.name());
         itemStack.setItemMeta(itemMeta);
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/tools/NetworkCrayon.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/NetworkCrayon.java
similarity index 82%
rename from src/main/java/io/github/sefiraat/networks/slimefun/tools/NetworkCrayon.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/NetworkCrayon.java
index 1586979..ebcbf9e 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/tools/NetworkCrayon.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/NetworkCrayon.java
@@ -1,8 +1,7 @@
-package io.github.sefiraat.networks.slimefun.tools;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.tools;
 
-import io.github.sefiraat.networks.slimefun.network.NetworkController;
-import io.github.sefiraat.networks.utils.Theme;
-import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.network.NetworkController;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -17,13 +16,10 @@ import javax.annotation.Nonnull;
 import java.util.Optional;
 
 public class NetworkCrayon extends SlimefunItem {
-
     public NetworkCrayon(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe);
         addItemHandler(
-            new ItemUseHandler() {
-                @Override
-                public void onRightClick(PlayerRightClickEvent e) {
+                (ItemUseHandler) e -> {
                     final Optional<Block> optional = e.getClickedBlock();
                     if (optional.isPresent()) {
                         final Block block = optional.get();
@@ -35,7 +31,6 @@ public class NetworkCrayon extends SlimefunItem {
                         }
                     }
                 }
-            }
         );
     }
 
@@ -48,4 +43,4 @@ public class NetworkCrayon extends SlimefunItem {
             player.sendMessage(Theme.SUCCESS + "Crayon added to network.");
         }
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/tools/NetworkProbe.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/NetworkProbe.java
similarity index 88%
rename from src/main/java/io/github/sefiraat/networks/slimefun/tools/NetworkProbe.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/NetworkProbe.java
index 64bb69d..f8c5b1e 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/tools/NetworkProbe.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/NetworkProbe.java
@@ -1,8 +1,8 @@
-package io.github.sefiraat.networks.slimefun.tools;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.tools;
 
-import io.github.sefiraat.networks.network.NetworkRoot;
-import io.github.sefiraat.networks.slimefun.network.NetworkController;
-import io.github.sefiraat.networks.utils.Theme;
+import id.universenetwork.sfa_loader.addons.networks.network.NetworkRoot;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.network.NetworkController;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
 import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
@@ -22,12 +22,10 @@ import java.util.Map;
 import java.util.Optional;
 
 public class NetworkProbe extends SlimefunItem implements CanCooldown {
-
     private static final MessageFormat MESSAGE_FORMAT = new MessageFormat("{0}{1}: {2}{3}", Locale.ROOT);
 
     public NetworkProbe(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe);
-
     }
 
     @Override
@@ -74,8 +72,8 @@ public class NetworkProbe extends SlimefunItem implements CanCooldown {
             long totalItems = allNetworkItems.values().stream().mapToLong(integer -> integer).sum();
 
             final String nodeCount = root.getNodeCount() >= root.getMaxNodes()
-                ? Theme.ERROR + "" + root.getNodeCount() + "+"
-                : String.valueOf(root.getNodeCount());
+                    ? Theme.ERROR + "" + root.getNodeCount() + "+"
+                    : String.valueOf(root.getNodeCount());
 
             final ChatColor c = Theme.CLICK_INFO.getColor();
             final ChatColor p = Theme.PASSIVE.getColor();
@@ -103,13 +101,11 @@ public class NetworkProbe extends SlimefunItem implements CanCooldown {
 
             player.sendMessage("------------------------------");
             player.sendMessage(MESSAGE_FORMAT.format(new Object[]{c, "Total Nodes", p, nodeCount + "/" + root.getMaxNodes()}, new StringBuffer(), null).toString());
-            if (root.isOverburdened()) {
-                player.sendMessage(Theme.ERROR + "Warning: " + Theme.PASSIVE +
-                                       "Your network has reached or exceeded the maximum node limit. " +
-                                       "Nodes beyond the limit will not function, which nodes these are " +
-                                       "may not always be the same. Reduce your total nodes."
-                );
-            }
+            if (root.isOverburdened()) player.sendMessage(Theme.ERROR + "Warning: " + Theme.PASSIVE +
+                    "Your network has reached or exceeded the maximum node limit. " +
+                    "Nodes beyond the limit will not function, which nodes these are " +
+                    "may not always be the same. Reduce your total nodes."
+            );
         }
     }
 
@@ -117,4 +113,4 @@ public class NetworkProbe extends SlimefunItem implements CanCooldown {
     public int cooldownDuration() {
         return 10;
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/tools/NetworkRake.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/NetworkRake.java
similarity index 72%
rename from src/main/java/io/github/sefiraat/networks/slimefun/tools/NetworkRake.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/NetworkRake.java
index ed0032e..a2e03f1 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/tools/NetworkRake.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/NetworkRake.java
@@ -1,14 +1,8 @@
-package io.github.sefiraat.networks.slimefun.tools;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.tools;
 
-import io.github.sefiraat.networks.Networks;
-import io.github.sefiraat.networks.slimefun.network.NetworkBridge;
-import io.github.sefiraat.networks.slimefun.network.NetworkExport;
-import io.github.sefiraat.networks.slimefun.network.NetworkGrabber;
-import io.github.sefiraat.networks.slimefun.network.NetworkImport;
-import io.github.sefiraat.networks.slimefun.network.NetworkMonitor;
-import io.github.sefiraat.networks.slimefun.network.NetworkObject;
-import io.github.sefiraat.networks.slimefun.network.NetworkPusher;
-import io.github.sefiraat.networks.utils.Keys;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.network.*;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Events;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
 import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemHandler;
@@ -33,8 +27,7 @@ import java.util.Optional;
 import java.util.Set;
 
 public class NetworkRake extends LimitedUseItem {
-
-    private static final NamespacedKey key = Keys.newKey("uses");
+    private static final NamespacedKey key = AbstractAddon.createKey("uses");
 
     private final Set<Class<? extends NetworkObject>> viableObjects = new HashSet<>();
 
@@ -73,14 +66,11 @@ public class NetworkRake extends LimitedUseItem {
             final Player player = e.getPlayer();
             final SlimefunItem slimefunItem = BlockStorage.check(block);
             if (slimefunItem != null
-                && viableObjects.contains(slimefunItem.getClass())
-                && Slimefun.getProtectionManager().hasPermission(player, block, Interaction.BREAK_BLOCK)
-            ) {
+                    && viableObjects.contains(slimefunItem.getClass())
+                    && Slimefun.getProtectionManager().hasPermission(player, block, Interaction.BREAK_BLOCK)) {
                 final BlockBreakEvent event = new BlockBreakEvent(block, player);
-                Networks.getPluginManager().callEvent(event);
-                if (event.isCancelled()) {
-                    return;
-                }
+                Events.call(event);
+                if (event.isCancelled()) return;
 
                 block.setType(Material.AIR);
                 BlockStorage.clearBlockInfo(block);
@@ -90,8 +80,7 @@ public class NetworkRake extends LimitedUseItem {
     }
 
     @Override
-    protected @Nonnull
-    NamespacedKey getStorageKey() {
+    protected @Nonnull NamespacedKey getStorageKey() {
         return key;
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/tools/NetworkRemote.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/NetworkRemote.java
similarity index 67%
rename from src/main/java/io/github/sefiraat/networks/slimefun/tools/NetworkRemote.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/NetworkRemote.java
index cff616f..95caf79 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/tools/NetworkRemote.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/NetworkRemote.java
@@ -1,11 +1,10 @@
-package io.github.sefiraat.networks.slimefun.tools;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.tools;
 
 import de.jeff_media.morepersistentdatatypes.DataType;
-import io.github.sefiraat.networks.slimefun.network.grid.NetworkGrid;
-import io.github.sefiraat.networks.utils.Keys;
-import io.github.sefiraat.networks.utils.Theme;
-import io.github.sefiraat.networks.utils.datatypes.DataTypeMethods;
-import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.network.grid.NetworkGrid;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
+import id.universenetwork.sfa_loader.addons.networks.utils.datatypes.DataTypeMethods;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -26,13 +25,12 @@ import javax.annotation.Nonnull;
 import java.util.Optional;
 
 public class NetworkRemote extends SlimefunItem {
-
-    private static final NamespacedKey KEY = Keys.newKey("location");
+    private static final NamespacedKey KEY = AbstractAddon.createKey("location");
     private static final int[] RANGES = new int[]{
-        150,
-        500,
-        0,
-        -1
+            150,
+            500,
+            0,
+            -1
     };
 
     private final int range;
@@ -41,9 +39,7 @@ public class NetworkRemote extends SlimefunItem {
         super(itemGroup, item, recipeType, recipe);
         this.range = range;
         addItemHandler(
-            new ItemUseHandler() {
-                @Override
-                public void onRightClick(PlayerRightClickEvent e) {
+                (ItemUseHandler) e -> {
                     final Player player = e.getPlayer();
                     if (player.isSneaking()) {
                         final Optional<Block> optional = e.getClickedBlock();
@@ -51,19 +47,13 @@ public class NetworkRemote extends SlimefunItem {
                             final Block block = optional.get();
                             final SlimefunItem slimefunItem = BlockStorage.check(block);
                             if (Slimefun.getProtectionManager().hasPermission(player, block, Interaction.INTERACT_BLOCK)
-                                && slimefunItem instanceof NetworkGrid
-                            ) {
-                                setGrid(e.getItem(), block, player);
-                            } else {
+                                    && slimefunItem instanceof NetworkGrid) setGrid(e.getItem(), block, player);
+                            else
                                 player.sendMessage(Theme.ERROR + "Must be set to a Network Grid (not crafting grid).");
-                            }
                         }
-                    } else {
-                        tryOpenGrid(e.getItem(), player, NetworkRemote.this.range);
-                    }
+                    } else tryOpenGrid(e.getItem(), player, NetworkRemote.this.range);
                     e.cancel();
                 }
-            }
         );
     }
 
@@ -88,28 +78,19 @@ public class NetworkRemote extends SlimefunItem {
             final boolean sameDimension = location.getWorld().equals(player.getWorld());
 
             if (range == -1
-                || range == 0 && sameDimension
-                || sameDimension && player.getLocation().distance(location) <= range
-            ) {
-                openGrid(location, player);
-            } else {
-                player.sendMessage(Theme.ERROR + "The bound grid is not within reach.");
-            }
-        } else {
-            player.sendMessage(Theme.ERROR + "Remote is not bound to a grid.");
-        }
+                    || range == 0 && sameDimension
+                    || sameDimension && player.getLocation().distance(location) <= range) openGrid(location, player);
+            else player.sendMessage(Theme.ERROR + "The bound grid is not within reach.");
+        } else player.sendMessage(Theme.ERROR + "Remote is not bound to a grid.");
     }
 
     public static void openGrid(@Nonnull Location location, @Nonnull Player player) {
         BlockMenu blockMenu = BlockStorage.getInventory(location);
         SlimefunItem slimefunItem = BlockStorage.check(location);
         if (slimefunItem instanceof NetworkGrid
-            && Slimefun.getProtectionManager().hasPermission(player, location, Interaction.INTERACT_BLOCK)
-        ) {
+                && Slimefun.getProtectionManager().hasPermission(player, location, Interaction.INTERACT_BLOCK))
             blockMenu.open(player);
-        } else {
-            player.sendMessage(Theme.ERROR + "The bound grid can no longer be found.");
-        }
+        else player.sendMessage(Theme.ERROR + "The bound grid can no longer be found.");
     }
 
     public int getRange() {
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/tools/NetworkWirelessConfigurator.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/NetworkWirelessConfigurator.java
similarity index 58%
rename from src/main/java/io/github/sefiraat/networks/slimefun/tools/NetworkWirelessConfigurator.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/NetworkWirelessConfigurator.java
index f02faf5..6038a59 100644
--- a/src/main/java/io/github/sefiraat/networks/slimefun/tools/NetworkWirelessConfigurator.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/slimefun/tools/NetworkWirelessConfigurator.java
@@ -1,10 +1,10 @@
-package io.github.sefiraat.networks.slimefun.tools;
+package id.universenetwork.sfa_loader.addons.networks.slimefun.tools;
 
 import de.jeff_media.morepersistentdatatypes.DataType;
-import io.github.sefiraat.networks.slimefun.network.NetworkWirelessReceiver;
-import io.github.sefiraat.networks.slimefun.network.NetworkWirelessTransmitter;
-import io.github.sefiraat.networks.utils.Keys;
-import io.github.sefiraat.networks.utils.Theme;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.network.NetworkWirelessReceiver;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.network.NetworkWirelessTransmitter;
+import id.universenetwork.sfa_loader.addons.networks.utils.Theme;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
 import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
@@ -27,47 +27,41 @@ import javax.annotation.Nonnull;
 import java.util.Optional;
 
 public class NetworkWirelessConfigurator extends SlimefunItem {
-
-    private static final NamespacedKey TARGET_LOCATION = Keys.newKey("target-location");
+    private static final NamespacedKey TARGET_LOCATION = AbstractAddon.createKey("target-location");
 
     public NetworkWirelessConfigurator(ItemGroup itemGroup,
                                        SlimefunItemStack item,
                                        RecipeType recipeType,
-                                       ItemStack[] recipe
-    ) {
+                                       ItemStack[] recipe) {
         super(itemGroup, item, recipeType, recipe);
         addItemHandler(
-            new ItemUseHandler() {
-                @Override
-                public void onRightClick(PlayerRightClickEvent e) {
-                    final Player player = e.getPlayer();
-                    final Optional<Block> optional = e.getClickedBlock();
-                    if (optional.isPresent()) {
-                        final Block block = optional.get();
-                        final SlimefunItem slimefunItem = BlockStorage.check(block);
-                        if (Slimefun.getProtectionManager().hasPermission(player, block, Interaction.INTERACT_BLOCK)) {
-                            final ItemStack heldItem = player.getInventory().getItemInMainHand();
-                            final BlockMenu blockMenu = BlockStorage.getInventory(block);
-                            if (slimefunItem instanceof NetworkWirelessTransmitter transmitter && player.isSneaking()) {
-                                setTransmitter(transmitter, heldItem, blockMenu, player);
-                            } else if (slimefunItem instanceof NetworkWirelessReceiver && !player.isSneaking()) {
-                                setReceiver(heldItem, blockMenu, player);
-                            }
-                        } else {
-                            player.sendMessage(Theme.ERROR + "Must target a Network Wireless block.");
+                new ItemUseHandler() {
+                    @Override
+                    public void onRightClick(PlayerRightClickEvent e) {
+                        final Player player = e.getPlayer();
+                        final Optional<Block> optional = e.getClickedBlock();
+                        if (optional.isPresent()) {
+                            final Block block = optional.get();
+                            final SlimefunItem slimefunItem = BlockStorage.check(block);
+                            if (Slimefun.getProtectionManager().hasPermission(player, block, Interaction.INTERACT_BLOCK)) {
+                                final ItemStack heldItem = player.getInventory().getItemInMainHand();
+                                final BlockMenu blockMenu = BlockStorage.getInventory(block);
+                                if (slimefunItem instanceof NetworkWirelessTransmitter && player.isSneaking()) {
+                                    setTransmitter((NetworkWirelessTransmitter) slimefunItem, heldItem, blockMenu, player);
+                                } else if (slimefunItem instanceof NetworkWirelessReceiver && !player.isSneaking())
+                                    setReceiver(heldItem, blockMenu, player);
+                            } else player.sendMessage(Theme.ERROR + "Must target a Network Wireless block.");
                         }
+                        e.cancel();
                     }
-                    e.cancel();
                 }
-            }
         );
     }
 
     private void setTransmitter(@Nonnull NetworkWirelessTransmitter transmitter,
                                 @Nonnull ItemStack itemStack,
                                 @Nonnull BlockMenu blockMenu,
-                                @Nonnull Player player
-    ) {
+                                @Nonnull Player player) {
         final ItemMeta itemMeta = itemStack.getItemMeta();
         final Location location = PersistentDataAPI.get(itemMeta, TARGET_LOCATION, DataType.LOCATION);
 
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/Keys.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/Keys.java
new file mode 100644
index 0000000..9988018
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/Keys.java
@@ -0,0 +1,15 @@
+package id.universenetwork.sfa_loader.addons.networks.utils;
+
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
+import lombok.experimental.UtilityClass;
+import org.bukkit.NamespacedKey;
+
+@UtilityClass
+public class Keys {
+    public final NamespacedKey ON_COOLDOWN = AbstractAddon.createKey("cooldown");
+    public final NamespacedKey CARD_INSTANCE = AbstractAddon.createKey("ntw_card");
+    public final NamespacedKey QUANTUM_STORAGE_INSTANCE = AbstractAddon.createKey("quantum_storage");
+    public final NamespacedKey BLUEPRINT_INSTANCE = AbstractAddon.createKey("ntw_blueprint");
+    public final NamespacedKey FACE = AbstractAddon.createKey("face");
+    public final NamespacedKey ITEM = AbstractAddon.createKey("item");
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/utils/NetworkUtils.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/NetworkUtils.java
similarity index 73%
rename from src/main/java/io/github/sefiraat/networks/utils/NetworkUtils.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/NetworkUtils.java
index 50372f6..fce7115 100644
--- a/src/main/java/io/github/sefiraat/networks/utils/NetworkUtils.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/NetworkUtils.java
@@ -1,10 +1,10 @@
-package io.github.sefiraat.networks.utils;
+package id.universenetwork.sfa_loader.addons.networks.utils;
 
 import de.jeff_media.morepersistentdatatypes.DataType;
-import io.github.sefiraat.networks.slimefun.network.NetworkDirectional;
-import io.github.sefiraat.networks.slimefun.network.NetworkPusher;
-import io.github.sefiraat.networks.slimefun.tools.NetworkConfigurator;
-import io.github.sefiraat.networks.utils.datatypes.DataTypeMethods;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.network.NetworkDirectional;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.network.NetworkPusher;
+import id.universenetwork.sfa_loader.addons.networks.slimefun.tools.NetworkConfigurator;
+import id.universenetwork.sfa_loader.addons.networks.utils.datatypes.DataTypeMethods;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import org.bukkit.Material;
@@ -16,13 +16,11 @@ import org.bukkit.inventory.meta.ItemMeta;
 import javax.annotation.Nonnull;
 
 public class NetworkUtils {
-
     public static void applyConfig(@Nonnull NetworkDirectional directional, @Nonnull BlockMenu blockMenu, @Nonnull Player player) {
         ItemStack itemStack = player.getInventory().getItemInOffHand();
 
-        if (SlimefunItem.getByItem(itemStack) instanceof NetworkConfigurator) {
+        if (SlimefunItem.getByItem(itemStack) instanceof NetworkConfigurator)
             applyConfig(directional, itemStack, blockMenu, player);
-        }
     }
 
     public static void applyConfig(@Nonnull NetworkDirectional directional, @Nonnull ItemStack itemStack, @Nonnull BlockMenu blockMenu, @Nonnull Player player) {
@@ -39,13 +37,12 @@ public class NetworkUtils {
         player.sendMessage(Theme.ERROR + "Direction: " + Theme.PASSIVE + "Successfully applied");
 
 
-        if (directional.getItemSlots().length > 0) {
-            for (int slot : directional.getItemSlots()) {
-                final ItemStack stackToDrop = blockMenu.getItemInSlot(slot);
-                if (stackToDrop != null && stackToDrop.getType() != Material.AIR) {
-                    blockMenu.getLocation().getWorld().dropItem(blockMenu.getLocation(), stackToDrop.clone());
-                    stackToDrop.setAmount(0);
-                }
+        directional.getItemSlots();
+        for (int slot : directional.getItemSlots()) {
+            final ItemStack stackToDrop = blockMenu.getItemInSlot(slot);
+            if (stackToDrop != null && stackToDrop.getType() != Material.AIR) {
+                blockMenu.getLocation().getWorld().dropItem(blockMenu.getLocation(), stackToDrop.clone());
+                stackToDrop.setAmount(0);
             }
         }
 
@@ -54,7 +51,7 @@ public class NetworkUtils {
             for (ItemStack templateStack : templateStacks) {
                 if (templateStack != null && templateStack.getType() != Material.AIR) {
                     boolean worked = false;
-                    for (ItemStack stack : player.getInventory()) {
+                    for (ItemStack stack : player.getInventory())
                         if (StackUtils.itemsMatch(stack, templateStack)) {
                             final ItemStack stackClone = StackUtils.getAsQuantity(stack, 1);
                             stack.setAmount(stack.getAmount() - 1);
@@ -63,17 +60,12 @@ public class NetworkUtils {
                             worked = true;
                             break;
                         }
-                    }
-                    if (!worked) {
+                    if (!worked)
                         player.sendMessage(Theme.WARNING + "Item [" + i + "]: " + Theme.PASSIVE + "Not enough items to fill filter");
-                    }
-                } else if (directional instanceof NetworkPusher) {
+                } else if (directional instanceof NetworkPusher)
                     player.sendMessage(Theme.WARNING + "Item [" + i + "]: " + Theme.PASSIVE + "No item in stored config");
-                }
                 i++;
             }
-        } else {
-            player.sendMessage(Theme.WARNING + "Items: " + Theme.PASSIVE + "No items in stored config");
-        }
+        } else player.sendMessage(Theme.WARNING + "Items: " + Theme.PASSIVE + "No items in stored config");
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/utils/StackUtils.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/StackUtils.java
similarity index 51%
rename from src/main/java/io/github/sefiraat/networks/utils/StackUtils.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/StackUtils.java
index d6e6cd1..85cf7fc 100644
--- a/src/main/java/io/github/sefiraat/networks/utils/StackUtils.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/StackUtils.java
@@ -1,28 +1,12 @@
-package io.github.sefiraat.networks.utils;
+package id.universenetwork.sfa_loader.addons.networks.utils;
 
-import io.github.sefiraat.networks.network.stackcaches.ItemStackCache;
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.ItemStackCache;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.data.persistent.PersistentDataAPI;
 import lombok.experimental.UtilityClass;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.AxolotlBucketMeta;
-import org.bukkit.inventory.meta.BannerMeta;
-import org.bukkit.inventory.meta.BookMeta;
-import org.bukkit.inventory.meta.BundleMeta;
-import org.bukkit.inventory.meta.CompassMeta;
-import org.bukkit.inventory.meta.CrossbowMeta;
-import org.bukkit.inventory.meta.Damageable;
-import org.bukkit.inventory.meta.EnchantmentStorageMeta;
-import org.bukkit.inventory.meta.FireworkEffectMeta;
-import org.bukkit.inventory.meta.FireworkMeta;
-import org.bukkit.inventory.meta.ItemMeta;
-import org.bukkit.inventory.meta.LeatherArmorMeta;
-import org.bukkit.inventory.meta.MapMeta;
-import org.bukkit.inventory.meta.PotionMeta;
-import org.bukkit.inventory.meta.SkullMeta;
-import org.bukkit.inventory.meta.SuspiciousStewMeta;
-import org.bukkit.inventory.meta.TropicalFishBucketMeta;
+import org.bukkit.inventory.meta.*;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -32,15 +16,14 @@ import java.util.Optional;
 
 @UtilityClass
 public class StackUtils {
-
     @Nonnull
-    public static ItemStack getAsQuantity(@Nonnull ItemStack itemStack, int amount) {
+    public ItemStack getAsQuantity(@Nonnull ItemStack itemStack, int amount) {
         ItemStack clone = itemStack.clone();
         clone.setAmount(amount);
         return clone;
     }
 
-    public static boolean itemsMatch(@Nullable ItemStack itemStack1, @Nullable ItemStack itemStack2) {
+    public boolean itemsMatch(@Nullable ItemStack itemStack1, @Nullable ItemStack itemStack2) {
         return itemsMatch(new ItemStackCache(itemStack1), itemStack2, true);
     }
 
@@ -51,271 +34,211 @@ public class StackUtils {
      * @param itemStack The {@link ItemStack} being evaluated
      * @return True if items match
      */
-    public static boolean itemsMatch(@Nonnull ItemStackCache cache, @Nullable ItemStack itemStack, boolean checkLore) {
+    public boolean itemsMatch(@Nonnull ItemStackCache cache, @Nullable ItemStack itemStack, boolean checkLore) {
         // Null check
-        if (cache.getItemStack() == null || itemStack == null) {
-            return itemStack == null && cache.getItemStack() == null;
-        }
+        if (cache.getItemStack() == null || itemStack == null) return itemStack == null && cache.getItemStack() == null;
 
         // If types do not match, then the items cannot possibly match
-        if (itemStack.getType() != cache.getItemType()) {
-            return false;
-        }
+        if (itemStack.getType() != cache.getItemType()) return false;
 
         // If either item does not have a meta then either a mismatch or both without meta = vanilla
-        if (!itemStack.hasItemMeta() || !cache.getItemStack().hasItemMeta()) {
+        if (!itemStack.hasItemMeta() || !cache.getItemStack().hasItemMeta())
             return itemStack.hasItemMeta() == cache.getItemStack().hasItemMeta();
-        }
 
         // Now we need to compare meta's directly - cache is already out, but let's fetch the 2nd meta also
         final ItemMeta itemMeta = itemStack.getItemMeta();
         final ItemMeta cachedMeta = cache.getItemMeta();
 
         // ItemMetas are different types and cannot match
-        if (!itemMeta.getClass().equals(cachedMeta.getClass())) {
-            return false;
-        }
+        if (!itemMeta.getClass().equals(cachedMeta.getClass())) return false;
 
         // Quick meta-extension escapes
-        if (canQuickEscapeMetaVariant(itemMeta, cachedMeta)) {
-            return false;
-        }
+        if (canQuickEscapeMetaVariant(itemMeta, cachedMeta)) return false;
 
         // Has a display name (checking the name occurs later)
-        if (itemMeta.hasDisplayName() != cachedMeta.hasDisplayName()) {
-            return false;
-        }
+        if (itemMeta.hasDisplayName() != cachedMeta.hasDisplayName()) return false;
 
         // Custom model data is different, no match
         final boolean hasCustomOne = itemMeta.hasCustomModelData();
         final boolean hasCustomTwo = cachedMeta.hasCustomModelData();
         if (hasCustomOne) {
-            if (!hasCustomTwo || itemMeta.getCustomModelData() != cachedMeta.getCustomModelData()) {
-                return false;
-            }
-        } else if (hasCustomTwo) {
-            return false;
-        }
+            if (!hasCustomTwo || itemMeta.getCustomModelData() != cachedMeta.getCustomModelData()) return false;
+        } else if (hasCustomTwo) return false;
 
         // PDCs don't match
-        if (!itemMeta.getPersistentDataContainer().equals(cachedMeta.getPersistentDataContainer())) {
-            return false;
-        }
+        if (!itemMeta.getPersistentDataContainer().equals(cachedMeta.getPersistentDataContainer())) return false;
 
         // Make sure enchantments match
-        if (!itemMeta.getEnchants().equals(cachedMeta.getEnchants())) {
-            return false;
-        }
+        if (!itemMeta.getEnchants().equals(cachedMeta.getEnchants())) return false;
 
         // Check item flags
-        if (!itemMeta.getItemFlags().equals(cachedMeta.getItemFlags())) {
-            return false;
-        }
+        if (!itemMeta.getItemFlags().equals(cachedMeta.getItemFlags())) return false;
 
         // Check the lore
-        if (checkLore && !Objects.equals(itemMeta.getLore(), cachedMeta.getLore())) {
-            return false;
-        }
+        if (checkLore && !Objects.equals(itemMeta.getLore(), cachedMeta.getLore())) return false;
 
         // Slimefun ID check no need to worry about distinction, covered in PDC + lore
         final Optional<String> optionalStackId1 = Slimefun.getItemDataService().getItemData(itemMeta);
         final Optional<String> optionalStackId2 = Slimefun.getItemDataService().getItemData(cachedMeta);
-        if (optionalStackId1.isPresent() && optionalStackId2.isPresent()) {
+        if (optionalStackId1.isPresent() && optionalStackId2.isPresent())
             return optionalStackId1.get().equals(optionalStackId2.get());
-        }
-
-        // Finally, check the display name
-        if (itemMeta.hasDisplayName() && (!itemMeta.getDisplayName().equals(cachedMeta.getDisplayName()))) {
-            return false;
-        }
 
         // Everything should match if we've managed to get here
-        return true;
+        // Finally, check the display name
+        return !itemMeta.hasDisplayName() || (itemMeta.getDisplayName().equals(cachedMeta.getDisplayName()));
     }
 
 
     public boolean canQuickEscapeMetaVariant(@Nonnull ItemMeta metaOne, @Nonnull ItemMeta metaTwo) {
-
         // Damageable (first as everything can be damageable apparently)
-        if (metaOne instanceof Damageable instanceOne && metaTwo instanceof Damageable instanceTwo) {
-            if (instanceOne.getDamage() != instanceTwo.getDamage()) {
-                return true;
-            }
+        if (metaOne instanceof Damageable && metaTwo instanceof Damageable) {
+            Damageable instanceOne = (Damageable) metaOne;
+            Damageable instanceTwo = (Damageable) metaTwo;
+
+            if (instanceOne.getDamage() != instanceTwo.getDamage()) return true;
         }
 
         // Axolotl
-        if (metaOne instanceof AxolotlBucketMeta instanceOne && metaTwo instanceof AxolotlBucketMeta instanceTwo) {
-            if (instanceOne.hasVariant() != instanceTwo.hasVariant()) {
-                return true;
-            }
+        if (metaOne instanceof AxolotlBucketMeta && metaTwo instanceof AxolotlBucketMeta) {
+            AxolotlBucketMeta instanceOne = (AxolotlBucketMeta) metaOne;
+            AxolotlBucketMeta instanceTwo = (AxolotlBucketMeta) metaTwo;
 
-            if(!instanceOne.hasVariant() || !instanceTwo.hasVariant())
-                return true;
-
-            if (instanceOne.getVariant() != instanceTwo.getVariant()) {
-                return true;
-            }
+            if (instanceOne.hasVariant() != instanceTwo.hasVariant()) return true;
+            if (!instanceOne.hasVariant() || !instanceTwo.hasVariant()) return true;
+            if (instanceOne.getVariant() != instanceTwo.getVariant()) return true;
         }
 
         // Banner
-        if (metaOne instanceof BannerMeta instanceOne && metaTwo instanceof BannerMeta instanceTwo) {
-            if (!instanceOne.getPatterns().equals(instanceTwo.getPatterns())) {
-                return true;
-            }
+        if (metaOne instanceof BannerMeta && metaTwo instanceof BannerMeta) {
+            BannerMeta instanceOne = (BannerMeta) metaOne;
+            BannerMeta instanceTwo = (BannerMeta) metaTwo;
+
+            if (!instanceOne.getPatterns().equals(instanceTwo.getPatterns())) return true;
         }
 
         // Books
-        if (metaOne instanceof BookMeta instanceOne && metaTwo instanceof BookMeta instanceTwo) {
-            if (instanceOne.getPageCount() != instanceTwo.getPageCount()) {
-                return true;
-            }
-            if (!Objects.equals(instanceOne.getAuthor(), instanceTwo.getAuthor())) {
-                return true;
-            }
-            if (!Objects.equals(instanceOne.getTitle(), instanceTwo.getTitle())) {
-                return true;
-            }
-            if (!Objects.equals(instanceOne.getGeneration(), instanceTwo.getGeneration())) {
-                return true;
-            }
+        if (metaOne instanceof BookMeta && metaTwo instanceof BookMeta) {
+            BookMeta instanceOne = (BookMeta) metaOne;
+            BookMeta instanceTwo = (BookMeta) metaTwo;
+
+            if (instanceOne.getPageCount() != instanceTwo.getPageCount()) return true;
+            if (!Objects.equals(instanceOne.getAuthor(), instanceTwo.getAuthor())) return true;
+            if (!Objects.equals(instanceOne.getTitle(), instanceTwo.getTitle())) return true;
+            if (!Objects.equals(instanceOne.getGeneration(), instanceTwo.getGeneration())) return true;
         }
 
         // Bundle
-        if (metaOne instanceof BundleMeta instanceOne && metaTwo instanceof BundleMeta instanceTwo) {
-            if (instanceOne.hasItems() != instanceTwo.hasItems()) {
-                return true;
-            }
-            if (!instanceOne.getItems().equals(instanceTwo.getItems())) {
-                return true;
-            }
+        if (metaOne instanceof BundleMeta && metaTwo instanceof BundleMeta) {
+            BundleMeta instanceOne = (BundleMeta) metaOne;
+            BundleMeta instanceTwo = (BundleMeta) metaTwo;
+
+            if (instanceOne.hasItems() != instanceTwo.hasItems()) return true;
+            if (!instanceOne.getItems().equals(instanceTwo.getItems())) return true;
         }
 
         // Compass
-        if (metaOne instanceof CompassMeta instanceOne && metaTwo instanceof CompassMeta instanceTwo) {
-            if (instanceOne.isLodestoneTracked() != instanceTwo.isLodestoneTracked()) {
-                return true;
-            }
-            if (!Objects.equals(instanceOne.getLodestone(), instanceTwo.getLodestone())) {
-                return true;
-            }
+        if (metaOne instanceof CompassMeta && metaTwo instanceof CompassMeta) {
+            CompassMeta instanceOne = (CompassMeta) metaOne;
+            CompassMeta instanceTwo = (CompassMeta) metaTwo;
+
+            if (instanceOne.isLodestoneTracked() != instanceTwo.isLodestoneTracked()) return true;
+            if (!Objects.equals(instanceOne.getLodestone(), instanceTwo.getLodestone())) return true;
         }
 
         // Crossbow
-        if (metaOne instanceof CrossbowMeta instanceOne && metaTwo instanceof CrossbowMeta instanceTwo) {
-            if (instanceOne.hasChargedProjectiles() != instanceTwo.hasChargedProjectiles()) {
-                return true;
-            }
-            if (!instanceOne.getChargedProjectiles().equals(instanceTwo.getChargedProjectiles())) {
-                return true;
-            }
+        if (metaOne instanceof CrossbowMeta && metaTwo instanceof CrossbowMeta) {
+            CrossbowMeta instanceOne = (CrossbowMeta) metaOne;
+            CrossbowMeta instanceTwo = (CrossbowMeta) metaTwo;
+
+            if (instanceOne.hasChargedProjectiles() != instanceTwo.hasChargedProjectiles()) return true;
+            if (!instanceOne.getChargedProjectiles().equals(instanceTwo.getChargedProjectiles())) return true;
         }
 
         // Enchantment Storage
-        if (metaOne instanceof EnchantmentStorageMeta instanceOne && metaTwo instanceof EnchantmentStorageMeta instanceTwo) {
-            if (instanceOne.hasStoredEnchants() != instanceTwo.hasStoredEnchants()) {
-                return true;
-            }
-            if (!instanceOne.getStoredEnchants().equals(instanceTwo.getStoredEnchants())) {
-                return true;
-            }
+        if (metaOne instanceof EnchantmentStorageMeta && metaTwo instanceof EnchantmentStorageMeta) {
+            EnchantmentStorageMeta instanceOne = (EnchantmentStorageMeta) metaOne;
+            EnchantmentStorageMeta instanceTwo = (EnchantmentStorageMeta) metaTwo;
+
+            if (instanceOne.hasStoredEnchants() != instanceTwo.hasStoredEnchants()) return true;
+            if (!instanceOne.getStoredEnchants().equals(instanceTwo.getStoredEnchants())) return true;
         }
 
         // Firework Star
-        if (metaOne instanceof FireworkEffectMeta instanceOne && metaTwo instanceof FireworkEffectMeta instanceTwo) {
-            if (!Objects.equals(instanceOne.getEffect(), instanceTwo.getEffect())) {
-                return true;
-            }
+        if (metaOne instanceof FireworkEffectMeta && metaTwo instanceof FireworkEffectMeta) {
+            FireworkEffectMeta instanceOne = (FireworkEffectMeta) metaOne;
+            FireworkEffectMeta instanceTwo = (FireworkEffectMeta) metaTwo;
+
+            if (!Objects.equals(instanceOne.getEffect(), instanceTwo.getEffect())) return true;
         }
 
         // Firework
-        if (metaOne instanceof FireworkMeta instanceOne && metaTwo instanceof FireworkMeta instanceTwo) {
-            if (instanceOne.getPower() != instanceTwo.getPower()) {
-                return true;
-            }
-            if (!instanceOne.getEffects().equals(instanceTwo.getEffects())) {
-                return true;
-            }
+        if (metaOne instanceof FireworkMeta && metaTwo instanceof FireworkMeta) {
+            FireworkMeta instanceOne = (FireworkMeta) metaOne;
+            FireworkMeta instanceTwo = (FireworkMeta) metaTwo;
+
+            if (instanceOne.getPower() != instanceTwo.getPower()) return true;
+            if (!instanceOne.getEffects().equals(instanceTwo.getEffects())) return true;
         }
 
         // Leather Armor
-        if (metaOne instanceof LeatherArmorMeta instanceOne && metaTwo instanceof LeatherArmorMeta instanceTwo) {
-            if (!instanceOne.getColor().equals(instanceTwo.getColor())) {
-                return true;
-            }
+        if (metaOne instanceof LeatherArmorMeta && metaTwo instanceof LeatherArmorMeta) {
+            LeatherArmorMeta instanceOne = (LeatherArmorMeta) metaOne;
+            LeatherArmorMeta instanceTwo = (LeatherArmorMeta) metaTwo;
+
+            if (!instanceOne.getColor().equals(instanceTwo.getColor())) return true;
         }
 
         // Maps
-        if (metaOne instanceof MapMeta instanceOne && metaTwo instanceof MapMeta instanceTwo) {
-            if (instanceOne.hasMapView() != instanceTwo.hasMapView()) {
-                return true;
-            }
-            if (instanceOne.hasLocationName() != instanceTwo.hasLocationName()) {
-                return true;
-            }
-            if (instanceOne.hasColor() != instanceTwo.hasColor()) {
-                return true;
-            }
-            if (!Objects.equals(instanceOne.getMapView(), instanceTwo.getMapView())) {
-                return true;
-            }
-            if (!Objects.equals(instanceOne.getLocationName(), instanceTwo.getLocationName())) {
-                return true;
-            }
-            if (!Objects.equals(instanceOne.getColor(), instanceTwo.getColor())) {
-                return true;
-            }
+        if (metaOne instanceof MapMeta && metaTwo instanceof MapMeta) {
+            MapMeta instanceOne = (MapMeta) metaOne;
+            MapMeta instanceTwo = (MapMeta) metaTwo;
+
+            if (instanceOne.hasMapView() != instanceTwo.hasMapView()) return true;
+            if (instanceOne.hasLocationName() != instanceTwo.hasLocationName()) return true;
+            if (instanceOne.hasColor() != instanceTwo.hasColor()) return true;
+            if (!Objects.equals(instanceOne.getMapView(), instanceTwo.getMapView())) return true;
+            if (!Objects.equals(instanceOne.getLocationName(), instanceTwo.getLocationName())) return true;
+            if (!Objects.equals(instanceOne.getColor(), instanceTwo.getColor())) return true;
         }
 
         // Potion
-        if (metaOne instanceof PotionMeta instanceOne && metaTwo instanceof PotionMeta instanceTwo) {
-            if (!instanceOne.getBasePotionData().equals(instanceTwo.getBasePotionData())) {
-                return true;
-            }
-            if (instanceOne.hasCustomEffects() != instanceTwo.hasCustomEffects()) {
-                return true;
-            }
-            if (instanceOne.hasColor() != instanceTwo.hasColor()) {
-                return true;
-            }
-            if (!Objects.equals(instanceOne.getColor(), instanceTwo.getColor())) {
-                return true;
-            }
-            if (!instanceOne.getCustomEffects().equals(instanceTwo.getCustomEffects())) {
-                return true;
-            }
+        if (metaOne instanceof PotionMeta && metaTwo instanceof PotionMeta) {
+            PotionMeta instanceOne = (PotionMeta) metaOne;
+            PotionMeta instanceTwo = (PotionMeta) metaTwo;
+
+            if (!instanceOne.getBasePotionData().equals(instanceTwo.getBasePotionData())) return true;
+            if (instanceOne.hasCustomEffects() != instanceTwo.hasCustomEffects()) return true;
+            if (instanceOne.hasColor() != instanceTwo.hasColor()) return true;
+            if (!Objects.equals(instanceOne.getColor(), instanceTwo.getColor())) return true;
+            if (!instanceOne.getCustomEffects().equals(instanceTwo.getCustomEffects())) return true;
         }
 
         // Skull
-        if (metaOne instanceof SkullMeta instanceOne && metaTwo instanceof SkullMeta instanceTwo) {
-            if (instanceOne.hasOwner() != instanceTwo.hasOwner()) {
-                return true;
-            }
-            if (!Objects.equals(instanceOne.getOwningPlayer(), instanceTwo.getOwningPlayer())) {
-                return true;
-            }
+        if (metaOne instanceof SkullMeta && metaTwo instanceof SkullMeta) {
+            SkullMeta instanceOne = (SkullMeta) metaOne;
+            SkullMeta instanceTwo = (SkullMeta) metaTwo;
+
+            if (instanceOne.hasOwner() != instanceTwo.hasOwner()) return true;
+            if (!Objects.equals(instanceOne.getOwningPlayer(), instanceTwo.getOwningPlayer())) return true;
         }
 
         // Stew
-        if (metaOne instanceof SuspiciousStewMeta instanceOne && metaTwo instanceof SuspiciousStewMeta instanceTwo) {
-            if (!Objects.equals(instanceOne.getCustomEffects(), instanceTwo.getCustomEffects())) {
-                return true;
-            }
+        if (metaOne instanceof SuspiciousStewMeta && metaTwo instanceof SuspiciousStewMeta) {
+            SuspiciousStewMeta instanceOne = (SuspiciousStewMeta) metaOne;
+            SuspiciousStewMeta instanceTwo = (SuspiciousStewMeta) metaTwo;
+
+            if (!Objects.equals(instanceOne.getCustomEffects(), instanceTwo.getCustomEffects())) return true;
         }
 
         // Fish Bucket
-        if (metaOne instanceof TropicalFishBucketMeta instanceOne && metaTwo instanceof TropicalFishBucketMeta instanceTwo) {
-            if (instanceOne.hasVariant() != instanceTwo.hasVariant()) {
-                return true;
-            }
-            if (!instanceOne.getPattern().equals(instanceTwo.getPattern())) {
-                return true;
-            }
-            if (!instanceOne.getBodyColor().equals(instanceTwo.getBodyColor())) {
-                return true;
-            }
-            if (!instanceOne.getPatternColor().equals(instanceTwo.getPatternColor())) {
-                return true;
-            }
+        if (metaOne instanceof TropicalFishBucketMeta && metaTwo instanceof TropicalFishBucketMeta) {
+            TropicalFishBucketMeta instanceOne = (TropicalFishBucketMeta) metaOne;
+            TropicalFishBucketMeta instanceTwo = (TropicalFishBucketMeta) metaTwo;
+
+            if (instanceOne.hasVariant() != instanceTwo.hasVariant()) return true;
+            if (!instanceOne.getPattern().equals(instanceTwo.getPattern())) return true;
+            if (!instanceOne.getBodyColor().equals(instanceTwo.getBodyColor())) return true;
+            return !instanceOne.getPatternColor().equals(instanceTwo.getPatternColor());
         }
 
         // Cannot escape via any meta extension check
@@ -329,7 +252,7 @@ public class StackUtils {
      * @param durationInSeconds The amount to heal by
      */
     @ParametersAreNonnullByDefault
-    public static void putOnCooldown(ItemStack itemStack, int durationInSeconds) {
+    public void putOnCooldown(ItemStack itemStack, int durationInSeconds) {
         ItemMeta itemMeta = itemStack.getItemMeta();
         if (itemMeta != null) {
             PersistentDataAPI.setLong(itemMeta, Keys.ON_COOLDOWN, System.currentTimeMillis() + (durationInSeconds * 1000L));
@@ -343,7 +266,7 @@ public class StackUtils {
      * @param itemStack The {@link LivingEntity} to heal
      */
     @ParametersAreNonnullByDefault
-    public static boolean isOnCooldown(ItemStack itemStack) {
+    public boolean isOnCooldown(ItemStack itemStack) {
         ItemMeta itemMeta = itemStack.getItemMeta();
         if (itemMeta != null) {
             long cooldownUntil = PersistentDataAPI.getLong(itemMeta, Keys.ON_COOLDOWN, 0);
@@ -351,4 +274,4 @@ public class StackUtils {
         }
         return false;
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/StringUtils.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/StringUtils.java
new file mode 100644
index 0000000..f812f43
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/StringUtils.java
@@ -0,0 +1,87 @@
+package id.universenetwork.sfa_loader.addons.networks.utils;
+
+import lombok.experimental.UtilityClass;
+
+import javax.annotation.Nonnull;
+import java.util.Arrays;
+import java.util.List;
+import java.util.concurrent.ThreadLocalRandom;
+
+@UtilityClass
+public class StringUtils {
+    @Nonnull
+    public String toTitleCase(@Nonnull String string) {
+        return toTitleCase(string, true);
+    }
+
+    @Nonnull
+    public String toTitleCase(@Nonnull String string, boolean delimiterToSpace) {
+        return toTitleCase(string, delimiterToSpace, " _'-/");
+    }
+
+    @Nonnull
+    public String toTitleCase(@Nonnull String string, boolean delimiterToSpace, @Nonnull String delimiters) {
+        final StringBuilder builder = new StringBuilder();
+        boolean capNext = true;
+
+        for (char character : string.toCharArray()) {
+            character = (capNext) ? Character.toUpperCase(character) : Character.toLowerCase(character);
+            builder.append(character);
+            capNext = (delimiters.indexOf(character) >= 0);
+        }
+
+        String built = builder.toString();
+
+        if (delimiterToSpace) {
+            final char space = ' ';
+            for (char c : delimiters.toCharArray()) {
+                built = built.replace(c, space);
+            }
+        }
+        return built;
+    }
+
+    @Nonnull
+    @SuppressWarnings("unused")
+    public String getRandomEggName() {
+        int rnd = ThreadLocalRandom.current().nextInt(0, getEggNames().size());
+        return getEggNames().get(rnd);
+    }
+
+    /**
+     * List of names to be given to ArmourStands, invisible but mods and Minimaps can see them :)
+     */
+    @Nonnull
+    public List<String> getEggNames() {
+        return Arrays.asList(
+                "TheBusyBiscuit",
+                "Alessio",
+                "Walshy",
+                "Jeff",
+                "Seggan",
+                "BOOMER_1",
+                "svr333",
+                "variananora",
+                "ProfElements",
+                "Riley",
+                "FluffyBear",
+                "GallowsDove",
+                "Apeiros",
+                "Martin",
+                "Bunnky",
+                "ReasonFoundDecoy",
+                "Oah",
+                "Azak",
+                "andrewandy",
+                "EpicPlayer10",
+                "GentlemanCheesy",
+                "ybw0014",
+                "Ashian",
+                "R.I.P",
+                "OOOOMAGAAA",
+                "TerslenK",
+                "FN_FAL",
+                "supertechxter"
+        );
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/utils/Theme.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/Theme.java
similarity index 88%
rename from src/main/java/io/github/sefiraat/networks/utils/Theme.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/Theme.java
index 3f40575..593d852 100644
--- a/src/main/java/io/github/sefiraat/networks/utils/Theme.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/Theme.java
@@ -1,4 +1,4 @@
-package io.github.sefiraat.networks.utils;
+package id.universenetwork.sfa_loader.addons.networks.utils;
 
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
@@ -42,19 +42,16 @@ public enum Theme {
     Theme(ChatColor color, String loreLine) {
         this.color = color;
         this.loreLine = loreLine;
-
     }
 
     @Nonnull
     public Particle.DustOptions getDustOptions(float size) {
         return new Particle.DustOptions(
-            Color.fromRGB(
-                color.getColor().getRed(),
-                color.getColor().getGreen(),
-                color.getColor().getBlue()
-            ),
-            size
-        );
+                Color.fromRGB(
+                        color.getColor().getRed(),
+                        color.getColor().getGreen(),
+                        color.getColor().getBlue()
+                ), size);
     }
 
     /**
@@ -92,10 +89,10 @@ public enum Theme {
         finalLore.add("");
         finalLore.add(applyThemeToString(Theme.CLICK_INFO, themeType.getLoreLine()));
         return new SlimefunItemStack(
-            id,
-            itemStack,
-            Theme.applyThemeToString(themeType, name),
-            finalLore.toArray(new String[finalLore.size() - 1])
+                id,
+                itemStack,
+                Theme.applyThemeToString(themeType, name),
+                finalLore.toArray(new String[finalLore.size() - 1])
         );
     }
 
@@ -133,9 +130,9 @@ public enum Theme {
         finalLore.add("");
         finalLore.add(applyThemeToString(Theme.CLICK_INFO, themeType.getLoreLine()));
         return new CustomItemStack(
-            material,
-            Theme.applyThemeToString(themeType, name),
-            finalLore.toArray(new String[finalLore.size() - 1])
+                material,
+                Theme.applyThemeToString(themeType, name),
+                finalLore.toArray(new String[finalLore.size() - 1])
         );
     }
 
diff --git a/src/main/java/io/github/sefiraat/networks/utils/datatypes/DataTypeMethods.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/datatypes/DataTypeMethods.java
similarity index 75%
rename from src/main/java/io/github/sefiraat/networks/utils/datatypes/DataTypeMethods.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/datatypes/DataTypeMethods.java
index 490501b..88fc08f 100644
--- a/src/main/java/io/github/sefiraat/networks/utils/datatypes/DataTypeMethods.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/datatypes/DataTypeMethods.java
@@ -1,4 +1,4 @@
-package io.github.sefiraat.networks.utils.datatypes;
+package id.universenetwork.sfa_loader.addons.networks.utils.datatypes;
 
 import io.github.thebusybiscuit.slimefun4.libraries.dough.data.persistent.PersistentDataAPI;
 import lombok.experimental.UtilityClass;
@@ -13,7 +13,6 @@ import java.util.Optional;
 
 @UtilityClass
 public class DataTypeMethods {
-
     /**
      * Get an object based on the provided {@link PersistentDataType} in a {@link PersistentDataContainer}, if the key doesn't exist it returns null.
      *
@@ -22,7 +21,7 @@ public class DataTypeMethods {
      * @return An object associated with this key or null if it doesn't exist
      */
     @Nullable
-    public static <T, Z> Z getCustom(@Nonnull PersistentDataHolder holder, @Nonnull NamespacedKey key, @Nonnull PersistentDataType<T, Z> type) {
+    public <T, Z> Z getCustom(@Nonnull PersistentDataHolder holder, @Nonnull NamespacedKey key, @Nonnull PersistentDataType<T, Z> type) {
         return holder.getPersistentDataContainer().get(key, type);
     }
 
@@ -33,10 +32,10 @@ public class DataTypeMethods {
      * @param holder The {@link PersistentDataHolder} to retrieve the data from
      * @param key    The key of the data to retrieve
      * @return An {@link Optional} describing the result
-     * @see PersistentDataAPI#getCustom(PersistentDataHolder, NamespacedKey, PersistentDataType)
+     * @see PersistentDataAPI#get(PersistentDataHolder, NamespacedKey, PersistentDataType)
      */
     @Nonnull
-    public static <T, Z> Optional<Z> getOptionalCustom(@Nonnull PersistentDataHolder holder, @Nonnull NamespacedKey key, @Nonnull PersistentDataType<T, Z> type) {
+    public <T, Z> Optional<Z> getOptionalCustom(@Nonnull PersistentDataHolder holder, @Nonnull NamespacedKey key, @Nonnull PersistentDataType<T, Z> type) {
         return Optional.ofNullable(getCustom(holder, key, type));
     }
 
@@ -48,7 +47,7 @@ public class DataTypeMethods {
      * @param defaultVal The default value to use if no key is found
      * @return The object associated with this key or the default value if it doesn't exist
      */
-    public static <T, Z> Z getCustom(@Nonnull PersistentDataHolder holder, @Nonnull NamespacedKey key, @Nonnull PersistentDataType<T, Z> type, @Nonnull Z defaultVal) {
+    public <T, Z> Z getCustom(@Nonnull PersistentDataHolder holder, @Nonnull NamespacedKey key, @Nonnull PersistentDataType<T, Z> type, @Nonnull Z defaultVal) {
         return holder.getPersistentDataContainer().getOrDefault(key, type, defaultVal);
     }
 
@@ -60,7 +59,7 @@ public class DataTypeMethods {
      * @param key    The key to check for
      * @return {@code true} if the holder has a {@link PersistentDataContainer} with the specified key.
      */
-    public static <T, Z> boolean hasCustom(@Nonnull PersistentDataHolder holder, @Nonnull NamespacedKey key, @Nonnull PersistentDataType<T, Z> type) {
+    public <T, Z> boolean hasCustom(@Nonnull PersistentDataHolder holder, @Nonnull NamespacedKey key, @Nonnull PersistentDataType<T, Z> type) {
         return holder.getPersistentDataContainer().has(key, type);
     }
 
@@ -72,7 +71,7 @@ public class DataTypeMethods {
      * @param type   The {@link PersistentDataType} to be used.
      * @param obj    The object to put in the container
      */
-    public static <T, Z> void setCustom(@Nonnull PersistentDataHolder holder, @Nonnull NamespacedKey key, @Nonnull PersistentDataType<T, Z> type, @Nonnull Z obj) {
+    public <T, Z> void setCustom(@Nonnull PersistentDataHolder holder, @Nonnull NamespacedKey key, @Nonnull PersistentDataType<T, Z> type, @Nonnull Z obj) {
         holder.getPersistentDataContainer().set(key, type, obj);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/utils/datatypes/PersistentAmountInstanceType.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/datatypes/PersistentAmountInstanceType.java
similarity index 78%
rename from src/main/java/io/github/sefiraat/networks/utils/datatypes/PersistentAmountInstanceType.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/datatypes/PersistentAmountInstanceType.java
index 880fa79..75199f2 100644
--- a/src/main/java/io/github/sefiraat/networks/utils/datatypes/PersistentAmountInstanceType.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/datatypes/PersistentAmountInstanceType.java
@@ -1,8 +1,8 @@
-package io.github.sefiraat.networks.utils.datatypes;
+package id.universenetwork.sfa_loader.addons.networks.utils.datatypes;
 
 import de.jeff_media.morepersistentdatatypes.DataType;
-import io.github.sefiraat.networks.network.stackcaches.CardInstance;
-import io.github.sefiraat.networks.utils.Keys;
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.CardInstance;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
 import org.bukkit.NamespacedKey;
 import org.bukkit.persistence.PersistentDataAdapterContext;
 import org.bukkit.persistence.PersistentDataContainer;
@@ -17,15 +17,13 @@ import javax.annotation.Nonnull;
  * @author Sfiguz7
  * @author Walshy
  */
-
 public class PersistentAmountInstanceType implements PersistentDataType<PersistentDataContainer, CardInstance> {
-
     public static final PersistentDataType<PersistentDataContainer, CardInstance> TYPE = new PersistentAmountInstanceType();
 
-    public static final NamespacedKey ITEM = Keys.newKey("item");
-    public static final NamespacedKey AMOUNT = Keys.newKey("amount");
-    public static final NamespacedKey LIMIT = Keys.newKey("limit");
-    public static final NamespacedKey UNSTACK = Keys.newKey("time");
+    public static final NamespacedKey ITEM = AbstractAddon.createKey("item");
+    public static final NamespacedKey AMOUNT = AbstractAddon.createKey("amount");
+    public static final NamespacedKey LIMIT = AbstractAddon.createKey("limit");
+    public static final NamespacedKey UNSTACK = AbstractAddon.createKey("time");
 
     @Override
     @Nonnull
@@ -59,4 +57,4 @@ public class PersistentAmountInstanceType implements PersistentDataType<Persiste
 
         return new CardInstance(null, amount, limit);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/utils/datatypes/PersistentCardInstanceType.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/datatypes/PersistentCardInstanceType.java
similarity index 79%
rename from src/main/java/io/github/sefiraat/networks/utils/datatypes/PersistentCardInstanceType.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/datatypes/PersistentCardInstanceType.java
index 8273ee4..e5aea5b 100644
--- a/src/main/java/io/github/sefiraat/networks/utils/datatypes/PersistentCardInstanceType.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/datatypes/PersistentCardInstanceType.java
@@ -1,8 +1,8 @@
-package io.github.sefiraat.networks.utils.datatypes;
+package id.universenetwork.sfa_loader.addons.networks.utils.datatypes;
 
 import de.jeff_media.morepersistentdatatypes.DataType;
-import io.github.sefiraat.networks.network.stackcaches.CardInstance;
-import io.github.sefiraat.networks.utils.Keys;
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.CardInstance;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
 import org.bukkit.NamespacedKey;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.persistence.PersistentDataAdapterContext;
@@ -18,15 +18,13 @@ import javax.annotation.Nonnull;
  * @author Sfiguz7
  * @author Walshy
  */
-
 public class PersistentCardInstanceType implements PersistentDataType<PersistentDataContainer, CardInstance> {
-
     public static final PersistentDataType<PersistentDataContainer, CardInstance> TYPE = new PersistentCardInstanceType();
 
-    public static final NamespacedKey ITEM = Keys.newKey("item");
-    public static final NamespacedKey AMOUNT = Keys.newKey("amount");
-    public static final NamespacedKey LIMIT = Keys.newKey("limit");
-    public static final NamespacedKey UNSTACK = Keys.newKey("time");
+    public static final NamespacedKey ITEM = AbstractAddon.createKey("item");
+    public static final NamespacedKey AMOUNT = AbstractAddon.createKey("amount");
+    public static final NamespacedKey LIMIT = AbstractAddon.createKey("limit");
+    public static final NamespacedKey UNSTACK = AbstractAddon.createKey("time");
 
     @Override
     @Nonnull
@@ -61,4 +59,4 @@ public class PersistentCardInstanceType implements PersistentDataType<Persistent
 
         return new CardInstance(item, amount, limit);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/utils/datatypes/PersistentCraftingBlueprintType.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/datatypes/PersistentCraftingBlueprintType.java
similarity index 80%
rename from src/main/java/io/github/sefiraat/networks/utils/datatypes/PersistentCraftingBlueprintType.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/datatypes/PersistentCraftingBlueprintType.java
index 6ad42ba..acc9deb 100644
--- a/src/main/java/io/github/sefiraat/networks/utils/datatypes/PersistentCraftingBlueprintType.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/datatypes/PersistentCraftingBlueprintType.java
@@ -1,9 +1,9 @@
-package io.github.sefiraat.networks.utils.datatypes;
+package id.universenetwork.sfa_loader.addons.networks.utils.datatypes;
 
 import de.jeff_media.morepersistentdatatypes.DataType;
-import io.github.sefiraat.networks.network.stackcaches.BlueprintInstance;
-import io.github.sefiraat.networks.network.stackcaches.CardInstance;
-import io.github.sefiraat.networks.utils.Keys;
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.BlueprintInstance;
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.CardInstance;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
 import org.bukkit.NamespacedKey;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.persistence.PersistentDataAdapterContext;
@@ -19,13 +19,11 @@ import javax.annotation.Nonnull;
  * @author Sfiguz7
  * @author Walshy
  */
-
 public class PersistentCraftingBlueprintType implements PersistentDataType<PersistentDataContainer, BlueprintInstance> {
-
     public static final PersistentDataType<PersistentDataContainer, BlueprintInstance> TYPE = new PersistentCraftingBlueprintType();
 
-    public static final NamespacedKey RECIPE = Keys.newKey("recipe");
-    public static final NamespacedKey OUTPUT = Keys.newKey("output");
+    public static final NamespacedKey RECIPE = AbstractAddon.createKey("recipe");
+    public static final NamespacedKey OUTPUT = AbstractAddon.createKey("output");
 
     @Override
     @Nonnull
@@ -57,4 +55,4 @@ public class PersistentCraftingBlueprintType implements PersistentDataType<Persi
 
         return new BlueprintInstance(recipe, output);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/utils/datatypes/PersistentQuantumStorageType.java b/src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/datatypes/PersistentQuantumStorageType.java
similarity index 77%
rename from src/main/java/io/github/sefiraat/networks/utils/datatypes/PersistentQuantumStorageType.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/datatypes/PersistentQuantumStorageType.java
index 7c981eb..054bca7 100644
--- a/src/main/java/io/github/sefiraat/networks/utils/datatypes/PersistentQuantumStorageType.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/networks/utils/datatypes/PersistentQuantumStorageType.java
@@ -1,9 +1,9 @@
-package io.github.sefiraat.networks.utils.datatypes;
+package id.universenetwork.sfa_loader.addons.networks.utils.datatypes;
 
 import de.jeff_media.morepersistentdatatypes.DataType;
-import io.github.sefiraat.networks.network.stackcaches.CardInstance;
-import io.github.sefiraat.networks.network.stackcaches.QuantumCache;
-import io.github.sefiraat.networks.utils.Keys;
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.CardInstance;
+import id.universenetwork.sfa_loader.addons.networks.network.stackcaches.QuantumCache;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
 import org.bukkit.NamespacedKey;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.persistence.PersistentDataAdapterContext;
@@ -19,15 +19,13 @@ import javax.annotation.Nonnull;
  * @author Sfiguz7
  * @author Walshy
  */
-
 public class PersistentQuantumStorageType implements PersistentDataType<PersistentDataContainer, QuantumCache> {
-
     public static final PersistentDataType<PersistentDataContainer, QuantumCache> TYPE = new PersistentQuantumStorageType();
 
-    public static final NamespacedKey ITEM = Keys.newKey("item");
-    public static final NamespacedKey AMOUNT = Keys.newKey("amount");
-    public static final NamespacedKey MAX_AMOUNT = Keys.newKey("max_amount");
-    public static final NamespacedKey VOID = Keys.newKey("void");
+    public static final NamespacedKey ITEM = AbstractAddon.createKey("item");
+    public static final NamespacedKey AMOUNT = AbstractAddon.createKey("amount");
+    public static final NamespacedKey MAX_AMOUNT = AbstractAddon.createKey("max_amount");
+    public static final NamespacedKey VOID = AbstractAddon.createKey("void");
 
     @Override
     @Nonnull
@@ -63,4 +61,4 @@ public class PersistentQuantumStorageType implements PersistentDataType<Persiste
 
         return new QuantumCache(item, amount, limit, voidExcess);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/sefiraat/networks/Networks.java b/src/main/java/io/github/sefiraat/networks/Networks.java
deleted file mode 100644
index 8923733..0000000
--- a/src/main/java/io/github/sefiraat/networks/Networks.java
+++ /dev/null
@@ -1,122 +0,0 @@
-package io.github.sefiraat.networks;
-
-import io.github.sefiraat.networks.commands.NetworksMain;
-import io.github.sefiraat.networks.managers.ListenerManager;
-import io.github.sefiraat.networks.managers.SupportedPluginManager;
-import io.github.sefiraat.networks.slimefun.NetheoPlants;
-import io.github.sefiraat.networks.slimefun.NetworkSlimefunItems;
-import io.github.sefiraat.networks.slimefun.network.NetworkController;
-import io.github.thebusybiscuit.slimefun4.api.SlimefunAddon;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.updater.GitHubBuildsUpdater;
-import org.bstats.bukkit.Metrics;
-import org.bstats.charts.AdvancedPie;
-import org.bukkit.plugin.PluginManager;
-import org.bukkit.plugin.java.JavaPlugin;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-import java.text.MessageFormat;
-import java.util.HashMap;
-import java.util.Map;
-
-public class Networks extends JavaPlugin implements SlimefunAddon {
-
-
-    private static Networks instance;
-
-    private final String username;
-    private final String repo;
-    private final String branch;
-
-    private ListenerManager listenerManager;
-    private SupportedPluginManager supportedPluginManager;
-
-    public Networks() {
-        this.username = "Sefiraat";
-        this.repo = "Networks";
-        this.branch = "master";
-    }
-
-    @Override
-    public void onEnable() {
-        instance = this;
-
-        getLogger().info("########################################");
-        getLogger().info("         Networks - By Sefiraat         ");
-        getLogger().info("########################################");
-
-        saveDefaultConfig();
-        tryUpdate();
-
-        this.supportedPluginManager = new SupportedPluginManager();
-
-        setupSlimefun();
-
-        this.listenerManager = new ListenerManager();
-        this.getCommand("networks").setExecutor(new NetworksMain());
-
-        setupMetrics();
-    }
-
-    public void tryUpdate() {
-        if (getConfig().getBoolean("auto-update")
-            && getDescription().getVersion().startsWith("DEV")
-        ) {
-            String updateLocation = MessageFormat.format("{0}/{1}/{2}", this.username, this.repo, this.branch);
-            GitHubBuildsUpdater updater = new GitHubBuildsUpdater(this, getFile(), updateLocation);
-            updater.start();
-        }
-    }
-
-    public void setupSlimefun() {
-        NetworkSlimefunItems.setup();
-        if (supportedPluginManager.isNetheopoiesis()){
-            try {
-                NetheoPlants.setup();
-            } catch (NoClassDefFoundError e) {
-                getLogger().severe("Netheopoiesis must be updated to meet Networks' requirements.");
-            }
-        }
-    }
-
-    public void setupMetrics() {
-        final Metrics metrics = new Metrics(this, 13644);
-
-        AdvancedPie networksChart = new AdvancedPie("networks", () -> {
-            Map<String, Integer> networksMap = new HashMap<>();
-            networksMap.put("Number of networks", NetworkController.getNetworks().size());
-            return networksMap;
-        });
-
-        metrics.addCustomChart(networksChart);
-    }
-
-    @Nonnull
-    @Override
-    public JavaPlugin getJavaPlugin() {
-        return this;
-    }
-
-    @Nullable
-    @Override
-    public String getBugTrackerURL() {
-        return MessageFormat.format("https://github.com/{0}/{1}/issues/", this.username, this.repo);
-    }
-
-    @Nonnull
-    public static PluginManager getPluginManager() {
-        return Networks.getInstance().getServer().getPluginManager();
-    }
-
-    public static Networks getInstance() {
-        return Networks.instance;
-    }
-
-    public static SupportedPluginManager getSupportedPluginManager() {
-        return Networks.getInstance().supportedPluginManager;
-    }
-
-    public static ListenerManager getListenerManager() {
-        return Networks.getInstance().listenerManager;
-    }
-}
diff --git a/src/main/java/io/github/sefiraat/networks/commands/NetworksMain.java b/src/main/java/io/github/sefiraat/networks/commands/NetworksMain.java
deleted file mode 100644
index d8d3e26..0000000
--- a/src/main/java/io/github/sefiraat/networks/commands/NetworksMain.java
+++ /dev/null
@@ -1,93 +0,0 @@
-package io.github.sefiraat.networks.commands;
-
-import io.github.sefiraat.networks.network.stackcaches.QuantumCache;
-import io.github.sefiraat.networks.slimefun.NetworkSlimefunItems;
-import io.github.sefiraat.networks.slimefun.network.NetworkQuantumStorage;
-import io.github.sefiraat.networks.utils.Keys;
-import io.github.sefiraat.networks.utils.Theme;
-import io.github.sefiraat.networks.utils.datatypes.DataTypeMethods;
-import io.github.sefiraat.networks.utils.datatypes.PersistentQuantumStorageType;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import org.bukkit.Material;
-import org.bukkit.command.Command;
-import org.bukkit.command.CommandExecutor;
-import org.bukkit.command.CommandSender;
-import org.bukkit.entity.Player;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.ItemMeta;
-
-import javax.annotation.Nonnull;
-import java.util.HashMap;
-import java.util.Map;
-
-public class NetworksMain implements CommandExecutor {
-
-    private static final Map<Integer, NetworkQuantumStorage> QUANTUM_REPLACEMENT_MAP = new HashMap<>();
-
-    static {
-        QUANTUM_REPLACEMENT_MAP.put(4096, NetworkSlimefunItems.NETWORK_QUANTUM_STORAGE_1);
-        QUANTUM_REPLACEMENT_MAP.put(32768, NetworkSlimefunItems.NETWORK_QUANTUM_STORAGE_2);
-        QUANTUM_REPLACEMENT_MAP.put(262144, NetworkSlimefunItems.NETWORK_QUANTUM_STORAGE_3);
-        QUANTUM_REPLACEMENT_MAP.put(2097152, NetworkSlimefunItems.NETWORK_QUANTUM_STORAGE_4);
-        QUANTUM_REPLACEMENT_MAP.put(16777216, NetworkSlimefunItems.NETWORK_QUANTUM_STORAGE_5);
-        QUANTUM_REPLACEMENT_MAP.put(134217728, NetworkSlimefunItems.NETWORK_QUANTUM_STORAGE_6);
-        QUANTUM_REPLACEMENT_MAP.put(1073741824, NetworkSlimefunItems.NETWORK_QUANTUM_STORAGE_7);
-        QUANTUM_REPLACEMENT_MAP.put(Integer.MAX_VALUE, NetworkSlimefunItems.NETWORK_QUANTUM_STORAGE_8);
-    }
-
-    @Override
-    public boolean onCommand(@Nonnull CommandSender sender, @Nonnull Command command, @Nonnull String label, @Nonnull String[] args) {
-        if (sender instanceof Player player) {
-
-            if (args.length == 0) {
-                return false;
-            }
-
-            if (args[0].equalsIgnoreCase("fillquantum")) {
-                if ((player.isOp() || player.hasPermission("networks.admin")) && args.length >= 2) {
-                    try {
-                        int number = Integer.parseInt(args[1]);
-                        fillQuantum(player, number);
-                        return true;
-                    } catch (NumberFormatException exception) {
-                        return false;
-                    }
-                }
-            }
-        }
-        return true;
-    }
-
-    public void fillQuantum(Player player, int amount) {
-        final ItemStack itemStack = player.getInventory().getItemInMainHand();
-        if (itemStack == null || itemStack.getType() == Material.AIR) {
-            player.sendMessage(Theme.ERROR + "Item in hand must be a Quantum Storage.");
-            return;
-        }
-
-        SlimefunItem slimefunItem = SlimefunItem.getByItem(itemStack);
-
-        if (!(slimefunItem instanceof NetworkQuantumStorage)) {
-            player.sendMessage(Theme.ERROR + "Item in hand must be a Quantum Storage.");
-            return;
-        }
-
-        ItemMeta meta = itemStack.getItemMeta();
-        final QuantumCache quantumCache = DataTypeMethods.getCustom(
-            meta,
-            Keys.QUANTUM_STORAGE_INSTANCE,
-            PersistentQuantumStorageType.TYPE
-        );
-
-        if (quantumCache == null || quantumCache.getItemStack() == null) {
-            player.sendMessage(Theme.ERROR + "This card has either not been set to an item yet or is a corrupted Quantum Storage.");
-            return;
-        }
-
-        quantumCache.setAmount(amount);
-        DataTypeMethods.setCustom(meta, Keys.QUANTUM_STORAGE_INSTANCE, PersistentQuantumStorageType.TYPE, quantumCache);
-        quantumCache.updateMetaLore(meta);
-        itemStack.setItemMeta(meta);
-        player.sendMessage(Theme.SUCCESS + "Item updated");
-    }
-}
diff --git a/src/main/java/io/github/sefiraat/networks/managers/ListenerManager.java b/src/main/java/io/github/sefiraat/networks/managers/ListenerManager.java
deleted file mode 100644
index 11b2307..0000000
--- a/src/main/java/io/github/sefiraat/networks/managers/ListenerManager.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package io.github.sefiraat.networks.managers;
-
-import io.github.sefiraat.networks.Networks;
-import io.github.sefiraat.networks.listeners.ExplosiveToolListener;
-import org.bukkit.event.Listener;
-
-public class ListenerManager {
-
-    public ListenerManager() {
-        addListener(new ExplosiveToolListener());
-    }
-
-    private void addListener(Listener listener) {
-        Networks.getPluginManager().registerEvents(listener, Networks.getInstance());
-    }
-}
diff --git a/src/main/java/io/github/sefiraat/networks/managers/SupportedPluginManager.java b/src/main/java/io/github/sefiraat/networks/managers/SupportedPluginManager.java
deleted file mode 100644
index d0d710f..0000000
--- a/src/main/java/io/github/sefiraat/networks/managers/SupportedPluginManager.java
+++ /dev/null
@@ -1,55 +0,0 @@
-package io.github.sefiraat.networks.managers;
-
-import com.google.common.base.Preconditions;
-import io.github.sefiraat.networks.Networks;
-import org.bukkit.Bukkit;
-
-public class SupportedPluginManager {
-
-    private static SupportedPluginManager instance;
-
-    private final boolean infinityExpansion;
-    private final boolean netheopoiesis;
-
-    // region First Tick Only Registrations
-    private boolean mcMMO;
-    private boolean wildChests;
-
-    // endregion
-
-    public SupportedPluginManager() {
-        Preconditions.checkArgument(instance == null, "Cannot instantiate class");
-        instance = this;
-        this.infinityExpansion = Bukkit.getPluginManager().isPluginEnabled("InfinityExpansion");
-        this.netheopoiesis = Bukkit.getPluginManager().isPluginEnabled("Netheopoiesis");
-        Networks.getInstance()
-            .getServer()
-            .getScheduler()
-            .runTaskLater(Networks.getInstance(), this::firstTickRegistrations, 1);
-    }
-
-    private void firstTickRegistrations() {
-        this.wildChests = Bukkit.getPluginManager().isPluginEnabled("WildChests");
-        this.mcMMO = Bukkit.getPluginManager().isPluginEnabled("mcMMO");
-    }
-
-    public boolean isInfinityExpansion() {
-        return infinityExpansion;
-    }
-
-    public boolean isNetheopoiesis() {
-        return netheopoiesis;
-    }
-
-    public boolean isMcMMO() {
-        return mcMMO;
-    }
-
-    public boolean isWildChests() {
-        return wildChests;
-    }
-
-    public static SupportedPluginManager getInstance() {
-        return instance;
-    }
-}
diff --git a/src/main/java/io/github/sefiraat/networks/network/barrel/BarrelType.java b/src/main/java/io/github/sefiraat/networks/network/barrel/BarrelType.java
deleted file mode 100644
index 92668f0..0000000
--- a/src/main/java/io/github/sefiraat/networks/network/barrel/BarrelType.java
+++ /dev/null
@@ -1,7 +0,0 @@
-package io.github.sefiraat.networks.network.barrel;
-
-public enum BarrelType {
-    NETWORKS,
-    INFINITY,
-    FLUFFY
-}
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/NetheoPlants.java b/src/main/java/io/github/sefiraat/networks/slimefun/NetheoPlants.java
deleted file mode 100644
index b8bc4d3..0000000
--- a/src/main/java/io/github/sefiraat/networks/slimefun/NetheoPlants.java
+++ /dev/null
@@ -1,104 +0,0 @@
-package io.github.sefiraat.networks.slimefun;
-
-import dev.sefiraat.netheopoiesis.api.items.DoNothingSeed;
-import dev.sefiraat.netheopoiesis.api.items.HarvestableSeed;
-import dev.sefiraat.netheopoiesis.api.plant.Growth;
-import dev.sefiraat.netheopoiesis.api.plant.GrowthStages;
-import dev.sefiraat.netheopoiesis.api.plant.Placements;
-import dev.sefiraat.netheopoiesis.implementation.Stacks;
-import dev.sefiraat.netheopoiesis.utils.Skulls;
-import dev.sefiraat.netheopoiesis.utils.Theme;
-import io.github.sefiraat.networks.Networks;
-import io.github.sefiraat.networks.utils.StackUtils;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
-import lombok.experimental.UtilityClass;
-
-@UtilityClass
-public class NetheoPlants {
-
-    // Stacks
-    public static final SlimefunItemStack STONE_CHUNK_SEED = Theme.themedSeed(
-        "NTW_STONE_CHUNK_SEED",
-        Skulls.SEED_PURPLE.getPlayerHead(),
-        Theme.SEED,
-        "Stone Chunk Seed",
-        new String[]{"This seed, when fully grown, will", "provide Stone Chunks when", "harvested."},
-        Stacks.getCanBePlacedOnLore("Nether Grass (or better)")
-    );
-
-    public static final SlimefunItemStack SYNTHETIC_SEED = Theme.themedSeed(
-        "NTW_SYNTHETIC_SEED",
-        Skulls.SEED_ORANGE.getPlayerHead(),
-        Theme.SEED,
-        "Synthetic Seed",
-        new String[]{"This seed does nothing."},
-        Stacks.getCanBePlacedOnLore("Nether Grass (or better)")
-    );
-
-    public static final SlimefunItemStack SYNTHETIC_EMERALD_SEED = Theme.themedSeed(
-        "NTW_SYNTHETIC_EMERALD_SEED",
-        Skulls.SEED_GREEN.getPlayerHead(),
-        Theme.SEED,
-        "Synthetic Emerald Seed",
-        new String[]{"This seed, when fully grown, will", "provide Synthetic Emeralds when", "harvested."},
-        Stacks.getCanBePlacedOnLore("Voracious Dirt (or better)")
-    );
-
-    public static final SlimefunItemStack SYNTHETIC_DIAMOND_SEED = Theme.themedSeed(
-        "NTW_SYNTHETIC_DIAMOND_SEED",
-        Skulls.SEED_GREEN.getPlayerHead(),
-        Theme.SEED,
-        "Synthetic Diamond Seed",
-        new String[]{"This seed, when fully grown, will", "provide Synthetic Diamonds when", "harvested."},
-        Stacks.getCanBePlacedOnLore("Voracious Dirt (or better)")
-    );
-
-    public static final SlimefunItemStack FRAGMENTED_SEED = Theme.themedSeed(
-        "NTW_FRAGMENTED_SEED",
-        Skulls.SEED_GREEN.getPlayerHead(),
-        Theme.SEED,
-        "Fragmented Seed",
-        new String[]{"This seed, when fully grown, will", "provide Synthetic Emerald Shards when", "harvested."},
-        Stacks.getCanBePlacedOnLore("Voracious Dirt (or better)")
-    );
-
-    public static void setup() {
-
-        final Networks plugin = Networks.getInstance();
-
-        new HarvestableSeed(STONE_CHUNK_SEED)
-            .setHarvestingResult(SlimefunItems.STONE_CHUNK)
-            .setGrowth(new Growth(GrowthStages.FUNGAL_PURPLE, Placements.NETHER_GRASS_AND_UP, 5, 0.05))
-            .addBreedingPair(Stacks.STONEY_SEED.getItemId(), Stacks.METALLIC_SEED.getItemId(), 0.2, 0.1)
-            .addFlavourProfile(0, 0, 0, 0, 0)
-            .tryRegister(plugin);
-
-        new DoNothingSeed(SYNTHETIC_SEED)
-            .setGrowth(new Growth(GrowthStages.SPIKEY_ORANGE, Placements.NETHER_GRASS_AND_UP, 0, 0.001))
-            .addBreedingPair(Stacks.COBBLED_SEED.getItemId(), Stacks.LEARNED_SEED.getItemId(), 0.01, 0)
-            .addFlavourProfile(0, 0, 5, 0, 0)
-            .tryRegister(plugin);
-
-        new HarvestableSeed(SYNTHETIC_EMERALD_SEED)
-            .setHarvestingResult(SlimefunItems.SYNTHETIC_EMERALD)
-            .setGrowth(new Growth(GrowthStages.VINEY_GREEN, Placements.VORACIOUS_AND_UP, 20, 0.05))
-            .addBreedingPair(SYNTHETIC_SEED.getItemId(), Stacks.VALUABLE_SEED.getItemId(), 0.01, 0.001)
-            .addFlavourProfile(0, 15, 0, 0, 0)
-            .tryRegister(plugin);
-
-        new HarvestableSeed(SYNTHETIC_DIAMOND_SEED)
-            .setHarvestingResult(SlimefunItems.SYNTHETIC_DIAMOND)
-            .setGrowth(new Growth(GrowthStages.VINEY_BLUE, Placements.VORACIOUS_AND_UP, 20, 0.05))
-            .addBreedingPair(SYNTHETIC_SEED.getItemId(), Stacks.PERFECTION_SEED.getItemId(), 0.01, 0.001)
-            .addFlavourProfile(15, 0, 0, 0, 0)
-            .tryRegister(plugin);
-
-        new HarvestableSeed(FRAGMENTED_SEED)
-            .setHarvestingResult(StackUtils.getAsQuantity(NetworksSlimefunItemStacks.SYNTHETIC_EMERALD_SHARD, 9))
-            .setGrowth(new Growth(GrowthStages.VINEY_GREEN, Placements.VORACIOUS_AND_UP, 10, 0.005))
-            .addBreedingPair(SYNTHETIC_SEED.getItemId(), Stacks.PERFECTION_SEED.getItemId(), 0.01, 0.001)
-            .addFlavourProfile(10, 0, 0, 0, 0)
-            .tryRegister(plugin);
-    }
-}
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/NetworkSlimefunItems.java b/src/main/java/io/github/sefiraat/networks/slimefun/NetworkSlimefunItems.java
deleted file mode 100644
index 149e5f4..0000000
--- a/src/main/java/io/github/sefiraat/networks/slimefun/NetworkSlimefunItems.java
+++ /dev/null
@@ -1,906 +0,0 @@
-package io.github.sefiraat.networks.slimefun;
-
-import io.github.sefiraat.networks.Networks;
-import io.github.sefiraat.networks.slimefun.network.NetworkAutoCrafter;
-import io.github.sefiraat.networks.slimefun.network.NetworkBridge;
-import io.github.sefiraat.networks.slimefun.network.NetworkCell;
-import io.github.sefiraat.networks.slimefun.network.NetworkControlV;
-import io.github.sefiraat.networks.slimefun.network.NetworkControlX;
-import io.github.sefiraat.networks.slimefun.network.NetworkController;
-import io.github.sefiraat.networks.slimefun.network.NetworkEncoder;
-import io.github.sefiraat.networks.slimefun.network.NetworkExport;
-import io.github.sefiraat.networks.slimefun.network.NetworkGrabber;
-import io.github.sefiraat.networks.slimefun.network.NetworkGreedyBlock;
-import io.github.sefiraat.networks.slimefun.network.NetworkImport;
-import io.github.sefiraat.networks.slimefun.network.NetworkMonitor;
-import io.github.sefiraat.networks.slimefun.network.NetworkPowerDisplay;
-import io.github.sefiraat.networks.slimefun.network.NetworkPowerNode;
-import io.github.sefiraat.networks.slimefun.network.NetworkPowerOutlet;
-import io.github.sefiraat.networks.slimefun.network.NetworkPurger;
-import io.github.sefiraat.networks.slimefun.network.NetworkPusher;
-import io.github.sefiraat.networks.slimefun.network.NetworkQuantumStorage;
-import io.github.sefiraat.networks.slimefun.network.NetworkQuantumWorkbench;
-import io.github.sefiraat.networks.slimefun.network.NetworkVacuum;
-import io.github.sefiraat.networks.slimefun.network.NetworkVanillaGrabber;
-import io.github.sefiraat.networks.slimefun.network.NetworkVanillaPusher;
-import io.github.sefiraat.networks.slimefun.network.NetworkWirelessReceiver;
-import io.github.sefiraat.networks.slimefun.network.NetworkWirelessTransmitter;
-import io.github.sefiraat.networks.slimefun.network.grid.NetworkCraftingGrid;
-import io.github.sefiraat.networks.slimefun.network.grid.NetworkGrid;
-import io.github.sefiraat.networks.slimefun.tools.CraftingBlueprint;
-import io.github.sefiraat.networks.slimefun.tools.NetworkAdminDebugger;
-import io.github.sefiraat.networks.slimefun.tools.NetworkConfigurator;
-import io.github.sefiraat.networks.slimefun.tools.NetworkCrayon;
-import io.github.sefiraat.networks.slimefun.tools.NetworkProbe;
-import io.github.sefiraat.networks.slimefun.tools.NetworkRake;
-import io.github.sefiraat.networks.slimefun.tools.NetworkRemote;
-import io.github.sefiraat.networks.slimefun.tools.NetworkWirelessConfigurator;
-import io.github.sefiraat.networks.utils.StackUtils;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
-import io.github.thebusybiscuit.slimefun4.implementation.items.blocks.UnplaceableBlock;
-import lombok.experimental.UtilityClass;
-import org.bukkit.Material;
-import org.bukkit.inventory.ItemStack;
-
-@UtilityClass
-public class NetworkSlimefunItems {
-
-    public static final UnplaceableBlock SYNTHETIC_EMERALD_SHARD;
-    public static final UnplaceableBlock OPTIC_GLASS;
-    public static final UnplaceableBlock OPTIC_CABLE;
-    public static final UnplaceableBlock OPTIC_STAR;
-    public static final UnplaceableBlock RADIOACTIVE_OPTIC_STAR;
-    public static final UnplaceableBlock SHRINKING_BASE;
-    public static final UnplaceableBlock SIMPLE_NANOBOTS;
-    public static final UnplaceableBlock ADVANCED_NANOBOTS;
-    public static final UnplaceableBlock AI_CORE;
-    public static final UnplaceableBlock EMPOWERED_AI_CORE;
-    public static final UnplaceableBlock PRISTINE_AI_CORE;
-    public static final UnplaceableBlock INTERDIMENSIONAL_PRESENCE;
-
-    public static final NetworkController NETWORK_CONTROLLER;
-    public static final NetworkBridge NETWORK_BRIDGE;
-    public static final NetworkMonitor NETWORK_MONITOR;
-    public static final NetworkImport NETWORK_IMPORT;
-    public static final NetworkExport NETWORK_EXPORT;
-    public static final NetworkGrabber NETWORK_GRABBER;
-    public static final NetworkPusher NETWORK_PUSHER;
-    public static final NetworkControlX NETWORK_CONTROL_X;
-    public static final NetworkControlV NETWORK_CONTROL_V;
-    public static final NetworkVacuum NETWORK_VACUUM;
-    public static final NetworkVanillaGrabber NETWORK_VANILLA_GRABBER;
-    public static final NetworkVanillaPusher NETWORK_VANILLA_PUSHER;
-    public static final NetworkWirelessTransmitter NETWORK_WIRELESS_TRANSMITTER;
-    public static final NetworkWirelessReceiver NETWORK_WIRELESS_RECEIVER;
-    public static final NetworkPurger NETWORK_TRASH;
-    public static final NetworkGrid NETWORK_GRID;
-    public static final NetworkCraftingGrid NETWORK_CRAFTING_GRID;
-    public static final NetworkCell NETWORK_CELL;
-    public static final NetworkGreedyBlock NETWORK_GREEDY_BLOCK;
-    public static final NetworkQuantumWorkbench NETWORK_QUANTUM_WORKBENCH;
-    public static final NetworkQuantumStorage NETWORK_QUANTUM_STORAGE_1;
-    public static final NetworkQuantumStorage NETWORK_QUANTUM_STORAGE_2;
-    public static final NetworkQuantumStorage NETWORK_QUANTUM_STORAGE_3;
-    public static final NetworkQuantumStorage NETWORK_QUANTUM_STORAGE_4;
-    public static final NetworkQuantumStorage NETWORK_QUANTUM_STORAGE_5;
-    public static final NetworkQuantumStorage NETWORK_QUANTUM_STORAGE_6;
-    public static final NetworkQuantumStorage NETWORK_QUANTUM_STORAGE_7;
-    public static final NetworkQuantumStorage NETWORK_QUANTUM_STORAGE_8;
-    public static final NetworkPowerNode NETWORK_CAPACITOR_1;
-    public static final NetworkPowerNode NETWORK_CAPACITOR_2;
-    public static final NetworkPowerNode NETWORK_CAPACITOR_3;
-    public static final NetworkPowerNode NETWORK_CAPACITOR_4;
-    public static final NetworkPowerOutlet NETWORK_POWER_OUTLET_1;
-    public static final NetworkPowerOutlet NETWORK_POWER_OUTLET_2;
-    public static final NetworkPowerDisplay NETWORK_POWER_DISPLAY;
-    public static final NetworkEncoder NETWORK_RECIPE_ENCODER;
-    public static final NetworkAutoCrafter NETWORK_AUTO_CRAFTER;
-    public static final NetworkAutoCrafter NETWORK_AUTO_CRAFTER_WITHHOLDING;
-
-    public static final CraftingBlueprint CRAFTING_BLUEPRINT;
-    public static final NetworkProbe NETWORK_PROBE;
-    public static final NetworkRemote NETWORK_REMOTE;
-    public static final NetworkRemote NETWORK_REMOTE_EMPOWERED;
-    public static final NetworkRemote NETWORK_REMOTE_PRISTINE;
-    public static final NetworkRemote NETWORK_REMOTE_ULTIMATE;
-    public static final NetworkCrayon NETWORK_CRAYON;
-    public static final NetworkConfigurator NETWORK_CONFIGURATOR;
-    public static final NetworkWirelessConfigurator NETWORK_WIRELESS_CONFIGURATOR;
-    public static final NetworkRake NETWORK_RAKE_1;
-    public static final NetworkRake NETWORK_RAKE_2;
-    public static final NetworkRake NETWORK_RAKE_3;
-    public static final NetworkAdminDebugger NETWORK_ADMIN_DEBUGGER;
-
-    static {
-
-        final ItemStack glass = new ItemStack(Material.GLASS);
-
-        SYNTHETIC_EMERALD_SHARD = new UnplaceableBlock(
-            NetworksItemGroups.MATERIALS,
-            NetworksSlimefunItemStacks.SYNTHETIC_EMERALD_SHARD,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                SlimefunItems.STONE_CHUNK, SlimefunItems.SYNTHETIC_EMERALD, null,
-                SlimefunItems.SYNTHETIC_EMERALD, null, null,
-                null, null, null
-            },
-            StackUtils.getAsQuantity(NetworksSlimefunItemStacks.SYNTHETIC_EMERALD_SHARD, 3)
-        );
-
-        OPTIC_GLASS = new UnplaceableBlock(
-            NetworksItemGroups.MATERIALS,
-            NetworksSlimefunItemStacks.OPTIC_GLASS,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                glass, glass, glass,
-                glass, SYNTHETIC_EMERALD_SHARD.getItem(), glass,
-                glass, glass, glass
-            },
-            StackUtils.getAsQuantity(NetworksSlimefunItemStacks.OPTIC_GLASS, 8)
-        );
-
-        OPTIC_CABLE = new UnplaceableBlock(
-            NetworksItemGroups.MATERIALS,
-            NetworksSlimefunItemStacks.OPTIC_CABLE,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), OPTIC_GLASS.getItem(), OPTIC_GLASS.getItem(),
-                SlimefunItems.COPPER_WIRE, SYNTHETIC_EMERALD_SHARD.getItem(), SlimefunItems.COPPER_WIRE,
-                OPTIC_GLASS.getItem(), OPTIC_GLASS.getItem(), OPTIC_GLASS.getItem()
-            },
-            StackUtils.getAsQuantity(NetworksSlimefunItemStacks.OPTIC_CABLE, 16)
-        );
-
-        OPTIC_STAR = new UnplaceableBlock(
-            NetworksItemGroups.MATERIALS,
-            NetworksSlimefunItemStacks.OPTIC_STAR,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
-                OPTIC_CABLE.getItem(), new ItemStack(Material.NETHER_STAR), OPTIC_CABLE.getItem(),
-                OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem()
-            }
-        );
-
-        RADIOACTIVE_OPTIC_STAR = new UnplaceableBlock(
-            NetworksItemGroups.MATERIALS,
-            NetworksSlimefunItemStacks.RADIOACTIVE_OPTIC_STAR,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                SlimefunItems.BLISTERING_INGOT_3, SlimefunItems.BLISTERING_INGOT_3, SlimefunItems.BLISTERING_INGOT_3,
-                OPTIC_CABLE.getItem(), OPTIC_STAR.getItem(), OPTIC_CABLE.getItem(),
-                SlimefunItems.BLISTERING_INGOT_3, SlimefunItems.BLISTERING_INGOT_3, SlimefunItems.BLISTERING_INGOT_3
-            }
-        );
-
-        SHRINKING_BASE = new UnplaceableBlock(
-            NetworksItemGroups.MATERIALS,
-            NetworksSlimefunItemStacks.SHRINKING_BASE,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                SlimefunItems.CORINTHIAN_BRONZE_INGOT, SlimefunItems.ANDROID_INTERFACE_ITEMS, SlimefunItems.CORINTHIAN_BRONZE_INGOT,
-                OPTIC_CABLE.getItem(), RADIOACTIVE_OPTIC_STAR.getItem(), OPTIC_CABLE.getItem(),
-                SlimefunItems.CORINTHIAN_BRONZE_INGOT, SlimefunItems.ANDROID_MEMORY_CORE, SlimefunItems.CORINTHIAN_BRONZE_INGOT
-            }
-        );
-
-        SIMPLE_NANOBOTS = new UnplaceableBlock(
-            NetworksItemGroups.MATERIALS,
-            NetworksSlimefunItemStacks.SIMPLE_NANOBOTS,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                SHRINKING_BASE.getItem(), SlimefunItems.PROGRAMMABLE_ANDROID
-            },
-            StackUtils.getAsQuantity(NetworksSlimefunItemStacks.SIMPLE_NANOBOTS, 4)
-        );
-
-        ADVANCED_NANOBOTS = new UnplaceableBlock(
-            NetworksItemGroups.MATERIALS,
-            NetworksSlimefunItemStacks.ADVANCED_NANOBOTS,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                SHRINKING_BASE.getItem(), SlimefunItems.PROGRAMMABLE_ANDROID_3
-            },
-            StackUtils.getAsQuantity(NetworksSlimefunItemStacks.ADVANCED_NANOBOTS, 4)
-        );
-
-        AI_CORE = new UnplaceableBlock(
-            NetworksItemGroups.MATERIALS,
-            NetworksSlimefunItemStacks.AI_CORE,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                SlimefunItems.BASIC_CIRCUIT_BOARD, SlimefunItems.ANDROID_MEMORY_CORE, SlimefunItems.BASIC_CIRCUIT_BOARD,
-                SlimefunItems.BASIC_CIRCUIT_BOARD, ADVANCED_NANOBOTS.getItem(), SlimefunItems.BASIC_CIRCUIT_BOARD,
-                SlimefunItems.BASIC_CIRCUIT_BOARD, SlimefunItems.ANDROID_MEMORY_CORE, SlimefunItems.BASIC_CIRCUIT_BOARD
-            }
-        );
-
-        EMPOWERED_AI_CORE = new UnplaceableBlock(
-            NetworksItemGroups.MATERIALS,
-            NetworksSlimefunItemStacks.EMPOWERED_AI_CORE,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                SlimefunItems.ADVANCED_CIRCUIT_BOARD, RADIOACTIVE_OPTIC_STAR.getItem(), SlimefunItems.ADVANCED_CIRCUIT_BOARD,
-                SlimefunItems.ADVANCED_CIRCUIT_BOARD, AI_CORE.getItem(), SlimefunItems.ADVANCED_CIRCUIT_BOARD,
-                SlimefunItems.ADVANCED_CIRCUIT_BOARD, RADIOACTIVE_OPTIC_STAR.getItem(), SlimefunItems.ADVANCED_CIRCUIT_BOARD
-            }
-        );
-
-        PRISTINE_AI_CORE = new UnplaceableBlock(
-            NetworksItemGroups.MATERIALS,
-            NetworksSlimefunItemStacks.PRISTINE_AI_CORE,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                SlimefunItems.NEPTUNIUM, SlimefunItems.DAMASCUS_STEEL_MULTI_TOOL, SlimefunItems.NEPTUNIUM,
-                SlimefunItems.NEPTUNIUM, EMPOWERED_AI_CORE.getItem(), SlimefunItems.NEPTUNIUM,
-                SlimefunItems.NEPTUNIUM, SlimefunItems.ELECTRIFIED_CRUCIBLE_3, SlimefunItems.NEPTUNIUM
-            }
-        );
-
-        INTERDIMENSIONAL_PRESENCE = new UnplaceableBlock(
-            NetworksItemGroups.MATERIALS,
-            NetworksSlimefunItemStacks.INTERDIMENSIONAL_PRESENCE,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                SlimefunItems.PLUTONIUM, SlimefunItems.REINFORCED_ALLOY_MULTI_TOOL, SlimefunItems.PLUTONIUM,
-                SlimefunItems.PLUTONIUM, PRISTINE_AI_CORE.getItem(), SlimefunItems.PLUTONIUM,
-                SlimefunItems.PLUTONIUM, SlimefunItems.NETHER_STAR_REACTOR, SlimefunItems.PLUTONIUM
-            }
-        );
-
-        NETWORK_CONTROLLER = new NetworkController(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_CONTROLLER,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
-                OPTIC_CABLE.getItem(), SlimefunItems.CARGO_MANAGER, OPTIC_CABLE.getItem(),
-                OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
-            }
-        );
-
-        NETWORK_BRIDGE = new NetworkBridge(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_BRIDGE,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
-                OPTIC_CABLE.getItem(), SlimefunItems.CARGO_CONNECTOR_NODE, OPTIC_CABLE.getItem(),
-                OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
-            },
-            StackUtils.getAsQuantity(NetworksSlimefunItemStacks.NETWORK_BRIDGE, 8)
-        );
-
-        NETWORK_MONITOR = new NetworkMonitor(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_MONITOR,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                NETWORK_BRIDGE.getItem(), OPTIC_CABLE.getItem(), NETWORK_BRIDGE.getItem(),
-                OPTIC_CABLE.getItem(), SlimefunItems.CARGO_MOTOR, OPTIC_CABLE.getItem(),
-                NETWORK_BRIDGE.getItem(), OPTIC_CABLE.getItem(), NETWORK_BRIDGE.getItem(),
-            }
-        );
-
-        NETWORK_IMPORT = new NetworkImport(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_IMPORT,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                NETWORK_BRIDGE.getItem(), OPTIC_CABLE.getItem(), NETWORK_BRIDGE.getItem(),
-                OPTIC_CABLE.getItem(), SlimefunItems.CARGO_INPUT_NODE, OPTIC_CABLE.getItem(),
-                NETWORK_BRIDGE.getItem(), OPTIC_CABLE.getItem(), NETWORK_BRIDGE.getItem(),
-            }
-        );
-
-        NETWORK_EXPORT = new NetworkExport(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_EXPORT,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                NETWORK_BRIDGE.getItem(), OPTIC_CABLE.getItem(), NETWORK_BRIDGE.getItem(),
-                OPTIC_CABLE.getItem(), SlimefunItems.CARGO_OUTPUT_NODE_2, OPTIC_CABLE.getItem(),
-                NETWORK_BRIDGE.getItem(), OPTIC_CABLE.getItem(), NETWORK_BRIDGE.getItem(),
-            }
-        );
-
-        NETWORK_GRABBER = new NetworkGrabber(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_GRABBER,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
-                OPTIC_CABLE.getItem(), NETWORK_IMPORT.getItem(), OPTIC_CABLE.getItem(),
-                OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
-            }
-        );
-
-        NETWORK_PUSHER = new NetworkPusher(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_PUSHER,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
-                OPTIC_CABLE.getItem(), NETWORK_EXPORT.getItem(), OPTIC_CABLE.getItem(),
-                OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
-            }
-        );
-
-        NETWORK_CONTROL_X = new NetworkControlX(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_CONTROL_X,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), NetworksSlimefunItemStacks.NETWORK_POWER_DISPLAY, OPTIC_GLASS.getItem(),
-                OPTIC_CABLE.getItem(), NetworksSlimefunItemStacks.NETWORK_GRABBER, OPTIC_CABLE.getItem(),
-                OPTIC_GLASS.getItem(), NetworksSlimefunItemStacks.NETWORK_POWER_OUTLET_1, OPTIC_GLASS.getItem(),
-            }
-        );
-
-        NETWORK_CONTROL_V = new NetworkControlV(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_CONTROL_V,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), NetworksSlimefunItemStacks.NETWORK_POWER_DISPLAY, OPTIC_GLASS.getItem(),
-                OPTIC_CABLE.getItem(), NetworksSlimefunItemStacks.NETWORK_PUSHER, OPTIC_CABLE.getItem(),
-                OPTIC_GLASS.getItem(), NetworksSlimefunItemStacks.NETWORK_POWER_OUTLET_1, OPTIC_GLASS.getItem(),
-            }
-        );
-
-        NETWORK_VACUUM = new NetworkVacuum(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_VACUUM,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), NetworksSlimefunItemStacks.NETWORK_POWER_DISPLAY, OPTIC_GLASS.getItem(),
-                OPTIC_CABLE.getItem(), NetworksSlimefunItemStacks.NETWORK_IMPORT, OPTIC_CABLE.getItem(),
-                OPTIC_GLASS.getItem(), NetworksSlimefunItemStacks.NETWORK_POWER_OUTLET_1, OPTIC_GLASS.getItem(),
-            }
-        );
-
-        NETWORK_VANILLA_GRABBER = new NetworkVanillaGrabber(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_VANILLA_GRABBER,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
-                new ItemStack(Material.HOPPER), NETWORK_GRABBER.getItem(), new ItemStack(Material.HOPPER),
-                OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
-            }
-        );
-
-        NETWORK_VANILLA_PUSHER = new NetworkVanillaPusher(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_VANILLA_PUSHER,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), new ItemStack(Material.HOPPER), OPTIC_GLASS.getItem(),
-                OPTIC_CABLE.getItem(), NETWORK_PUSHER.getItem(), OPTIC_CABLE.getItem(),
-                OPTIC_GLASS.getItem(), new ItemStack(Material.HOPPER), OPTIC_GLASS.getItem(),
-            }
-        );
-
-        NETWORK_WIRELESS_TRANSMITTER = new NetworkWirelessTransmitter(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_WIRELESS_TRANSMITTER,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), ADVANCED_NANOBOTS.getItem(), OPTIC_GLASS.getItem(),
-                OPTIC_CABLE.getItem(), NETWORK_PUSHER.getItem(), OPTIC_CABLE.getItem(),
-                OPTIC_GLASS.getItem(), PRISTINE_AI_CORE.getItem(), OPTIC_GLASS.getItem(),
-            }
-        );
-
-        NETWORK_WIRELESS_RECEIVER = new NetworkWirelessReceiver(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_WIRELESS_RECEIVER,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), SIMPLE_NANOBOTS.getItem(), OPTIC_GLASS.getItem(),
-                OPTIC_CABLE.getItem(), NETWORK_GRABBER.getItem(), OPTIC_CABLE.getItem(),
-                OPTIC_GLASS.getItem(), AI_CORE.getItem(), OPTIC_GLASS.getItem(),
-            }
-        );
-
-        NETWORK_TRASH = new NetworkPurger(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_PURGER,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
-                OPTIC_CABLE.getItem(), SlimefunItems.TRASH_CAN, OPTIC_CABLE.getItem(),
-                OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
-            }
-        );
-
-        NETWORK_GRID = new NetworkGrid(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_GRID,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                NETWORK_BRIDGE.getItem(), OPTIC_CABLE.getItem(), NETWORK_BRIDGE.getItem(),
-                OPTIC_CABLE.getItem(), new ItemStack(Material.NETHER_STAR), OPTIC_CABLE.getItem(),
-                NETWORK_BRIDGE.getItem(), OPTIC_CABLE.getItem(), NETWORK_BRIDGE.getItem(),
-            }
-        );
-
-        NETWORK_CRAFTING_GRID = new NetworkCraftingGrid(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_CRAFTING_GRID,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                OPTIC_STAR.getItem(), OPTIC_STAR.getItem(), OPTIC_STAR.getItem(),
-                OPTIC_STAR.getItem(), NETWORK_GRID.getItem(), OPTIC_STAR.getItem(),
-                OPTIC_STAR.getItem(), OPTIC_STAR.getItem(), OPTIC_STAR.getItem(),
-            }
-        );
-
-        NETWORK_CELL = new NetworkCell(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_CELL,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                NETWORK_BRIDGE.getItem(), OPTIC_CABLE.getItem(), NETWORK_BRIDGE.getItem(),
-                OPTIC_CABLE.getItem(), new ItemStack(Material.CHEST), OPTIC_CABLE.getItem(),
-                NETWORK_BRIDGE.getItem(), OPTIC_CABLE.getItem(), NETWORK_BRIDGE.getItem(),
-            }
-        );
-
-        NETWORK_GREEDY_BLOCK = new NetworkGreedyBlock(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_GREEDY_BLOCK,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                NETWORK_BRIDGE.getItem(), OPTIC_CABLE.getItem(), NETWORK_BRIDGE.getItem(),
-                OPTIC_CABLE.getItem(), NETWORK_CELL.getItem(), OPTIC_CABLE.getItem(),
-                NETWORK_BRIDGE.getItem(), SIMPLE_NANOBOTS.getItem(), NETWORK_BRIDGE.getItem(),
-            }
-        );
-
-        NETWORK_QUANTUM_WORKBENCH = new NetworkQuantumWorkbench(
-            NetworksItemGroups.NETWORK_QUANTUMS,
-            NetworksSlimefunItemStacks.NETWORK_QUANTUM_WORKBENCH,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), SlimefunItems.ADVANCED_CIRCUIT_BOARD, OPTIC_GLASS.getItem(),
-                OPTIC_CABLE.getItem(), NETWORK_BRIDGE.getItem(), OPTIC_CABLE.getItem(),
-                OPTIC_GLASS.getItem(), SlimefunItems.ADVANCED_CIRCUIT_BOARD, OPTIC_GLASS.getItem()
-            }
-        );
-
-        NETWORK_QUANTUM_STORAGE_1 = new NetworkQuantumStorage(
-            NetworksItemGroups.NETWORK_QUANTUMS,
-            NetworksSlimefunItemStacks.NETWORK_QUANTUM_STORAGE_1,
-            NetworkQuantumWorkbench.TYPE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), OPTIC_GLASS.getItem(), OPTIC_GLASS.getItem(),
-                OPTIC_CABLE.getItem(), SlimefunItems.CARGO_MOTOR, OPTIC_CABLE.getItem(),
-                OPTIC_GLASS.getItem(), OPTIC_GLASS.getItem(), OPTIC_GLASS.getItem()
-            },
-            NetworkQuantumStorage.getSizes()[0]
-        );
-
-        NETWORK_QUANTUM_STORAGE_2 = new NetworkQuantumStorage(
-            NetworksItemGroups.NETWORK_QUANTUMS,
-            NetworksSlimefunItemStacks.NETWORK_QUANTUM_STORAGE_2,
-            NetworkQuantumWorkbench.TYPE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), SlimefunItems.ALUMINUM_BRASS_INGOT, OPTIC_GLASS.getItem(),
-                SlimefunItems.SYNTHETIC_SAPPHIRE, NETWORK_QUANTUM_STORAGE_1.getItem(), SlimefunItems.SYNTHETIC_SAPPHIRE,
-                OPTIC_GLASS.getItem(), SlimefunItems.ALUMINUM_BRASS_INGOT, OPTIC_GLASS.getItem()
-            },
-            NetworkQuantumStorage.getSizes()[1]
-        );
-
-        NETWORK_QUANTUM_STORAGE_3 = new NetworkQuantumStorage(
-            NetworksItemGroups.NETWORK_QUANTUMS,
-            NetworksSlimefunItemStacks.NETWORK_QUANTUM_STORAGE_3,
-            NetworkQuantumWorkbench.TYPE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), SlimefunItems.CORINTHIAN_BRONZE_INGOT, OPTIC_GLASS.getItem(),
-                SlimefunItems.SYNTHETIC_DIAMOND, NETWORK_QUANTUM_STORAGE_2.getItem(), SlimefunItems.SYNTHETIC_DIAMOND,
-                OPTIC_GLASS.getItem(), SlimefunItems.CORINTHIAN_BRONZE_INGOT, OPTIC_GLASS.getItem()
-            },
-            NetworkQuantumStorage.getSizes()[2]
-        );
-
-        NETWORK_QUANTUM_STORAGE_4 = new NetworkQuantumStorage(
-            NetworksItemGroups.NETWORK_QUANTUMS,
-            NetworksSlimefunItemStacks.NETWORK_QUANTUM_STORAGE_4,
-            NetworkQuantumWorkbench.TYPE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), SlimefunItems.HARDENED_METAL_INGOT, OPTIC_GLASS.getItem(),
-                SlimefunItems.SYNTHETIC_EMERALD, NETWORK_QUANTUM_STORAGE_3.getItem(), SlimefunItems.SYNTHETIC_EMERALD,
-                OPTIC_GLASS.getItem(), SlimefunItems.HARDENED_METAL_INGOT, OPTIC_GLASS.getItem()
-            },
-            NetworkQuantumStorage.getSizes()[3]
-        );
-
-        NETWORK_QUANTUM_STORAGE_5 = new NetworkQuantumStorage(
-            NetworksItemGroups.NETWORK_QUANTUMS,
-            NetworksSlimefunItemStacks.NETWORK_QUANTUM_STORAGE_5,
-            NetworkQuantumWorkbench.TYPE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), SlimefunItems.REINFORCED_ALLOY_INGOT, OPTIC_GLASS.getItem(),
-                SlimefunItems.POWER_CRYSTAL, NETWORK_QUANTUM_STORAGE_4.getItem(), SlimefunItems.POWER_CRYSTAL,
-                OPTIC_GLASS.getItem(), SlimefunItems.REINFORCED_ALLOY_INGOT, OPTIC_GLASS.getItem()
-            },
-            NetworkQuantumStorage.getSizes()[4]
-        );
-
-        NETWORK_QUANTUM_STORAGE_6 = new NetworkQuantumStorage(
-            NetworksItemGroups.NETWORK_QUANTUMS,
-            NetworksSlimefunItemStacks.NETWORK_QUANTUM_STORAGE_6,
-            NetworkQuantumWorkbench.TYPE,
-            new ItemStack[]{
-                SlimefunItems.STEEL_PLATE, SlimefunItems.BLISTERING_INGOT, SlimefunItems.STEEL_PLATE,
-                SlimefunItems.CARGO_MOTOR, NETWORK_QUANTUM_STORAGE_5.getItem(), SlimefunItems.CARGO_MOTOR,
-                SlimefunItems.STEEL_PLATE, SlimefunItems.BLISTERING_INGOT, SlimefunItems.STEEL_PLATE
-            },
-            NetworkQuantumStorage.getSizes()[5]
-        );
-
-        NETWORK_QUANTUM_STORAGE_7 = new NetworkQuantumStorage(
-            NetworksItemGroups.NETWORK_QUANTUMS,
-            NetworksSlimefunItemStacks.NETWORK_QUANTUM_STORAGE_7,
-            NetworkQuantumWorkbench.TYPE,
-            new ItemStack[]{
-                SlimefunItems.REINFORCED_PLATE, SlimefunItems.BLISTERING_INGOT_2, SlimefunItems.REINFORCED_PLATE,
-                SlimefunItems.CARGO_CONNECTOR_NODE, NETWORK_QUANTUM_STORAGE_6.getItem(), SlimefunItems.CARGO_CONNECTOR_NODE,
-                SlimefunItems.REINFORCED_PLATE, SlimefunItems.BLISTERING_INGOT_2, SlimefunItems.REINFORCED_PLATE
-            },
-            NetworkQuantumStorage.getSizes()[6]
-        );
-
-        NETWORK_QUANTUM_STORAGE_8 = new NetworkQuantumStorage(
-            NetworksItemGroups.NETWORK_QUANTUMS,
-            NetworksSlimefunItemStacks.NETWORK_QUANTUM_STORAGE_8,
-            NetworkQuantumWorkbench.TYPE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), SlimefunItems.BLISTERING_INGOT_3, OPTIC_GLASS.getItem(),
-                SlimefunItems.CARGO_MANAGER, NETWORK_QUANTUM_STORAGE_7.getItem(), SlimefunItems.CARGO_MANAGER,
-                OPTIC_GLASS.getItem(), SlimefunItems.BLISTERING_INGOT_3, OPTIC_GLASS.getItem()
-            },
-            NetworkQuantumStorage.getSizes()[7]
-        );
-
-        NETWORK_CAPACITOR_1 = new NetworkPowerNode(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_CAPACITOR_1,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
-                OPTIC_CABLE.getItem(), SlimefunItems.MEDIUM_CAPACITOR, OPTIC_CABLE.getItem(),
-                OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
-            },
-            1000
-        );
-
-        NETWORK_CAPACITOR_2 = new NetworkPowerNode(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_CAPACITOR_2,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                NETWORK_CAPACITOR_1.getItem(), NETWORK_CAPACITOR_1.getItem(), NETWORK_CAPACITOR_1.getItem(),
-                NETWORK_CAPACITOR_1.getItem(), SlimefunItems.BIG_CAPACITOR, NETWORK_CAPACITOR_1.getItem(),
-                NETWORK_CAPACITOR_1.getItem(), NETWORK_CAPACITOR_1.getItem(), NETWORK_CAPACITOR_1.getItem(),
-            },
-            10000
-        );
-
-        NETWORK_CAPACITOR_3 = new NetworkPowerNode(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_CAPACITOR_3,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                NETWORK_CAPACITOR_2.getItem(), NETWORK_CAPACITOR_2.getItem(), NETWORK_CAPACITOR_2.getItem(),
-                NETWORK_CAPACITOR_2.getItem(), SlimefunItems.LARGE_CAPACITOR, NETWORK_CAPACITOR_2.getItem(),
-                NETWORK_CAPACITOR_2.getItem(), NETWORK_CAPACITOR_2.getItem(), NETWORK_CAPACITOR_2.getItem(),
-            },
-            100000
-        );
-
-        NETWORK_CAPACITOR_4 = new NetworkPowerNode(
-                NetworksItemGroups.NETWORK_ITEMS,
-                NetworksSlimefunItemStacks.NETWORK_CAPACITOR_4,
-                RecipeType.ENHANCED_CRAFTING_TABLE,
-                new ItemStack[]{
-                        NETWORK_CAPACITOR_3.getItem(), NETWORK_CAPACITOR_3.getItem(), NETWORK_CAPACITOR_3.getItem(),
-                        NETWORK_CAPACITOR_3.getItem(), SlimefunItems.CARBONADO_EDGED_CAPACITOR, NETWORK_CAPACITOR_3.getItem(),
-                        NETWORK_CAPACITOR_3.getItem(), NETWORK_CAPACITOR_3.getItem(), NETWORK_CAPACITOR_3.getItem(),
-                },
-                1000000
-        );
-
-        NETWORK_POWER_OUTLET_1 = new NetworkPowerOutlet(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_POWER_OUTLET_1,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), OPTIC_GLASS.getItem(), OPTIC_GLASS.getItem(),
-                OPTIC_GLASS.getItem(), SlimefunItems.ENERGY_CONNECTOR, OPTIC_GLASS.getItem(),
-                OPTIC_GLASS.getItem(), OPTIC_GLASS.getItem(), OPTIC_GLASS.getItem(),
-            },
-            500
-        );
-
-        NETWORK_POWER_OUTLET_2 = new NetworkPowerOutlet(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_POWER_OUTLET_2,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                NETWORK_POWER_OUTLET_1.getItem(), OPTIC_GLASS.getItem(), NETWORK_POWER_OUTLET_1.getItem(),
-                OPTIC_GLASS.getItem(), SlimefunItems.ENERGY_CONNECTOR, OPTIC_GLASS.getItem(),
-                NETWORK_POWER_OUTLET_1.getItem(), OPTIC_GLASS.getItem(), NETWORK_POWER_OUTLET_1.getItem(),
-            },
-            2000
-        );
-
-        NETWORK_POWER_DISPLAY = new NetworkPowerDisplay(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_POWER_DISPLAY,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), SlimefunItems.ENERGY_REGULATOR, OPTIC_GLASS.getItem(),
-                OPTIC_CABLE.getItem(), NETWORK_CAPACITOR_1.getItem(), OPTIC_CABLE.getItem(),
-                OPTIC_GLASS.getItem(), SlimefunItems.ENERGY_CONNECTOR, OPTIC_GLASS.getItem(),
-            }
-        );
-
-        NETWORK_RECIPE_ENCODER = new NetworkEncoder(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_RECIPE_ENCODER,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                SlimefunItems.BASIC_CIRCUIT_BOARD, SlimefunItems.ANDROID_MEMORY_CORE, SlimefunItems.BASIC_CIRCUIT_BOARD,
-                SlimefunItems.BASIC_CIRCUIT_BOARD, SlimefunItems.ENHANCED_AUTO_CRAFTER, SlimefunItems.BASIC_CIRCUIT_BOARD,
-                SlimefunItems.BASIC_CIRCUIT_BOARD, SlimefunItems.CARGO_MOTOR, SlimefunItems.BASIC_CIRCUIT_BOARD
-            }
-        );
-
-        NETWORK_AUTO_CRAFTER = new NetworkAutoCrafter(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_AUTO_CRAFTER,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
-                OPTIC_CABLE.getItem(), SIMPLE_NANOBOTS.getItem(), OPTIC_CABLE.getItem(),
-                OPTIC_GLASS.getItem(), SlimefunItems.ENHANCED_AUTO_CRAFTER, OPTIC_GLASS.getItem(),
-            },
-            64,
-            false
-        );
-
-        NETWORK_AUTO_CRAFTER_WITHHOLDING = new NetworkAutoCrafter(
-            NetworksItemGroups.NETWORK_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_AUTO_CRAFTER_WITHHOLDING,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                OPTIC_GLASS.getItem(), OPTIC_CABLE.getItem(), OPTIC_GLASS.getItem(),
-                OPTIC_CABLE.getItem(), ADVANCED_NANOBOTS.getItem(), OPTIC_CABLE.getItem(),
-                OPTIC_GLASS.getItem(), NETWORK_AUTO_CRAFTER.getItem(), OPTIC_GLASS.getItem(),
-            },
-            128,
-            true
-        );
-
-        CRAFTING_BLUEPRINT = new CraftingBlueprint(
-            NetworksItemGroups.TOOLS,
-            NetworksSlimefunItemStacks.CRAFTING_BLUEPRINT,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                OPTIC_CABLE.getItem(), OPTIC_CABLE.getItem(), OPTIC_CABLE.getItem(),
-                OPTIC_CABLE.getItem(), new ItemStack(Material.PAPER), OPTIC_CABLE.getItem(),
-                OPTIC_CABLE.getItem(), OPTIC_CABLE.getItem(), OPTIC_CABLE.getItem()
-            }
-        );
-
-        NETWORK_PROBE = new NetworkProbe(
-            NetworksItemGroups.TOOLS,
-            NetworksSlimefunItemStacks.NETWORK_PROBE,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                null, SlimefunItems.DURALUMIN_INGOT, null,
-                null, OPTIC_CABLE.getItem(), null,
-                null, NETWORK_BRIDGE.getItem(), null
-            }
-        );
-
-        NETWORK_REMOTE = new NetworkRemote(
-            NetworksItemGroups.TOOLS,
-            NetworksSlimefunItemStacks.NETWORK_REMOTE,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                null, NETWORK_GRID.getItem(), null,
-                null, AI_CORE.getItem(), null,
-                null, OPTIC_STAR.getItem(), null
-            },
-            NetworkRemote.getRanges()[0]
-        );
-
-        NETWORK_REMOTE_EMPOWERED = new NetworkRemote(
-            NetworksItemGroups.TOOLS,
-            NetworksSlimefunItemStacks.NETWORK_REMOTE_EMPOWERED,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                null, NETWORK_REMOTE.getItem(), null,
-                null, EMPOWERED_AI_CORE.getItem(), null,
-                null, NETWORK_REMOTE.getItem(), null
-            },
-            NetworkRemote.getRanges()[1]
-        );
-
-        NETWORK_REMOTE_PRISTINE = new NetworkRemote(
-            NetworksItemGroups.TOOLS,
-            NetworksSlimefunItemStacks.NETWORK_REMOTE_PRISTINE,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                null, NETWORK_REMOTE_EMPOWERED.getItem(), null,
-                null, PRISTINE_AI_CORE.getItem(), null,
-                null, NETWORK_REMOTE_EMPOWERED.getItem(), null
-            },
-            NetworkRemote.getRanges()[2]
-        );
-
-        NETWORK_REMOTE_ULTIMATE = new NetworkRemote(
-            NetworksItemGroups.TOOLS,
-            NetworksSlimefunItemStacks.NETWORK_REMOTE_ULTIMATE,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                null, NETWORK_REMOTE_PRISTINE.getItem(), null,
-                null, INTERDIMENSIONAL_PRESENCE.getItem(), null,
-                null, NETWORK_REMOTE_PRISTINE.getItem(), null
-            },
-            NetworkRemote.getRanges()[3]
-        );
-
-        NETWORK_CRAYON = new NetworkCrayon(
-            NetworksItemGroups.TOOLS,
-            NetworksSlimefunItemStacks.NETWORK_CRAYON,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                null, OPTIC_CABLE.getItem(), null,
-                null, new ItemStack(Material.HONEYCOMB), null,
-                null, new ItemStack(Material.HONEYCOMB), null
-            }
-        );
-
-        NETWORK_CONFIGURATOR = new NetworkConfigurator(
-            NetworksItemGroups.TOOLS,
-            NetworksSlimefunItemStacks.NETWORK_CONFIGURATOR,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                null, RADIOACTIVE_OPTIC_STAR.getItem(), null,
-                null, NETWORK_CRAYON.getItem(), null,
-                null, AI_CORE.getItem(), null
-            }
-        );
-
-        NETWORK_WIRELESS_CONFIGURATOR = new NetworkWirelessConfigurator(
-            NetworksItemGroups.TOOLS,
-            NetworksSlimefunItemStacks.NETWORK_WIRELESS_CONFIGURATOR,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                null, RADIOACTIVE_OPTIC_STAR.getItem(), null,
-                null, NETWORK_CONFIGURATOR.getItem(), null,
-                null, INTERDIMENSIONAL_PRESENCE.getItem(), null
-            }
-        );
-
-        NETWORK_RAKE_1 = new NetworkRake(
-            NetworksItemGroups.TOOLS,
-            NetworksSlimefunItemStacks.NETWORK_RAKE_1,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                null, RADIOACTIVE_OPTIC_STAR.getItem(), null,
-                null, new ItemStack(Material.DIAMOND_SWORD), null,
-                null, SYNTHETIC_EMERALD_SHARD.getItem(), null
-            },
-            250
-        );
-
-        NETWORK_RAKE_2 = new NetworkRake(
-            NetworksItemGroups.TOOLS,
-            NetworksSlimefunItemStacks.NETWORK_RAKE_2,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                null, RADIOACTIVE_OPTIC_STAR.getItem(), null,
-                null, NETWORK_RAKE_1.getItem(), null,
-                null, AI_CORE.getItem(), null
-            },
-            1000
-        );
-
-        NETWORK_RAKE_3 = new NetworkRake(
-            NetworksItemGroups.TOOLS,
-            NetworksSlimefunItemStacks.NETWORK_RAKE_3,
-            RecipeType.ENHANCED_CRAFTING_TABLE,
-            new ItemStack[]{
-                null, RADIOACTIVE_OPTIC_STAR.getItem(), null,
-                null, NETWORK_RAKE_2.getItem(), null,
-                null, EMPOWERED_AI_CORE.getItem(), null
-            },
-            9999
-        );
-
-        NETWORK_ADMIN_DEBUGGER = new NetworkAdminDebugger(
-            NetworksItemGroups.DISABLED_ITEMS,
-            NetworksSlimefunItemStacks.NETWORK_DEBUG_STICK,
-            RecipeType.NULL,
-            new ItemStack[]{}
-        );
-    }
-
-    public static void setup() {
-        Networks plugin = Networks.getInstance();
-
-        SYNTHETIC_EMERALD_SHARD.register(plugin);
-        OPTIC_GLASS.register(plugin);
-        OPTIC_CABLE.register(plugin);
-        OPTIC_STAR.register(plugin);
-        RADIOACTIVE_OPTIC_STAR.register(plugin);
-        SHRINKING_BASE.register(plugin);
-        SIMPLE_NANOBOTS.register(plugin);
-        ADVANCED_NANOBOTS.register(plugin);
-        AI_CORE.register(plugin);
-        EMPOWERED_AI_CORE.register(plugin);
-        PRISTINE_AI_CORE.register(plugin);
-        INTERDIMENSIONAL_PRESENCE.register(plugin);
-
-        NETWORK_CONTROLLER.register(plugin);
-        NETWORK_BRIDGE.register(plugin);
-        NETWORK_MONITOR.register(plugin);
-        NETWORK_IMPORT.register(plugin);
-        NETWORK_EXPORT.register(plugin);
-        NETWORK_GRABBER.register(plugin);
-        NETWORK_PUSHER.register(plugin);
-        NETWORK_CONTROL_X.register(plugin);
-        NETWORK_CONTROL_V.register(plugin);
-        NETWORK_VACUUM.register(plugin);
-        NETWORK_VANILLA_GRABBER.register(plugin);
-        NETWORK_VANILLA_PUSHER.register(plugin);
-        NETWORK_WIRELESS_TRANSMITTER.register(plugin);
-        NETWORK_WIRELESS_RECEIVER.register(plugin);
-        NETWORK_TRASH.register(plugin);
-        NETWORK_GRID.register(plugin);
-        NETWORK_CRAFTING_GRID.register(plugin);
-        NETWORK_CELL.register(plugin);
-        NETWORK_GREEDY_BLOCK.register(plugin);
-        NETWORK_QUANTUM_WORKBENCH.register(plugin);
-        NETWORK_QUANTUM_STORAGE_1.register(plugin);
-        NETWORK_QUANTUM_STORAGE_2.register(plugin);
-        NETWORK_QUANTUM_STORAGE_3.register(plugin);
-        NETWORK_QUANTUM_STORAGE_4.register(plugin);
-        NETWORK_QUANTUM_STORAGE_5.register(plugin);
-        NETWORK_QUANTUM_STORAGE_6.register(plugin);
-        NETWORK_QUANTUM_STORAGE_7.register(plugin);
-        NETWORK_QUANTUM_STORAGE_8.register(plugin);
-        NETWORK_CAPACITOR_1.register(plugin);
-        NETWORK_CAPACITOR_2.register(plugin);
-        NETWORK_CAPACITOR_3.register(plugin);
-        NETWORK_CAPACITOR_4.register(plugin);
-        NETWORK_POWER_OUTLET_1.register(plugin);
-        NETWORK_POWER_OUTLET_2.register(plugin);
-        NETWORK_POWER_DISPLAY.register(plugin);
-        NETWORK_RECIPE_ENCODER.register(plugin);
-        NETWORK_AUTO_CRAFTER.register(plugin);
-        NETWORK_AUTO_CRAFTER_WITHHOLDING.register(plugin);
-
-        CRAFTING_BLUEPRINT.register(plugin);
-        NETWORK_PROBE.register(plugin);
-        NETWORK_REMOTE.register(plugin);
-        NETWORK_REMOTE_EMPOWERED.register(plugin);
-        NETWORK_REMOTE_PRISTINE.register(plugin);
-        NETWORK_REMOTE_ULTIMATE.register(plugin);
-        NETWORK_CRAYON.register(plugin);
-        NETWORK_CONFIGURATOR.register(plugin);
-        NETWORK_WIRELESS_CONFIGURATOR.register(plugin);
-        NETWORK_RAKE_1.register(plugin);
-        NETWORK_RAKE_2.register(plugin);
-        NETWORK_RAKE_3.register(plugin);
-
-        NETWORK_ADMIN_DEBUGGER.register(plugin);
-    }
-}
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/NetworksItemGroups.java b/src/main/java/io/github/sefiraat/networks/slimefun/NetworksItemGroups.java
deleted file mode 100644
index 86debd9..0000000
--- a/src/main/java/io/github/sefiraat/networks/slimefun/NetworksItemGroups.java
+++ /dev/null
@@ -1,92 +0,0 @@
-package io.github.sefiraat.networks.slimefun;
-
-import io.github.sefiraat.networks.Networks;
-import io.github.sefiraat.networks.slimefun.groups.DummyItemGroup;
-import io.github.sefiraat.networks.slimefun.groups.MainFlexGroup;
-import io.github.sefiraat.networks.utils.Keys;
-import io.github.sefiraat.networks.utils.Theme;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
-import lombok.experimental.UtilityClass;
-import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
-import org.bukkit.entity.Player;
-import org.bukkit.inventory.ItemStack;
-
-import javax.annotation.Nonnull;
-
-@UtilityClass
-public final class NetworksItemGroups {
-
-    public static final MainFlexGroup MAIN = new MainFlexGroup(
-        Keys.newKey("main"),
-        new CustomItemStack(
-            new ItemStack(Material.BLACK_STAINED_GLASS),
-            Theme.MAIN.getColor() + "Networks"
-        )
-    );
-
-    public static final DummyItemGroup MATERIALS = new DummyItemGroup(
-        Keys.newKey("materials"),
-        new CustomItemStack(
-            new ItemStack(Material.WHITE_STAINED_GLASS),
-            Theme.MAIN.getColor() + "Crafting Materials"
-        )
-    );
-
-    public static final DummyItemGroup TOOLS = new DummyItemGroup(
-        Keys.newKey("tools"),
-        new CustomItemStack(
-            new ItemStack(Material.PAINTING),
-            Theme.MAIN.getColor() + "Network Management Tools"
-        )
-    );
-
-    public static final DummyItemGroup NETWORK_ITEMS = new DummyItemGroup(
-        Keys.newKey("network_items"),
-        new CustomItemStack(
-            new ItemStack(Material.BLACK_STAINED_GLASS),
-            Theme.MAIN.getColor() + "Network Items"
-        )
-    );
-
-    public static final DummyItemGroup NETWORK_QUANTUMS = new DummyItemGroup(
-        Keys.newKey("network_quantums"),
-        new CustomItemStack(
-            new ItemStack(Material.WHITE_TERRACOTTA),
-            Theme.MAIN.getColor() + "Network Quantum Storage Devices"
-        )
-    );
-
-    public static final ItemGroup DISABLED_ITEMS = new HiddenItemGroup(
-        Keys.newKey("disabled_items"),
-        new CustomItemStack(
-            new ItemStack(Material.BARRIER),
-            Theme.MAIN.getColor() + "Disabled/Removed Items"
-        )
-    );
-
-    static {
-        final Networks plugin = Networks.getInstance();
-
-        // Slimefun Registry
-        NetworksItemGroups.MAIN.register(plugin);
-        NetworksItemGroups.MATERIALS.register(plugin);
-        NetworksItemGroups.TOOLS.register(plugin);
-        NetworksItemGroups.NETWORK_ITEMS.register(plugin);
-        NetworksItemGroups.NETWORK_QUANTUMS.register(plugin);
-        NetworksItemGroups.DISABLED_ITEMS.register(plugin);
-    }
-
-    public static class HiddenItemGroup extends ItemGroup {
-
-        public HiddenItemGroup(NamespacedKey key, ItemStack item) {
-            super(key, item);
-        }
-
-        @Override
-        public boolean isHidden(@Nonnull Player p) {
-            return true;
-        }
-    }
-}
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/NetworksSlimefunItemStacks.java b/src/main/java/io/github/sefiraat/networks/slimefun/NetworksSlimefunItemStacks.java
deleted file mode 100644
index 1f5d3e1..0000000
--- a/src/main/java/io/github/sefiraat/networks/slimefun/NetworksSlimefunItemStacks.java
+++ /dev/null
@@ -1,818 +0,0 @@
-package io.github.sefiraat.networks.slimefun;
-
-import io.github.sefiraat.networks.slimefun.network.NetworkQuantumStorage;
-import io.github.sefiraat.networks.slimefun.tools.NetworkRemote;
-import io.github.sefiraat.networks.utils.Theme;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.collections.Pair;
-import lombok.experimental.UtilityClass;
-import org.bukkit.ChatColor;
-import org.bukkit.Material;
-import org.bukkit.enchantments.Enchantment;
-import org.bukkit.inventory.ItemFlag;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.ItemMeta;
-
-import javax.annotation.Nonnull;
-import java.text.MessageFormat;
-
-/**
- * Creating SlimefunItemstacks here due to some items being created in Enums so this will
- * act as a one-stop-shop for the stacks themselves.
- */
-@UtilityClass
-public class NetworksSlimefunItemStacks {
-
-    // Materials
-    public static final SlimefunItemStack SYNTHETIC_EMERALD_SHARD;
-    public static final SlimefunItemStack OPTIC_GLASS;
-    public static final SlimefunItemStack OPTIC_CABLE;
-    public static final SlimefunItemStack OPTIC_STAR;
-    public static final SlimefunItemStack RADIOACTIVE_OPTIC_STAR;
-    public static final SlimefunItemStack SHRINKING_BASE;
-    public static final SlimefunItemStack SIMPLE_NANOBOTS;
-    public static final SlimefunItemStack ADVANCED_NANOBOTS;
-    public static final SlimefunItemStack AI_CORE;
-    public static final SlimefunItemStack EMPOWERED_AI_CORE;
-    public static final SlimefunItemStack PRISTINE_AI_CORE;
-    public static final SlimefunItemStack INTERDIMENSIONAL_PRESENCE;
-
-    // Network Items
-    public static final SlimefunItemStack NETWORK_CONTROLLER;
-    public static final SlimefunItemStack NETWORK_BRIDGE;
-    public static final SlimefunItemStack NETWORK_MONITOR;
-    public static final SlimefunItemStack NETWORK_IMPORT;
-    public static final SlimefunItemStack NETWORK_EXPORT;
-    public static final SlimefunItemStack NETWORK_GRABBER;
-    public static final SlimefunItemStack NETWORK_PUSHER;
-    public static final SlimefunItemStack NETWORK_CONTROL_X;
-    public static final SlimefunItemStack NETWORK_CONTROL_V;
-    public static final SlimefunItemStack NETWORK_VACUUM;
-    public static final SlimefunItemStack NETWORK_VANILLA_GRABBER;
-    public static final SlimefunItemStack NETWORK_VANILLA_PUSHER;
-    public static final SlimefunItemStack NETWORK_WIRELESS_TRANSMITTER;
-    public static final SlimefunItemStack NETWORK_WIRELESS_RECEIVER;
-    public static final SlimefunItemStack NETWORK_PURGER;
-    public static final SlimefunItemStack NETWORK_GRID;
-    public static final SlimefunItemStack NETWORK_CRAFTING_GRID;
-    public static final SlimefunItemStack NETWORK_CELL;
-    public static final SlimefunItemStack NETWORK_GREEDY_BLOCK;
-    public static final SlimefunItemStack NETWORK_QUANTUM_WORKBENCH;
-    public static final SlimefunItemStack NETWORK_QUANTUM_STORAGE_1;
-    public static final SlimefunItemStack NETWORK_QUANTUM_STORAGE_2;
-    public static final SlimefunItemStack NETWORK_QUANTUM_STORAGE_3;
-    public static final SlimefunItemStack NETWORK_QUANTUM_STORAGE_4;
-    public static final SlimefunItemStack NETWORK_QUANTUM_STORAGE_5;
-    public static final SlimefunItemStack NETWORK_QUANTUM_STORAGE_6;
-    public static final SlimefunItemStack NETWORK_QUANTUM_STORAGE_7;
-    public static final SlimefunItemStack NETWORK_QUANTUM_STORAGE_8;
-    public static final SlimefunItemStack NETWORK_CAPACITOR_1;
-    public static final SlimefunItemStack NETWORK_CAPACITOR_2;
-    public static final SlimefunItemStack NETWORK_CAPACITOR_3;
-    public static final SlimefunItemStack NETWORK_CAPACITOR_4;
-    public static final SlimefunItemStack NETWORK_POWER_OUTLET_1;
-    public static final SlimefunItemStack NETWORK_POWER_OUTLET_2;
-    public static final SlimefunItemStack NETWORK_POWER_DISPLAY;
-    public static final SlimefunItemStack NETWORK_RECIPE_ENCODER;
-    public static final SlimefunItemStack NETWORK_AUTO_CRAFTER;
-    public static final SlimefunItemStack NETWORK_AUTO_CRAFTER_WITHHOLDING;
-
-    // Tools
-    public static final SlimefunItemStack CRAFTING_BLUEPRINT;
-    public static final SlimefunItemStack NETWORK_PROBE;
-    public static final SlimefunItemStack NETWORK_REMOTE;
-    public static final SlimefunItemStack NETWORK_REMOTE_EMPOWERED;
-    public static final SlimefunItemStack NETWORK_REMOTE_PRISTINE;
-    public static final SlimefunItemStack NETWORK_REMOTE_ULTIMATE;
-    public static final SlimefunItemStack NETWORK_CRAYON;
-    public static final SlimefunItemStack NETWORK_CONFIGURATOR;
-    public static final SlimefunItemStack NETWORK_WIRELESS_CONFIGURATOR;
-    public static final SlimefunItemStack NETWORK_RAKE_1;
-    public static final SlimefunItemStack NETWORK_RAKE_2;
-    public static final SlimefunItemStack NETWORK_RAKE_3;
-    public static final SlimefunItemStack NETWORK_DEBUG_STICK;
-
-    static {
-
-        SYNTHETIC_EMERALD_SHARD = Theme.themedSlimefunItemStack(
-            "NTW_SYNTHETIC_EMERALD_SHARD",
-            new ItemStack(Material.LIME_DYE),
-            Theme.CRAFTING,
-            "Synthetic Emerald Shard",
-            "A shard of synthetic emerald that",
-            "is the backbone for information",
-            "transference."
-        );
-
-        OPTIC_GLASS = Theme.themedSlimefunItemStack(
-            "NTW_OPTIC_GLASS",
-            new ItemStack(Material.GLASS),
-            Theme.CRAFTING,
-            "Optic Glass",
-            "A simple glass that is able to",
-            "transfer small bits of information."
-        );
-
-        OPTIC_CABLE = Theme.themedSlimefunItemStack(
-            "NTW_OPTIC_CABLE",
-            new ItemStack(Material.STRING),
-            Theme.CRAFTING,
-            "Optic Cable",
-            "A simple wire that is able to",
-            "transfer large bits of information."
-        );
-
-        OPTIC_STAR = Theme.themedSlimefunItemStack(
-            "NTW_OPTIC_STAR",
-            new ItemStack(Material.NETHER_STAR),
-            Theme.CRAFTING,
-            "Optic Star",
-            "A crystalline star structure that",
-            "can transfer large bits of information."
-        );
-
-        RADIOACTIVE_OPTIC_STAR = Theme.themedSlimefunItemStack(
-            "NTW_RADIOACTIVE_OPTIC_STAR",
-            getPreEnchantedItemStack(Material.NETHER_STAR, true, new Pair<>(Enchantment.ARROW_DAMAGE, 1)),
-            Theme.CRAFTING,
-            "Radioactive Optic Star",
-            "A crystalline star structure that",
-            "can store insane amounts of information."
-        );
-
-        SHRINKING_BASE = Theme.themedSlimefunItemStack(
-            "NTW_SHRINKING_BASE",
-            getPreEnchantedItemStack(Material.PISTON, true, new Pair<>(Enchantment.ARROW_DAMAGE, 1)),
-            Theme.CRAFTING,
-            "Shrinking Base",
-            "An advanced construct able to make",
-            "big things go small."
-        );
-
-        SIMPLE_NANOBOTS = Theme.themedSlimefunItemStack(
-            "NTW_SIMPLE_NANOBOTS",
-            new ItemStack(Material.MELON_SEEDS),
-            Theme.CRAFTING,
-            "Simple Nanobots",
-            "Teeny Tiny little bots that can",
-            "help you with precise tasks."
-        );
-
-        ADVANCED_NANOBOTS = Theme.themedSlimefunItemStack(
-            "NTW_ADVANCED_NANOBOTS",
-            getPreEnchantedItemStack(Material.MELON_SEEDS, true, new Pair<>(Enchantment.ARROW_DAMAGE, 1)),
-            Theme.CRAFTING,
-            "Advanced Nanobots",
-            "Teeny Tiny little bots that can",
-            "help you with precise tasks.",
-            "This version is smarter and faster."
-        );
-
-        AI_CORE = Theme.themedSlimefunItemStack(
-            "NTW_AI_CORE",
-            new ItemStack(Material.BRAIN_CORAL_BLOCK),
-            Theme.CRAFTING,
-            "A.I. Core",
-            "A burgeoning artificial intelligence",
-            "resides within this weak shell."
-        );
-
-        EMPOWERED_AI_CORE = Theme.themedSlimefunItemStack(
-            "NTW_EMPOWERED_AI_CORE",
-            new ItemStack(Material.TUBE_CORAL_BLOCK),
-            Theme.CRAFTING,
-            "Empowered A.I. Core",
-            "A flourishing artificial intelligence",
-            "resides within this shell."
-        );
-
-        PRISTINE_AI_CORE = Theme.themedSlimefunItemStack(
-            "NTW_PRISTINE_AI_CORE",
-            getPreEnchantedItemStack(Material.TUBE_CORAL_BLOCK, true, new Pair<>(Enchantment.ARROW_DAMAGE, 1)),
-            Theme.CRAFTING,
-            "Pristine A.I. Core",
-            "A perfected artificial intelligence",
-            "resides within this defined shell."
-        );
-
-        INTERDIMENSIONAL_PRESENCE = Theme.themedSlimefunItemStack(
-            "NTW_INTERDIMENSIONAL_PRESENCE",
-            getPreEnchantedItemStack(Material.ARMOR_STAND, true, new Pair<>(Enchantment.ARROW_DAMAGE, 1)),
-            Theme.CRAFTING,
-            "Interdimensional Presence",
-            "An artificial intelligence that has",
-            "grown too powerful for just a",
-            "single dimension."
-        );
-
-        NETWORK_CONTROLLER = Theme.themedSlimefunItemStack(
-            "NTW_CONTROLLER",
-            new ItemStack(Material.BLACK_STAINED_GLASS),
-            Theme.MACHINE,
-            "Network Controller"
-            , "The Network controller is the brain",
-            "for the whole network. Max 1 per network."
-        );
-
-        NETWORK_BRIDGE = Theme.themedSlimefunItemStack(
-            "NTW_BRIDGE",
-            new ItemStack(Material.WHITE_STAINED_GLASS),
-            Theme.MACHINE,
-            "Network Bridge"
-            , "The bridge allows you to cheaply",
-            "connect network objects together."
-        );
-
-        NETWORK_MONITOR = Theme.themedSlimefunItemStack(
-            "NTW_MONITOR",
-            new ItemStack(Material.GREEN_STAINED_GLASS),
-            Theme.MACHINE,
-            "Network Monitor",
-            "The Network Monitor allows simple",
-            "import/export interaction with adjacent",
-            "objects.",
-            "",
-            "Currently Supports:",
-            "Infinity Barrels",
-            "Network Shells"
-        );
-
-        NETWORK_IMPORT = Theme.themedSlimefunItemStack(
-            "NTW_IMPORT",
-            new ItemStack(Material.RED_STAINED_GLASS),
-            Theme.MACHINE,
-            "Network Importer",
-            "The Network Importer brings any",
-            "item inside it into the network, up",
-            "to 9 stacks per SF tick.",
-            "Accepts items in from cargo."
-        );
-
-        NETWORK_EXPORT = Theme.themedSlimefunItemStack(
-            "NTW_EXPORT",
-            new ItemStack(Material.BLUE_STAINED_GLASS),
-            Theme.MACHINE,
-            "Network Exporter",
-            "The Network Exporter can be set to",
-            "constantly export 1 stack of any",
-            "given item.",
-            "Accepts item withdrawal from cargo."
-        );
-
-        NETWORK_GRABBER = Theme.themedSlimefunItemStack(
-            "NTW_GRABBER",
-            new ItemStack(Material.MAGENTA_STAINED_GLASS),
-            Theme.MACHINE,
-            "Network Grabber",
-            "The Network Grabber will try",
-            "to grab the first item it finds",
-            "from within the selected machine."
-        );
-
-        NETWORK_PUSHER = Theme.themedSlimefunItemStack(
-            "NTW_PUSHER",
-            new ItemStack(Material.BROWN_STAINED_GLASS),
-            Theme.MACHINE,
-            "Network Pusher",
-            "The Network Pusher will try",
-            "to push a matching item from a",
-            "given item into the chosen machine."
-        );
-
-        NETWORK_CONTROL_X = Theme.themedSlimefunItemStack(
-            "NTW_CONTROL_X",
-            new ItemStack(Material.WHITE_GLAZED_TERRACOTTA),
-            Theme.MACHINE,
-            "Network Control: X",
-            "The Network Control: X will try",
-            "to 'cut' a block out of the world",
-            "and put it into the Network.",
-            "Only works on Vanilla blocks without",
-            "inventories.",
-            "",
-            MessageFormat.format("{0}Network Drain: {1}{2}/cut", Theme.CLICK_INFO, Theme.PASSIVE, 100)
-        );
-
-        NETWORK_CONTROL_V = Theme.themedSlimefunItemStack(
-            "NTW_CONTROL_V",
-            new ItemStack(Material.PURPLE_GLAZED_TERRACOTTA),
-            Theme.MACHINE,
-            "Network Control: V",
-            "The Network Control: V will try",
-            "to 'paste' a block from the Network",
-            "into the world.",
-            "Only works with Vanilla blocks.",
-            "",
-            MessageFormat.format("{0}Network Drain: {1}{2}/paste", Theme.CLICK_INFO, Theme.PASSIVE, 100)
-        );
-
-        NETWORK_VACUUM = Theme.themedSlimefunItemStack(
-            "NTW_VACUUM",
-            new ItemStack(Material.ORANGE_GLAZED_TERRACOTTA),
-            Theme.MACHINE,
-            "Network Vacuum",
-            "The Network Vacuum will suck",
-            "items into itself within a",
-            "4 x 4 range centered on itself.",
-            "Vacuumed items will try to push",
-            "into the Network.",
-            "",
-            MessageFormat.format("{0}Network Drain: {1}{2}/tick", Theme.CLICK_INFO, Theme.PASSIVE, 100)
-        );
-
-        NETWORK_VANILLA_GRABBER = Theme.themedSlimefunItemStack(
-            "NTW_VANILLA_GRABBER",
-            new ItemStack(Material.ORANGE_STAINED_GLASS),
-            Theme.MACHINE,
-            "Network Vanilla Grabber",
-            "The Network Vanilla Pusher will try",
-            "to grab the first possible item from",
-            "the chosen vanilla inventory.",
-            "You need to grab items from this",
-            "node using a Grabber."
-        );
-
-        NETWORK_VANILLA_PUSHER = Theme.themedSlimefunItemStack(
-            "NTW_VANILLA_PUSHER",
-            new ItemStack(Material.LIME_STAINED_GLASS),
-            Theme.MACHINE,
-            "Network Vanilla Pusher",
-            "The Network Vanilla Pusher will try",
-            "to push any item inside itself into",
-            "the chosen vanilla inventory.",
-            "You need to push items into this",
-            "node from a Pusher."
-        );
-
-        NETWORK_WIRELESS_TRANSMITTER = Theme.themedSlimefunItemStack(
-            "NTW_NETWORK_WIRELESS_TRANSMITTER",
-            new ItemStack(Material.CYAN_STAINED_GLASS),
-            Theme.MACHINE,
-            "Network Wireless Transmitter",
-            "The Network Wireless Transmitter will",
-            "try to transmit any item inside itself",
-            "to a linked Network Wireless Receiver",
-            "located within the same world.",
-            "Use the Wireless Configurator to",
-            "setup the Wireless Transmitter.",
-            "Requires 500 Network Power per transfer."
-        );
-
-        NETWORK_WIRELESS_RECEIVER = Theme.themedSlimefunItemStack(
-            "NTW_NETWORK_WIRELESS_RECEIVER",
-            new ItemStack(Material.PURPLE_STAINED_GLASS),
-            Theme.MACHINE,
-            "Network Wireless Receiver",
-            "The Network Wireless Receiver is",
-            "able to receive items from a linked",
-            "wireless transmitter located within",
-            "the same world.",
-            "It will try to push received items",
-            "into the Network each tick."
-        );
-
-        NETWORK_PURGER = Theme.themedSlimefunItemStack(
-            "NTW_TRASH",
-            new ItemStack(Material.OBSERVER),
-            Theme.MACHINE,
-            "Network Purger",
-            "The Network Purger will pull",
-            "matching items from the network",
-            "and instantly void them.",
-            "Use with great care!"
-        );
-
-        NETWORK_GRID = Theme.themedSlimefunItemStack(
-            "NTW_GRID",
-            new ItemStack(Material.NOTE_BLOCK),
-            Theme.MACHINE,
-            "Network Grid",
-            "The Network Grid shows you all",
-            "the items you have in the network",
-            "and lets you insert or withdraw",
-            "directly."
-        );
-
-        NETWORK_CRAFTING_GRID = Theme.themedSlimefunItemStack(
-            "NTW_CRAFTING_GRID",
-            new ItemStack(Material.REDSTONE_LAMP),
-            Theme.MACHINE,
-            "Network Crafting Grid",
-            "The Network Crafting Grid acts",
-            "like a normal grid but displays less",
-            "items but allows crafting using items",
-            "directly from the network."
-        );
-
-        NETWORK_CELL = Theme.themedSlimefunItemStack(
-            "NTW_CELL",
-            new ItemStack(Material.HONEYCOMB_BLOCK),
-            Theme.MACHINE,
-            "Network Cell",
-            "The Network Cell is a large",
-            "(double chest) inventory that can",
-            "be accessed both from the network",
-            "and in the world."
-        );
-
-        NETWORK_GREEDY_BLOCK = Theme.themedSlimefunItemStack(
-            "NTW_GREEDY_BLOCK",
-            new ItemStack(Material.SHROOMLIGHT),
-            Theme.MACHINE,
-            "Network Greedy Block",
-            "The Network Greedy Block can",
-            "be set to one item which it will",
-            "then greedily hold on to a single",
-            "stack of. If more incoming items",
-            "do not fit, they will not enter",
-            "the network."
-        );
-
-        NETWORK_QUANTUM_WORKBENCH = Theme.themedSlimefunItemStack(
-            "NTW_QUANTUM_WORKBENCH",
-            new ItemStack(Material.DRIED_KELP_BLOCK),
-            Theme.MACHINE,
-            "Network Quantum Workbench",
-            "Allows the crafting of Quantum Storages."
-        );
-
-
-        NETWORK_QUANTUM_STORAGE_1 = Theme.themedSlimefunItemStack(
-            "NTW_QUANTUM_STORAGE_1",
-            new ItemStack(Material.WHITE_TERRACOTTA),
-            Theme.MACHINE,
-            "Network Quantum Storage (4K)",
-            "Stores " + NetworkQuantumStorage.getSizes()[0] + " items",
-            "",
-            "Stores items in mass quantities within",
-            "a quantum singularity."
-        );
-
-        NETWORK_QUANTUM_STORAGE_2 = Theme.themedSlimefunItemStack(
-            "NTW_QUANTUM_STORAGE_2",
-            new ItemStack(Material.LIGHT_GRAY_TERRACOTTA),
-            Theme.MACHINE,
-            "Network Quantum Storage (32K)",
-            "Stores " + NetworkQuantumStorage.getSizes()[1] + " items",
-            "",
-            "Stores items in mass quantities within",
-            "a quantum singularity."
-        );
-
-        NETWORK_QUANTUM_STORAGE_3 = Theme.themedSlimefunItemStack(
-            "NTW_QUANTUM_STORAGE_3",
-            new ItemStack(Material.GRAY_TERRACOTTA),
-            Theme.MACHINE,
-            "Network Quantum Storage (262K)",
-            "Stores " + NetworkQuantumStorage.getSizes()[2] + " items",
-            "",
-            "Stores items in mass quantities within",
-            "a quantum singularity."
-        );
-
-        NETWORK_QUANTUM_STORAGE_4 = Theme.themedSlimefunItemStack(
-            "NTW_QUANTUM_STORAGE_4",
-            new ItemStack(Material.BROWN_TERRACOTTA),
-            Theme.MACHINE,
-            "Network Quantum Storage (2M)",
-            "Stores " + NetworkQuantumStorage.getSizes()[3] + " items",
-            "",
-            "Stores items in mass quantities within",
-            "a quantum singularity."
-        );
-
-        NETWORK_QUANTUM_STORAGE_5 = Theme.themedSlimefunItemStack(
-            "NTW_QUANTUM_STORAGE_5",
-            new ItemStack(Material.BLACK_TERRACOTTA),
-            Theme.MACHINE,
-            "Network Quantum Storage (16M)",
-            "Stores " + NetworkQuantumStorage.getSizes()[4] + " items",
-            "",
-            "Stores items in mass quantities within",
-            "a quantum singularity."
-        );
-
-        NETWORK_QUANTUM_STORAGE_6 = Theme.themedSlimefunItemStack(
-            "NTW_QUANTUM_STORAGE_6",
-            new ItemStack(Material.PURPLE_TERRACOTTA),
-            Theme.MACHINE,
-            "Network Quantum Storage (134M)",
-            "Stores " + NetworkQuantumStorage.getSizes()[5] + " items",
-            "",
-            "Stores items in mass quantities within",
-            "a quantum singularity."
-        );
-
-        NETWORK_QUANTUM_STORAGE_7 = Theme.themedSlimefunItemStack(
-            "NTW_QUANTUM_STORAGE_7",
-            new ItemStack(Material.MAGENTA_TERRACOTTA),
-            Theme.MACHINE,
-            "Network Quantum Storage (1B)",
-            "Stores " + NetworkQuantumStorage.getSizes()[6] + " items",
-            "",
-            "Stores items in mass quantities within",
-            "a quantum singularity."
-        );
-
-        NETWORK_QUANTUM_STORAGE_8 = Theme.themedSlimefunItemStack(
-            "NTW_QUANTUM_STORAGE_8",
-            new ItemStack(Material.RED_TERRACOTTA),
-            Theme.MACHINE,
-            "Network Quantum Storage (∞)",
-            "Stores ∞ items... almost",
-            "",
-            "Stores items in mass quantities within",
-            "a quantum singularity."
-        );
-
-        NETWORK_CAPACITOR_1 = Theme.themedSlimefunItemStack(
-            "NTW_CAPACITOR_1",
-            new ItemStack(Material.BROWN_GLAZED_TERRACOTTA),
-            Theme.MACHINE,
-            "Network Capacitor (1)",
-            "The Network Capacitor can take",
-            "power in and store it for use",
-            "within the network.",
-            "",
-            MessageFormat.format("{0}Capacity: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, 1000)
-        );
-
-        NETWORK_CAPACITOR_2 = Theme.themedSlimefunItemStack(
-            "NTW_CAPACITOR_2",
-            new ItemStack(Material.GREEN_GLAZED_TERRACOTTA),
-            Theme.MACHINE,
-            "Network Capacitor (2)",
-            "The Network Capacitor can take",
-            "power in and store it for use",
-            "within the network.",
-            "",
-            MessageFormat.format("{0}Capacity: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, 10000)
-        );
-
-        NETWORK_CAPACITOR_3 = Theme.themedSlimefunItemStack(
-            "NTW_CAPACITOR_3",
-            new ItemStack(Material.BLACK_GLAZED_TERRACOTTA),
-            Theme.MACHINE,
-            "Network Capacitor (3)",
-            "The Network Capacitor can take",
-            "power in and store it for use",
-            "within the network.",
-            "",
-            MessageFormat.format("{0}Capacity: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, 100000)
-        );
-
-        NETWORK_CAPACITOR_4 = Theme.themedSlimefunItemStack(
-                "NTW_CAPACITOR_4",
-                new ItemStack(Material.GRAY_GLAZED_TERRACOTTA),
-                Theme.MACHINE,
-                "Network Capacitor (4)",
-                "The Network Capacitor can take",
-                "power in and store it for use",
-                "within the network.",
-                "",
-                MessageFormat.format("{0}Capacity: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, 1000000)
-        );
-
-        NETWORK_POWER_OUTLET_1 = Theme.themedSlimefunItemStack(
-            "NTW_POWER_OUTLET_1",
-            new ItemStack(Material.YELLOW_GLAZED_TERRACOTTA),
-            Theme.MACHINE,
-            "Network Power Outlet (1)",
-            "The Network Capacitor can take",
-            "power from the Network to power",
-            "machines or feed back into an",
-            "EnergyNet network.",
-            "",
-            "Operates at a 20% loss rate.",
-            "",
-            MessageFormat.format("{0}Max Transfer: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, 500)
-        );
-
-        NETWORK_POWER_OUTLET_2 = Theme.themedSlimefunItemStack(
-            "NTW_POWER_OUTLET_2",
-            new ItemStack(Material.RED_GLAZED_TERRACOTTA),
-            Theme.MACHINE,
-            "Network Power Outlet (2)",
-            "The Network Capacitor can take",
-            "power from the Network to power",
-            "machines or feed back into an",
-            "EnergyNet network.",
-            "",
-            "Operates at a 20% loss rate.",
-            "",
-            MessageFormat.format("{0}Max Transfer: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, 2000)
-        );
-
-        NETWORK_POWER_DISPLAY = Theme.themedSlimefunItemStack(
-            "NTW_POWER_DISPLAY",
-            new ItemStack(Material.TINTED_GLASS),
-            Theme.MACHINE,
-            "Network Power Display",
-            "The Network Power Display will",
-            "display the power in the network.",
-            "Simple, right?"
-        );
-
-        NETWORK_RECIPE_ENCODER = Theme.themedSlimefunItemStack(
-            "NTW_RECIPE_ENCODER",
-            new ItemStack(Material.TARGET),
-            Theme.MACHINE,
-            "Network Recipe Encoder",
-            "Used to form a Crafting Blueprint",
-            "from input items.",
-            "",
-            MessageFormat.format("{0}Network Drain: {1}{2}/encode", Theme.CLICK_INFO, Theme.PASSIVE, 20000)
-        );
-
-        NETWORK_AUTO_CRAFTER = Theme.themedSlimefunItemStack(
-            "NTW_AUTO_CRAFTER",
-            new ItemStack(Material.BLACK_GLAZED_TERRACOTTA),
-            Theme.MACHINE,
-            "Network Auto Crafter",
-            "The Network Auto Crafter accepts",
-            "a crafting blueprint. When the",
-            "blueprint output item is requested",
-            "while there is none in the network",
-            "it will be crafted if you have",
-            "materials.",
-            "",
-            MessageFormat.format("{0}Network Drain: {1}{2}/craft", Theme.CLICK_INFO, Theme.PASSIVE, 64)
-        );
-
-        NETWORK_AUTO_CRAFTER_WITHHOLDING = Theme.themedSlimefunItemStack(
-            "NTW_AUTO_CRAFTER_WITHHOLDING",
-            new ItemStack(Material.WHITE_GLAZED_TERRACOTTA),
-            Theme.MACHINE,
-            "Network Auto Crafter (Withholding)",
-            "The Network Auto Crafter accepts",
-            "a crafting blueprint. When the",
-            "blueprint output item is requested",
-            "while there is none in the network",
-            "it will be crafted if you have",
-            "materials.",
-            "",
-            "A Withholding Crafter will keep",
-            "a stack in the output and stop",
-            "crafting. The stack can been seen",
-            "in the Network and also allows for",
-            "cargo.",
-            "",
-            MessageFormat.format("{0}Network Drain: {1}{2}/craft", Theme.CLICK_INFO, Theme.PASSIVE, 128)
-        );
-
-        CRAFTING_BLUEPRINT = Theme.themedSlimefunItemStack(
-            "NTW_CRAFTING_BLUEPRINT",
-            new ItemStack(Material.BLUE_DYE),
-            Theme.TOOL,
-            "Crafting Blueprint",
-            "A blank blueprint that can",
-            "be used to store a crafting",
-            "recipe."
-        );
-
-        NETWORK_PROBE = Theme.themedSlimefunItemStack(
-            "NTW_PROBE",
-            new ItemStack(Material.CLOCK),
-            Theme.TOOL,
-            "Network Probe",
-            "When used on a controller, this will",
-            "show the nodes on the network."
-        );
-
-        NETWORK_REMOTE = Theme.themedSlimefunItemStack(
-            "NTW_REMOTE",
-            new ItemStack(Material.PAINTING),
-            Theme.TOOL,
-            "Network Remote",
-            "Opens a bound grid wirelessly.",
-            "The grid must be chunk loaded.",
-            "",
-            MessageFormat.format("{0}Range: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, NetworkRemote.getRanges()[0])
-        );
-
-        NETWORK_REMOTE_EMPOWERED = Theme.themedSlimefunItemStack(
-            "NTW_REMOTE_EMPOWERED",
-            new ItemStack(Material.ITEM_FRAME),
-            Theme.TOOL,
-            "Network Remote Empowered",
-            "Opens a bound grid wirelessly.",
-            "The grid must be chunk loaded.",
-            "",
-            MessageFormat.format("{0}Range: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, NetworkRemote.getRanges()[1])
-        );
-
-        NETWORK_REMOTE_PRISTINE = Theme.themedSlimefunItemStack(
-            "NTW_REMOTE_PRISTINE",
-            new ItemStack(Material.GLOW_ITEM_FRAME),
-            Theme.TOOL,
-            "Network Remote Pristine",
-            "Opens a bound grid wirelessly.",
-            "The grid must be chunk loaded.",
-            "",
-            MessageFormat.format("{0}Range: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, "Unlimited")
-        );
-
-        NETWORK_REMOTE_ULTIMATE = Theme.themedSlimefunItemStack(
-            "NTW_REMOTE_ULTIMATE",
-            getPreEnchantedItemStack(Material.GLOW_ITEM_FRAME, true, new Pair<>(Enchantment.ARROW_DAMAGE, 1)),
-            Theme.TOOL,
-            "Network Remote Ultimate",
-            "Opens a bound grid wirelessly.",
-            "The grid must be chunk loaded.",
-            "",
-            MessageFormat.format("{0}Range: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, "Cross Dimensional")
-        );
-
-        NETWORK_CRAYON = Theme.themedSlimefunItemStack(
-            "NTW_CRAYON",
-            new ItemStack(Material.RED_CANDLE),
-            Theme.TOOL,
-            "Network Crayon",
-            "When used on a controller, this will",
-            "enable particle display from specific",
-            "blocks when working."
-        );
-
-        NETWORK_CONFIGURATOR = Theme.themedSlimefunItemStack(
-            "NTW_CONFIGURATOR",
-            new ItemStack(Material.BLAZE_ROD),
-            Theme.TOOL,
-            "Network Configurator",
-            "Used to copy and paste the",
-            "configurations of directional",
-            "interfaces.",
-            "",
-            MessageFormat.format("{0}Right Click: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, "Apply Config"),
-            MessageFormat.format("{0}Shift Right Click: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, "Store Config")
-        );
-
-        NETWORK_WIRELESS_CONFIGURATOR = Theme.themedSlimefunItemStack(
-            "NTW_WIRELESS_CONFIGURATOR",
-            new ItemStack(Material.BLAZE_ROD),
-            Theme.TOOL,
-            "Network Wireless Configurator",
-            "Used to store a Receiver location",
-            "and then to apply to a Transmitter",
-            "",
-            MessageFormat.format("{0}Right Click: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, "Store Receiver Location"),
-            MessageFormat.format("{0}Shift Right Click: {1}{2}", Theme.CLICK_INFO, Theme.PASSIVE, "Set Location to Transmitter")
-        );
-
-        NETWORK_RAKE_1 = Theme.themedSlimefunItemStack(
-            "NTW_RAKE_1",
-            new ItemStack(Material.TWISTING_VINES),
-            Theme.TOOL,
-            "Network Rake (1)",
-            "Right click a Network Object to",
-            "break it instantly.",
-            "",
-            ChatColor.YELLOW + "250 Uses " + ChatColor.GRAY + "left"
-        );
-
-        NETWORK_RAKE_2 = Theme.themedSlimefunItemStack(
-            "NTW_RAKE_2",
-            new ItemStack(Material.WEEPING_VINES),
-            Theme.TOOL,
-            "Network Rake (2)",
-            "Right click a Network Object to",
-            "break it instantly.",
-            "",
-            ChatColor.YELLOW + "1000 Uses " + ChatColor.GRAY + "left"
-        );
-
-        NETWORK_RAKE_3 = Theme.themedSlimefunItemStack(
-            "NTW_RAKE_3",
-            getPreEnchantedItemStack(Material.WEEPING_VINES, true, new Pair<>(Enchantment.LUCK, 1)),
-            Theme.TOOL,
-            "Network Rake (3)",
-            "Right click a Network Object to",
-            "break it instantly.",
-            "",
-            ChatColor.YELLOW + "9999 Uses " + ChatColor.GRAY + "left"
-        );
-
-        NETWORK_DEBUG_STICK = Theme.themedSlimefunItemStack(
-            "NTW_DEBUG_STICK",
-            getPreEnchantedItemStack(Material.STICK, true, new Pair<>(Enchantment.LUCK, 1)),
-            Theme.TOOL,
-            "Network Debug Stick",
-            "Right click a Network Object to",
-            "turn on debugging."
-        );
-    }
-
-    @Nonnull
-    @SafeVarargs
-    public static ItemStack getPreEnchantedItemStack(Material material, boolean hide, @Nonnull Pair<Enchantment, Integer>... enchantments) {
-        ItemStack itemStack = new ItemStack(material);
-        ItemMeta itemMeta = itemStack.getItemMeta();
-        for (Pair<Enchantment, Integer> pair : enchantments) {
-            itemMeta.addEnchant(pair.getFirstValue(), pair.getSecondValue(), true);
-        }
-        if (hide) {
-            itemMeta.addItemFlags(ItemFlag.HIDE_ENCHANTS);
-        }
-        itemStack.setItemMeta(itemMeta);
-        return itemStack;
-    }
-}
diff --git a/src/main/java/io/github/sefiraat/networks/slimefun/tools/NetworkCard.java b/src/main/java/io/github/sefiraat/networks/slimefun/tools/NetworkCard.java
deleted file mode 100644
index b9d716c..0000000
--- a/src/main/java/io/github/sefiraat/networks/slimefun/tools/NetworkCard.java
+++ /dev/null
@@ -1,95 +0,0 @@
-package io.github.sefiraat.networks.slimefun.tools;
-
-import io.github.sefiraat.networks.network.stackcaches.CardInstance;
-import io.github.sefiraat.networks.utils.Keys;
-import io.github.sefiraat.networks.utils.Theme;
-import io.github.sefiraat.networks.utils.datatypes.DataTypeMethods;
-import io.github.sefiraat.networks.utils.datatypes.PersistentCardInstanceType;
-import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
-import org.bukkit.Material;
-import org.bukkit.Tag;
-import org.bukkit.entity.Player;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.ItemMeta;
-
-import javax.annotation.Nonnull;
-
-public class NetworkCard extends SlimefunItem {
-
-    private static final int[] SIZES = new int[]{
-        4096,
-        32768,
-        262144,
-        2097152,
-        16777216,
-        134217728,
-        1073741824,
-        Integer.MAX_VALUE
-    };
-
-    private final int size;
-
-    public NetworkCard(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, int size) {
-        super(itemGroup, item, recipeType, recipe);
-        this.size = size;
-        addItemHandler(new ItemUseHandler() {
-            @Override
-            public void onRightClick(PlayerRightClickEvent e) {
-                final Player player = e.getPlayer();
-                final ItemStack card = player.getInventory().getItemInMainHand();
-                final ItemStack stackToSet = player.getInventory().getItemInOffHand().clone();
-
-                e.cancel();
-                if (card.getAmount() > 1) {
-                    player.sendMessage(Theme.WARNING + "Unstack cards before assigning an item.");
-                    return;
-                }
-
-                if (isBlacklisted(stackToSet)) {
-                    player.sendMessage(Theme.WARNING + "This type of item cannot be stored in a Network Card.");
-                    return;
-                }
-
-                final SlimefunItem cardItem = SlimefunItem.getByItem(card);
-                if (cardItem instanceof NetworkCard networkCard) {
-                    final ItemMeta cardMeta = card.getItemMeta();
-                    final CardInstance cardInstance = DataTypeMethods.getCustom(
-                        cardMeta,
-                        Keys.CARD_INSTANCE,
-                        PersistentCardInstanceType.TYPE,
-                        new CardInstance(null, 0, networkCard.getSize())
-                    );
-
-                    if (cardInstance.getAmount() > 0) {
-                        e.getPlayer().sendMessage(Theme.WARNING + "A card must be empty before trying to assign an item.");
-                        return;
-                    }
-
-                    cardInstance.setItemStack(stackToSet);
-                    DataTypeMethods.setCustom(cardMeta, Keys.CARD_INSTANCE, PersistentCardInstanceType.TYPE, cardInstance);
-                    cardInstance.updateLore(cardMeta);
-                    card.setItemMeta(cardMeta);
-                }
-            }
-        });
-    }
-
-    private boolean isBlacklisted(@Nonnull ItemStack itemStack) {
-        return itemStack.getType() == Material.AIR
-            || itemStack.getType().getMaxDurability() < 0
-            || Tag.SHULKER_BOXES.isTagged(itemStack.getType());
-    }
-
-    public int getSize() {
-        return this.size;
-    }
-
-    public static int[] getSizes() {
-        return SIZES;
-    }
-}
diff --git a/src/main/java/io/github/sefiraat/networks/utils/Keys.java b/src/main/java/io/github/sefiraat/networks/utils/Keys.java
deleted file mode 100644
index 66de805..0000000
--- a/src/main/java/io/github/sefiraat/networks/utils/Keys.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package io.github.sefiraat.networks.utils;
-
-import io.github.sefiraat.networks.Networks;
-import lombok.Data;
-import lombok.experimental.UtilityClass;
-import org.bukkit.NamespacedKey;
-
-import javax.annotation.Nonnull;
-
-@Data
-@UtilityClass
-public class Keys {
-
-    public static final NamespacedKey ON_COOLDOWN = newKey("cooldown");
-    public static final NamespacedKey CARD_INSTANCE = newKey("ntw_card");
-    public static final NamespacedKey QUANTUM_STORAGE_INSTANCE = newKey("quantum_storage");
-    public static final NamespacedKey BLUEPRINT_INSTANCE = newKey("ntw_blueprint");
-    public static final NamespacedKey FACE = newKey("face");
-    public static final NamespacedKey ITEM = newKey("item");
-
-    @Nonnull
-    public static NamespacedKey newKey(@Nonnull String value) {
-        return new NamespacedKey(Networks.getInstance(), value);
-    }
-}
diff --git a/src/main/java/io/github/sefiraat/networks/utils/StringUtils.java b/src/main/java/io/github/sefiraat/networks/utils/StringUtils.java
deleted file mode 100644
index e816cf8..0000000
--- a/src/main/java/io/github/sefiraat/networks/utils/StringUtils.java
+++ /dev/null
@@ -1,92 +0,0 @@
-package io.github.sefiraat.networks.utils;
-
-import javax.annotation.Nonnull;
-import java.util.Arrays;
-import java.util.List;
-import java.util.concurrent.ThreadLocalRandom;
-
-public final class StringUtils {
-
-    private StringUtils() {
-        throw new IllegalStateException("Utility class");
-    }
-
-    @Nonnull
-    public static String toTitleCase(@Nonnull String string) {
-        return toTitleCase(string, true);
-    }
-
-    @Nonnull
-    public static String toTitleCase(@Nonnull String string, boolean delimiterToSpace) {
-        return toTitleCase(string, delimiterToSpace, " _'-/");
-    }
-
-    @Nonnull
-    public static String toTitleCase(@Nonnull String string, boolean delimiterToSpace, @Nonnull String delimiters) {
-        final StringBuilder builder = new StringBuilder();
-        boolean capNext = true;
-
-        for (char character : string.toCharArray()) {
-            character = (capNext) ? Character.toUpperCase(character) : Character.toLowerCase(character);
-            builder.append(character);
-            capNext = (delimiters.indexOf(character) >= 0);
-        }
-
-        String built = builder.toString();
-
-        if (delimiterToSpace) {
-            final char space = ' ';
-            for (char c : delimiters.toCharArray()) {
-                built = built.replace(c, space);
-            }
-        }
-        return built;
-    }
-
-    /**
-     * List of names to be given to ArmourStands, invisible but mods and Minimaps can see them :)
-     */
-    @Nonnull
-    private static final List<String> EGG_NAMES = Arrays.asList(
-        "TheBusyBiscuit",
-        "Alessio",
-        "Walshy",
-        "Jeff",
-        "Seggan",
-        "BOOMER_1",
-        "svr333",
-        "variananora",
-        "ProfElements",
-        "Riley",
-        "FluffyBear",
-        "GallowsDove",
-        "Apeiros",
-        "Martin",
-        "Bunnky",
-        "ReasonFoundDecoy",
-        "Oah",
-        "Azak",
-        "andrewandy",
-        "EpicPlayer10",
-        "GentlemanCheesy",
-        "ybw0014",
-        "Ashian",
-        "R.I.P",
-        "OOOOMAGAAA",
-        "TerslenK",
-        "FN_FAL",
-        "supertechxter"
-    );
-
-    @Nonnull
-    public static String getRandomEggName() {
-        int rnd = ThreadLocalRandom.current().nextInt(0, EGG_NAMES.size());
-        return EGG_NAMES.get(rnd);
-    }
-
-    @Nonnull
-    public static List<String> getEggNames() {
-        return EGG_NAMES;
-    }
-
-}
diff --git a/src/main/resources/config.yml b/src/main/resources/config.yml
deleted file mode 100644
index 3c2f946..0000000
--- a/src/main/resources/config.yml
+++ /dev/null
@@ -1 +0,0 @@
-auto-update: true
diff --git a/src/main/resources/plugin.yml b/src/main/resources/plugin.yml
deleted file mode 100644
index 943f655..0000000
--- a/src/main/resources/plugin.yml
+++ /dev/null
@@ -1,17 +0,0 @@
-name: Networks
-author: Sefiraat
-description: No idea yet
-main: io.github.sefiraat.networks.Networks
-website: https://github.com/Sefiraat/Networks
-version: ${project.version}
-api-version: 1.17
-depend:
-  - Slimefun
-softdepend:
-  - InfinityExpansion
-  - Netheopoiesis
-  - WildChests
-commands:
-  networks:
-    description: /networks
-    usage: /networks <sub>
\ No newline at end of file
-- 
2.41.0.windows.2

