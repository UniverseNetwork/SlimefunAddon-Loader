From 5a8e52b9334931dacd8935d8482aa9e1f11901ad Mon Sep 17 00:00:00 2001
From: ARVIN3108 <31arvin08@gmail.com>
Date: Mon, 3 Jul 2023 23:07:02 +0700
Subject: [PATCH] SFCalc

---
 pom.xml                                       | 117 +-----------------
 .../sfa_loader/addons/sfcalc/CalcCommand.java |  22 ++++
 .../sfa_loader/addons}/sfcalc/Calculator.java |  77 +++++-------
 .../addons/sfcalc/NeededCommand.java          |  67 ++++++++++
 .../sfa_loader/addons}/sfcalc/SFCalc.java     |  56 ++-------
 .../addons}/sfcalc/StringRegistry.java        |  18 ++-
 .../addons/sfcalc/WebsiteCommand.java         |  29 +++++
 .../io/github/seggan/sfcalc/CalcCommand.java  |  91 --------------
 .../github/seggan/sfcalc/NeededCommand.java   |  97 ---------------
 .../github/seggan/sfcalc/SFCalcMetrics.java   |  60 ---------
 .../github/seggan/sfcalc/WebsiteCommand.java  |  43 -------
 .../{ => addons-config/SFCalc}/config.yml     |   2 -
 src/main/resources/plugin.yml                 |  13 --
 13 files changed, 174 insertions(+), 518 deletions(-)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/CalcCommand.java
 rename src/main/java/{io/github/seggan => id/universenetwork/sfa_loader/addons}/sfcalc/Calculator.java (67%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/NeededCommand.java
 rename src/main/java/{io/github/seggan => id/universenetwork/sfa_loader/addons}/sfcalc/SFCalc.java (55%)
 rename src/main/java/{io/github/seggan => id/universenetwork/sfa_loader/addons}/sfcalc/StringRegistry.java (90%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/WebsiteCommand.java
 delete mode 100644 src/main/java/io/github/seggan/sfcalc/CalcCommand.java
 delete mode 100644 src/main/java/io/github/seggan/sfcalc/NeededCommand.java
 delete mode 100644 src/main/java/io/github/seggan/sfcalc/SFCalcMetrics.java
 delete mode 100644 src/main/java/io/github/seggan/sfcalc/WebsiteCommand.java
 rename src/main/resources/{ => addons-config/SFCalc}/config.yml (96%)
 delete mode 100644 src/main/resources/plugin.yml

diff --git a/pom.xml b/pom.xml
index 5cea970..9d800d8 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,12 +4,17 @@
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
     <modelVersion>4.0.0</modelVersion>
 
+    <parent>
+        <groupId>id.universenetwork.sfa_loader</groupId>
+        <artifactId>Addons</artifactId>
+        <version>1.1.0</version>
+    </parent>
+
     <groupId>io.github.seggan.sfcalc</groupId>
     <artifactId>SFCalc</artifactId>
     <version>UNOFFICIAL</version>
 
     <properties>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
         <author>Seggan</author>
         <sonar.projectKey>Seggan_SFCalc</sonar.projectKey>
         <sonar.organization>seggan</sonar.organization>
@@ -18,97 +23,9 @@
 
     <build>
         <finalName>${project.name} v${project.version}</finalName>
-        <defaultGoal>clean package -T 2.0C</defaultGoal>
-
-        <resources>
-            <resource>
-                <directory>${basedir}/src/main/resources</directory>
-                <filtering>true</filtering>
-                <includes>
-                    <include>plugin.yml</include>
-                    <include>config.yml</include>
-                </includes>
-            </resource>
-
-            <resource>
-                <directory>${basedir}</directory>
-                <filtering>false</filtering>
-                <includes>
-                    <include>LICENSE.txt</include>
-                </includes>
-            </resource>
-        </resources>
-        <plugins>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-compiler-plugin</artifactId>
-                <version>3.1</version>
-                <configuration>
-                    <source>11</source>
-                    <target>11</target>
-                </configuration>
-            </plugin>
-
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-shade-plugin</artifactId>
-                <version>3.2.4</version>
-                <dependencies>
-                    <dependency>
-                        <groupId>org.ow2.asm</groupId>
-                        <artifactId>asm</artifactId>
-                        <version>9.1</version>
-                    </dependency>
-                    <dependency>
-                        <groupId>org.ow2.asm</groupId>
-                        <artifactId>asm-commons</artifactId>
-                        <version>9.1</version>
-                    </dependency>
-                </dependencies>
-                <configuration>
-                    <relocations>
-                        <relocation>
-                            <pattern>io.github.mooy1.infinitylib</pattern>
-                            <shadedPattern>io.github.seggan.sfcalc.infinitylib</shadedPattern>
-                        </relocation>
-                        <relocation>
-                            <pattern>io.github.seggan.errorreporter</pattern>
-                            <shadedPattern>io.github.seggan.sfcalc.errorreporter</shadedPattern>
-                        </relocation>
-                    </relocations>
-                    <filters>
-                        <filter>
-                            <artifact>io.github.mooy1:InfinityLib</artifact>
-                            <excludes>
-                                <exclude>**/infinitylib/slimefun/**</exclude>
-                                <exclude>**/infinitylib/categories/**</exclude>
-                                <exclude>**/infinitylib/items/**</exclude>
-                                <exclude>**/infinitylib/players/**</exclude>
-                                <exclude>**/infinitylib/persistence/**</exclude>
-                                <exclude>**/infinitylib/presets/**</exclude>
-                                <exclude>**/infinitylib/recipes/**</exclude>
-                            </excludes>
-                        </filter>
-                    </filters>
-                </configuration>
-                <executions>
-                    <execution>
-                        <phase>package</phase>
-                        <goals>
-                            <goal>shade</goal>
-                        </goals>
-                    </execution>
-                </executions>
-            </plugin>
-        </plugins>
     </build>
 
     <repositories>
-        <repository>
-            <id>jittpack</id>
-            <url>https://jitpack.io</url>
-        </repository>
-
         <repository>
             <id>spigot-repo</id>
             <url>https://hub.spigotmc.org/nexus/content/repositories/snapshots/</url>
@@ -123,20 +40,6 @@
             <scope>provided</scope>
         </dependency>
 
-        <dependency>
-            <groupId>com.github.TheBusyBiscuit</groupId>
-            <artifactId>Slimefun4</artifactId>
-            <version>RC-27</version>
-            <scope>provided</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>io.github.mooy1</groupId>
-            <artifactId>InfinityLib</artifactId>
-            <version>1.0.0</version>
-            <scope>compile</scope>
-        </dependency>
-
         <dependency>
             <groupId>com.google.code.findbugs</groupId>
             <artifactId>jsr305</artifactId>
@@ -144,18 +47,10 @@
             <scope>provided</scope>
         </dependency>
 
-        <dependency>
-            <groupId>org.projectlombok</groupId>
-            <artifactId>lombok</artifactId>
-            <version>1.18.20</version>
-            <scope>provided</scope>
-        </dependency>
-
         <dependency>
             <groupId>com.github.seggan</groupId>
             <artifactId>ErrorReporter-Java</artifactId>
             <version>1.1.0</version>
-            <scope>compile</scope>
         </dependency>
     </dependencies>
 </project>
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/CalcCommand.java b/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/CalcCommand.java
new file mode 100644
index 0000000..161800f
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/CalcCommand.java
@@ -0,0 +1,22 @@
+package id.universenetwork.sfa_loader.addons.sfcalc;
+
+import cloud.commandframework.annotations.Argument;
+import cloud.commandframework.annotations.CommandDescription;
+import cloud.commandframework.annotations.CommandMethod;
+import cloud.commandframework.annotations.specifier.Range;
+import org.bukkit.command.CommandSender;
+
+@SuppressWarnings("unused")
+public class CalcCommand extends NeededCommand {
+    public CalcCommand(SFCalc ins) {
+        super(ins);
+    }
+
+    @CommandMethod("sfcalc|sfc calc <item> [amount]")
+    @CommandDescription("Calculates the resources needed for a given item")
+    public void cmdCalc(final CommandSender sender,
+                        final @Argument(value = "item", suggestions = "itemlist") String reqItem,
+                        final @Argument(value = "amount", defaultValue = "1") @Range(min = "1") long amount) {
+        execute(sender, reqItem, amount, false);
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/seggan/sfcalc/Calculator.java b/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/Calculator.java
similarity index 67%
rename from src/main/java/io/github/seggan/sfcalc/Calculator.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/Calculator.java
index d483255..1536b5b 100644
--- a/src/main/java/io/github/seggan/sfcalc/Calculator.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/Calculator.java
@@ -1,5 +1,6 @@
-package io.github.seggan.sfcalc;
+package id.universenetwork.sfa_loader.addons.sfcalc;
 
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.ItemUtils;
@@ -9,15 +10,9 @@ import org.bukkit.command.CommandSender;
 import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 
-import java.util.ArrayList;
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
-
-import static io.github.seggan.sfcalc.StringRegistry.*;
+import java.util.*;
 
 /**
  * The main class for the calculator
@@ -26,34 +21,31 @@ import static io.github.seggan.sfcalc.StringRegistry.*;
  * @author TheBusyBiscuit
  */
 public class Calculator {
-    private final SFCalc plugin;
+    private final SFCalc instance;
 
-    public Calculator(SFCalc pl) {
-        this.plugin = pl;
+    public Calculator(SFCalc ins) {
+        this.instance = ins;
     }
 
     /**
      * Calculates the resources for the item and prints the out to the specified {@link CommandSender}
      *
      * @param sender the sender to send the calculation to
-     * @param item the Slimefun item to calculate
+     * @param item   the Slimefun item to calculate
      * @param amount the amount to calculate for
      * @param needed whether it should print out how many are needed. Requires {@code sender instanceof Player}
-     * to be {@code true}
+     *               to be {@code true}
      */
     public void printResults(@Nonnull CommandSender sender, @Nonnull SlimefunItem item, long amount, boolean needed) {
-        Bukkit.getScheduler().runTaskAsynchronously(plugin, () -> {
+        Bukkit.getScheduler().runTaskAsynchronously(AbstractAddon.instance(), () -> {
             Map<ItemStack, Long> results = calculate(item, amount);
 
-            StringRegistry registry = plugin.getStringRegistry();
+            StringRegistry registry = instance.getStringRegistry();
 
             String header;
             String name = getBasicName(item.getItem());
-            if (amount == 1) {
-                header = format(registry.getHeaderString(), name);
-            } else {
-                header = format(registry.getHeaderAmountString(), name, amount);
-            }
+            if (amount == 1) header = StringRegistry.format(registry.getHeaderString(), name);
+            else header = StringRegistry.format(registry.getHeaderAmountString(), name, amount);
 
             sender.sendMessage(header);
 
@@ -71,12 +63,10 @@ public class Calculator {
                     if (a < 0) a = 0;
                     String parsedAmount;
                     int maxStackSize = entry.getKey().getMaxStackSize();
-                    if (a <= maxStackSize) {
-                        parsedAmount = Long.toString(a);
-                    } else {
-                        parsedAmount = format(registry.getStackString(), a, (long) Math.floor((double) a / maxStackSize), maxStackSize, a % maxStackSize);
-                    }
-                    sender.sendMessage(format(registry.getNeededString(), getBasicName(entry.getKey()), parsedAmount));
+                    if (a <= maxStackSize) parsedAmount = Long.toString(a);
+                    else
+                        parsedAmount = StringRegistry.format(registry.getStackString(), a, (long) Math.floor((double) a / maxStackSize), maxStackSize, a % maxStackSize);
+                    sender.sendMessage(StringRegistry.format(registry.getNeededString(), getBasicName(entry.getKey()), parsedAmount));
                 }
             } else {
                 for (Map.Entry<ItemStack, Long> entry : entries) {
@@ -84,12 +74,10 @@ public class Calculator {
                     if (originalValues <= 0) continue;
                     String parsedAmount;
                     int maxStackSize = entry.getKey().getMaxStackSize();
-                    if (originalValues <= maxStackSize) {
-                        parsedAmount = Long.toString(originalValues);
-                    } else {
-                        parsedAmount = format(registry.getStackString(), originalValues, (long) Math.floor(originalValues / (float) maxStackSize), maxStackSize, originalValues % maxStackSize);
-                    }
-                    sender.sendMessage(format(registry.getAmountString(), getBasicName(entry.getKey()), parsedAmount));
+                    if (originalValues <= maxStackSize) parsedAmount = Long.toString(originalValues);
+                    else
+                        parsedAmount = StringRegistry.format(registry.getStackString(), originalValues, (long) Math.floor(originalValues / (float) maxStackSize), maxStackSize, originalValues % maxStackSize);
+                    sender.sendMessage(StringRegistry.format(registry.getAmountString(), getBasicName(entry.getKey()), parsedAmount));
                 }
             }
         });
@@ -101,9 +89,7 @@ public class Calculator {
 
         for (ItemStack item : player.getInventory().getContents()) {
             // if the Item is null or air, it will return null too
-            if (item == null || item.getType().isAir()) {
-                continue;
-            }
+            if (item == null || item.getType().isAir()) continue;
             add(inv, item, item.getAmount());
         }
 
@@ -114,10 +100,10 @@ public class Calculator {
     public Map<ItemStack, Long> calculate(@Nonnull SlimefunItem parent, long amount) {
 
         Map<ItemStack, Long> result = new HashMap<>();
-		
-		// uncraft the material first to bypass the blacklist
-		int multiplier = parent.getRecipeOutput().getAmount();
-		long operations = (amount + multiplier - 1) / multiplier; //ceiling(needed/multiplier) but abusing fast ints
+
+        // uncraft the material first to bypass the blacklist
+        int multiplier = parent.getRecipeOutput().getAmount();
+        long operations = (amount + multiplier - 1) / multiplier; //ceiling(needed/multiplier) but abusing fast ints
         for (ItemStack item : parent.getRecipe()) {
             if (item == null) continue;
             add(result, item, item.getAmount() * operations);
@@ -148,18 +134,15 @@ public class Calculator {
      */
     @Nullable
     private SlimefunItemStack getNextItem(Map<ItemStack, Long> map) {
-        for (Map.Entry<ItemStack, Long> entry : map.entrySet()) {
+        for (Map.Entry<ItemStack, Long> entry : map.entrySet())
             if (entry.getKey() instanceof SlimefunItemStack) {
                 SlimefunItemStack ingredient = (SlimefunItemStack) entry.getKey();
                 if (ingredient.getItem() != null &&
-                    !plugin.getBlacklistedRecipes().contains(ingredient.getItem().getRecipeType()) &&
-					!plugin.getBlacklistedIds().contains(ingredient.getItem().getId())) {
-                    if (entry.getValue() > 0) {
-                        return ingredient;
-                    }
+                        !instance.getBlacklistedRecipes().contains(ingredient.getItem().getRecipeType()) &&
+                        !instance.getBlacklistedIds().contains(ingredient.getItem().getId())) {
+                    if (entry.getValue() > 0) return ingredient;
                 }
             }
-        }
         return null;
     }
 
@@ -173,4 +156,4 @@ public class Calculator {
     private String getBasicName(ItemStack stack) {
         return ChatColor.stripColor(ItemUtils.getItemName(stack));
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/NeededCommand.java b/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/NeededCommand.java
new file mode 100644
index 0000000..943ffa5
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/NeededCommand.java
@@ -0,0 +1,67 @@
+package id.universenetwork.sfa_loader.addons.sfcalc;
+
+import cloud.commandframework.annotations.Argument;
+import cloud.commandframework.annotations.CommandDescription;
+import cloud.commandframework.annotations.CommandMethod;
+import cloud.commandframework.annotations.specifier.Range;
+import cloud.commandframework.annotations.suggestions.Suggestions;
+import cloud.commandframework.context.CommandContext;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+
+import java.util.*;
+
+@SuppressWarnings("unused")
+class NeededCommand {
+    private static final Set<String> ids = new HashSet<>();
+    private final SFCalc instance;
+
+    public NeededCommand(SFCalc ins) {
+        this.instance = ins;
+    }
+
+    protected void execute(CommandSender sender, String reqItem, long amount, boolean needed) {
+        SFCalc.REPORTER.executeOrElseReport(() -> {
+            StringRegistry registry = instance.getStringRegistry();
+
+            if (!(sender instanceof Player)) {
+                sender.sendMessage(StringRegistry.format(registry.getNotAPlayerString()));
+                return;
+            }
+
+            SlimefunItem item = SlimefunItem.getById(reqItem.toUpperCase());
+
+            if (item == null) {
+                sender.sendMessage(StringRegistry.format(registry.getNoItemString()));
+                return;
+            }
+
+            instance.getCalc().printResults(sender, item, amount, true);
+        });
+    }
+
+    @CommandMethod("sfcalc|sfc needed <item> [amount]")
+    @CommandDescription("Tells you how much more resources are needed")
+    public void cmdNeeded(final CommandSender sender,
+                          final @Argument(value = "item", suggestions = "itemlist") String reqItem,
+                          final @Argument(value = "amount", defaultValue = "1") @Range(min = "1") long amount) {
+        execute(sender, reqItem, amount, true);
+    }
+
+    @Suggestions(value = "itemList")
+    public List<String> itemList(CommandContext<CommandSender> sender, String context) {
+        List<String> tabs = new ArrayList<>();
+
+        SFCalc.REPORTER.executeOrElseReport(() -> {
+            if (ids.isEmpty()) for (SlimefunItem item : Slimefun.getRegistry().getEnabledSlimefunItems())
+                ids.add(item.getId().toLowerCase(Locale.ROOT));
+
+
+            for (String id : ids) if (id.contains(context.toLowerCase(Locale.ROOT))) tabs.add(id);
+        });
+
+        return tabs;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/seggan/sfcalc/SFCalc.java b/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/SFCalc.java
similarity index 55%
rename from src/main/java/io/github/seggan/sfcalc/SFCalc.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/SFCalc.java
index fc98879..6068ece 100644
--- a/src/main/java/io/github/seggan/sfcalc/SFCalc.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/SFCalc.java
@@ -1,52 +1,36 @@
-package io.github.seggan.sfcalc;
+package id.universenetwork.sfa_loader.addons.sfcalc;
 
-import io.github.mooy1.infinitylib.core.AbstractAddon;
+import id.universenetwork.sfa_loader.manager.CommandManager;
+import id.universenetwork.sfa_loader.template.AddonTemplate;
 import io.github.seggan.errorreporter.ErrorReporter;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-import org.bukkit.event.Listener;
-
 import lombok.Getter;
 
 import java.util.HashSet;
 import java.util.Set;
 
 @Getter
-public class SFCalc extends AbstractAddon implements Listener {
-
+public class SFCalc extends AddonTemplate {
     public static ErrorReporter REPORTER;
 
-    private static SFCalc instance;
     private final Set<RecipeType> blacklistedRecipes = new HashSet<>();
     private final Set<String> blacklistedIds = new HashSet<>();
-    private Calculator calculator;
+    private Calculator calc;
     private StringRegistry stringRegistry;
 
-    public SFCalc() {
-        super("Seggan", "SFCalc", "master", "auto-updates");
-    }
-
     @Override
-    protected void enable() {
-        instance = this;
-
-        REPORTER  = new ErrorReporter("Seggan", "SFCalc", () ->
-            "SFCalc " +
-            getPluginVersion() +
-            "\nSlimefun " +
-            Slimefun.getVersion() +
-            "\nMinecraft " +
-            Slimefun.getMinecraftVersion().getName()
+    public void onLoad() {
+        REPORTER = new ErrorReporter("Seggan", "SFCalc", () ->
+                "SFCalc DEV - 37 (git dfc0fc41)\nSlimefun " + Slimefun.getVersion() +
+                        "\nMinecraft " + Slimefun.getMinecraftVersion().getName()
         );
-        REPORTER.preSend(obj -> !getPluginVersion().equals("UNOFFICIAL"));
 
         REPORTER.setOn(getConfig().getBoolean("error-reports", true));
 
         REPORTER.executeOrElseReport(() -> {
-            new SFCalcMetrics(this);
-
             stringRegistry = new StringRegistry(getConfig());
-            calculator = new Calculator(this);
+            calc = new Calculator(this);
 
             blacklistedRecipes.add(RecipeType.ORE_WASHER);
             blacklistedRecipes.add(RecipeType.GEO_MINER);
@@ -61,24 +45,10 @@ public class SFCalc extends AbstractAddon implements Listener {
             blacklistedIds.add("FALLEN_METEOR");
             blacklistedIds.add("RUBBER");
             blacklistedIds.add("VOID_BIT");
-            if (getConfig().getBoolean("options.use-carbon-instead-of-coal", true)) {
+            if (getConfig().getBoolean("options.use-carbon-instead-of-coal", true))
                 blacklistedIds.add("CARBON");
-            }
 
-            getCommand()
-                .addSub(new CalcCommand(this))
-                .addSub(new NeededCommand(this))
-                .addSub(new WebsiteCommand());
+            CommandManager.register(new CalcCommand(this), new WebsiteCommand());
         });
     }
-
-    @Override
-    protected void disable() {
-        instance = null;
-    }
-
-    public Calculator getCalc() {
-        return calculator;
-    }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/seggan/sfcalc/StringRegistry.java b/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/StringRegistry.java
similarity index 90%
rename from src/main/java/io/github/seggan/sfcalc/StringRegistry.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/StringRegistry.java
index 4e91e19..dda5161 100644
--- a/src/main/java/io/github/seggan/sfcalc/StringRegistry.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/StringRegistry.java
@@ -1,18 +1,16 @@
-package io.github.seggan.sfcalc;
+package id.universenetwork.sfa_loader.addons.sfcalc;
 
-import io.github.mooy1.infinitylib.core.AddonConfig;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AddonConfig;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.common.ChatColors;
-import org.apache.commons.lang.Validate;
-
 import lombok.Getter;
+import org.apache.commons.lang.Validate;
 
+import javax.annotation.Nonnull;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.regex.Pattern;
-import javax.annotation.Nonnull;
 
 @Getter
 public final class StringRegistry {
-
     private final Pattern percentPattern = Pattern.compile("(%s|%d)");
     private final String headerString;
     private final String headerAmountString;
@@ -49,9 +47,8 @@ public final class StringRegistry {
 
         String finalString = formatString;
 
-        for (int i = 0; i < objects.length; i++) {
+        for (int i = 0; i < objects.length; i++)
             finalString = finalString.replace("%" + (i + 1), objects[i].toString());
-        }
 
         return ChatColors.color(finalString);
     }
@@ -61,7 +58,7 @@ public final class StringRegistry {
 
         AtomicInteger i = new AtomicInteger();
         String formatted = this.percentPattern.matcher(val)
-            .replaceAll(matchResult -> "%" + numbers[i.getAndIncrement()]);
+                .replaceAll("%" + numbers[i.getAndIncrement()]);
 
         if (i.get() == numbers.length) {
             config.set(key, formatted);
@@ -70,5 +67,4 @@ public final class StringRegistry {
 
         return val;
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/WebsiteCommand.java b/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/WebsiteCommand.java
new file mode 100644
index 0000000..0ee2875
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/sfcalc/WebsiteCommand.java
@@ -0,0 +1,29 @@
+package id.universenetwork.sfa_loader.addons.sfcalc;
+
+import cloud.commandframework.annotations.CommandDescription;
+import cloud.commandframework.annotations.CommandMethod;
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.chat.ClickEvent;
+import net.md_5.bungee.api.chat.ComponentBuilder;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+
+@SuppressWarnings("unused")
+public class WebsiteCommand {
+    @CommandMethod("sfcalc|sfc website")
+    @CommandDescription("Gives the SFCalc website")
+    public void cmdWebsite(CommandSender sender) {
+        SFCalc.REPORTER.executeOrElseReport(() -> {
+            ClickEvent event = new ClickEvent(ClickEvent.Action.OPEN_URL, "https://sfcalc-online.pages.dev");
+            if (sender instanceof Player) {
+                Player p = (Player) sender;
+                p.spigot().sendMessage(new ComponentBuilder()
+                        .color(ChatColor.YELLOW)
+                        .event(event)
+                        .append("Click to go to the SFCalc website")
+                        .create()
+                );
+            } else sender.sendMessage("https://sfcalc-online.pages.dev");
+        });
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/seggan/sfcalc/CalcCommand.java b/src/main/java/io/github/seggan/sfcalc/CalcCommand.java
deleted file mode 100644
index d481d2b..0000000
--- a/src/main/java/io/github/seggan/sfcalc/CalcCommand.java
+++ /dev/null
@@ -1,91 +0,0 @@
-package io.github.seggan.sfcalc;
-
-import io.github.mooy1.infinitylib.commands.SubCommand;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.common.CommonPatterns;
-import org.bukkit.command.CommandSender;
-
-import java.util.HashSet;
-import java.util.List;
-import java.util.Locale;
-import java.util.Set;
-import javax.annotation.Nonnull;
-
-import static io.github.seggan.sfcalc.StringRegistry.*;
-
-public class CalcCommand extends SubCommand {
-
-    private static final Set<String> ids = new HashSet<>();
-    private final SFCalc plugin;
-
-    public CalcCommand(SFCalc pl) {
-        super("calc", "Calculates the resources needed for a given item", false);
-        this.plugin = pl;
-    }
-
-    @Override
-    public void execute(@Nonnull CommandSender sender, @Nonnull String[] args) {
-        SFCalc.REPORTER.executeOrElseReport(() -> {
-            long amount;
-            String reqItem;
-            SlimefunItem item;
-
-            StringRegistry registry = plugin.getStringRegistry();
-
-            if (args.length > 2 || args.length == 0) {
-                return;
-            }
-
-            reqItem = args[0];
-
-            if (args.length == 1) {
-                amount = 1;
-            } else if (!CommonPatterns.NUMERIC.matcher(args[1]).matches()) {
-                sender.sendMessage(format(registry.getNotANumberString()));
-                return;
-            } else {
-                try {
-                    amount = Long.parseLong(args[1]);
-                    if (amount == 0 || amount > Integer.MAX_VALUE) {
-                        sender.sendMessage(format(registry.getInvalidNumberString()));
-                        return;
-                    }
-                } catch (NumberFormatException e) {
-                    sender.sendMessage(format(registry.getInvalidNumberString()));
-                    return;
-                }
-            }
-
-            item = SlimefunItem.getById(reqItem.toUpperCase(Locale.ROOT));
-
-            if (item == null) {
-                sender.sendMessage(format(registry.getNoItemString()));
-                return;
-            }
-
-            SFCalcMetrics.addItemSearched(item.getItemName());
-
-            plugin.getCalc().printResults(sender, item, amount, false);
-        });
-    }
-
-    @Override
-    public void complete(@Nonnull CommandSender sender, @Nonnull String[] args, @Nonnull List<String> tabs) {
-        SFCalc.REPORTER.executeOrElseReport(() -> {
-            if (ids.isEmpty()) {
-                for (SlimefunItem item : Slimefun.getRegistry().getEnabledSlimefunItems()) {
-                    ids.add(item.getId().toLowerCase(Locale.ROOT));
-                }
-            }
-
-            if (args.length == 1) {
-                for (String id : ids) {
-                    if (id.contains(args[0].toLowerCase(Locale.ROOT))) {
-                        tabs.add(id);
-                    }
-                }
-            }
-        });
-    }
-}
diff --git a/src/main/java/io/github/seggan/sfcalc/NeededCommand.java b/src/main/java/io/github/seggan/sfcalc/NeededCommand.java
deleted file mode 100644
index e81027d..0000000
--- a/src/main/java/io/github/seggan/sfcalc/NeededCommand.java
+++ /dev/null
@@ -1,97 +0,0 @@
-package io.github.seggan.sfcalc;
-
-import io.github.mooy1.infinitylib.commands.SubCommand;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.common.CommonPatterns;
-import org.bukkit.command.CommandSender;
-import org.bukkit.entity.Player;
-
-import java.util.HashSet;
-import java.util.List;
-import java.util.Locale;
-import java.util.Set;
-import javax.annotation.Nonnull;
-
-import static io.github.seggan.sfcalc.StringRegistry.*;
-
-public class NeededCommand extends SubCommand {
-
-    private static final Set<String> ids = new HashSet<>();
-    private final SFCalc plugin;
-
-    public NeededCommand(SFCalc pl) {
-        super("needed", "Tells you how much more resources are needed", false);
-        this.plugin = pl;
-    }
-
-    @Override
-    public void execute(@Nonnull CommandSender sender, @Nonnull String[] args) {
-        SFCalc.REPORTER.executeOrElseReport(() -> {
-            long amount;
-            String reqItem;
-            SlimefunItem item;
-
-            StringRegistry registry = plugin.getStringRegistry();
-
-            if (!(sender instanceof Player)) {
-                sender.sendMessage(format(registry.getNotAPlayerString()));
-                return;
-            }
-
-            if (args.length > 2 || args.length == 0) {
-                return;
-            }
-
-            reqItem = args[0];
-
-            if (args.length == 1) {
-                amount = 1;
-            } else if (!CommonPatterns.NUMERIC.matcher(args[1]).matches()) {
-                sender.sendMessage(format(registry.getNotANumberString()));
-                return;
-            } else {
-                try {
-                    amount = Long.parseLong(args[1]);
-                    if (amount == 0 || amount > Integer.MAX_VALUE) {
-                        sender.sendMessage(format(registry.getInvalidNumberString()));
-                        return;
-                    }
-                } catch (NumberFormatException e) {
-                    sender.sendMessage(format(registry.getInvalidNumberString()));
-                    return;
-                }
-            }
-
-            item = SlimefunItem.getById(reqItem.toUpperCase());
-
-            if (item == null) {
-                sender.sendMessage(format(registry.getNoItemString()));
-                return;
-            }
-
-            SFCalcMetrics.addItemSearched(item.getItemName());
-
-            plugin.getCalc().printResults(sender, item, amount, true);
-        });
-    }
-
-    @Override
-    public void complete(@Nonnull CommandSender sender, @Nonnull String[] args, @Nonnull List<String> tabs) {
-        SFCalc.REPORTER.executeOrElseReport(() -> {
-            if (ids.isEmpty()) {
-                for (SlimefunItem item : Slimefun.getRegistry().getEnabledSlimefunItems()) {
-                    ids.add(item.getId().toLowerCase(Locale.ROOT));
-                }
-            }
-
-            if (args.length == 1) {
-                for (String id : ids) {
-                    if (id.contains(args[0].toLowerCase(Locale.ROOT))) {
-                        tabs.add(id);
-                    }
-                }
-            }
-        });
-    }
-}
diff --git a/src/main/java/io/github/seggan/sfcalc/SFCalcMetrics.java b/src/main/java/io/github/seggan/sfcalc/SFCalcMetrics.java
deleted file mode 100644
index 425d7f1..0000000
--- a/src/main/java/io/github/seggan/sfcalc/SFCalcMetrics.java
+++ /dev/null
@@ -1,60 +0,0 @@
-package io.github.seggan.sfcalc;
-
-import io.github.mooy1.infinitylib.metrics.bukkit.Metrics;
-import io.github.mooy1.infinitylib.metrics.charts.AdvancedPie;
-import io.github.mooy1.infinitylib.metrics.charts.SingleLineChart;
-import io.github.thebusybiscuit.slimefun4.utils.ChatUtils;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-public class SFCalcMetrics extends Metrics {
-
-    private boolean sent = false;
-
-    private static final List<String> itemsSearched = new ArrayList<>();
-
-    public SFCalcMetrics(SFCalc plugin) {
-        super(plugin, 8812);
-
-        addCustomChart(new AdvancedPie("items_searched", () -> {
-            Map<String, Integer> result = new HashMap<>();
-            Set<String> itemSet = new HashSet<>(itemsSearched);
-
-            for (String item : itemSet) {
-                result.put(item, Collections.frequency(itemsSearched, item));
-            }
-
-            if (sent) {
-                sent = false;
-                itemsSearched.clear();
-            } else {
-                sent = true;
-            }
-
-            return result;
-        }));
-
-        addCustomChart(new SingleLineChart("searches", () -> {
-            int searches = itemsSearched.size();
-
-            if (sent) {
-                sent = false;
-                itemsSearched.clear();
-            } else {
-                sent = true;
-            }
-
-            return searches;
-        }));
-    }
-
-    public static void addItemSearched(String s) {
-        itemsSearched.add(ChatUtils.removeColorCodes(s));
-    }
-}
diff --git a/src/main/java/io/github/seggan/sfcalc/WebsiteCommand.java b/src/main/java/io/github/seggan/sfcalc/WebsiteCommand.java
deleted file mode 100644
index abbb15c..0000000
--- a/src/main/java/io/github/seggan/sfcalc/WebsiteCommand.java
+++ /dev/null
@@ -1,43 +0,0 @@
-package io.github.seggan.sfcalc;
-
-import io.github.mooy1.infinitylib.commands.SubCommand;
-import net.md_5.bungee.api.ChatColor;
-import net.md_5.bungee.api.chat.ClickEvent;
-import net.md_5.bungee.api.chat.ComponentBuilder;
-import org.bukkit.command.CommandSender;
-import org.bukkit.entity.Player;
-
-import java.util.List;
-import javax.annotation.Nonnull;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-public class WebsiteCommand extends SubCommand {
-
-    public WebsiteCommand() {
-        super("website", "Gives the SFCalc website", false);
-    }
-
-    @Override
-    public void execute(@Nonnull CommandSender commandSender, @Nonnull String[] strings) {
-        SFCalc.REPORTER.executeOrElseReport(() -> {
-            ClickEvent event = new ClickEvent(ClickEvent.Action.OPEN_URL, "https://sfcalc-online.pages.dev");
-            if (commandSender instanceof Player) {
-                Player p = (Player) commandSender;
-                p.spigot().sendMessage(new ComponentBuilder()
-                    .color(ChatColor.YELLOW)
-                    .event(event)
-                    .append("Click to go to the SFCalc website")
-                    .create()
-                );
-            } else {
-                commandSender.sendMessage("https://sfcalc-online.pages.dev");
-            }
-        });
-    }
-
-    @Override
-    @ParametersAreNonnullByDefault
-    protected void complete(CommandSender sender, String[] args, List<String> completions) {
-
-    }
-}
diff --git a/src/main/resources/config.yml b/src/main/resources/addons-config/SFCalc/config.yml
similarity index 96%
rename from src/main/resources/config.yml
rename to src/main/resources/addons-config/SFCalc/config.yml
index 094add2..cf67239 100644
--- a/src/main/resources/config.yml
+++ b/src/main/resources/addons-config/SFCalc/config.yml
@@ -1,5 +1,3 @@
-# Enable auto updates to get the latest fixes
-auto-updates: true
 # Auto error reporting. Recommended to be true. No data other than error and
 # SFCalc/Slimefun/Minecraft version is collected
 error-reports: true
diff --git a/src/main/resources/plugin.yml b/src/main/resources/plugin.yml
deleted file mode 100644
index 48349f4..0000000
--- a/src/main/resources/plugin.yml
+++ /dev/null
@@ -1,13 +0,0 @@
-name: SFCalc
-main: io.github.seggan.sfcalc.SFCalc
-version: ${version}
-author: Seggan
-depend: [Slimefun]
-api-version: 1.15
-
-commands:
-  sfcalc:
-    description: Base SFCalc command
-    usage: "Usage: /sfcalc calc <item> [amount]"
-    aliases:
-      - sfc
\ No newline at end of file
-- 
2.41.0.windows.1

