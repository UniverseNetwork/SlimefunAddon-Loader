From fff9b00d95e0944645d198cbc118b0bae4de074f Mon Sep 17 00:00:00 2001
From: ARVIN3108 <70049331+ARVIN3108@users.noreply.github.com>
Date: Sat, 13 Jan 2024 09:21:13 +0700
Subject: [PATCH] SfChunkInfo

---
 pom.xml                                       | 112 +----
 .../addons/sfchunkinfo/SfChunkInfo.java       |  19 +
 .../sfchunkinfo/commands/ScanChunk.java       | 434 ++++++++----------
 .../me/fnfal113/sfchunkinfo/SfChunkInfo.java  |  55 ---
 src/main/resources/config.yml                 |   3 -
 src/main/resources/plugin.yml                 |  18 -
 6 files changed, 225 insertions(+), 416 deletions(-)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/sfchunkinfo/SfChunkInfo.java
 rename src/main/java/{me/fnfal113 => id/universenetwork/sfa_loader/addons}/sfchunkinfo/commands/ScanChunk.java (52%)
 delete mode 100644 src/main/java/me/fnfal113/sfchunkinfo/SfChunkInfo.java
 delete mode 100644 src/main/resources/config.yml
 delete mode 100644 src/main/resources/plugin.yml

diff --git a/pom.xml b/pom.xml
index 94cb9c0..2b6b8ae 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,133 +4,35 @@
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
     <modelVersion>4.0.0</modelVersion>
 
+    <parent>
+        <groupId>id.universenetwork.sfa_loader</groupId>
+        <artifactId>Addons</artifactId>
+        <version>UNOFFICIAL</version>
+    </parent>
+
     <groupId>me.fnfal113</groupId>
     <artifactId>SfChunkInfo</artifactId>
     <version>Unoffical-1.6.0</version>
-    <packaging>jar</packaging>
 
     <name>SfChunkInfo</name>
 
     <description>Scan the amount of Slimefun blocks in a chunk</description>
-    <properties>
-        <java.version>1.8</java.version>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    </properties>
 
     <url>https://github.com/FN-FAL113/SfChunkInfo</url>
 
     <build>
         <finalName>${project.name} v${project.version}</finalName>
-        <defaultGoal>clean package</defaultGoal>
         <sourceDirectory>${basedir}/src/main/java</sourceDirectory>
-
-        <resources>
-            <resource>
-                <directory>${basedir}/src/main/resources</directory>
-                <filtering>true</filtering>
-                <includes>
-                    <include>*</include>
-                </includes>
-            </resource>
-        </resources>
-
-        <plugins>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-compiler-plugin</artifactId>
-                <version>3.8.1</version>
-                <configuration>
-                    <source>${java.version}</source>
-                    <target>${java.version}</target>
-                </configuration>
-            </plugin>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-shade-plugin</artifactId>
-                <version>3.5.1</version>
-                <executions>
-                    <execution>
-                        <phase>package</phase>
-                        <goals>
-                            <goal>shade</goal>
-                        </goals>
-                        <configuration>
-                            <createDependencyReducedPom>false</createDependencyReducedPom>
-                            <minimizeJar>true</minimizeJar>
-                        </configuration>
-                    </execution>
-                </executions>
-                <configuration>
-                     <!-- shaded packages -->
-                    <relocations>
-                        <relocation>
-                            <pattern>org.bstats</pattern>
-                            <shadedPattern>me.fnfal113.sfchunkinfo.bstats</shadedPattern>
-                        </relocation>
-
-                        <relocation>
-                            <pattern>io.github.bakedlibs.dough.updater</pattern>
-                            <shadedPattern>me.fnfal113.sfchunkinfo.dough.updater</shadedPattern>
-                        </relocation>
-                        <!-- a transitive dependency, necessary for dough-updater -->
-                        <relocation>
-                            <pattern>io.github.bakedlibs.dough.versions</pattern>
-                            <shadedPattern>me.fnfal113.sfchunkinfo.dough.versions</shadedPattern>
-                        </relocation>   
-                    </relocations>
-                </configuration>
-            </plugin>
-        </plugins>
-
     </build>
 
     <repositories>
-
-        <repository>
-            <id>jitpack.io</id>
-            <url>https://jitpack.io</url>
-        </repository>
-
         <repository>
             <id>spigotmc-repo</id>
             <url>https://hub.spigotmc.org/nexus/content/repositories/snapshots/</url>
         </repository>
-        
-        <repository>
-            <id>sonatype</id>
-            <url>https://oss.sonatype.org/content/groups/public/</url>
-        </repository>
     </repositories>
 
     <dependencies>
-        <dependency>
-            <groupId>org.bstats</groupId>
-            <artifactId>bstats-bukkit</artifactId>
-            <version>2.2.1</version>
-            <scope>compile</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>com.github.Slimefun</groupId>
-            <artifactId>Slimefun4</artifactId>
-            <version>e42700dc98</version>
-            <scope>provided</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>com.github.baked-libs.dough</groupId>
-            <artifactId>dough-updater</artifactId>
-            <version>4b28bd408e</version>
-             <scope>compile</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>com.github.baked-libs.dough</groupId>
-            <artifactId>dough-common</artifactId>
-            <version>4b28bd408e</version>
-             <scope>compile</scope>
-        </dependency>
-
         <dependency>
             <groupId>org.spigotmc</groupId>
             <artifactId>spigot-api</artifactId>
@@ -138,4 +40,4 @@
             <scope>provided</scope>
         </dependency>
     </dependencies>
-</project>
+</project>
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/sfchunkinfo/SfChunkInfo.java b/src/main/java/id/universenetwork/sfa_loader/addons/sfchunkinfo/SfChunkInfo.java
new file mode 100644
index 0000000..da91da5
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/sfchunkinfo/SfChunkInfo.java
@@ -0,0 +1,19 @@
+package id.universenetwork.sfa_loader.addons.sfchunkinfo;
+
+import id.universenetwork.sfa_loader.addons.sfchunkinfo.commands.ScanChunk;
+import id.universenetwork.sfa_loader.managers.CommandManager;
+import id.universenetwork.sfa_loader.template.AddonTemplate;
+import id.universenetwork.sfa_loader.utils.LogUtils;
+
+public final class SfChunkInfo extends AddonTemplate {
+    @Override
+    public void onLoad() {
+        LogUtils.info("******************************************************");
+        LogUtils.info("*         SfChunkInfo - Created by FN_FAL113         *");
+        LogUtils.info("*                 Addon for Slimefun                 *");
+        LogUtils.info("*         Scan your chunk for # of sf blocks         *");
+        LogUtils.info("******************************************************");
+
+        CommandManager.register(new ScanChunk());
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/me/fnfal113/sfchunkinfo/commands/ScanChunk.java b/src/main/java/id/universenetwork/sfa_loader/addons/sfchunkinfo/commands/ScanChunk.java
similarity index 52%
rename from src/main/java/me/fnfal113/sfchunkinfo/commands/ScanChunk.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/sfchunkinfo/commands/ScanChunk.java
index 5a330d5..208c29c 100644
--- a/src/main/java/me/fnfal113/sfchunkinfo/commands/ScanChunk.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/sfchunkinfo/commands/ScanChunk.java
@@ -1,236 +1,200 @@
-package me.fnfal113.sfchunkinfo.commands;
-
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetComponent;
-import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
-import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import net.md_5.bungee.api.chat.HoverEvent;
-import net.md_5.bungee.api.chat.TextComponent;
-import net.md_5.bungee.api.chat.hover.content.Text;
-import org.bukkit.Bukkit;
-import org.bukkit.ChatColor;
-import org.bukkit.Chunk;
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.block.Block;
-import org.bukkit.command.Command;
-import org.bukkit.command.CommandSender;
-import org.bukkit.command.TabExecutor;
-import org.bukkit.entity.Player;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-
-public class ScanChunk implements TabExecutor {
-
-    private final Map<String, Integer> AMOUNT = new HashMap<>();
-    private final Map<String, String> INFO = new HashMap<>();
-    private final Map<String, Double> TIMINGS = new HashMap<>();
-    private final Map<String, Integer> POWER = new HashMap<>();
-
-    @Override
-    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
-
-        if (sender instanceof Player){
-            Player player = (Player) sender;
-            if(args.length == 0) {
-                if (player.hasPermission("sfchunkinfo.scan")) {
-                    Chunk chunk = player.getLocation().getChunk();
-
-                    getAmount(chunk, player);
-
-                } else {
-                    player.sendMessage("You don't have permission to use this command (perm mode: sfchunkinfo.scan)");
-                }
-            } else {
-                if (player.hasPermission("sfchunkinfo.scan.others")) {
-                    Player target = Bukkit.getPlayer(args[0]);
-
-                    if(target == null){
-                        player.sendMessage("Player should not be null nor offline");
-
-                        return true;
-                    }
-
-                    Chunk chunk = target.getLocation().getChunk();
-
-                    getAmountOthers(chunk, target, player);
-                } else {
-                    player.sendMessage("You don't have permission to use this command (perm mode: sfchunkinfo.scan.others)");
-                }
-            }
-        }
-
-        return true;
-    }
-
-    public void getAmount(Chunk chunk, Player player){
-        if (!Slimefun.getProtectionManager().hasPermission(Bukkit.getOfflinePlayer(player.getUniqueId()), player.getLocation(),
-                Interaction.PLACE_BLOCK)) {
-            player.sendMessage("You don't have the permission to scan this chunk (Grief Protected), ask for permission or override using the protection plugin command");
-
-            return;
-        }
-
-        scanChunk(chunk);
-
-        player.sendMessage(ChatColor.GOLD + "# of Slimefun blocks on this chunk:", "");
-
-        if (AMOUNT.isEmpty()) {
-            player.sendMessage(ChatColor.YELLOW + "No Slimefun blocks on this chunk");
-
-            return;
-        }
-
-        sendResults(player);
-    }
-
-    public void getAmountOthers(Chunk chunk, Player player, Player sender){
-        scanChunk(chunk);
-
-        sender.sendMessage(ChatColor.GOLD + "# of Slimefun blocks on " + ChatColor.WHITE + player.getName() + ChatColor.GOLD + " chunk:", "");
-
-        if (AMOUNT.isEmpty()) {
-            sender.sendMessage(ChatColor.YELLOW + "No Slimefun blocks on " + ChatColor.WHITE + player.getName() + ChatColor.GOLD + " chunk");
-
-            return;
-        }
-
-        sendResults(sender);
-    }
-
-    public void scanChunk(Chunk chunk){
-        for(int y = chunk.getWorld().getMinHeight(); y <= chunk.getWorld().getMaxHeight() - 1; y++) {
-            for(int x = 0; x <= 15; x++) {
-                for(int z = 0; z <= 15; z++) {
-                    Block block = chunk.getBlock(x, y, z);
-
-                    if(block.getType() == Material.AIR){
-                        continue;
-                    }
-
-                    if(BlockStorage.check(block) != null) {
-                        SlimefunItem sfItem = BlockStorage.check(block);
-                        String sfBlockName = Objects.requireNonNull(sfItem).getItemName();
-
-                        getPowerUsage(sfItem, block.getLocation());
-
-                        TIMINGS.put(sfBlockName, TIMINGS.getOrDefault(sfBlockName, (double) 0)
-                                + Double.parseDouble(Slimefun.getProfiler().getTime(block).substring(0, Slimefun.getProfiler().getTime(block).length() - 2)));
-                        INFO.put(sfBlockName, Objects.requireNonNull(BlockStorage.check(block)).getAddon().getName());
-                        AMOUNT.put(sfBlockName,  AMOUNT.getOrDefault(sfBlockName, 0) + 1);
-                    }
-                }
-            }
-        }
-    }
-
-    public void getPowerUsage(SlimefunItem sfItem, Location loc){
-        if(!(sfItem instanceof EnergyNetComponent)){
-            return;
-        }
-
-        EnergyNetComponent energyComponent = (EnergyNetComponent) sfItem;
-
-        int capacity = energyComponent.getCapacity();
-        int charge = energyComponent.getCharge(loc);
-        int demand = capacity - charge;
-
-        if(charge != 0 && demand != 0 && demand != capacity){
-            POWER.put(sfItem.getItemName(), POWER.getOrDefault(sfItem.getItemName(), 0) + demand);
-        }
-
-    }
-
-    public void sendResults(Player player){
-        AMOUNT.entrySet().stream()
-                .sorted(Map.Entry.<String, Integer>comparingByValue().reversed())
-                .forEachOrdered(e -> player.sendMessage(e.getKey() + ": " + ChatColor.GREEN + e.getValue()));
-
-        player.spigot().sendMessage(hoverInfo(INFO));
-        player.spigot().sendMessage(hoverInfoTimings(TIMINGS));
-        player.spigot().sendMessage(hoverInfoPower(POWER));
-
-        AMOUNT.clear();
-        INFO.clear();
-        TIMINGS.clear();
-        POWER.clear();
-    }
-
-    public TextComponent hoverInfo(Map<String, String> info){
-        TextComponent infoAddon = new TextComponent("\nHover for some info");
-
-        infoAddon.setColor(net.md_5.bungee.api.ChatColor.LIGHT_PURPLE);
-        infoAddon.setItalic(true);
-        infoAddon.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, info.isEmpty() ? new Text(ChatColor.GOLD + "No data collected") : new Text(info.toString()
-                .replace("{","")
-                    .replace("}","")
-                        .replace(", ", "\n")
-                            .replace("=", ChatColor.WHITE + " | from: "))));
-
-        return infoAddon;
-    }
-
-    public TextComponent hoverInfoTimings(Map<String, Double> timings){
-        Map<String, Double> sortedTimings = new LinkedHashMap<>();
-        if(!timings.isEmpty()) {
-            timings.entrySet().stream().sorted(Map.Entry.<String, Double>comparingByValue(Double::compare).reversed()).forEach(e -> sortedTimings.put(e.getKey(), e.getValue()));
-        }
-
-        TextComponent infoChunk = new TextComponent("Hover for block total timings");
-
-        infoChunk.setColor(net.md_5.bungee.api.ChatColor.LIGHT_PURPLE);
-        infoChunk.setItalic(true);
-        infoChunk.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, sortedTimings.isEmpty() ? new Text(ChatColor.GOLD + "No data collected") : new Text(ChatColor.GOLD + "Total Timings" + "\n\n" + sortedTimings.toString()
-                .replace("{","")
-                    .replace("}","")
-                        .replace(", ", " ms\n")
-                            .replace("=", ChatColor.WHITE + ": ")
-                                .concat(ChatColor.WHITE + " ms"))));
-
-        return infoChunk;
-    }
-
-    public TextComponent hoverInfoPower(Map<String, Integer> power){
-        Map<String, Integer> sortedPower = new LinkedHashMap<>();
-        if(!power.isEmpty()){
-            power.entrySet().stream().sorted(Map.Entry.<String, Integer>comparingByValue(Integer::compare).reversed()).forEach(e -> sortedPower.put(e.getKey(), e.getValue()));
-        }
-
-        TextComponent infoPower = new TextComponent("Hover for total power consumption");
-
-        infoPower.setColor(net.md_5.bungee.api.ChatColor.LIGHT_PURPLE);
-        infoPower.setItalic(true);
-        infoPower.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, power.isEmpty() ? new Text(ChatColor.GOLD + "No data collected") : new Text(sortedPower.toString()
-                .replace("{","")
-                    .replace("}","")
-                        .replace(", ", " J/t\n")
-                            .replace("=", ChatColor.WHITE + " | Total Consumption: ")
-                                .concat(ChatColor.WHITE + " J/t"))));
-
-        return infoPower;
-    }
-
-    @Override
-    public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
-        if(args.length == 1){
-            List<String> playerNames = new ArrayList<>();
-
-            Player[] players = new Player[Bukkit.getServer().getOnlinePlayers().size()];
-            Bukkit.getServer().getOnlinePlayers().toArray(players);
-
-            for (Player player : players) {
-                playerNames.add(player.getName());
-            }
-
-            return playerNames;
-        }
-
-        return null;
-    }
+package id.universenetwork.sfa_loader.addons.sfchunkinfo.commands;
+
+import cloud.commandframework.annotations.Argument;
+import cloud.commandframework.annotations.CommandMethod;
+import cloud.commandframework.annotations.CommandPermission;
+import cloud.commandframework.annotations.suggestions.Suggestions;
+import cloud.commandframework.context.CommandContext;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetComponent;
+import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
+import me.mrCookieSlime.Slimefun.api.BlockStorage;
+import net.md_5.bungee.api.chat.HoverEvent;
+import net.md_5.bungee.api.chat.TextComponent;
+import net.md_5.bungee.api.chat.hover.content.Text;
+import org.bukkit.*;
+import org.bukkit.block.Block;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.entity.Player;
+
+import java.util.*;
+import java.util.stream.Collectors;
+
+public class ScanChunk {
+    private final Map<String, Integer> AMOUNT = new HashMap<>();
+    private final Map<String, String> INFO = new HashMap<>();
+    private final Map<String, Double> TIMINGS = new HashMap<>();
+    private final Map<String, Integer> POWER = new HashMap<>();
+
+    @CommandMethod("sfchunkinfo")
+    @CommandPermission("sfchunkinfo.scan")
+    public void scanCmd(final CommandSender sender) {
+        if (sender instanceof Player) {
+            Player p = (Player) sender;
+            Chunk chunk = p.getLocation().getChunk();
+
+            getAmount(chunk, p);
+        }
+    }
+
+    @CommandMethod("sfchunkinfo <player>")
+    @CommandPermission("sfchunkinfo.scan.others")
+    public void scanOthersCmd(final CommandSender sender,
+                              final @Argument(value = "player", suggestions = "players") String name) {
+        Player target = Bukkit.getPlayer(name);
+
+        if (target == null) {
+            sender.sendMessage(ChatColor.RED + "Player should not be null nor offline!");
+
+            return;
+        }
+
+        Chunk chunk = target.getLocation().getChunk();
+
+        getAmountOthers(chunk, target, sender);
+    }
+
+    public void getAmount(Chunk chunk, Player player) {
+        if (!Slimefun.getProtectionManager().hasPermission(Bukkit.getOfflinePlayer(player.getUniqueId()), player.getLocation(),
+                Interaction.PLACE_BLOCK)) {
+            player.sendMessage(ChatColor.RED + "You don't have the permission to scan this chunk (Grief Protected), ask for permission or override using the protection plugin command");
+
+            return;
+        }
+
+        scanChunk(chunk);
+
+        player.sendMessage(ChatColor.GOLD + "# of Slimefun blocks on this chunk:", "");
+
+        if (AMOUNT.isEmpty()) {
+            player.sendMessage(ChatColor.YELLOW + "No Slimefun blocks on this chunk");
+
+            return;
+        }
+
+        sendResults(player);
+    }
+
+    public void getAmountOthers(Chunk chunk, Player player, CommandSender sender) {
+        scanChunk(chunk);
+
+        sender.sendMessage(ChatColor.GOLD + "# of Slimefun blocks on " + ChatColor.WHITE + player.getName() + ChatColor.GOLD + " chunk:", "");
+
+        if (AMOUNT.isEmpty()) {
+            sender.sendMessage(ChatColor.YELLOW + "No Slimefun blocks on " + ChatColor.WHITE + player.getName() + ChatColor.GOLD + " chunk");
+
+            return;
+        }
+
+        sendResults(sender);
+    }
+
+    public void scanChunk(Chunk chunk) {
+        for (int y = chunk.getWorld().getMinHeight(); y <= chunk.getWorld().getMaxHeight() - 1; y++)
+            for (int x = 0; x <= 15; x++)
+                for (int z = 0; z <= 15; z++) {
+                    Block block = chunk.getBlock(x, y, z);
+
+                    if (block.getType() == Material.AIR) continue;
+
+                    if (BlockStorage.check(block) != null) {
+                        SlimefunItem sfItem = BlockStorage.check(block);
+                        String sfBlockName = Objects.requireNonNull(sfItem).getItemName();
+
+                        getPowerUsage(sfItem, block.getLocation());
+
+                        TIMINGS.put(sfBlockName, TIMINGS.getOrDefault(sfBlockName, (double) 0)
+                                + Double.parseDouble(Slimefun.getProfiler().getTime(block).substring(0, Slimefun.getProfiler().getTime(block).length() - 2)));
+                        INFO.put(sfBlockName, Objects.requireNonNull(BlockStorage.check(block)).getAddon().getName());
+                        AMOUNT.put(sfBlockName, AMOUNT.getOrDefault(sfBlockName, 0) + 1);
+                    }
+                }
+    }
+
+    public void getPowerUsage(SlimefunItem sfItem, Location loc) {
+        if (!(sfItem instanceof EnergyNetComponent)) return;
+
+        EnergyNetComponent energyComponent = (EnergyNetComponent) sfItem;
+
+        int capacity = energyComponent.getCapacity();
+        int charge = energyComponent.getCharge(loc);
+        int demand = capacity - charge;
+
+        if (charge != 0 && demand != 0 && demand != capacity)
+            POWER.put(sfItem.getItemName(), POWER.getOrDefault(sfItem.getItemName(), 0) + demand);
+    }
+
+    public void sendResults(CommandSender sender) {
+        AMOUNT.entrySet().stream()
+                .sorted(Map.Entry.<String, Integer>comparingByValue().reversed())
+                .forEachOrdered(e -> sender.sendMessage(e.getKey() + ": " + ChatColor.GREEN + e.getValue()));
+
+        sender.spigot().sendMessage(hoverInfo(INFO));
+        sender.spigot().sendMessage(hoverInfoTimings(TIMINGS));
+        sender.spigot().sendMessage(hoverInfoPower(POWER));
+
+        AMOUNT.clear();
+        INFO.clear();
+        TIMINGS.clear();
+        POWER.clear();
+    }
+
+    public TextComponent hoverInfo(Map<String, String> info) {
+        TextComponent infoAddon = new TextComponent("\nHover for some info");
+
+        infoAddon.setColor(net.md_5.bungee.api.ChatColor.LIGHT_PURPLE);
+        infoAddon.setItalic(true);
+        infoAddon.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, info.isEmpty() ? new Text(ChatColor.GOLD + "No data collected") : new Text(info.toString()
+                .replace("{", "")
+                .replace("}", "")
+                .replace(", ", "\n")
+                .replace("=", ChatColor.WHITE + " | from: "))));
+
+        return infoAddon;
+    }
+
+    public TextComponent hoverInfoTimings(Map<String, Double> timings) {
+        Map<String, Double> sortedTimings = new LinkedHashMap<>();
+        if (!timings.isEmpty())
+            timings.entrySet().stream().sorted(Map.Entry.<String, Double>comparingByValue(Double::compare).reversed()).forEach(e -> sortedTimings.put(e.getKey(), e.getValue()));
+
+        TextComponent infoChunk = new TextComponent("Hover for block total timings");
+
+        infoChunk.setColor(net.md_5.bungee.api.ChatColor.LIGHT_PURPLE);
+        infoChunk.setItalic(true);
+        infoChunk.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, sortedTimings.isEmpty() ? new Text(ChatColor.GOLD + "No data collected") : new Text(ChatColor.GOLD + "Total Timings" + "\n\n" + sortedTimings.toString()
+                .replace("{", "")
+                .replace("}", "")
+                .replace(", ", " ms\n")
+                .replace("=", ChatColor.WHITE + ": ")
+                .concat(ChatColor.WHITE + " ms"))));
+
+        return infoChunk;
+    }
+
+    public TextComponent hoverInfoPower(Map<String, Integer> power) {
+        Map<String, Integer> sortedPower = new LinkedHashMap<>();
+        if (!power.isEmpty())
+            power.entrySet().stream().sorted(Map.Entry.<String, Integer>comparingByValue(Integer::compare).reversed()).forEach(e -> sortedPower.put(e.getKey(), e.getValue()));
+
+        TextComponent infoPower = new TextComponent("Hover for total power consumption");
+
+        infoPower.setColor(net.md_5.bungee.api.ChatColor.LIGHT_PURPLE);
+        infoPower.setItalic(true);
+        infoPower.setHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, power.isEmpty() ? new Text(ChatColor.GOLD + "No data collected") : new Text(sortedPower.toString()
+                .replace("{", "")
+                .replace("}", "")
+                .replace(", ", " J/t\n")
+                .replace("=", ChatColor.WHITE + " | Total Consumption: ")
+                .concat(ChatColor.WHITE + " J/t"))));
+
+        return infoPower;
+    }
+
+    @Suggestions("players")
+    public List<String> player(CommandContext<CommandSender> sender, String context) {
+        return Bukkit.getOnlinePlayers().stream().map(HumanEntity::getName).filter(s -> s.startsWith(context)).collect(Collectors.toList());
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/me/fnfal113/sfchunkinfo/SfChunkInfo.java b/src/main/java/me/fnfal113/sfchunkinfo/SfChunkInfo.java
deleted file mode 100644
index 04603c9..0000000
--- a/src/main/java/me/fnfal113/sfchunkinfo/SfChunkInfo.java
+++ /dev/null
@@ -1,55 +0,0 @@
-package me.fnfal113.sfchunkinfo;
-
-import io.github.bakedlibs.dough.updater.BlobBuildUpdater;
-import io.github.thebusybiscuit.slimefun4.api.SlimefunAddon;
-import me.fnfal113.sfchunkinfo.commands.ScanChunk;
-import org.bstats.bukkit.Metrics;
-import org.bukkit.plugin.java.JavaPlugin;
-
-import java.util.Objects;
-
-public final class SfChunkInfo extends JavaPlugin implements SlimefunAddon {
-
-    private static SfChunkInfo instance;
-
-    @Override
-    public void onEnable() {
-        setInstance(this);
-        new Metrics(this, 13713);
-
-        getLogger().info("******************************************************");
-        getLogger().info("*         SfChunkInfo - Created by FN_FAL113         *");
-        getLogger().info("*                 Addon for Slimefun                 *");
-        getLogger().info("*         Scan your chunk for # of sf blocks         *");
-        getLogger().info("******************************************************");
-
-
-        Objects.requireNonNull(getCommand("sfchunkinfo")).setExecutor(new ScanChunk());
-
-        getConfig().options().copyDefaults();
-        saveDefaultConfig();
-
-        if (getConfig().getBoolean("auto-update", true) && getDescription().getVersion().startsWith("Dev - ")) {
-            new BlobBuildUpdater(this, getFile(), "SfChunkInfo").start();
-        }
-    }
-
-    @Override
-    public JavaPlugin getJavaPlugin() {
-        return this;
-    }
-
-    @Override
-    public String getBugTrackerURL() {
-        return "https://github.com/FN-FAL113/SfChunkInfo/issues";
-    }
-
-    private static void setInstance(SfChunkInfo ins) {
-        instance = ins;
-    }
-
-    public static SfChunkInfo getInstance() {
-        return instance;
-    }
-
-}
diff --git a/src/main/resources/config.yml b/src/main/resources/config.yml
deleted file mode 100644
index 5de4eb1..0000000
--- a/src/main/resources/config.yml
+++ /dev/null
@@ -1,3 +0,0 @@
-# Addon by FN_FAL#7779 for Slimefun
-# Auto updates (false or true)
-auto-update: true
\ No newline at end of file
diff --git a/src/main/resources/plugin.yml b/src/main/resources/plugin.yml
deleted file mode 100644
index bbdd1c5..0000000
--- a/src/main/resources/plugin.yml
+++ /dev/null
@@ -1,18 +0,0 @@
-name: SfChunkInfo
-version: ${project.version}
-main: me.fnfal113.sfchunkinfo.SfChunkInfo
-api-version: 1.14
-authors: [ FN_FAL113 ]
-description: Scan the amount of Slimefun blocks in a chunk
-depend: [Slimefun]
-commands:
-  sfchunkinfo:
-    description: Scan chunk for amount of slimefun machines
-    usage: /<command>
-  permissions:
-    sfchunkinfo.scan:
-      description: Scan the amount of Slimefun blocks on the command sender's chunk location
-      default: op
-    sfchunkinfo.scan.others:
-      description: Scan the amount of Slimefun blocks on the target player chunk location
-      default: op
\ No newline at end of file
-- 
2.43.0.windows.1

