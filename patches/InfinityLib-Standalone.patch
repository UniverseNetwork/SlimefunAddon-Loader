From 44db2f799d453deb2de88ce15315eaf52e415a03 Mon Sep 17 00:00:00 2001
From: ARVIN3108 <70049331+ARVIN3108@users.noreply.github.com>
Date: Sat, 13 Jan 2024 17:36:30 +0700
Subject: [PATCH] InfinityLib-Standalone

---
 .../libraries/infinitylib/common/Events.java  |  6 +-
 .../infinitylib/common/Scheduler.java         |  2 +-
 .../infinitylib/core/AddonConfig.java         | 70 +++++++++++++++++++
 3 files changed, 75 insertions(+), 3 deletions(-)

diff --git a/src/main/java/id/universenetwork/sfa_loader/libraries/infinitylib/common/Events.java b/src/main/java/id/universenetwork/sfa_loader/libraries/infinitylib/common/Events.java
index 60dab19..a08169b 100644
--- a/src/main/java/id/universenetwork/sfa_loader/libraries/infinitylib/common/Events.java
+++ b/src/main/java/id/universenetwork/sfa_loader/libraries/infinitylib/common/Events.java
@@ -36,8 +36,10 @@ public final class Events implements Listener {
     /**
      * Registers the given listener class
      */
-    public static void registerListener(Listener listener) {
-        Bukkit.getPluginManager().registerEvents(listener, AbstractAddon.instance());
+    public static void registerListener(Listener... listeners) {
+        for (Listener listener : listeners) {
+            Bukkit.getPluginManager().registerEvents(listener, AbstractAddon.instance());
+        }
     }
 
     /**
diff --git a/src/main/java/id/universenetwork/sfa_loader/libraries/infinitylib/common/Scheduler.java b/src/main/java/id/universenetwork/sfa_loader/libraries/infinitylib/common/Scheduler.java
index c454f63..f8b905d 100644
--- a/src/main/java/id/universenetwork/sfa_loader/libraries/infinitylib/common/Scheduler.java
+++ b/src/main/java/id/universenetwork/sfa_loader/libraries/infinitylib/common/Scheduler.java
@@ -25,7 +25,7 @@ public final class Scheduler {
         Bukkit.getScheduler().runTaskAsynchronously(AbstractAddon.instance(), runnable);
     }
 
-    public static void run(int delayTicks, Runnable runnable) {
+    public static void run(long delayTicks, Runnable runnable) {
         Bukkit.getScheduler().runTaskLater(AbstractAddon.instance(), runnable, delayTicks);
     }
 
diff --git a/src/main/java/id/universenetwork/sfa_loader/libraries/infinitylib/core/AddonConfig.java b/src/main/java/id/universenetwork/sfa_loader/libraries/infinitylib/core/AddonConfig.java
index 3f199c8..216af3e 100644
--- a/src/main/java/id/universenetwork/sfa_loader/libraries/infinitylib/core/AddonConfig.java
+++ b/src/main/java/id/universenetwork/sfa_loader/libraries/infinitylib/core/AddonConfig.java
@@ -6,14 +6,22 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.nio.charset.StandardCharsets;
+import java.util.Date;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.Optional;
+import java.util.UUID;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 import javax.annotation.ParametersAreNonnullByDefault;
 
+import org.bukkit.Chunk;
+import org.bukkit.Location;
+import org.bukkit.Sound;
+import org.bukkit.World;
 import org.bukkit.configuration.file.YamlConfiguration;
+import org.bukkit.inventory.Inventory;
 
 import id.universenetwork.sfa_loader.libraries.infinitylib.common.StringUtils;
 
@@ -207,4 +215,66 @@ public final class AddonConfig extends YamlConfiguration {
         return yamlBuilder.toString();
     }
 
+    @SuppressWarnings("unchecked")
+    public <T> T getOrSetDefault(@Nonnull String path, T value) {
+        Object val = get(path);
+
+        if (value.getClass().isInstance(val)) {
+            return (T) val;
+        }
+        else {
+            setValue(path, value);
+            return value;
+        }
+    }
+
+    /**
+     * Sets the Value for the specified path
+     *
+     * @param path The path in the Config File
+     * @param value The Value for that path
+     */
+    public void setValue(@Nonnull String path, Object value) {
+        if (value instanceof Optional) {
+            set(path, ((Optional<?>) value).orElse(null));
+        }
+        else if (value instanceof Inventory) {
+            set(path + ".size", ((Inventory) value).getSize());
+            for (int i = 0; i < ((Inventory) value).getSize(); i++) {
+                set(path + "." + i, ((Inventory) value).getItem(i));
+            }
+        }
+        else if (value instanceof Date) {
+            set(path, String.valueOf(((Date) value).getTime()));
+        }
+        else if (value instanceof Long) {
+            set(path, String.valueOf(value));
+        }
+        else if (value instanceof UUID) {
+            set(path, value.toString());
+        }
+        else if (value instanceof Sound) {
+            set(path, String.valueOf(value));
+        }
+        else if (value instanceof Location) {
+            set(path + ".x", ((Location) value).getX());
+            set(path + ".y", ((Location) value).getY());
+            set(path + ".z", ((Location) value).getZ());
+            set(path + ".pitch", ((Location) value).getPitch());
+            set(path + ".yaw", ((Location) value).getYaw());
+            set(path + ".world", ((Location) value).getWorld().getName());
+        }
+        else if (value instanceof Chunk) {
+            set(path + ".x", ((Chunk) value).getX());
+            set(path + ".z", ((Chunk) value).getZ());
+            set(path + ".world", ((Chunk) value).getWorld().getName());
+        }
+        else if (value instanceof World) {
+            set(path, ((World) value).getName());
+        }
+        else {
+            set(path, value);
+        }
+    }
+
 }
-- 
2.43.0.windows.1

