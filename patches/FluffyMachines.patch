From b90db24ff6feccb35d4520d8828d797fbeaf876b Mon Sep 17 00:00:00 2001
From: ARVIN3108 <70049331+ARVIN3108@users.noreply.github.com>
Date: Sun, 16 Jul 2023 00:25:56 +0700
Subject: [PATCH] FluffyMachines

---
 pom.xml                                       |  90 +------
 .../fluffymachines/FluffyItemSetup.java       | 184 ++++++--------
 .../addons/fluffymachines/FluffyMachines.java | 125 +++++++++
 .../addons}/fluffymachines/items/Barrel.java  |  25 +-
 .../items/EnderChestExtractionNode.java       |  25 +-
 .../items/EnderChestInsertionNode.java        |  24 +-
 .../fluffymachines/items/FireproofRune.java   |  44 ++--
 .../fluffymachines/items/HelicopterHat.java   |   4 +-
 .../fluffymachines/items/MiniBarrel.java      |   7 +-
 .../items/tools/ACBUpgradeCard.java           |  16 +-
 .../items/tools/AlternateBreakEvent.java      |   2 +-
 .../items/tools/CargoManipulator.java         |  16 +-
 .../fluffymachines/items/tools/Dolly.java     |  79 ++----
 .../items/tools/FluffyWrench.java             |  33 ++-
 .../fluffymachines/items/tools/Paxel.java     |  59 ++---
 .../items/tools/PortableCharger.java          |  34 ++-
 .../fluffymachines/items/tools/Scythe.java    |  12 +-
 .../items/tools/UpgradedExplosivePickaxe.java |   6 +-
 .../items/tools/UpgradedExplosiveShovel.java  |  12 +-
 .../items/tools/UpgradedExplosiveTool.java    |  12 +-
 .../items/tools/UpgradedLumberAxe.java        |  18 +-
 .../items/tools/WarpPadConfigurator.java      |  55 ++--
 .../items/tools/WateringCan.java              |  45 ++--
 .../listeners/KeyedCrafterListener.java       |  19 +-
 .../machines/AdvancedAutoDisenchanter.java    |  17 +-
 .../machines/AdvancedChargingBench.java       |  10 +-
 .../machines/AlternateElevatorPlate.java      |  38 ++-
 .../machines/AutoAncientAltar.java            |  13 +-
 .../machines/AutoArmorForge.java              |   6 +-
 .../machines/AutoCraftingTable.java           |  15 +-
 .../machines/AutoEnhancedCraftingTable.java   |   4 +-
 .../machines/AutoMagicWorkbench.java          |   9 +-
 .../fluffymachines/machines/AutoTableSaw.java |  47 ++--
 .../machines/BackpackLoader.java              |  32 +--
 .../machines/BackpackUnloader.java            |  18 +-
 .../machines/ElectricDustFabricator.java      |  22 +-
 .../machines/ElectricDustRecycler.java        |  12 +-
 .../fluffymachines/machines/SmartFactory.java |  14 +-
 .../fluffymachines/machines/WarpPad.java      |  12 +-
 .../machines/WaterSprinkler.java              |  32 +--
 .../multiblocks/CrankGenerator.java           |  22 +-
 .../multiblocks/ExpDispenser.java             |   6 +-
 .../fluffymachines/multiblocks/Foundry.java   |  31 ++-
 .../multiblocks/components/GeneratorCore.java |   2 +-
 .../components/SuperheatedFurnace.java        |  87 +++----
 .../fluffymachines/objects/AutoCrafter.java   |  85 ++-----
 .../objects/DoubleHologramOwner.java          |  17 +-
 .../objects/NonHopperableBlock.java           |   9 +-
 .../fluffymachines/utils/CancelPlace.java     |   4 +
 .../fluffymachines/utils/Constants.java       |  24 +-
 .../fluffymachines/utils/EventUtils.java}     |  17 +-
 .../fluffymachines/utils/FluffyItems.java     |  26 +-
 .../fluffymachines/utils/GlowEnchant.java     |   2 +-
 .../fluffymachines/utils/McMMOEvents.java     |   2 +-
 .../addons}/fluffymachines/utils/Utils.java   |  80 ++----
 .../fluffymachines/FluffyMachines.java        | 239 ------------------
 .../fluffymachines/utils/CancelPlace.java     |   4 -
 src/main/resources/config.yml                 |   3 -
 src/main/resources/plugin.yml                 |  31 ---
 59 files changed, 743 insertions(+), 1195 deletions(-)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/FluffyItemSetup.java (81%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/FluffyMachines.java
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/Barrel.java (97%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/EnderChestExtractionNode.java (91%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/EnderChestInsertionNode.java (90%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/FireproofRune.java (82%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/HelicopterHat.java (88%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/MiniBarrel.java (96%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/ACBUpgradeCard.java (92%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/AlternateBreakEvent.java (77%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/CargoManipulator.java (97%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/Dolly.java (82%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/FluffyWrench.java (87%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/Paxel.java (76%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/PortableCharger.java (90%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/Scythe.java (92%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/UpgradedExplosivePickaxe.java (92%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/UpgradedExplosiveShovel.java (88%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/UpgradedExplosiveTool.java (98%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/UpgradedLumberAxe.java (94%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/WarpPadConfigurator.java (73%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/items/tools/WateringCan.java (90%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/listeners/KeyedCrafterListener.java (91%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/AdvancedAutoDisenchanter.java (98%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/AdvancedChargingBench.java (97%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/AlternateElevatorPlate.java (88%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/AutoAncientAltar.java (98%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/AutoArmorForge.java (79%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/AutoCraftingTable.java (98%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/AutoEnhancedCraftingTable.java (81%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/AutoMagicWorkbench.java (91%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/AutoTableSaw.java (88%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/BackpackLoader.java (93%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/BackpackUnloader.java (96%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/ElectricDustFabricator.java (88%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/ElectricDustRecycler.java (95%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/SmartFactory.java (98%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/WarpPad.java (92%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/machines/WaterSprinkler.java (88%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/multiblocks/CrankGenerator.java (67%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/multiblocks/ExpDispenser.java (91%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/multiblocks/Foundry.java (75%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/multiblocks/components/GeneratorCore.java (94%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/multiblocks/components/SuperheatedFurnace.java (87%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/objects/AutoCrafter.java (88%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/objects/DoubleHologramOwner.java (91%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/objects/NonHopperableBlock.java (91%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/CancelPlace.java
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/utils/Constants.java (64%)
 rename src/main/java/{io/ncbpfluffybear/fluffymachines/utils/Events.java => id/universenetwork/sfa_loader/addons/fluffymachines/utils/EventUtils.java} (94%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/utils/FluffyItems.java (94%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/utils/GlowEnchant.java (96%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/utils/McMMOEvents.java (90%)
 rename src/main/java/{io/ncbpfluffybear => id/universenetwork/sfa_loader/addons}/fluffymachines/utils/Utils.java (71%)
 delete mode 100644 src/main/java/io/ncbpfluffybear/fluffymachines/FluffyMachines.java
 delete mode 100644 src/main/java/io/ncbpfluffybear/fluffymachines/utils/CancelPlace.java
 delete mode 100644 src/main/resources/config.yml
 delete mode 100644 src/main/resources/plugin.yml

diff --git a/pom.xml b/pom.xml
index 4d2b7ce..39e3d95 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1,34 +1,24 @@
 <project xmlns="http://maven.apache.org/POM/4.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-
     <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>id.universenetwork.sfa_loader</groupId>
+        <artifactId>Addons</artifactId>
+        <version>1.2.0</version>
+    </parent>
+
     <groupId>io.ncbpfluffybear</groupId>
     <artifactId>FluffyMachines</artifactId>
-    <version>1.0.0</version>
-
-    <properties>
-        <maven.compiler.source>1.8</maven.compiler.source>
-        <maven.compiler.target>1.8</maven.compiler.target>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    </properties>
+    <version>1.2.0</version>
 
     <repositories>
-        <repository>
-            <id>paper-repo</id>
-            <url>https://repo.destroystokyo.com/repository/maven-public/</url>
-        </repository>
-
         <repository>
             <id>spigot-repo</id>
             <url>https://hub.spigotmc.org/nexus/content/repositories/snapshots/</url>
         </repository>
 
-        <repository>
-            <id>jitpack.io</id>
-            <url>https://jitpack.io</url>
-        </repository>
-
         <repository>
             <id>CodeMC</id>
             <url>https://repo.codemc.org/repository/maven-public</url>
@@ -37,26 +27,7 @@
 
     <build>
         <finalName>${project.name} v${project.version}</finalName>
-        <defaultGoal>clean package</defaultGoal>
-        <sourceDirectory>${basedir}/src/main/java</sourceDirectory>
-
-        <resources>
-            <resource>
-                <directory>${basedir}/src/main/resources</directory>
-                <filtering>true</filtering>
-                <includes>
-                    <include>*</include>
-                </includes>
-            </resource>
-        </resources>
-
         <plugins>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-compiler-plugin</artifactId>
-                <version>3.9.0</version>
-            </plugin>
-
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-shade-plugin</artifactId>
@@ -64,25 +35,10 @@
                 <configuration>
                     <relocations>
                         <relocation>
-                            <pattern>org.bstats</pattern>
-                            <shadedPattern>io.ncbpfluffybear.shaded.bstats</shadedPattern>
-                        </relocation>
-                        <relocation>
-                            <pattern>com.github.Slimefun-Addon-Community.extrautils</pattern>
-                            <shadedPattern>io.ncbpfluffybear.shaded.extrautils</shadedPattern>
+                            <pattern>dev.j3fftw.extrautils</pattern>
+                            <shadedPattern>id.universenetwork.sfa_loader.libraries.extrautils</shadedPattern>
                         </relocation>
                     </relocations>
-
-                    <!-- Exclude manifest files -->
-                    <filters>
-                        <filter>
-                            <artifact>*:*</artifact>
-                            <excludes>
-                                <exclude>META-INF/*.MF</exclude>
-                            </excludes>
-                        </filter>
-                    </filters>
-
                 </configuration>
                 <executions>
                     <execution>
@@ -104,13 +60,7 @@
             <scope>provided</scope>
         </dependency>
 
-        <dependency>
-            <groupId>io.github.TheBusyBiscuit</groupId>
-            <artifactId>Slimefun4</artifactId>
-            <version>RC-32</version>
-            <scope>provided</scope>
-        </dependency>
-
+        <!--suppress VulnerableLibrariesLocal -->
         <dependency>
             <groupId>com.gmail.nossr50.mcMMO</groupId>
             <artifactId>mcMMO</artifactId>
@@ -138,24 +88,12 @@
             <version>3.0.2</version>
             <scope>provided</scope>
         </dependency>
-        <dependency>
-            <groupId>org.projectlombok</groupId>
-            <artifactId>lombok</artifactId>
-            <version>1.18.20</version>
-            <scope>provided</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>org.bstats</groupId>
-            <artifactId>bstats-bukkit</artifactId>
-            <version>2.2.1</version>
-            <scope>compile</scope>
-        </dependency>
 
         <dependency>
             <groupId>com.github.Slimefun-Addon-Community</groupId>
             <artifactId>extrautils</artifactId>
-            <version>73e76ac06c</version>
+            <version>73e76ac</version>
+            <scope>provided</scope>
         </dependency>
     </dependencies>
-</project>
+</project>
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/FluffyItemSetup.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/FluffyItemSetup.java
similarity index 81%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/FluffyItemSetup.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/FluffyItemSetup.java
index 42146e0..17306b4 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/FluffyItemSetup.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/FluffyItemSetup.java
@@ -1,5 +1,16 @@
-package io.ncbpfluffybear.fluffymachines;
-
+package id.universenetwork.sfa_loader.addons.fluffymachines;
+
+import id.universenetwork.sfa_loader.addons.fluffymachines.items.*;
+import id.universenetwork.sfa_loader.addons.fluffymachines.items.tools.*;
+import id.universenetwork.sfa_loader.addons.fluffymachines.machines.*;
+import id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks.CrankGenerator;
+import id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks.ExpDispenser;
+import id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks.Foundry;
+import id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks.components.GeneratorCore;
+import id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks.components.SuperheatedFurnace;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.FluffyItems;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.SlimefunAddonInstance;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -8,123 +19,75 @@ import io.github.thebusybiscuit.slimefun4.api.items.groups.SubItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
-import io.ncbpfluffybear.fluffymachines.items.Barrel;
-import io.ncbpfluffybear.fluffymachines.items.EnderChestExtractionNode;
-import io.ncbpfluffybear.fluffymachines.items.EnderChestInsertionNode;
-import io.ncbpfluffybear.fluffymachines.items.FireproofRune;
-import io.ncbpfluffybear.fluffymachines.items.HelicopterHat;
-import io.ncbpfluffybear.fluffymachines.items.MiniBarrel;
-import io.ncbpfluffybear.fluffymachines.items.tools.ACBUpgradeCard;
-import io.ncbpfluffybear.fluffymachines.items.tools.CargoManipulator;
-import io.ncbpfluffybear.fluffymachines.items.tools.Dolly;
-import io.ncbpfluffybear.fluffymachines.items.tools.FluffyWrench;
-import io.ncbpfluffybear.fluffymachines.items.tools.Paxel;
-import io.ncbpfluffybear.fluffymachines.items.tools.PortableCharger;
-import io.ncbpfluffybear.fluffymachines.items.tools.Scythe;
-import io.ncbpfluffybear.fluffymachines.items.tools.UpgradedExplosivePickaxe;
-import io.ncbpfluffybear.fluffymachines.items.tools.UpgradedExplosiveShovel;
-import io.ncbpfluffybear.fluffymachines.items.tools.UpgradedLumberAxe;
-import io.ncbpfluffybear.fluffymachines.items.tools.WarpPadConfigurator;
-import io.ncbpfluffybear.fluffymachines.items.tools.WateringCan;
-import io.ncbpfluffybear.fluffymachines.machines.AdvancedAutoDisenchanter;
-import io.ncbpfluffybear.fluffymachines.machines.AdvancedChargingBench;
-import io.ncbpfluffybear.fluffymachines.machines.AlternateElevatorPlate;
-import io.ncbpfluffybear.fluffymachines.machines.AutoAncientAltar;
-import io.ncbpfluffybear.fluffymachines.machines.AutoArmorForge;
-import io.ncbpfluffybear.fluffymachines.machines.AutoCraftingTable;
-import io.ncbpfluffybear.fluffymachines.machines.AutoEnhancedCraftingTable;
-import io.ncbpfluffybear.fluffymachines.machines.AutoMagicWorkbench;
-import io.ncbpfluffybear.fluffymachines.machines.AutoTableSaw;
-import io.ncbpfluffybear.fluffymachines.machines.BackpackLoader;
-import io.ncbpfluffybear.fluffymachines.machines.BackpackUnloader;
-import io.ncbpfluffybear.fluffymachines.machines.ElectricDustFabricator;
-import io.ncbpfluffybear.fluffymachines.machines.ElectricDustRecycler;
-import io.ncbpfluffybear.fluffymachines.machines.SmartFactory;
-import io.ncbpfluffybear.fluffymachines.machines.WarpPad;
-import io.ncbpfluffybear.fluffymachines.machines.WaterSprinkler;
-import io.ncbpfluffybear.fluffymachines.multiblocks.CrankGenerator;
-import io.ncbpfluffybear.fluffymachines.multiblocks.ExpDispenser;
-import io.ncbpfluffybear.fluffymachines.multiblocks.Foundry;
-import io.ncbpfluffybear.fluffymachines.multiblocks.components.GeneratorCore;
-import io.ncbpfluffybear.fluffymachines.multiblocks.components.SuperheatedFurnace;
-import io.ncbpfluffybear.fluffymachines.utils.FluffyItems;
-import javax.annotation.Nonnull;
 import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
 import org.bukkit.inventory.ItemStack;
 
 public final class FluffyItemSetup {
-
     private static final SlimefunItemStack advancedCircuitBoard = SlimefunItems.ADVANCED_CIRCUIT_BOARD;
     private static final ItemStack orangeGlass = new ItemStack(Material.ORANGE_STAINED_GLASS);
     private static final ItemStack brownGlass = new ItemStack(Material.BROWN_STAINED_GLASS);
 
     // ItemGroups
     private static final NestedItemGroup fluffymachines = new NestedItemGroup(
-            new NamespacedKey(FluffyMachines.getInstance(), "fluffymachines"),
+            AbstractAddon.createKey("fluffymachines"),
             new CustomItemStack(Material.SMOKER, "&6Fluffy Machines")
     );
 
     private static final ItemGroup generators = new SubItemGroup(
-            new NamespacedKey(FluffyMachines.getInstance(), "generators"), fluffymachines,
+            AbstractAddon.createKey("generators"), fluffymachines,
             new CustomItemStack(Material.BLAST_FURNACE, "&aGenerators"), 1
     );
 
     private static final ItemGroup machines = new SubItemGroup(
-            new NamespacedKey(FluffyMachines.getInstance(), "machines"), fluffymachines,
+            AbstractAddon.createKey("machines"), fluffymachines,
             new CustomItemStack(Material.SMOKER, "&9Machines"), 2
     );
 
     private static final ItemGroup tools = new SubItemGroup(
-            new NamespacedKey(FluffyMachines.getInstance(), "tools"), fluffymachines,
+            AbstractAddon.createKey("tools"), fluffymachines,
             new CustomItemStack(Material.IRON_PICKAXE, "&bTools"), 3
     );
 
     private static final ItemGroup multiblocks = new SubItemGroup(
-            new NamespacedKey(FluffyMachines.getInstance(), "multiblocks"), fluffymachines,
+            AbstractAddon.createKey("multiblocks"), fluffymachines,
             new CustomItemStack(Material.BRICKS, "&cMultiblocks"), 4
     );
 
     private static final ItemGroup fluffybarrels = new SubItemGroup(
-            new NamespacedKey(FluffyMachines.getInstance(), "barrels"), fluffymachines,
+            AbstractAddon.createKey("barrels"), fluffymachines,
             new CustomItemStack(Material.BARREL, "&6Fluffy Barrels"), 5
     );
 
     private static final ItemGroup portableChargers = new SubItemGroup(
-            new NamespacedKey(FluffyMachines.getInstance(), "portable_chargers"), fluffymachines,
+            AbstractAddon.createKey("portable_chargers"), fluffymachines,
             new CustomItemStack(FluffyItems.CARBONADO_PORTABLE_CHARGER, "&ePortable Chargers"), 6
     );
 
     private static final ItemGroup wrenches = new SubItemGroup(
-            new NamespacedKey(FluffyMachines.getInstance(), "wrenches"), fluffymachines,
+            AbstractAddon.createKey("wrenches"), fluffymachines,
             new CustomItemStack(FluffyItems.CARBONADO_FLUFFY_WRENCH, "&7Wrenches"), 7
     );
 
     private static final ItemGroup cargo = new SubItemGroup(
-            new NamespacedKey(FluffyMachines.getInstance(), "cargo"), fluffymachines,
+            AbstractAddon.createKey("cargo"), fluffymachines,
             new CustomItemStack(Material.CHEST, "&3Cargo"), 8
     );
 
     private static final ItemGroup misc = new SubItemGroup(
-            new NamespacedKey(FluffyMachines.getInstance(), "misc"), fluffymachines,
+            AbstractAddon.createKey("misc"), fluffymachines,
             new CustomItemStack(Material.HOPPER, "&8Misc"), 9
     );
 
-    private FluffyItemSetup() {
-    }
-
-    public static void setupBarrels(@Nonnull FluffyMachines plugin) {
-
+    public static void setupBarrels() {
         new MiniBarrel(fluffybarrels, FluffyItems.MINI_FLUFFY_BARREL, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 new ItemStack(Material.OAK_SLAB), new ItemStack(Material.BARREL), new ItemStack(Material.OAK_SLAB),
                 new ItemStack(Material.OAK_SLAB), new ItemStack(Material.BARREL), new ItemStack(Material.OAK_SLAB),
                 SlimefunItems.STEEL_PLATE, SlimefunItems.STEEL_PLATE, SlimefunItems.STEEL_PLATE
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         ItemStack previousBarrel = new ItemStack(Material.BARREL);
 
         for (Barrel.BarrelType barrelType : Barrel.BarrelType.values()) {
-
             SlimefunItemStack barrelStack = new SlimefunItemStack(barrelType.getKey(),
                     barrelType.getType(),
                     barrelType.getDisplayName(),
@@ -138,15 +101,13 @@ public final class FluffyItemSetup {
                     barrelType.getBorder(), previousBarrel, barrelType.getBorder(),
                     barrelType.getBorder(), previousBarrel, barrelType.getBorder(),
                     barrelType.getBorder(), barrelType.getReinforcement(), barrelType.getBorder()
-            }, barrelType.getDefaultSize()).register(plugin);
+            }, barrelType.getDefaultSize()).register(SlimefunAddonInstance.getSFAInstance());
 
             previousBarrel = barrelStack;
-
         }
     }
 
-    public static void setup(@Nonnull FluffyMachines plugin) {
-
+    public static void setup() {
         // Chargers
         new PortableCharger(portableChargers, FluffyItems.SMALL_PORTABLE_CHARGER,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
@@ -154,7 +115,7 @@ public final class FluffyItemSetup {
                 SlimefunItems.STEEL_INGOT, SlimefunItems.SMALL_CAPACITOR, SlimefunItems.STEEL_INGOT,
                 new ItemStack(Material.BRICK), SlimefunItems.STEEL_PLATE, new ItemStack(Material.BRICK)},
                 PortableCharger.Type.SMALL.chargeCapacity, PortableCharger.Type.SMALL.chargeSpeed
-        ).register(plugin);
+        ).register(SlimefunAddonInstance.getSFAInstance());
 
         new PortableCharger(portableChargers, FluffyItems.MEDIUM_PORTABLE_CHARGER,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
@@ -162,7 +123,7 @@ public final class FluffyItemSetup {
                 SlimefunItems.STEEL_INGOT, SlimefunItems.MEDIUM_CAPACITOR, SlimefunItems.STEEL_INGOT,
                 new ItemStack(Material.IRON_INGOT), SlimefunItems.STEEL_PLATE, new ItemStack(Material.IRON_INGOT)},
                 PortableCharger.Type.MEDIUM.chargeCapacity, PortableCharger.Type.MEDIUM.chargeSpeed
-        ).register(plugin);
+        ).register(SlimefunAddonInstance.getSFAInstance());
 
         new PortableCharger(portableChargers, FluffyItems.BIG_PORTABLE_CHARGER,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
@@ -170,7 +131,7 @@ public final class FluffyItemSetup {
                 SlimefunItems.STEEL_INGOT, SlimefunItems.BIG_CAPACITOR, SlimefunItems.STEEL_INGOT,
                 new ItemStack(Material.GOLD_INGOT), SlimefunItems.STEEL_PLATE, new ItemStack(Material.GOLD_INGOT)},
                 PortableCharger.Type.BIG.chargeCapacity, PortableCharger.Type.BIG.chargeSpeed
-        ).register(plugin);
+        ).register(SlimefunAddonInstance.getSFAInstance());
 
         new PortableCharger(portableChargers, FluffyItems.LARGE_PORTABLE_CHARGER,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
@@ -178,7 +139,7 @@ public final class FluffyItemSetup {
                 SlimefunItems.STEEL_INGOT, SlimefunItems.LARGE_CAPACITOR, SlimefunItems.STEEL_INGOT,
                 new ItemStack(Material.NETHER_BRICK), SlimefunItems.STEEL_PLATE, new ItemStack(Material.NETHER_BRICK)},
                 PortableCharger.Type.LARGE.chargeCapacity, PortableCharger.Type.LARGE.chargeSpeed
-        ).register(plugin);
+        ).register(SlimefunAddonInstance.getSFAInstance());
 
         new PortableCharger(portableChargers, FluffyItems.CARBONADO_PORTABLE_CHARGER,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
@@ -187,16 +148,16 @@ public final class FluffyItemSetup {
                 new ItemStack(Material.NETHERITE_INGOT), SlimefunItems.STEEL_PLATE,
                 new ItemStack(Material.NETHERITE_INGOT)},
                 PortableCharger.Type.CARBONADO.chargeCapacity, PortableCharger.Type.CARBONADO.chargeSpeed
-        ).register(plugin);
+        ).register(SlimefunAddonInstance.getSFAInstance());
 
         // Multiblocks
-        new CrankGenerator(generators, FluffyItems.CRANK_GENERATOR).register(plugin);
-        new Foundry(multiblocks, FluffyItems.FOUNDRY).register(plugin);
+        new CrankGenerator(generators, FluffyItems.CRANK_GENERATOR).register(SlimefunAddonInstance.getSFAInstance());
+        new Foundry(multiblocks, FluffyItems.FOUNDRY).register(SlimefunAddonInstance.getSFAInstance());
         new ExpDispenser(multiblocks, FluffyItems.EXP_DISPENSER, new ItemStack[]{
                 null, null, null,
                 null, new ItemStack(Material.GRINDSTONE), null,
                 null, new ItemStack(Material.DISPENSER), null
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         // Tools
         new WateringCan(tools, FluffyItems.WATERING_CAN,
@@ -204,62 +165,62 @@ public final class FluffyItemSetup {
                 new ItemStack(Material.IRON_INGOT), null, new ItemStack(Material.IRON_INGOT),
                 new ItemStack(Material.IRON_INGOT), new ItemStack(Material.BUCKET), new ItemStack(Material.IRON_INGOT),
                 null, new ItemStack(Material.IRON_INGOT), null
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new Scythe(tools, FluffyItems.SCYTHE, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 null, new ItemStack(Material.IRON_INGOT), new ItemStack(Material.IRON_INGOT),
                 null, new ItemStack(Material.IRON_HOE), null,
                 null, new ItemStack(Material.STICK), null
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new FluffyWrench(wrenches, FluffyItems.FLUFFY_WRENCH,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.COPPER_INGOT, null, SlimefunItems.COPPER_INGOT,
                 SlimefunItems.COPPER_INGOT, SlimefunItems.COPPER_INGOT, SlimefunItems.COPPER_INGOT,
                 null, SlimefunItems.COPPER_INGOT, null
-        }, FluffyWrench.Wrench.DEFAULT).register(plugin);
+        }, FluffyWrench.Wrench.DEFAULT).register(SlimefunAddonInstance.getSFAInstance());
 
         new FluffyWrench(wrenches, FluffyItems.REINFORCED_FLUFFY_WRENCH,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.REINFORCED_ALLOY_INGOT, null, SlimefunItems.REINFORCED_ALLOY_INGOT,
                 SlimefunItems.REINFORCED_ALLOY_INGOT, FluffyItems.FLUFFY_WRENCH, SlimefunItems.REINFORCED_ALLOY_INGOT,
                 null, SlimefunItems.SYNTHETIC_DIAMOND, null
-        }, FluffyWrench.Wrench.REINFORCED).register(plugin);
+        }, FluffyWrench.Wrench.REINFORCED).register(SlimefunAddonInstance.getSFAInstance());
 
         new FluffyWrench(wrenches, FluffyItems.CARBONADO_FLUFFY_WRENCH,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.CARBONADO, null, SlimefunItems.CARBONADO,
                 SlimefunItems.CARBONADO, FluffyItems.REINFORCED_FLUFFY_WRENCH, SlimefunItems.CARBONADO,
                 null, SlimefunItems.CARBONADO_EDGED_CAPACITOR, null
-        }, FluffyWrench.Wrench.CARBONADO).register(plugin);
+        }, FluffyWrench.Wrench.CARBONADO).register(SlimefunAddonInstance.getSFAInstance());
 
         new UpgradedLumberAxe(tools, FluffyItems.UPGRADED_LUMBER_AXE,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 null, new ItemStack(Material.DIAMOND), new ItemStack(Material.DIAMOND),
                 null, SlimefunItems.LUMBER_AXE, null,
                 null, new ItemStack(Material.OBSIDIAN), null
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new UpgradedExplosivePickaxe(tools, FluffyItems.UPGRADED_EXPLOSIVE_PICKAXE,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.SYNTHETIC_EMERALD, SlimefunItems.SYNTHETIC_EMERALD, SlimefunItems.SYNTHETIC_EMERALD,
                 new ItemStack(Material.TNT), SlimefunItems.EXPLOSIVE_PICKAXE, new ItemStack(Material.TNT),
                 null, new ItemStack(Material.OBSIDIAN), null
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new UpgradedExplosiveShovel(tools, FluffyItems.UPGRADED_EXPLOSIVE_SHOVEL,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.SYNTHETIC_EMERALD, SlimefunItems.SYNTHETIC_EMERALD, SlimefunItems.SYNTHETIC_EMERALD,
                 new ItemStack(Material.TNT), SlimefunItems.EXPLOSIVE_SHOVEL, new ItemStack(Material.TNT),
                 null, new ItemStack(Material.OBSIDIAN), null
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new Paxel(tools, FluffyItems.PAXEL,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.SYNTHETIC_EMERALD, new ItemStack(Material.DIAMOND_PICKAXE), SlimefunItems.SYNTHETIC_EMERALD,
                 SlimefunItems.REINFORCED_ALLOY_INGOT, new ItemStack(Material.DIAMOND_AXE), SlimefunItems.REINFORCED_ALLOY_INGOT,
                 SlimefunItems.SYNTHETIC_DIAMOND, new ItemStack(Material.DIAMOND_SHOVEL), SlimefunItems.SYNTHETIC_DIAMOND,
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         // Machines
         new WaterSprinkler(machines, FluffyItems.WATER_SPRINKER,
@@ -267,28 +228,28 @@ public final class FluffyItemSetup {
                 new ItemStack(Material.IRON_INGOT), SlimefunItems.ELECTRIC_MOTOR, new ItemStack(Material.IRON_INGOT),
                 new ItemStack(Material.BUCKET), new ItemStack(Material.DISPENSER), new ItemStack(Material.BUCKET),
                 new ItemStack(Material.IRON_INGOT), SlimefunItems.SMALL_CAPACITOR, new ItemStack(Material.IRON_INGOT)
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new AutoCraftingTable(machines, FluffyItems.AUTO_CRAFTING_TABLE,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 new ItemStack(Material.CRAFTING_TABLE), SlimefunItems.BASIC_CIRCUIT_BOARD, new ItemStack(Material.CRAFTING_TABLE),
                 SlimefunItems.CARGO_MOTOR, SlimefunItems.BLISTERING_INGOT_3, SlimefunItems.CARGO_MOTOR,
                 new ItemStack(Material.CRAFTING_TABLE), SlimefunItems.ELECTRIC_MOTOR, new ItemStack(Material.CRAFTING_TABLE)
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new AutoAncientAltar(machines, FluffyItems.AUTO_ANCIENT_ALTAR,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.ANCIENT_PEDESTAL, SlimefunItems.MEDIUM_CAPACITOR, SlimefunItems.ANCIENT_PEDESTAL,
                 SlimefunItems.ANCIENT_PEDESTAL, SlimefunItems.ANCIENT_ALTAR, SlimefunItems.ANCIENT_PEDESTAL,
                 SlimefunItems.ANCIENT_PEDESTAL, SlimefunItems.ELECTRIC_MOTOR, SlimefunItems.ANCIENT_PEDESTAL
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new AutoEnhancedCraftingTable(machines, FluffyItems.AUTO_ENHANCED_CRAFTING_TABLE,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 new ItemStack(Material.CRAFTING_TABLE), advancedCircuitBoard, new ItemStack(Material.CRAFTING_TABLE),
                 SlimefunItems.CARGO_MOTOR, SlimefunItems.BLISTERING_INGOT_3, SlimefunItems.CARGO_MOTOR,
                 new ItemStack(Material.CRAFTING_TABLE), SlimefunItems.ELECTRIC_MOTOR, new ItemStack(Material.CRAFTING_TABLE)
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new AutoTableSaw(machines, FluffyItems.AUTO_TABLE_SAW,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
@@ -296,7 +257,7 @@ public final class FluffyItemSetup {
                 new ItemStack(Material.SMOOTH_STONE_SLAB), new ItemStack(Material.STONECUTTER),
                 new ItemStack(Material.SMOOTH_STONE_SLAB),
                 SlimefunItems.ELECTRIC_MOTOR, new ItemStack(Material.IRON_BLOCK), SlimefunItems.ELECTRIC_MOTOR
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new AutoMagicWorkbench(machines, FluffyItems.AUTO_MAGIC_WORKBENCH,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
@@ -304,14 +265,14 @@ public final class FluffyItemSetup {
                 new ItemStack(Material.BOOKSHELF), new ItemStack(Material.CRAFTING_TABLE),
                 new ItemStack(Material.DISPENSER),
                 new ItemStack(Material.BOOKSHELF), FluffyItems.AUTO_CRAFTING_TABLE, new ItemStack(Material.BOOKSHELF)
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new AutoArmorForge(machines, FluffyItems.AUTO_ARMOR_FORGE,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 new ItemStack(Material.ANVIL), new ItemStack(Material.ANVIL), new ItemStack(Material.ANVIL),
                 advancedCircuitBoard, new ItemStack(Material.DISPENSER), advancedCircuitBoard,
                 new ItemStack(Material.ANVIL), FluffyItems.AUTO_CRAFTING_TABLE, new ItemStack(Material.ANVIL)
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new AdvancedAutoDisenchanter(machines, FluffyItems.ADVANCED_AUTO_DISENCHANTER,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
@@ -319,28 +280,28 @@ public final class FluffyItemSetup {
                 SlimefunItems.BLISTERING_INGOT_3, SlimefunItems.AUTO_DISENCHANTER, SlimefunItems.BLISTERING_INGOT_3,
                 SlimefunItems.WITHER_PROOF_OBSIDIAN, SlimefunItems.WITHER_PROOF_OBSIDIAN,
                 SlimefunItems.WITHER_PROOF_OBSIDIAN
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new BackpackLoader(machines, FluffyItems.BACKPACK_LOADER,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 orangeGlass, orangeGlass, orangeGlass,
                 new ItemStack(Material.IRON_INGOT), new ItemStack(Material.HOPPER), new ItemStack(Material.IRON_INGOT),
                 SlimefunItems.ELECTRIC_MOTOR, SlimefunItems.BIG_CAPACITOR, SlimefunItems.ELECTRIC_MOTOR
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new BackpackUnloader(machines, FluffyItems.BACKPACK_UNLOADER,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 brownGlass, brownGlass, brownGlass,
                 new ItemStack(Material.IRON_INGOT), new ItemStack(Material.DISPENSER), new ItemStack(Material.IRON_INGOT),
                 SlimefunItems.ELECTRIC_MOTOR, SlimefunItems.BIG_CAPACITOR, SlimefunItems.ELECTRIC_MOTOR
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new GeneratorCore(generators, FluffyItems.GENERATOR_CORE,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 new ItemStack(Material.IRON_INGOT), new ItemStack(Material.IRON_INGOT), new ItemStack(Material.IRON_INGOT),
                 new ItemStack(Material.IRON_INGOT), SlimefunItems.ELECTRO_MAGNET, new ItemStack(Material.IRON_INGOT),
                 new ItemStack(Material.IRON_INGOT), advancedCircuitBoard, new ItemStack(Material.IRON_INGOT)
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new SuperheatedFurnace(multiblocks, FluffyItems.SUPERHEATED_FURNACE,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
@@ -348,7 +309,7 @@ public final class FluffyItemSetup {
                 new ItemStack(Material.LAVA_BUCKET), new ItemStack(Material.BLAST_FURNACE),
                 new ItemStack(Material.LAVA_BUCKET),
                 new ItemStack(Material.OBSIDIAN), new ItemStack(Material.OBSIDIAN), new ItemStack(Material.OBSIDIAN)
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         // Misc
         new HelicopterHat(misc, FluffyItems.HELICOPTER_HAT,
@@ -356,34 +317,34 @@ public final class FluffyItemSetup {
                 new ItemStack(Material.IRON_INGOT), new ItemStack(Material.IRON_INGOT), new ItemStack(Material.IRON_INGOT),
                 advancedCircuitBoard, new ItemStack(Material.LEATHER_HELMET), advancedCircuitBoard,
                 SlimefunItems.COMPRESSED_CARBON, SlimefunItems.ELECTRIC_MOTOR, SlimefunItems.COMPRESSED_CARBON
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new FireproofRune(misc, FluffyItems.FIREPROOF_RUNE,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.SYNTHETIC_EMERALD, new ItemStack(Material.NETHERITE_INGOT), SlimefunItems.SYNTHETIC_EMERALD,
                 new ItemStack(Material.OBSIDIAN), SlimefunItems.FIRE_RUNE, new ItemStack(Material.OBSIDIAN),
                 SlimefunItems.SYNTHETIC_EMERALD, new ItemStack(Material.OBSIDIAN), SlimefunItems.SYNTHETIC_EMERALD
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new EnderChestInsertionNode(cargo, FluffyItems.ENDER_CHEST_INSERTION_NODE,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.ENDER_LUMP_2, SlimefunItems.BASIC_CIRCUIT_BOARD, SlimefunItems.ENDER_LUMP_2,
                 new ItemStack(Material.DISPENSER), new ItemStack(Material.ENDER_PEARL), new ItemStack(Material.HOPPER),
                 SlimefunItems.ENDER_LUMP_2, SlimefunItems.BASIC_CIRCUIT_BOARD, SlimefunItems.ENDER_LUMP_2
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new EnderChestExtractionNode(cargo, FluffyItems.ENDER_CHEST_EXTRACTION_NODE,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.ENDER_LUMP_2, SlimefunItems.BASIC_CIRCUIT_BOARD, SlimefunItems.ENDER_LUMP_2,
                 new ItemStack(Material.HOPPER), new ItemStack(Material.ENDER_PEARL), new ItemStack(Material.DISPENSER),
                 SlimefunItems.ENDER_LUMP_2, SlimefunItems.BASIC_CIRCUIT_BOARD, SlimefunItems.ENDER_LUMP_2
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new Dolly(misc, FluffyItems.DOLLY, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 new ItemStack(Material.LEATHER), new ItemStack(Material.LEATHER), new ItemStack(Material.LEATHER),
                 new ItemStack(Material.IRON_INGOT), new ItemStack(Material.MINECART), new ItemStack(Material.IRON_INGOT),
                 new ItemStack(Material.IRON_INGOT), new ItemStack(Material.IRON_INGOT), new ItemStack(Material.IRON_INGOT)
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new SlimefunItem(misc, FluffyItems.ANCIENT_BOOK,
                 RecipeType.ANCIENT_ALTAR, new ItemStack[]{
@@ -391,21 +352,21 @@ public final class FluffyItemSetup {
                 SlimefunItems.FILLED_FLASK_OF_KNOWLEDGE, SlimefunItems.ENCHANTMENT_RUNE,
                 SlimefunItems.FILLED_FLASK_OF_KNOWLEDGE,
                 new ItemStack(Material.BOOK), SlimefunItems.FILLED_FLASK_OF_KNOWLEDGE, new ItemStack(Material.BOOK)
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new WarpPad(misc, FluffyItems.WARP_PAD,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 new ItemStack(Material.ENDER_EYE), new ItemStack(Material.ENDER_EYE), new ItemStack(Material.ENDER_EYE),
                 new ItemStack(Material.ENDER_EYE), SlimefunItems.GPS_TELEPORTER_PYLON, new ItemStack(Material.ENDER_EYE),
                 new ItemStack(Material.ENDER_EYE), new ItemStack(Material.ENDER_EYE), new ItemStack(Material.ENDER_EYE)
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new WarpPadConfigurator(misc, FluffyItems.WARP_PAD_CONFIGURATOR,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 null, new ItemStack(Material.ENDER_EYE), null,
                 null, SlimefunItems.MAGNESIUM_INGOT, null,
                 null, SlimefunItems.MAGNESIUM_INGOT, null
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new ElectricDustFabricator(machines, FluffyItems.ELECTRIC_DUST_FABRICATOR,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
@@ -413,7 +374,7 @@ public final class FluffyItemSetup {
                 SlimefunItems.ELECTRIC_ORE_GRINDER_2,
                 SlimefunItems.ELECTRIC_GOLD_PAN_3, SlimefunItems.BLISTERING_INGOT_3, SlimefunItems.ELECTRIC_GOLD_PAN_3,
                 SlimefunItems.ELECTRIC_MOTOR, SlimefunItems.ELECTRIC_DUST_WASHER_3, SlimefunItems.ELECTRIC_MOTOR
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new ElectricDustRecycler(machines, FluffyItems.ELECTRIC_DUST_RECYCLER,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
@@ -421,7 +382,7 @@ public final class FluffyItemSetup {
                 new ItemStack(Material.LAVA_BUCKET), SlimefunItems.ELECTRIFIED_CRUCIBLE_3,
                 new ItemStack(Material.LAVA_BUCKET),
                 SlimefunItems.ELECTRIC_MOTOR, new ItemStack(Material.PISTON), SlimefunItems.ELECTRIC_MOTOR
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new AlternateElevatorPlate(misc, FluffyItems.ALTERNATE_ELEVATOR_PLATE,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
@@ -430,35 +391,34 @@ public final class FluffyItemSetup {
                 SlimefunItems.ALUMINUM_BRONZE_INGOT, SlimefunItems.ALUMINUM_BRONZE_INGOT,
                 SlimefunItems.ALUMINUM_BRONZE_INGOT},
                 new SlimefunItemStack(FluffyItems.ALTERNATE_ELEVATOR_PLATE, 2)
-        ).register(plugin);
+        ).register(SlimefunAddonInstance.getSFAInstance());
 
         new AdvancedChargingBench(machines, FluffyItems.ADVANCED_CHARGING_BENCH,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.CORINTHIAN_BRONZE_INGOT, advancedCircuitBoard, SlimefunItems.CORINTHIAN_BRONZE_INGOT,
                 advancedCircuitBoard, SlimefunItems.CHARGING_BENCH, advancedCircuitBoard,
                 SlimefunItems.ELECTRIC_MOTOR, SlimefunItems.SMALL_CAPACITOR, SlimefunItems.ELECTRIC_MOTOR
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new ACBUpgradeCard(machines, FluffyItems.ACB_UPGRADE_CARD,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.CORINTHIAN_BRONZE_INGOT, advancedCircuitBoard, SlimefunItems.CORINTHIAN_BRONZE_INGOT,
                 advancedCircuitBoard, SlimefunItems.ELECTRIC_MOTOR, advancedCircuitBoard,
                 SlimefunItems.GOLD_24K, SlimefunItems.SMALL_CAPACITOR, SlimefunItems.GOLD_24K
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new CargoManipulator(cargo, FluffyItems.CARGO_MANIPULATOR,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.CARGO_MOTOR, new ItemStack(Material.ENDER_EYE), SlimefunItems.ELECTRIC_MOTOR,
                 new ItemStack(Material.ENDER_EYE), new ItemStack(Material.COMPASS), new ItemStack(Material.ENDER_EYE),
                 SlimefunItems.ELECTRIC_MOTOR, new ItemStack(Material.ENDER_EYE), SlimefunItems.CARGO_MOTOR
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new SmartFactory(machines, FluffyItems.SMART_FACTORY,
                 RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.CARGO_MOTOR, SlimefunItems.ELECTRIC_SMELTERY_2, SlimefunItems.CARGO_MOTOR,
                 SlimefunItems.ENHANCED_AUTO_CRAFTER, SlimefunItems.CARBON_PRESS_3, SlimefunItems.VANILLA_AUTO_CRAFTER,
                 SlimefunItems.CRAFTING_MOTOR, SlimefunItems.ELECTRIC_INGOT_FACTORY_3, SlimefunItems.CRAFTING_MOTOR
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/FluffyMachines.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/FluffyMachines.java
new file mode 100644
index 0000000..c1e46a1
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/FluffyMachines.java
@@ -0,0 +1,125 @@
+package id.universenetwork.sfa_loader.addons.fluffymachines;
+
+import id.universenetwork.sfa_loader.addons.fluffymachines.listeners.KeyedCrafterListener;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Constants;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.EventUtils;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.GlowEnchant;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.McMMOEvents;
+import id.universenetwork.sfa_loader.annotations.AddonLibrary;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Events;
+import id.universenetwork.sfa_loader.template.AddonTemplate;
+import id.universenetwork.sfa_loader.utils.LogUtils;
+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.collections.Pair;
+import lombok.SneakyThrows;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.enchantments.Enchantment;
+import org.bukkit.inventory.*;
+
+import java.lang.reflect.Field;
+import java.util.*;
+
+@AddonLibrary(
+        groupId = "com{}github{}Slimefun-Addon-Community",
+        artifactId = "extrautils",
+        version = "73e76ac",
+        packageRelocation = "dev{}j3fftw{}extrautils"
+)
+public class FluffyMachines extends AddonTemplate {
+    private static FluffyMachines instance;
+    public static final HashMap<ItemStack, List<Pair<ItemStack, List<RecipeChoice>>>> shapedVanillaRecipes = new HashMap<>();
+    public static final HashMap<ItemStack, List<Pair<ItemStack, List<RecipeChoice>>>> shapelessVanillaRecipes =
+            new HashMap<>();
+
+    @SneakyThrows
+    @Override
+    public void onLoad() {
+        instance = this;
+
+        // Register Glow
+        try {
+            if (!Enchantment.isAcceptingRegistrations()) {
+                Field accepting = Enchantment.class.getDeclaredField("acceptingNew");
+                accepting.setAccessible(true);
+                accepting.set(null, true);
+            }
+        } catch (IllegalAccessException | NoSuchFieldException e) {
+            LogUtils.warning("Failed to register enchantment.");
+        }
+
+        registerGlow();
+
+        // Register ACT Recipes
+        Iterator<Recipe> recipeIterator = Bukkit.recipeIterator();
+        while (recipeIterator.hasNext()) {
+            Recipe r = recipeIterator.next();
+
+            if (r instanceof ShapedRecipe) {
+                ShapedRecipe sr = (ShapedRecipe) r;
+                List<RecipeChoice> rc = new ArrayList<>();
+                ItemStack key = new ItemStack(sr.getResult().getType(), 1);
+
+                // Convert the recipe to a list
+                for (Map.Entry<Character, RecipeChoice> choice : sr.getChoiceMap().entrySet())
+                    if (choice.getValue() != null) rc.add(choice.getValue());
+
+                if (!shapedVanillaRecipes.containsKey(key)) shapedVanillaRecipes.put(key,
+                        new ArrayList<>(Collections.singletonList(new Pair<>(sr.getResult(), rc))));
+                else shapedVanillaRecipes.get(key).add(new Pair<>(sr.getResult(), rc));
+
+            } else if (r instanceof ShapelessRecipe) {
+                ShapelessRecipe slr = (ShapelessRecipe) r;
+                ItemStack key = new ItemStack(slr.getResult().getType(), 1);
+
+                // Key has a list of recipe options
+                if (!shapelessVanillaRecipes.containsKey(key)) {
+                    shapelessVanillaRecipes.put(key,
+                            new ArrayList<>(Collections.singletonList(new Pair<>(slr.getResult(), slr.getChoiceList()))));
+                } else shapelessVanillaRecipes.get(key).add(new Pair<>(slr.getResult(), slr.getChoiceList()));
+            }
+        }
+
+        // Register McMMO Events
+        if (Bukkit.getPluginManager().isPluginEnabled("McMMO")) {
+            LogUtils.info("McMMO found!");
+            Events.registerListener(new McMMOEvents());
+        }
+
+        // Registering Items
+        FluffyItemSetup.setup();
+        FluffyItemSetup.setupBarrels();
+
+        // Register Events Class
+        Events.registerListener(new EventUtils(), new KeyedCrafterListener());
+
+        LogUtils.info(ChatColor.GREEN + "Hi there! Want to share your server with the " +
+                "Slimefun community?");
+        LogUtils.info(ChatColor.GREEN + "Join the official Slimefun Discord server at " +
+                "https://discord.gg/slimefun");
+    }
+
+    private void saveAllPlayers() {
+        Iterator<PlayerProfile> iterator = PlayerProfile.iterator();
+        int players = 0;
+
+        while (iterator.hasNext()) {
+            PlayerProfile profile = iterator.next();
+
+            profile.save();
+            players++;
+        }
+
+        if (players > 0) LogUtils.info("Auto-saved all player data for " + players + " player(s)!");
+    }
+
+    private void registerGlow() {
+        Enchantment glowEnchantment = new GlowEnchant(Constants.GLOW_ENCHANT, new String[]{
+                "SMALL_PORTABLE_CHARGER", "MEDIUM_PORTABLE_CHARGER", "BIG_PORTABLE_CHARGER",
+                "LARGE_PORTABLE_CHARGER", "CARBONADO_PORTABLE_CHARGER", "PAXEL"
+        });
+
+        // Prevent double-registration errors
+        if (Enchantment.getByKey(glowEnchantment.getKey()) == null) Enchantment.registerEnchantment(glowEnchantment);
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/Barrel.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/Barrel.java
similarity index 97%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/Barrel.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/Barrel.java
index 290f598..e72281c 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/Barrel.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/Barrel.java
@@ -1,10 +1,9 @@
-package io.ncbpfluffybear.fluffymachines.items;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items;
 
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemHandler;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import id.universenetwork.sfa_loader.addons.fluffymachines.objects.DoubleHologramOwner;
+import id.universenetwork.sfa_loader.addons.fluffymachines.objects.NonHopperableBlock;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
+import io.github.thebusybiscuit.slimefun4.api.items.*;
 import io.github.thebusybiscuit.slimefun4.api.items.settings.IntRangeSetting;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;
@@ -12,14 +11,6 @@ import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
-import io.ncbpfluffybear.fluffymachines.objects.DoubleHologramOwner;
-import io.ncbpfluffybear.fluffymachines.objects.NonHopperableBlock;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
-import java.text.DecimalFormat;
-import java.text.DecimalFormatSymbols;
-import java.util.List;
-import java.util.Locale;
-import javax.annotation.Nonnull;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
 import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
@@ -40,6 +31,12 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.PlayerInventory;
 import org.bukkit.util.Vector;
 
+import javax.annotation.Nonnull;
+import java.text.DecimalFormat;
+import java.text.DecimalFormatSymbols;
+import java.util.List;
+import java.util.Locale;
+
 /**
  * A Remake of Barrels by John000708
  *
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/EnderChestExtractionNode.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/EnderChestExtractionNode.java
similarity index 91%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/EnderChestExtractionNode.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/EnderChestExtractionNode.java
index 9e55659..743279a 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/EnderChestExtractionNode.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/EnderChestExtractionNode.java
@@ -1,26 +1,21 @@
-package io.ncbpfluffybear.fluffymachines.items;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockPlaceHandler;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockUseHandler;
 import io.github.thebusybiscuit.slimefun4.implementation.items.magical.talismans.Talisman;
 import io.github.thebusybiscuit.slimefun4.libraries.paperlib.PaperLib;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
 import org.bukkit.Tag;
-import org.bukkit.block.Block;
-import org.bukkit.block.BlockFace;
-import org.bukkit.block.BlockState;
-import org.bukkit.block.Container;
-import org.bukkit.block.EnderChest;
-import org.bukkit.block.ShulkerBox;
+import org.bukkit.block.*;
 import org.bukkit.entity.Player;
 import org.bukkit.event.block.BlockPlaceEvent;
 import org.bukkit.inventory.Inventory;
@@ -155,7 +150,7 @@ public class EnderChestExtractionNode extends SlimefunItem {
                     BlockStorage.addBlockInfo(b, "owner", p.getUniqueId().toString());
                     BlockStorage.addBlockInfo(b, "playername", p.getDisplayName());
                     Utils.send(p, "&aEnder Chest Extraction Node registered to " + p.getDisplayName()
-                        + " &7(UUID: " + p.getUniqueId() + ")");
+                            + " &7(UUID: " + p.getUniqueId() + ")");
                 }
             }
         };
@@ -166,8 +161,8 @@ public class EnderChestExtractionNode extends SlimefunItem {
             Player p = e.getPlayer();
             Block b = e.getClickedBlock().get();
             Utils.send(p, "&eThis Ender Chest Extraction Node belongs to " +
-                BlockStorage.getLocationInfo(b.getLocation(), "playername")
-                + " &7(UUID: " + BlockStorage.getLocationInfo(b.getLocation(), "owner") + ")");
+                    BlockStorage.getLocationInfo(b.getLocation(), "playername")
+                    + " &7(UUID: " + BlockStorage.getLocationInfo(b.getLocation(), "owner") + ")");
         };
     }
 }
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/EnderChestInsertionNode.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/EnderChestInsertionNode.java
similarity index 90%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/EnderChestInsertionNode.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/EnderChestInsertionNode.java
index b8c2d50..d296ecc 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/EnderChestInsertionNode.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/EnderChestInsertionNode.java
@@ -1,23 +1,19 @@
-package io.ncbpfluffybear.fluffymachines.items;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockPlaceHandler;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockUseHandler;
 import io.github.thebusybiscuit.slimefun4.libraries.paperlib.PaperLib;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
-import org.bukkit.block.Block;
-import org.bukkit.block.BlockFace;
-import org.bukkit.block.BlockState;
-import org.bukkit.block.Container;
-import org.bukkit.block.EnderChest;
+import org.bukkit.block.*;
 import org.bukkit.entity.Player;
 import org.bukkit.event.block.BlockPlaceEvent;
 import org.bukkit.inventory.Inventory;
@@ -136,7 +132,7 @@ public class EnderChestInsertionNode extends SlimefunItem {
                     BlockStorage.addBlockInfo(b, "owner", p.getUniqueId().toString());
                     BlockStorage.addBlockInfo(b, "playername", p.getDisplayName());
                     Utils.send(p, "&aEnder Chest Insertion Node registered to " + p.getDisplayName()
-                        + " &7(UUID: " + p.getUniqueId() + ")");
+                            + " &7(UUID: " + p.getUniqueId() + ")");
                 }
             }
         };
@@ -147,8 +143,8 @@ public class EnderChestInsertionNode extends SlimefunItem {
             Player p = e.getPlayer();
             Block b = e.getClickedBlock().get();
             Utils.send(p, "&eThis Ender Chest Insertion Node belongs to " +
-                BlockStorage.getLocationInfo(b.getLocation(), "playername")
-                + " &7(UUID: " + BlockStorage.getLocationInfo(b.getLocation(), "owner") + ")");
+                    BlockStorage.getLocationInfo(b.getLocation(), "playername")
+                    + " &7(UUID: " + BlockStorage.getLocationInfo(b.getLocation(), "owner") + ")");
         };
     }
 }
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/FireproofRune.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/FireproofRune.java
similarity index 82%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/FireproofRune.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/FireproofRune.java
index 7ebc158..1bc7244 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/FireproofRune.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/FireproofRune.java
@@ -1,17 +1,14 @@
-package io.ncbpfluffybear.fluffymachines.items;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items;
 
-import io.github.thebusybiscuit.slimefun4.core.handlers.ItemDropHandler;
-import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
-import io.ncbpfluffybear.fluffymachines.FluffyMachines;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Scheduler;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import org.bukkit.ChatColor;
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
-import org.bukkit.Sound;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemDropHandler;
+import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
+import org.bukkit.*;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Item;
 import org.bukkit.entity.Player;
@@ -41,9 +38,8 @@ import java.util.Optional;
  */
 
 public class FireproofRune extends SimpleSlimefunItem<ItemDropHandler> {
-
     private static final double RANGE = 1.5;
-    private static final NamespacedKey FIREPROOF_KEY = new NamespacedKey(FluffyMachines.getInstance(), "fireproof");
+    private static final NamespacedKey FIREPROOF_KEY = AbstractAddon.createKey("fireproof");
     private static final String FIREPROOF_LORE = ChatColor.RED + "Fireproof";
 
 
@@ -57,11 +53,9 @@ public class FireproofRune extends SimpleSlimefunItem<ItemDropHandler> {
         return (e, p, item) -> {
             if (isItem(item.getItemStack())) {
 
-                if (!this.canUse(p, true)) {
-                    return true;
-                }
+                if (!this.canUse(p, true)) return true;
 
-                Utils.runSync(() -> activate(p, item), 20L);
+                Scheduler.run(20L, () -> activate(p, item));
 
                 return true;
             }
@@ -70,9 +64,7 @@ public class FireproofRune extends SimpleSlimefunItem<ItemDropHandler> {
     }
 
     private void activate(Player p, Item rune) {
-        if (!rune.isValid()) {
-            return;
-        }
+        if (!rune.isValid()) return;
 
         Location l = rune.getLocation();
         Collection<Entity> entities = l.getWorld().getNearbyEntities(l, RANGE, RANGE, RANGE, this::findCompatibleItem);
@@ -86,7 +78,7 @@ public class FireproofRune extends SimpleSlimefunItem<ItemDropHandler> {
                 // This lightning is just an effect, it deals no damage.
                 l.getWorld().strikeLightningEffect(l);
 
-                Utils.runSync(() -> {
+                Scheduler.run(10L, () -> {
                     // Being sure entities are still valid and not picked up or whatsoever.
                     if (rune.isValid() && item.isValid() && itemStack.getAmount() == 1) {
 
@@ -100,13 +92,9 @@ public class FireproofRune extends SimpleSlimefunItem<ItemDropHandler> {
                         l.getWorld().dropItemNaturally(l, itemStack);
 
                         Utils.send(p, "&aYour item is now fireproof");
-                    } else {
-                        Utils.send(p, "&cYour item could not be made fireproof");
-                    }
-                }, 10L);
-            } else {
-                Utils.send(p, "&cYour item could not be made fireproof");
-            }
+                    } else Utils.send(p, "&cYour item could not be made fireproof");
+                });
+            } else Utils.send(p, "&cYour item could not be made fireproof");
         }
     }
 
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/HelicopterHat.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/HelicopterHat.java
similarity index 88%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/HelicopterHat.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/HelicopterHat.java
index 5ff800e..3871a77 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/HelicopterHat.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/HelicopterHat.java
@@ -1,9 +1,9 @@
-package io.ncbpfluffybear.fluffymachines.items;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items;
 
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import org.bukkit.inventory.ItemStack;
 
 public class HelicopterHat extends SlimefunItem {
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/MiniBarrel.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/MiniBarrel.java
similarity index 96%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/MiniBarrel.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/MiniBarrel.java
index 2b9fa10..f80109b 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/MiniBarrel.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/MiniBarrel.java
@@ -1,5 +1,6 @@
-package io.ncbpfluffybear.fluffymachines.items;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -8,8 +9,6 @@ import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import io.github.thebusybiscuit.slimefun4.utils.ChatUtils;
 import io.github.thebusybiscuit.slimefun4.utils.NumberUtils;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
-import javax.annotation.Nonnull;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import org.bukkit.Material;
@@ -17,6 +16,8 @@ import org.bukkit.block.Block;
 import org.bukkit.event.block.BlockPlaceEvent;
 import org.bukkit.inventory.ItemStack;
 
+import javax.annotation.Nonnull;
+
 public class MiniBarrel extends Barrel {
     private static final int MAX_STORAGE = 172800;
 
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/ACBUpgradeCard.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/ACBUpgradeCard.java
similarity index 92%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/ACBUpgradeCard.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/ACBUpgradeCard.java
index abee657..a5b0392 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/ACBUpgradeCard.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/ACBUpgradeCard.java
@@ -1,15 +1,15 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
-import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
-import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
-import io.ncbpfluffybear.fluffymachines.utils.FluffyItems;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.FluffyItems;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemHandler;
-import me.mrCookieSlime.Slimefun.api.BlockStorage;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
+import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
+import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Player;
 import org.bukkit.inventory.EquipmentSlot;
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/AlternateBreakEvent.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/AlternateBreakEvent.java
similarity index 77%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/AlternateBreakEvent.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/AlternateBreakEvent.java
index 0f1c7f2..ed7bfdb 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/AlternateBreakEvent.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/AlternateBreakEvent.java
@@ -1,4 +1,4 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
 import org.bukkit.block.Block;
 import org.bukkit.entity.Player;
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/CargoManipulator.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/CargoManipulator.java
similarity index 97%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/CargoManipulator.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/CargoManipulator.java
index 538b231..f6833fd 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/CargoManipulator.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/CargoManipulator.java
@@ -1,5 +1,7 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Events;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -13,14 +15,8 @@ import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import io.github.thebusybiscuit.slimefun4.libraries.unirest.json.JSONObject;
 import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
-import io.ncbpfluffybear.fluffymachines.FluffyMachines;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
-import java.util.HashMap;
-import java.util.Map;
-import javax.annotation.Nonnull;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
-import org.bukkit.Bukkit;
 import org.bukkit.Color;
 import org.bukkit.Particle;
 import org.bukkit.block.Block;
@@ -33,6 +29,10 @@ import org.bukkit.event.player.PlayerInteractEvent;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.ItemStack;
 
+import javax.annotation.Nonnull;
+import java.util.HashMap;
+import java.util.Map;
+
 /**
  * used to quickly manipulate cargo nodes
  *
@@ -46,7 +46,7 @@ public class CargoManipulator extends SimpleSlimefunItem<ItemUseHandler> impleme
     public CargoManipulator(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(category, item, recipeType, recipe);
 
-        Bukkit.getPluginManager().registerEvents(this, FluffyMachines.getInstance());
+        Events.registerListener(this);
     }
 
     @Nonnull
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/Dolly.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/Dolly.java
similarity index 82%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/Dolly.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/Dolly.java
index 5f45ecc..d5631eb 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/Dolly.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/Dolly.java
@@ -1,5 +1,7 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Scheduler;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.player.PlayerBackpack;
@@ -9,7 +11,6 @@ import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
@@ -32,7 +33,6 @@ import java.util.Map;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 public class Dolly extends SimpleSlimefunItem<ItemUseHandler> {
-
     private static final ItemStack LOCK_ITEM = Utils.buildNonInteractable(
             Material.DIRT, "&4&lDolly empty", "&cHow did you get in here?"
     );
@@ -62,20 +62,15 @@ public class Dolly extends SimpleSlimefunItem<ItemUseHandler> {
 
             ItemStack dolly = e.getItem();
 
-            if (!e.getClickedBlock().isPresent()) {
-                return;
-            }
+            if (!e.getClickedBlock().isPresent()) return;
 
             Block b = e.getClickedBlock().get();
 
             // Block usage on Slimefun Blocks
-            if (BlockStorage.hasBlockInfo(b)) {
-                return;
-            }
+            if (BlockStorage.hasBlockInfo(b)) return;
 
             if (b.getType() == Material.CHEST && Slimefun.getProtectionManager().hasPermission(
-                    e.getPlayer(), b.getLocation(), Interaction.BREAK_BLOCK)
-            ) {
+                    e.getPlayer(), b.getLocation(), Interaction.BREAK_BLOCK)) {
 
                 // Create dolly if not already one
                 buildDolly(dolly, p);
@@ -83,14 +78,9 @@ public class Dolly extends SimpleSlimefunItem<ItemUseHandler> {
                 // Pick up the chest
                 pickupChest(dolly, b, p);
 
-
-            } else if (Slimefun.getProtectionManager().hasPermission(
-                    e.getPlayer(), b.getLocation(), Interaction.PLACE_BLOCK)
-            ) {
-
-                // Place new chest
-                placeChest(dolly, b.getRelative(e.getClickedFace()), p);
-            }
+            } else // Place new chest
+                if (Slimefun.getProtectionManager().hasPermission(e.getPlayer(), b.getLocation(), Interaction.PLACE_BLOCK))
+                    placeChest(dolly, b.getRelative(e.getClickedFace()), p);
 
         };
     }
@@ -98,15 +88,12 @@ public class Dolly extends SimpleSlimefunItem<ItemUseHandler> {
     private void buildDolly(ItemStack dolly, Player p) {
         // Build backpack if new
         ItemMeta dollyMeta = dolly.getItemMeta();
-        for (String line : dollyMeta.getLore()) {
-            if (line.contains("ID: <ID>")) {
-                PlayerProfile.get(p, profile -> {
-                    int backpackId = profile.createBackpack(54).getId();
-                    Slimefun.getBackpackListener().setBackpackId(p, dolly, 3, backpackId);
-                    PlayerProfile.getBackpack(dolly, backpack -> backpack.getInventory().setItem(0, LOCK_ITEM));
-                });
-            }
-        }
+        for (String line : dollyMeta.getLore())
+            if (line.contains("ID: <ID>")) PlayerProfile.get(p, profile -> {
+                int backpackId = profile.createBackpack(54).getId();
+                Slimefun.getBackpackListener().setBackpackId(p, dolly, 3, backpackId);
+                PlayerProfile.getBackpack(dolly, backpack -> backpack.getInventory().setItem(0, LOCK_ITEM));
+            });
     }
 
     private void pickupChest(ItemStack dolly, Block chest, Player p) {
@@ -115,10 +102,7 @@ public class Dolly extends SimpleSlimefunItem<ItemUseHandler> {
         AtomicBoolean isDoubleChest = new AtomicBoolean(false);
 
         PlayerProfile.getBackpack(dolly, backpack -> {
-
-            if (backpack == null) {
-                return;
-            }
+            if (backpack == null) return;
 
             // Dolly full/empty status determined by lock item in first slot
             // Make sure the dolly is empty
@@ -128,18 +112,14 @@ public class Dolly extends SimpleSlimefunItem<ItemUseHandler> {
             }
 
             // Update old dollies to be able to store double chests
-            if (backpack.getSize() < 54) {
-                backpack.setSize(54);
-            }
+            if (backpack.getSize() < 54) backpack.setSize(54);
 
             backpack.getInventory().setStorageContents(chestInventory.getContents());
 
             // Add marker for single chests
-            if (chestInventory.getSize() == 54) { // Double chest (Avoid instanceof because of weird chest class setup)
-                isDoubleChest.set(true);
-            } else {
-                backpack.getInventory().setItem(27, LOCK_ITEM);
-            }
+            // Double chest (Avoid instanceof because of weird chest class setup)
+            if (chestInventory.getSize() == 54) isDoubleChest.set(true);
+            else backpack.getInventory().setItem(27, LOCK_ITEM);
 
             // Clear chest
             chestInventory.clear();
@@ -151,17 +131,13 @@ public class Dolly extends SimpleSlimefunItem<ItemUseHandler> {
         // Deals with async problems
         if (validOperation.get()) {
             if (isDoubleChest.get()) {
-
                 DoubleChest doubleChest = (DoubleChest) ((org.bukkit.block.Chest) chest.getState()).getInventory().getHolder();
 
                 // Set other side of chest to air
-                if (((org.bukkit.block.Chest) doubleChest.getLeftSide()).getLocation().equals(chest.getLocation())
-                ) {
+                if (((org.bukkit.block.Chest) doubleChest.getLeftSide()).getLocation().equals(chest.getLocation()))
                     ((org.bukkit.block.Chest) doubleChest.getRightSide()).getLocation().getBlock().setType(Material.AIR);
-                } else {
+                else
                     ((org.bukkit.block.Chest) doubleChest.getLeftSide()).getLocation().getBlock().setType(Material.AIR);
-                }
-
             }
 
             chest.setType(Material.AIR);
@@ -172,10 +148,7 @@ public class Dolly extends SimpleSlimefunItem<ItemUseHandler> {
 
     private void placeChest(ItemStack dolly, Block chestBlock, Player p) {
         PlayerProfile.getBackpack(dolly, backpack -> {
-
-            if (backpack == null) {
-                return;
-            }
+            if (backpack == null) return;
 
             // Update backpack size to fit doublechests
             if (backpack.getSize() == 27) {
@@ -196,7 +169,7 @@ public class Dolly extends SimpleSlimefunItem<ItemUseHandler> {
                 return;
             }
 
-            Utils.runSync(new BukkitRunnable() {
+            Scheduler.run(new BukkitRunnable() {
                 @Override
                 public void run() {
                     createChest(chestBlock, p, singleChest);
@@ -204,9 +177,7 @@ public class Dolly extends SimpleSlimefunItem<ItemUseHandler> {
                     backpack.getInventory().setItem(0, LOCK_ITEM);
 
                     // Shrink contents size if single chest
-                    if (singleChest) {
-                        bpContents[0] = Arrays.copyOf(bpContents[0], 27);
-                    }
+                    if (singleChest) bpContents[0] = Arrays.copyOf(bpContents[0], 27);
 
                     ((InventoryHolder) chestBlock.getState()).getInventory().setStorageContents(bpContents[0]);
                     dolly.setType(Material.MINECART);
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/FluffyWrench.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/FluffyWrench.java
similarity index 87%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/FluffyWrench.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/FluffyWrench.java
index 30c1403..affb739 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/FluffyWrench.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/FluffyWrench.java
@@ -1,22 +1,21 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Events;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.DamageableItem;
 import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetComponent;
 import io.github.thebusybiscuit.slimefun4.core.attributes.Rechargeable;
 import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
 import io.github.thebusybiscuit.slimefun4.core.networks.cargo.CargoNet;
-import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
 import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
 import io.github.thebusybiscuit.slimefun4.implementation.items.cargo.TrashCan;
-import io.ncbpfluffybear.fluffymachines.FluffyMachines;
-import io.ncbpfluffybear.fluffymachines.utils.Constants;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
+import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
@@ -50,7 +49,7 @@ public class FluffyWrench extends SimpleSlimefunItem<ItemUseHandler> implements
         super(category, item, recipeType, recipe);
         this.type = type;
 
-        Bukkit.getPluginManager().registerEvents(this, FluffyMachines.getInstance());
+        Events.registerListener(this);
     }
 
     @Nonnull
@@ -77,19 +76,19 @@ public class FluffyWrench extends SimpleSlimefunItem<ItemUseHandler> implements
         // Check if player has wrench and is left clicking block
         // Can't use offhand because a player can offhand the wrench to escape the event
         if (isItem(e.getItem()) && !isItem(p.getInventory().getItemInOffHand())
-            && e.getAction().toString().endsWith("_BLOCK")
-            && Slimefun.getProtectionManager().hasPermission(e.getPlayer(),
-            block.getLocation(), Interaction.BREAK_BLOCK)
+                && e.getAction().toString().endsWith("_BLOCK")
+                && Slimefun.getProtectionManager().hasPermission(e.getPlayer(),
+                block.getLocation(), Interaction.BREAK_BLOCK)
         ) {
             e.setCancelled(true);
             SlimefunItem slimefunBlock = BlockStorage.check(block);
 
             // Check if slimefunBlock is not a machine or a cargo component
             if (slimefunBlock == null
-                || (!(slimefunBlock instanceof EnergyNetComponent)
-                && !slimefunBlock.getId().startsWith("CARGO_NODE")
-                && !slimefunBlock.getId().equals(SlimefunItems.CARGO_MANAGER.getItemId())
-                && !(slimefunBlock instanceof TrashCan))
+                    || (!(slimefunBlock instanceof EnergyNetComponent)
+                    && !slimefunBlock.getId().startsWith("CARGO_NODE")
+                    && !slimefunBlock.getId().equals(SlimefunItems.CARGO_MANAGER.getItemId())
+                    && !(slimefunBlock instanceof TrashCan))
             ) {
                 return;
             }
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/Paxel.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/Paxel.java
similarity index 76%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/Paxel.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/Paxel.java
index d0c5334..faa5bd7 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/Paxel.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/Paxel.java
@@ -1,19 +1,13 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.FluffyItems;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Events;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;
 import io.github.thebusybiscuit.slimefun4.utils.tags.SlimefunTag;
-import io.ncbpfluffybear.fluffymachines.FluffyMachines;
-import io.ncbpfluffybear.fluffymachines.utils.FluffyItems;
-import java.util.Arrays;
-import java.util.HashSet;
-import java.util.Set;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
-import org.bukkit.Bukkit;
 import org.bukkit.Material;
 import org.bukkit.Tag;
 import org.bukkit.block.Block;
@@ -24,6 +18,12 @@ import org.bukkit.event.block.BlockDamageEvent;
 import org.bukkit.event.entity.EntityDamageByEntityEvent;
 import org.bukkit.inventory.ItemStack;
 
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.Set;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
 public class Paxel extends SlimefunItem implements Listener, NotPlaceable {
 
     public final Set<Material> axeBlocks = Stream.of(
@@ -51,7 +51,7 @@ public class Paxel extends SlimefunItem implements Listener, NotPlaceable {
     public Paxel(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(category, item, recipeType, recipe);
 
-        Bukkit.getPluginManager().registerEvents(this, FluffyMachines.getInstance());
+        Events.registerListener(this);
     }
 
     @EventHandler(ignoreCancelled = true)
@@ -69,37 +69,24 @@ public class Paxel extends SlimefunItem implements Listener, NotPlaceable {
             if (item.getType() == Material.NETHERITE_PICKAXE
                     || item.getType() == Material.NETHERITE_AXE
                     || item.getType() == Material.NETHERITE_SHOVEL
-            ) {
-                netherite = true;
-            }
+            ) netherite = true;
 
             if (SlimefunTag.EXPLOSIVE_SHOVEL_BLOCKS.isTagged(blockType)) {
-                if (netherite) {
-                    item.setType(Material.NETHERITE_SHOVEL);
-                } else {
-                    item.setType(Material.DIAMOND_SHOVEL);
-                }
+                if (netherite) item.setType(Material.NETHERITE_SHOVEL);
+                else item.setType(Material.DIAMOND_SHOVEL);
             } else if (axeBlocks.contains(blockType)) {
-                if (netherite) {
-                    item.setType(Material.NETHERITE_AXE);
-                } else {
-                    item.setType(Material.DIAMOND_AXE);
-                }
+                if (netherite) item.setType(Material.NETHERITE_AXE);
+                else item.setType(Material.DIAMOND_AXE);
             } else {
-                if (netherite) {
-                    item.setType(Material.NETHERITE_PICKAXE);
-                } else {
-                    item.setType(Material.DIAMOND_PICKAXE);
-                }
+                if (netherite) item.setType(Material.NETHERITE_PICKAXE);
+                else item.setType(Material.DIAMOND_PICKAXE);
             }
         }
     }
 
     @EventHandler(ignoreCancelled = true)
     private void onEntityHit(EntityDamageByEntityEvent e) {
-        if (!(e.getDamager() instanceof Player)) {
-            return;
-        }
+        if (!(e.getDamager() instanceof Player)) return;
 
         Player p = (Player) e.getDamager();
         ItemStack item = p.getInventory().getItemInMainHand();
@@ -111,12 +98,8 @@ public class Paxel extends SlimefunItem implements Listener, NotPlaceable {
                     || item.getType() == Material.NETHERITE_AXE
                     || item.getType() == Material.NETHERITE_SHOVEL;
 
-            if (netherite) {
-                item.setType(Material.NETHERITE_AXE);
-            } else {
-                item.setType(Material.DIAMOND_AXE);
-            }
+            if (netherite) item.setType(Material.NETHERITE_AXE);
+            else item.setType(Material.DIAMOND_AXE);
         }
-
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/PortableCharger.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/PortableCharger.java
similarity index 90%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/PortableCharger.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/PortableCharger.java
index 4fec639..fdbbb1f 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/PortableCharger.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/PortableCharger.java
@@ -1,19 +1,20 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Events;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.Rechargeable;
 import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
 import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.common.ChatColors;
-import io.ncbpfluffybear.fluffymachines.FluffyMachines;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
 import lombok.AccessLevel;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.GameMode;
@@ -25,7 +26,6 @@ import org.bukkit.event.inventory.InventoryClickEvent;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
-import org.bukkit.plugin.Plugin;
 import org.bukkit.scheduler.BukkitRunnable;
 
 import javax.annotation.Nonnull;
@@ -40,14 +40,12 @@ import java.util.List;
  * @author NCBPFluffyBear
  */
 public class PortableCharger extends SimpleSlimefunItem<ItemUseHandler> implements Listener, Rechargeable {
-
     private final int[] BORDER = {5, 6, 7, 14, 16, 23, 24, 25};
     private final int POWER_SLOT = 11;
     private final int CHARGE_SLOT = 15;
     private final int INV_SIZE = 27;
     private final float CHARGE_CAPACITY;
     private final float CHARGE_SPEED;
-    private final Plugin plugin = FluffyMachines.getInstance();
 
     public PortableCharger(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe,
                            int chargeCapacity, int chargeSpeed) {
@@ -56,7 +54,7 @@ public class PortableCharger extends SimpleSlimefunItem<ItemUseHandler> implemen
         this.CHARGE_CAPACITY = chargeCapacity;
         this.CHARGE_SPEED = chargeSpeed;
 
-        Bukkit.getPluginManager().registerEvents(this, FluffyMachines.getInstance());
+        Events.registerListener(this);
     }
 
     @Nonnull
@@ -86,7 +84,7 @@ public class PortableCharger extends SimpleSlimefunItem<ItemUseHandler> implemen
 
             inventory.setItem(POWER_SLOT, powerItem);
             updateSlot(inventory, POWER_SLOT, "&6&lPower Remaining",
-                "&e" + charger.getItemCharge(chargerItem) + "J");
+                    "&e" + charger.getItemCharge(chargerItem) + "J");
             inventory.clear(CHARGE_SLOT);
             p.openInventory(inventory);
 
@@ -106,7 +104,7 @@ public class PortableCharger extends SimpleSlimefunItem<ItemUseHandler> implemen
 
                         Rechargeable device = (Rechargeable) sfItem;
                         float neededCharge = device.getMaxItemCharge(deviceItem)
-                            - device.getItemCharge(deviceItem);
+                                - device.getItemCharge(deviceItem);
                         float availableCharge = charger.getItemCharge(chargerItem);
 
                         // Three different scenarios
@@ -120,7 +118,7 @@ public class PortableCharger extends SimpleSlimefunItem<ItemUseHandler> implemen
 
                             } else {
                                 transferCharge(charger, chargerItem, device, deviceItem, Math.min(neededCharge,
-                                    availableCharge));
+                                        availableCharge));
                             }
 
                         } else if (neededCharge == 0) {
@@ -132,7 +130,7 @@ public class PortableCharger extends SimpleSlimefunItem<ItemUseHandler> implemen
 
                         // The name of the powerItem NEEDS to be "Portable Charger" to cancel event
                         updateSlot(inventory, POWER_SLOT, "&6&lPower Remaining",
-                            "&e" + charger.getItemCharge(chargerItem) + "J");
+                                "&e" + charger.getItemCharge(chargerItem) + "J");
                     }
 
                     // Check if GUI is no longer open
@@ -148,7 +146,7 @@ public class PortableCharger extends SimpleSlimefunItem<ItemUseHandler> implemen
                         }
                     }
                 }
-            }.runTaskTimer(plugin, 0, 20);
+            }.runTaskTimer(AbstractAddon.instance(), 0, 20);
         };
     }
 
@@ -157,7 +155,7 @@ public class PortableCharger extends SimpleSlimefunItem<ItemUseHandler> implemen
         SlimefunItem sfItem1 = SlimefunItem.getByItem(e.getCurrentItem());
         SlimefunItem sfItem2 = SlimefunItem.getByItem(e.getCursor());
         if ((sfItem1 instanceof PortableCharger || sfItem2 instanceof PortableCharger)
-            && e.getWhoClicked().getOpenInventory().getTitle().contains("Portable Charger")) {
+                && e.getWhoClicked().getOpenInventory().getTitle().contains("Portable Charger")) {
             e.setCancelled(true);
         }
     }
@@ -184,7 +182,7 @@ public class PortableCharger extends SimpleSlimefunItem<ItemUseHandler> implemen
     }
 
     public void transferCharge(Rechargeable charger, ItemStack chargerItem, Rechargeable device, ItemStack deviceItem
-        , float charge) {
+            , float charge) {
         charger.removeItemCharge(chargerItem, charge);
         device.addItemCharge(deviceItem, charge);
     }
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/Scythe.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/Scythe.java
similarity index 92%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/Scythe.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/Scythe.java
index c70eb6d..144b83f 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/Scythe.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/Scythe.java
@@ -1,13 +1,13 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;
 import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
 import io.github.thebusybiscuit.slimefun4.core.handlers.ToolUseHandler;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.blocks.Vein;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import org.bukkit.Bukkit;
@@ -51,8 +51,8 @@ public class Scythe extends SimpleSlimefunItem<ItemUseHandler> implements NotPla
             }
 
             if (e.getBlock().getBlockData() instanceof Ageable
-                && ((Ageable) e.getBlock().getBlockData()).getAge()
-                == ((Ageable) e.getBlock().getBlockData()).getMaximumAge()) {
+                    && ((Ageable) e.getBlock().getBlockData()).getAge()
+                    == ((Ageable) e.getBlock().getBlockData()).getMaximumAge()) {
                 List<Block> crops = Vein.find(e.getBlock(), MAX_BROKEN, b -> Tag.CROPS.isTagged(b.getType()));
 
                 crops.remove(e.getBlock());
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/UpgradedExplosivePickaxe.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/UpgradedExplosivePickaxe.java
similarity index 92%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/UpgradedExplosivePickaxe.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/UpgradedExplosivePickaxe.java
index 90392fe..2937ede 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/UpgradedExplosivePickaxe.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/UpgradedExplosivePickaxe.java
@@ -1,9 +1,9 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
-import io.github.thebusybiscuit.slimefun4.implementation.items.tools.ExplosiveShovel;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.implementation.items.tools.ExplosiveShovel;
 import org.bukkit.block.Block;
 import org.bukkit.inventory.ItemStack;
 
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/UpgradedExplosiveShovel.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/UpgradedExplosiveShovel.java
similarity index 88%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/UpgradedExplosiveShovel.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/UpgradedExplosiveShovel.java
index 3b65207..8aad5d0 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/UpgradedExplosiveShovel.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/UpgradedExplosiveShovel.java
@@ -1,12 +1,12 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
-import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-import io.github.thebusybiscuit.slimefun4.implementation.items.tools.ExplosivePickaxe;
-import io.github.thebusybiscuit.slimefun4.utils.tags.SlimefunTag;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import io.github.thebusybiscuit.slimefun4.implementation.items.tools.ExplosivePickaxe;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
+import io.github.thebusybiscuit.slimefun4.utils.tags.SlimefunTag;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
@@ -30,7 +30,7 @@ public class UpgradedExplosiveShovel extends UpgradedExplosiveTool {
     @Override
     protected boolean canBreak(Player p, Block b) {
         return SlimefunTag.EXPLOSIVE_SHOVEL_BLOCKS.isTagged(b.getType())
-            && Slimefun.getProtectionManager().hasPermission(p, b.getLocation(), Interaction.BREAK_BLOCK);
+                && Slimefun.getProtectionManager().hasPermission(p, b.getLocation(), Interaction.BREAK_BLOCK);
     }
 
 }
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/UpgradedExplosiveTool.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/UpgradedExplosiveTool.java
similarity index 98%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/UpgradedExplosiveTool.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/UpgradedExplosiveTool.java
index c2a8f35..3034cf1 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/UpgradedExplosiveTool.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/UpgradedExplosiveTool.java
@@ -1,17 +1,17 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
 import io.github.thebusybiscuit.slimefun4.api.events.ExplosiveToolBreakBlocksEvent;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.handlers.ToolUseHandler;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.implementation.items.tools.ExplosiveTool;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import io.github.thebusybiscuit.slimefun4.utils.tags.SlimefunTag;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import org.bukkit.Bukkit;
 import org.bukkit.Effect;
 import org.bukkit.Material;
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/UpgradedLumberAxe.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/UpgradedLumberAxe.java
similarity index 94%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/UpgradedLumberAxe.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/UpgradedLumberAxe.java
index 8b59212..fdb5592 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/UpgradedLumberAxe.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/UpgradedLumberAxe.java
@@ -1,21 +1,17 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;
 import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
 import io.github.thebusybiscuit.slimefun4.core.handlers.ToolUseHandler;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import org.bukkit.Axis;
-import org.bukkit.Bukkit;
-import org.bukkit.Material;
-import org.bukkit.Sound;
-import org.bukkit.Tag;
+import org.bukkit.*;
 import org.bukkit.block.Block;
 import org.bukkit.block.data.Orientable;
 import org.bukkit.inventory.ItemStack;
@@ -60,7 +56,7 @@ public class UpgradedLumberAxe extends SimpleSlimefunItem<ItemUseHandler> implem
 
                 for (Block b : logs) {
                     if (Slimefun.getProtectionManager().hasPermission(e.getPlayer(), b,
-                        Interaction.BREAK_BLOCK) && BlockStorage.checkID(b) == null) {
+                            Interaction.BREAK_BLOCK) && BlockStorage.checkID(b) == null) {
                         b.breakNaturally(tool);
                         if (triggerOtherPlugins.getValue()) {
                             Bukkit.getPluginManager().callEvent(new AlternateBreakEvent(b, e.getPlayer()));
@@ -85,7 +81,7 @@ public class UpgradedLumberAxe extends SimpleSlimefunItem<ItemUseHandler> implem
 
                     for (Block b : logs) {
                         if (Slimefun.getProtectionManager().hasPermission(e.getPlayer(), b,
-                            Interaction.BREAK_BLOCK) && BlockStorage.checkID(b) == null) {
+                                Interaction.BREAK_BLOCK) && BlockStorage.checkID(b) == null) {
                             stripLog(b);
                         }
                     }
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/WarpPadConfigurator.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/WarpPadConfigurator.java
similarity index 73%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/WarpPadConfigurator.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/WarpPadConfigurator.java
index 3ffd6c2..880dbac 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/WarpPadConfigurator.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/WarpPadConfigurator.java
@@ -1,5 +1,9 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.FluffyItems;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Events;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
@@ -9,11 +13,7 @@ import io.github.thebusybiscuit.slimefun4.core.attributes.HologramOwner;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
-import io.ncbpfluffybear.fluffymachines.FluffyMachines;
-import io.ncbpfluffybear.fluffymachines.utils.FluffyItems;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.NamespacedKey;
 import org.bukkit.block.Block;
@@ -32,10 +32,10 @@ import java.util.List;
 
 public class WarpPadConfigurator extends SlimefunItem implements HologramOwner, Listener {
 
-    private final NamespacedKey xCoord = new NamespacedKey(FluffyMachines.getInstance(), "xCoordinate");
-    private final NamespacedKey yCoord = new NamespacedKey(FluffyMachines.getInstance(), "yCoordinate");
-    private final NamespacedKey zCoord = new NamespacedKey(FluffyMachines.getInstance(), "zCoordinate");
-    private final NamespacedKey world = new NamespacedKey(FluffyMachines.getInstance(), "world");
+    private final NamespacedKey xCoord = AbstractAddon.createKey("xCoordinate");
+    private final NamespacedKey yCoord = AbstractAddon.createKey("yCoordinate");
+    private final NamespacedKey zCoord = AbstractAddon.createKey("zCoordinate");
+    private final NamespacedKey world = AbstractAddon.createKey("world");
 
     private static final int LORE_COORDINATE_INDEX = 4;
     private final ItemSetting<Integer> MAX_DISTANCE = new ItemSetting<>(this, "max-distance", 100);
@@ -43,7 +43,7 @@ public class WarpPadConfigurator extends SlimefunItem implements HologramOwner,
     public WarpPadConfigurator(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(category, item, recipeType, recipe);
 
-        Bukkit.getPluginManager().registerEvents(this, FluffyMachines.getInstance());
+        Events.registerListener(this);
 
         addItemSetting(MAX_DISTANCE);
 
@@ -51,18 +51,15 @@ public class WarpPadConfigurator extends SlimefunItem implements HologramOwner,
 
     @EventHandler
     private void onInteract(PlayerInteractEvent e) {
-
-        if (e.getClickedBlock() == null || e.getHand() != EquipmentSlot.HAND) {
-            return;
-        }
+        if (e.getClickedBlock() == null || e.getHand() != EquipmentSlot.HAND) return;
 
         Block b = e.getClickedBlock();
         Player p = e.getPlayer();
 
         if (BlockStorage.hasBlockInfo(b) && BlockStorage.check(b) == FluffyItems.WARP_PAD.getItem()
-            && Slimefun.getProtectionManager().hasPermission(p, b.getLocation(), Interaction.PLACE_BLOCK)) {
+                && Slimefun.getProtectionManager().hasPermission(p, b.getLocation(), Interaction.PLACE_BLOCK)) {
             if (SlimefunUtils.isItemSimilar(p.getInventory().getItemInMainHand(), FluffyItems.WARP_PAD_CONFIGURATOR,
-                false)) {
+                    false)) {
 
                 ItemStack item = p.getInventory().getItemInMainHand();
                 ItemMeta meta = item.getItemMeta();
@@ -79,7 +76,7 @@ public class WarpPadConfigurator extends SlimefunItem implements HologramOwner,
                         pdc.set(yCoord, PersistentDataType.INTEGER, b.getY());
                         pdc.set(zCoord, PersistentDataType.INTEGER, b.getZ());
                         lore.set(LORE_COORDINATE_INDEX, ChatColor.translateAlternateColorCodes(
-                            '&', "&eLinked Coordinates: &7" + b.getX() + ", " + b.getY() + ", " + b.getZ()));
+                                '&', "&eLinked Coordinates: &7" + b.getX() + ", " + b.getY() + ", " + b.getZ()));
 
                         meta.setLore(lore);
                         item.setItemMeta(meta);
@@ -88,18 +85,18 @@ public class WarpPadConfigurator extends SlimefunItem implements HologramOwner,
                         BlockStorage.addBlockInfo(b, "type", "destination");
                         Utils.send(p, "&3This pad has been marked as a &aDestination &3and bound to your configurator");
 
-                    // Origin
+                        // Origin
                     } else if (pdc.has(world, PersistentDataType.STRING) && b.getWorld().getName().equals(
-                        pdc.get(world, PersistentDataType.STRING))) {
+                            pdc.get(world, PersistentDataType.STRING))) {
                         int x = pdc.getOrDefault(xCoord, PersistentDataType.INTEGER, 0);
                         int y = pdc.getOrDefault(yCoord, PersistentDataType.INTEGER, 0);
                         int z = pdc.getOrDefault(zCoord, PersistentDataType.INTEGER, 0);
 
                         if (Math.abs(x - b.getX()) > MAX_DISTANCE.getValue()
-                            || Math.abs(z - b.getZ()) > MAX_DISTANCE.getValue()) {
+                                || Math.abs(z - b.getZ()) > MAX_DISTANCE.getValue()) {
 
                             Utils.send(p, "&cYou can not link blocks more than "
-                                + MAX_DISTANCE.getValue() + " blocks apart!");
+                                    + MAX_DISTANCE.getValue() + " blocks apart!");
 
                             return;
                         }
@@ -107,19 +104,13 @@ public class WarpPadConfigurator extends SlimefunItem implements HologramOwner,
                         registerOrigin(b, x, y, z);
 
                         Utils.send(p, "&3This pad has been marked as an &aOrigin &3and your configurator's settings " +
-                            "have been pasted onto this pad");
-
-                    } else {
+                                "have been pasted onto this pad");
 
+                    } else
                         Utils.send(p, "&cSneak and right click on a Warp Pad to set the destination, then right click" +
-                            " " + "another Warp Pad tp set the origin!");
-                    }
-
+                                " " + "another Warp Pad tp set the origin!");
                 }
-
-            } else {
-                Utils.send(p, "&cConfigure this Warp Pad using a Warp Pad Configurator");
-            }
+            } else Utils.send(p, "&cConfigure this Warp Pad using a Warp Pad Configurator");
         }
     }
 
@@ -132,4 +123,4 @@ public class WarpPadConfigurator extends SlimefunItem implements HologramOwner,
 
         updateHologram(b, "&a&lOrigin");
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/WateringCan.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/WateringCan.java
similarity index 90%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/WateringCan.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/WateringCan.java
index 08786a0..adef605 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/items/tools/WateringCan.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/items/tools/WateringCan.java
@@ -1,31 +1,22 @@
-package io.ncbpfluffybear.fluffymachines.items.tools;
+package id.universenetwork.sfa_loader.addons.fluffymachines.items.tools;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.CancelPlace;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Constants;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.items.settings.DoubleRangeSetting;
 import io.github.thebusybiscuit.slimefun4.api.items.settings.IntRangeSetting;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.common.ChatColors;
-import io.ncbpfluffybear.fluffymachines.utils.CancelPlace;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
-import io.ncbpfluffybear.fluffymachines.FluffyMachines;
-import io.ncbpfluffybear.fluffymachines.utils.Constants;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
-import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
-import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import org.bukkit.Bukkit;
-import org.bukkit.Effect;
-import org.bukkit.FluidCollisionMode;
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
-import org.bukkit.Particle;
-import org.bukkit.Sound;
-import org.bukkit.Tag;
-import org.bukkit.TreeType;
+import org.bukkit.*;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.block.data.Ageable;
@@ -45,14 +36,14 @@ import java.util.concurrent.ThreadLocalRandom;
 public class WateringCan extends SimpleSlimefunItem<ItemUseHandler> implements CancelPlace {
 
     public final ItemSetting<Integer> maxUses = new IntRangeSetting(this, "max-uses", 0, 10, Integer.MAX_VALUE);
-    public final ItemSetting<Double> sugarCaneSuccessChance = new DoubleRangeSetting(this, "sugar-cane-success-chance", 0, 0.3 ,1);
+    public final ItemSetting<Double> sugarCaneSuccessChance = new DoubleRangeSetting(this, "sugar-cane-success-chance", 0, 0.3, 1);
     public final ItemSetting<Double> cropSuccessChance = new DoubleRangeSetting(this, "crop-success-chance", 0, 0.3, 1);
     public final ItemSetting<Double> treeSuccessChance = new DoubleRangeSetting(this, "tree-success-chance", 0, 0.3, 1);
     public final ItemSetting<Double> exoticGardenSuccessChance = new DoubleRangeSetting(this, "exotic-garden-success-chance", 0, 0.3, 1);
 
     private static final int USE_INDEX = 7;
     private static final int MAX_SUGAR_GROW_HEIGHT = 5;
-    private static final NamespacedKey usageKey = new NamespacedKey(FluffyMachines.getInstance(), "watering_can_usage");
+    private static final NamespacedKey usageKey = AbstractAddon.createKey("watering_can_usage");
 
     public WateringCan(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(category, item, recipeType, recipe);
@@ -83,7 +74,7 @@ public class WateringCan extends SimpleSlimefunItem<ItemUseHandler> implements C
                 Location blockLocation = b.getLocation();
 
                 if (Slimefun.getProtectionManager().hasPermission(e.getPlayer(), blockLocation,
-                    Interaction.BREAK_BLOCK)) {
+                        Interaction.BREAK_BLOCK)) {
 
                     ItemStack item = e.getItem();
                     BlockData blockData = b.getBlockData();
@@ -167,7 +158,7 @@ public class WateringCan extends SimpleSlimefunItem<ItemUseHandler> implements C
                             }
                             if (random < exoticGardenSuccessChance.getValue()) {
                                 Bukkit.getPluginManager().callEvent(new StructureGrowEvent(
-                                    b.getLocation(), getTreeFromSapling(saplingMaterial), false, p, Collections.singletonList(b.getState())
+                                        b.getLocation(), getTreeFromSapling(saplingMaterial), false, p, Collections.singletonList(b.getState())
                                 ));
                                 blockLocation.getWorld().playEffect(blockLocation, Effect.VILLAGER_PLANT_GROW, 0);
 
@@ -180,7 +171,7 @@ public class WateringCan extends SimpleSlimefunItem<ItemUseHandler> implements C
 
                                     b.setType(Material.AIR);
                                     if (!blockLocation.getWorld().generateTree(blockLocation,
-                                        getTreeFromSapling(saplingMaterial))) {
+                                            getTreeFromSapling(saplingMaterial))) {
                                         b.setType(saplingMaterial);
                                     }
                                     blockLocation.getWorld().playEffect(blockLocation, Effect.VILLAGER_PLANT_GROW, 0);
@@ -238,7 +229,7 @@ public class WateringCan extends SimpleSlimefunItem<ItemUseHandler> implements C
     private static TreeType getTreeFromSapling(Material m) {
         TreeType treeType = TreeType.TREE;
         String parseSapling = m.toString()
-            .replace("_SAPLING", "");
+                .replace("_SAPLING", "");
 
         if (!parseSapling.equals("OAK")) {
             if (parseSapling.equals("JUNGLE")) {
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/listeners/KeyedCrafterListener.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/listeners/KeyedCrafterListener.java
similarity index 91%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/listeners/KeyedCrafterListener.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/listeners/KeyedCrafterListener.java
index a381a0c..6f3f548 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/listeners/KeyedCrafterListener.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/listeners/KeyedCrafterListener.java
@@ -1,15 +1,13 @@
-package io.ncbpfluffybear.fluffymachines.listeners;
+package id.universenetwork.sfa_loader.addons.fluffymachines.listeners;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.machines.AutoCraftingTable;
+import id.universenetwork.sfa_loader.addons.fluffymachines.machines.SmartFactory;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
 import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.core.attributes.RecipeDisplayItem;
 import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
-import io.ncbpfluffybear.fluffymachines.machines.AutoCraftingTable;
-import io.ncbpfluffybear.fluffymachines.machines.SmartFactory;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
-import java.util.Optional;
-import javax.annotation.Nullable;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import org.apache.commons.lang.WordUtils;
 import org.bukkit.Material;
@@ -21,11 +19,10 @@ import org.bukkit.event.Listener;
 import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.ItemStack;
 
-public class KeyedCrafterListener implements Listener {
-
-    public KeyedCrafterListener() {
-    }
+import javax.annotation.Nullable;
+import java.util.Optional;
 
+public class KeyedCrafterListener implements Listener {
     @EventHandler
     private void onSmartFactoryInteract(PlayerRightClickEvent e) {
         Optional<Block> clickedBlock = e.getClickedBlock();
@@ -94,4 +91,4 @@ public class KeyedCrafterListener implements Listener {
         return recipe != null && (recipe.getItem() == SlimefunItems.CARGO_INPUT_NODE
                 || recipe.getItem() == SlimefunItems.CARGO_OUTPUT_NODE || recipe.getItem() == SlimefunItems.CARGO_OUTPUT_NODE_2);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AdvancedAutoDisenchanter.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AdvancedAutoDisenchanter.java
similarity index 98%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/AdvancedAutoDisenchanter.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AdvancedAutoDisenchanter.java
index 3d5efb5..fdc7527 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AdvancedAutoDisenchanter.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AdvancedAutoDisenchanter.java
@@ -1,5 +1,7 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.FluffyItems;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
@@ -15,13 +17,6 @@ import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
 import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
-import io.ncbpfluffybear.fluffymachines.utils.FluffyItems;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import javax.annotation.Nonnull;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
 import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
@@ -41,6 +36,12 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.EnchantmentStorageMeta;
 import org.bukkit.inventory.meta.ItemMeta;
 
+import javax.annotation.Nonnull;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
 public class AdvancedAutoDisenchanter extends SlimefunItem implements EnergyNetComponent {
 
     private static final int[] BACKGROUND = {0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 14, 21, 22, 23, 36, 37, 38, 42, 43, 44, 45, 46, 47, 51, 52, 53};
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AdvancedChargingBench.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AdvancedChargingBench.java
similarity index 97%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/AdvancedChargingBench.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AdvancedChargingBench.java
index 2c3a661..0d6277a 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AdvancedChargingBench.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AdvancedChargingBench.java
@@ -1,13 +1,13 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
-import io.github.thebusybiscuit.slimefun4.core.attributes.Rechargeable;
-import io.github.thebusybiscuit.slimefun4.core.handlers.BlockPlaceHandler;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.attributes.Rechargeable;
+import io.github.thebusybiscuit.slimefun4.core.handlers.BlockPlaceHandler;
 import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.AContainer;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import org.bukkit.block.Block;
 import org.bukkit.event.block.BlockPlaceEvent;
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AlternateElevatorPlate.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AlternateElevatorPlate.java
similarity index 88%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/AlternateElevatorPlate.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AlternateElevatorPlate.java
index 893072d..b0e714b 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AlternateElevatorPlate.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AlternateElevatorPlate.java
@@ -1,20 +1,20 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Scheduler;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockPlaceHandler;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockUseHandler;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.common.ChatColors;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import io.github.thebusybiscuit.slimefun4.libraries.paperlib.PaperLib;
 import io.github.thebusybiscuit.slimefun4.utils.ChatUtils;
 import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import org.bukkit.ChatColor;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -25,11 +25,7 @@ import org.bukkit.inventory.ItemStack;
 
 import javax.annotation.Nonnull;
 import javax.annotation.ParametersAreNonnullByDefault;
-import java.util.HashSet;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Set;
-import java.util.UUID;
+import java.util.*;
 
 /**
  * Alternative elevators that use a Chest GUI instead of
@@ -143,17 +139,15 @@ public class AlternateElevatorPlate extends SimpleSlimefunItem<BlockUseHandler>
 
     @ParametersAreNonnullByDefault
     private void teleport(Player player, String floorName, Block target) {
-        Utils.runSync(() -> {
+        Scheduler.run(() -> {
             users.add(player.getUniqueId());
 
             float yaw = player.getEyeLocation().getYaw() + 180;
 
-            if (yaw > 180) {
-                yaw = -180 + (yaw - 180);
-            }
+            if (yaw > 180) yaw = -180 + (yaw - 180);
 
             Location destination = new Location(player.getWorld(), target.getX() + 0.5, target.getY() + 0.4,
-                target.getZ() + 0.5, yaw, player.getEyeLocation().getPitch());
+                    target.getZ() + 0.5, yaw, player.getEyeLocation().getPitch());
 
             PaperLib.teleportAsync(player, destination).thenAccept(teleported -> {
                 if (teleported) {
@@ -168,7 +162,7 @@ public class AlternateElevatorPlate extends SimpleSlimefunItem<BlockUseHandler>
         ChestMenu menu = new ChestMenu("Elevator Settings");
 
         menu.addItem(4, new CustomItemStack(Material.NAME_TAG, "&7Floor Name &e(Click to edit)", "",
-            "&f" + ChatColors.color(BlockStorage.getLocationInfo(b.getLocation(), DATA_KEY))));
+                "&f" + ChatColors.color(BlockStorage.getLocationInfo(b.getLocation(), DATA_KEY))));
         menu.addMenuClickHandler(4, (pl, slot, item, action) -> {
             pl.closeInventory();
             pl.sendMessage("");
@@ -180,7 +174,7 @@ public class AlternateElevatorPlate extends SimpleSlimefunItem<BlockUseHandler>
 
                 pl.sendMessage("");
                 Slimefun.getLocalization().sendMessage(p, "machines.ELEVATOR.named", msg -> msg.replace("%floor" +
-                    "%", message));
+                        "%", message));
                 pl.sendMessage("");
 
                 openEditor(pl, b);
@@ -195,14 +189,14 @@ public class AlternateElevatorPlate extends SimpleSlimefunItem<BlockUseHandler>
     private void addFloor(ChestMenu menu, int slot, Player p, String floor, Block b, Block destination) {
         if (destination.getY() == b.getY()) {
             menu.addItem(slot, new CustomItemStack(Material.LIME_STAINED_GLASS_PANE,
-                ChatColors.color(Slimefun.getLocalization().getMessage(p, "machines.ELEVATOR.current-floor")),
-                "", ChatColor.WHITE + floor, ""));
+                    ChatColors.color(Slimefun.getLocalization().getMessage(p, "machines.ELEVATOR.current-floor")),
+                    "", ChatColor.WHITE + floor, ""));
             menu.addMenuClickHandler(slot, ChestMenuUtils.getEmptyClickHandler());
 
         } else {
             menu.addItem(slot, new CustomItemStack(Material.GRAY_STAINED_GLASS_PANE,
-                ChatColors.color(Slimefun.getLocalization().getMessage(p,
-                    "machines.ELEVATOR.click-to-teleport")), "", ChatColor.WHITE + floor, ""));
+                    ChatColors.color(Slimefun.getLocalization().getMessage(p,
+                            "machines.ELEVATOR.click-to-teleport")), "", ChatColor.WHITE + floor, ""));
             menu.addMenuClickHandler(slot, (player, clickSlot, item, action) -> {
                 teleport(p, floor, destination);
                 return false;
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoAncientAltar.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoAncientAltar.java
similarity index 98%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoAncientAltar.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoAncientAltar.java
index 15aa7fd..e245668 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoAncientAltar.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoAncientAltar.java
@@ -1,5 +1,6 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Constants;
 import io.github.thebusybiscuit.slimefun4.api.events.BlockPlacerPlaceEvent;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
@@ -18,13 +19,6 @@ import io.github.thebusybiscuit.slimefun4.implementation.items.blocks.RepairedSp
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
-import io.ncbpfluffybear.fluffymachines.utils.Constants;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Comparator;
-import java.util.List;
-import java.util.Optional;
-import javax.annotation.Nonnull;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu.AdvancedMenuClickHandler;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
@@ -43,6 +37,9 @@ import org.bukkit.event.block.BlockPlaceEvent;
 import org.bukkit.event.inventory.InventoryClickEvent;
 import org.bukkit.inventory.ItemStack;
 
+import javax.annotation.Nonnull;
+import java.util.*;
+
 /**
  * This {@link SlimefunItem} automatically crafts
  * Ancient Altar recipes
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoArmorForge.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoArmorForge.java
similarity index 79%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoArmorForge.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoArmorForge.java
index 6d4c395..9d8070b 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoArmorForge.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoArmorForge.java
@@ -1,9 +1,9 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
-import io.ncbpfluffybear.fluffymachines.objects.AutoCrafter;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import id.universenetwork.sfa_loader.addons.fluffymachines.objects.AutoCrafter;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
 
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoCraftingTable.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoCraftingTable.java
similarity index 98%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoCraftingTable.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoCraftingTable.java
index 8cbf67a..552924d 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoCraftingTable.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoCraftingTable.java
@@ -1,5 +1,7 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.FluffyMachines;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
 import io.github.thebusybiscuit.slimefun4.api.events.BlockPlacerPlaceEvent;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
@@ -12,12 +14,6 @@ import io.github.thebusybiscuit.slimefun4.core.networks.energy.EnergyNetComponen
 import io.github.thebusybiscuit.slimefun4.libraries.dough.collections.Pair;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
-import io.ncbpfluffybear.fluffymachines.FluffyMachines;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
-import java.util.ArrayList;
-import java.util.Comparator;
-import java.util.List;
-import javax.annotation.Nonnull;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu.AdvancedMenuClickHandler;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
@@ -39,6 +35,11 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.RecipeChoice;
 import org.bukkit.inventory.meta.ItemMeta;
 
+import javax.annotation.Nonnull;
+import java.util.ArrayList;
+import java.util.Comparator;
+import java.util.List;
+
 /**
  * This {@link SlimefunItem} automatically
  * crafts vanilla recipes
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoEnhancedCraftingTable.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoEnhancedCraftingTable.java
similarity index 81%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoEnhancedCraftingTable.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoEnhancedCraftingTable.java
index 4019863..dc349d4 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoEnhancedCraftingTable.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoEnhancedCraftingTable.java
@@ -1,9 +1,9 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.objects.AutoCrafter;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.ncbpfluffybear.fluffymachines.objects.AutoCrafter;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
 
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoMagicWorkbench.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoMagicWorkbench.java
similarity index 91%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoMagicWorkbench.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoMagicWorkbench.java
index 1b78a20..437e627 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoMagicWorkbench.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoMagicWorkbench.java
@@ -1,16 +1,17 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.objects.AutoCrafter;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.ncbpfluffybear.fluffymachines.objects.AutoCrafter;
-import java.util.ArrayList;
-import java.util.List;
 import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
 import me.mrCookieSlime.Slimefun.api.item_transport.ItemTransportFlow;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
 
+import java.util.ArrayList;
+import java.util.List;
+
 public class AutoMagicWorkbench extends AutoCrafter {
 
     public AutoMagicWorkbench(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoTableSaw.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoTableSaw.java
similarity index 88%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoTableSaw.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoTableSaw.java
index 558c31a..054f241 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/AutoTableSaw.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/AutoTableSaw.java
@@ -1,27 +1,27 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
 import io.github.thebusybiscuit.slimefun4.api.events.BlockPlacerPlaceEvent;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetComponent;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockPlaceHandler;
 import io.github.thebusybiscuit.slimefun4.core.networks.energy.EnergyNetComponentType;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.implementation.items.multiblocks.TableSaw;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
 import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
 import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
 import me.mrCookieSlime.Slimefun.api.item_transport.ItemTransportFlow;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.Tag;
@@ -48,7 +48,7 @@ public class AutoTableSaw extends SlimefunItem implements EnergyNetComponent {
     public static final int ENERGY_CONSUMPTION = 128;
     public static final int CAPACITY = ENERGY_CONSUMPTION * 3;
     private final int[] border = {0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 27, 31, 36, 40, 45,
-        46, 47, 48, 49, 50, 51, 52, 53};
+            46, 47, 48, 49, 50, 51, 52, 53};
     private final int[] inputBorder = {19, 20, 21, 28, 30, 37, 38, 39,};
     private final int[] outputBorder = {23, 24, 25, 26, 32, 35, 41, 42, 43, 44};
     private final int[] inputSlots = {29};
@@ -79,10 +79,10 @@ public class AutoTableSaw extends SlimefunItem implements EnergyNetComponent {
             @Override
             public void newInstance(@Nonnull BlockMenu menu, @Nonnull Block b) {
                 if (!BlockStorage.hasBlockInfo(b)
-                    || BlockStorage.getLocationInfo(b.getLocation(), "enabled") == null
-                    || BlockStorage.getLocationInfo(b.getLocation(), "enabled").equals(String.valueOf(false))) {
+                        || BlockStorage.getLocationInfo(b.getLocation(), "enabled") == null
+                        || BlockStorage.getLocationInfo(b.getLocation(), "enabled").equals(String.valueOf(false))) {
                     menu.replaceExistingItem(6, new CustomItemStack(Material.GUNPOWDER, "&7Enabled: &4\u2718",
-                        "", "&e> Click to enable this Machine")
+                            "", "&e> Click to enable this Machine")
                     );
                     menu.addMenuClickHandler(6, (p, slot, item, action) -> {
                         BlockStorage.addBlockInfo(b, "enabled", String.valueOf(true));
@@ -91,7 +91,7 @@ public class AutoTableSaw extends SlimefunItem implements EnergyNetComponent {
                     });
                 } else {
                     menu.replaceExistingItem(6, new CustomItemStack(Material.REDSTONE, "&7Enabled: &2\u2714",
-                        "", "&e> Click to disable this Machine"));
+                            "", "&e> Click to disable this Machine"));
                     menu.addMenuClickHandler(6, (p, slot, item, action) -> {
                         BlockStorage.addBlockInfo(b, "enabled", String.valueOf(false));
                         newInstance(menu, b);
@@ -103,8 +103,8 @@ public class AutoTableSaw extends SlimefunItem implements EnergyNetComponent {
             @Override
             public boolean canOpen(@Nonnull Block b, @Nonnull Player p) {
                 return p.hasPermission("slimefun.inventory.bypass")
-                    || Slimefun.getProtectionManager().hasPermission(p, b.getLocation(),
-                    Interaction.INTERACT_BLOCK
+                        || Slimefun.getProtectionManager().hasPermission(p, b.getLocation(),
+                        Interaction.INTERACT_BLOCK
                 );
             }
 
@@ -163,10 +163,10 @@ public class AutoTableSaw extends SlimefunItem implements EnergyNetComponent {
 
         borders(preset, border, inputBorder, outputBorder);
         preset.addItem(2, new CustomItemStack(new ItemStack(Material.STONECUTTER), "&eRecipe", "",
-                "&bPut in the Recipe you want to craft",
-                "&4Table Saw Recipes ONLY"
-            ),
-            ChestMenuUtils.getEmptyClickHandler());
+                        "&bPut in the Recipe you want to craft",
+                        "&4Table Saw Recipes ONLY"
+                ),
+                ChestMenuUtils.getEmptyClickHandler());
     }
 
     @Nonnull
@@ -212,8 +212,8 @@ public class AutoTableSaw extends SlimefunItem implements EnergyNetComponent {
         BlockMenu menu = BlockStorage.getInventory(block);
         tableSawRecipes.forEach((input, output) -> {
             if (menu.getItemInSlot(inputSlots[0]) != null
-                && SlimefunUtils.isItemSimilar(menu.getItemInSlot(inputSlots[0]), input, true, false)
-                && menu.fits(output, outputSlots)) {
+                    && SlimefunUtils.isItemSimilar(menu.getItemInSlot(inputSlots[0]), input, true, false)
+                    && menu.fits(output, outputSlots)) {
 
                 menu.consumeItem(inputSlots[0]);
                 menu.pushItem(output.clone(), outputSlots);
@@ -223,6 +223,7 @@ public class AutoTableSaw extends SlimefunItem implements EnergyNetComponent {
 
     /**
      * Method that finds planks associated with a log
+     *
      * @author TheBusyBiscuit
      */
     private @Nonnull Optional<Material> getPlanks(@Nonnull Material log) {
@@ -234,17 +235,17 @@ public class AutoTableSaw extends SlimefunItem implements EnergyNetComponent {
     static void borders(BlockMenuPreset preset, int[] border, int[] inputBorder, int[] outputBorder) {
         for (int i : border) {
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.GRAY_STAINED_GLASS_PANE), " "),
-                (p, slot, item, action) -> false);
+                    (p, slot, item, action) -> false);
         }
 
         for (int i : inputBorder) {
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.CYAN_STAINED_GLASS_PANE), " "),
-                (p, slot, item, action) -> false);
+                    (p, slot, item, action) -> false);
         }
 
         for (int i : outputBorder) {
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.ORANGE_STAINED_GLASS_PANE), " "),
-                (p, slot, item, action) -> false);
+                    (p, slot, item, action) -> false);
         }
     }
 
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/BackpackLoader.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/BackpackLoader.java
similarity index 93%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/BackpackLoader.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/BackpackLoader.java
index 1a43b51..c8053c7 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/BackpackLoader.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/BackpackLoader.java
@@ -1,24 +1,24 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetComponent;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;
 import io.github.thebusybiscuit.slimefun4.core.networks.energy.EnergyNetComponentType;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.implementation.items.backpacks.SlimefunBackpack;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
 import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
 import me.mrCookieSlime.Slimefun.api.item_transport.ItemTransportFlow;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import org.bukkit.ChatColor;
 import org.bukkit.Material;
 import org.bukkit.Tag;
@@ -38,7 +38,7 @@ public class BackpackLoader extends SlimefunItem implements EnergyNetComponent {
 
     private static final int[] PLAIN_BORDER = {38, 39, 40, 41, 42, 47, 48, 49, 50, 51};
     private static final int[] INPUT_BORDER = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 17, 18, 26, 27, 28, 29, 30, 31, 32, 33,
-        34, 35};
+            34, 35};
     private static final int[] OUTPUT_BORDER = {43, 44, 52};
     private static final int[] BACKPACK_BORDER = {36, 37, 46};
     private static final int[] INPUT_SLOTS = {10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25};
@@ -59,7 +59,7 @@ public class BackpackLoader extends SlimefunItem implements EnergyNetComponent {
 
                 for (int i : BACKPACK_BORDER) {
                     this.addItem(i, new CustomItemStack(new ItemStack(Material.YELLOW_STAINED_GLASS_PANE), " "),
-                        (p, slot, item, action) -> false
+                            (p, slot, item, action) -> false
                     );
                 }
             }
@@ -67,8 +67,8 @@ public class BackpackLoader extends SlimefunItem implements EnergyNetComponent {
             @Override
             public boolean canOpen(@Nonnull Block b, @Nonnull Player p) {
                 return p.hasPermission("slimefun.inventory.bypass")
-                    || Slimefun.getProtectionManager().hasPermission(p, b.getLocation(),
-                    Interaction.INTERACT_BLOCK);
+                        || Slimefun.getProtectionManager().hasPermission(p, b.getLocation(),
+                        Interaction.INTERACT_BLOCK);
             }
 
             @Override
@@ -156,8 +156,8 @@ public class BackpackLoader extends SlimefunItem implements EnergyNetComponent {
         // Are there any items in the input?
         for (int inputSlot : getInputSlots()) {
             if (inv.getItemInSlot(inputSlot) != null
-                && !(SlimefunItem.getByItem(inv.getItemInSlot(inputSlot)) instanceof SlimefunBackpack)
-                && !Tag.SHULKER_BOXES.isTagged(inv.getItemInSlot(inputSlot).getType())) {
+                    && !(SlimefunItem.getByItem(inv.getItemInSlot(inputSlot)) instanceof SlimefunBackpack)
+                    && !Tag.SHULKER_BOXES.isTagged(inv.getItemInSlot(inputSlot).getType())) {
                 occupiedInputSlot = inputSlot;
                 break;
             } else if (inputSlot == getInputSlots()[13]) {
@@ -227,19 +227,19 @@ public class BackpackLoader extends SlimefunItem implements EnergyNetComponent {
     static void buildBorder(BlockMenuPreset preset, int[] plainBorder, int[] inputBorder, int[] outputBorder) {
         for (int i : plainBorder) {
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.GRAY_STAINED_GLASS_PANE), " "),
-                (p, slot, item, action) -> false
+                    (p, slot, item, action) -> false
             );
         }
 
         for (int i : inputBorder) {
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.CYAN_STAINED_GLASS_PANE), " "),
-                (p, slot, item, action) -> false
+                    (p, slot, item, action) -> false
             );
         }
 
         for (int i : outputBorder) {
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.ORANGE_STAINED_GLASS_PANE), " "),
-                (p, slot, item, action) -> false
+                    (p, slot, item, action) -> false
             );
         }
     }
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/BackpackUnloader.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/BackpackUnloader.java
similarity index 96%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/BackpackUnloader.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/BackpackUnloader.java
index 45811d2..f04ff49 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/BackpackUnloader.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/BackpackUnloader.java
@@ -1,23 +1,23 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetComponent;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;
 import io.github.thebusybiscuit.slimefun4.core.networks.energy.EnergyNetComponentType;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.implementation.items.backpacks.SlimefunBackpack;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
 import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
 import me.mrCookieSlime.Slimefun.api.item_transport.ItemTransportFlow;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import org.bukkit.ChatColor;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Player;
@@ -36,7 +36,7 @@ public class BackpackUnloader extends SlimefunItem implements EnergyNetComponent
     private static final int[] PLAIN_BORDER = {2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17};
     private static final int[] INPUT_BORDER = {1, 9, 10};
     private static final int[] OUTPUT_BORDER = {18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 35, 36, 44, 45, 46, 47, 48,
-        49, 50, 51, 52, 53};
+            49, 50, 51, 52, 53};
     private static final int[] INPUT_SLOTS = {0};
     private static final int[] OUTPUT_SLOTS = {28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43};
 
@@ -56,8 +56,8 @@ public class BackpackUnloader extends SlimefunItem implements EnergyNetComponent
             @Override
             public boolean canOpen(@Nonnull Block b, @Nonnull Player p) {
                 return p.hasPermission("slimefun.inventory.bypass")
-                    || Slimefun.getProtectionManager().hasPermission(p, b.getLocation(),
-                    Interaction.INTERACT_BLOCK);
+                        || Slimefun.getProtectionManager().hasPermission(p, b.getLocation(),
+                        Interaction.INTERACT_BLOCK);
             }
 
             @Override
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/ElectricDustFabricator.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/ElectricDustFabricator.java
similarity index 88%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/ElectricDustFabricator.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/ElectricDustFabricator.java
index 371c265..742ca9a 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/ElectricDustFabricator.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/ElectricDustFabricator.java
@@ -1,18 +1,18 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Constants;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.RecipeDisplayItem;
 import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
 import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.ElectricDustWasher;
 import io.github.thebusybiscuit.slimefun4.implementation.items.multiblocks.OreWasher;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
-import io.ncbpfluffybear.fluffymachines.utils.Constants;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.AContainer;
 import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
 
@@ -34,8 +34,8 @@ public class ElectricDustFabricator extends AContainer implements RecipeDisplayI
     public static final int CAPACITY = ENERGY_CONSUMPTION * 3;
     private OreWasher oreWasher;
     private final List<ItemStack> acceptableInputs = new ArrayList<>(Arrays.asList(
-        new ItemStack(Material.COBBLESTONE), new ItemStack(Material.ANDESITE),
-        new ItemStack(Material.DIORITE), new ItemStack(Material.GRANITE)
+            new ItemStack(Material.COBBLESTONE), new ItemStack(Material.ANDESITE),
+            new ItemStack(Material.DIORITE), new ItemStack(Material.GRANITE)
     ));
 
     public ElectricDustFabricator(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
@@ -56,7 +56,7 @@ public class ElectricDustFabricator extends AContainer implements RecipeDisplayI
 
         for (SlimefunItemStack dust : Constants.dusts) {
             displayRecipes.add(new CustomItemStack(Material.COBBLESTONE,
-                "&fAny Cobblestone Variant", "&7Cobblestone", "&7Andesite", "&7Diorite", "&7Granite"
+                    "&fAny Cobblestone Variant", "&7Cobblestone", "&7Andesite", "&7Diorite", "&7Granite"
             ));
             displayRecipes.add(dust);
         }
@@ -74,8 +74,8 @@ public class ElectricDustFabricator extends AContainer implements RecipeDisplayI
                     }
 
                     ItemStack dust = oreWasher.getRandomDust();
-                    MachineRecipe recipe = new MachineRecipe(4 / getSpeed(), new ItemStack[] {acceptableInput},
-                            new ItemStack[] {dust});
+                    MachineRecipe recipe = new MachineRecipe(4 / getSpeed(), new ItemStack[]{acceptableInput},
+                            new ItemStack[]{dust});
 
                     if (menu.fits(recipe.getOutput()[0], getOutputSlots())) {
                         menu.consumeItem(slot);
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/ElectricDustRecycler.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/ElectricDustRecycler.java
similarity index 95%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/ElectricDustRecycler.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/ElectricDustRecycler.java
index a393283..f5df357 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/ElectricDustRecycler.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/ElectricDustRecycler.java
@@ -1,17 +1,17 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Constants;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.RecipeDisplayItem;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;
 import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
-import io.ncbpfluffybear.fluffymachines.utils.Constants;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.AContainer;
 import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
 import org.bukkit.event.block.BlockBreakEvent;
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/SmartFactory.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/SmartFactory.java
similarity index 98%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/SmartFactory.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/SmartFactory.java
index e5c91f2..bdcaaed 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/SmartFactory.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/SmartFactory.java
@@ -1,5 +1,6 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -15,14 +16,6 @@ import io.github.thebusybiscuit.slimefun4.libraries.dough.collections.Pair;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
 import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import javax.annotation.Nonnull;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
 import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
@@ -36,6 +29,9 @@ import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
 
+import javax.annotation.Nonnull;
+import java.util.*;
+
 /**
  * A machine that constructs ingots
  * out of its raw materials
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/WarpPad.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/WarpPad.java
similarity index 92%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/WarpPad.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/WarpPad.java
index 0f977af..116d806 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/WarpPad.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/WarpPad.java
@@ -1,16 +1,16 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.objects.NonHopperableBlock;
 import io.github.thebusybiscuit.slimefun4.api.events.PlayerRightClickEvent;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemHandler;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.HologramOwner;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockPlaceHandler;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockUseHandler;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemHandler;
-import io.ncbpfluffybear.fluffymachines.objects.NonHopperableBlock;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import org.bukkit.block.Block;
 import org.bukkit.event.block.BlockBreakEvent;
 import org.bukkit.event.block.BlockPlaceEvent;
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/WaterSprinkler.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/WaterSprinkler.java
similarity index 88%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/machines/WaterSprinkler.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/WaterSprinkler.java
index 1c4e51c..2f5a609 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/machines/WaterSprinkler.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/machines/WaterSprinkler.java
@@ -1,15 +1,15 @@
-package io.ncbpfluffybear.fluffymachines.machines;
+package id.universenetwork.sfa_loader.addons.fluffymachines.machines;
 
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.accelerators.AbstractGrowthAccelerator;
 import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.accelerators.CropGrowthAccelerator;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import org.bukkit.Material;
 import org.bukkit.Particle;
 import org.bukkit.block.Block;
@@ -36,12 +36,12 @@ public class WaterSprinkler extends AbstractGrowthAccelerator {
     private static final int RADIUS = 2;
     private static final int PROGRESS_SLOT = 4;
     private static final CustomItemStack noWaterItem = new CustomItemStack(Material.BUCKET,
-        "&cNo water found",
-        "",
-        "&cPlease place water under the sprinkler!"
+            "&cNo water found",
+            "",
+            "&cPlease place water under the sprinkler!"
     );
     private static final CustomItemStack waterFoundItem = new CustomItemStack(Material.WATER_BUCKET,
-        "&bWater detected"
+            "&bWater detected"
     );
     private final ItemSetting<Boolean> particles = new ItemSetting<>(this, "particles", true);
 
@@ -49,12 +49,12 @@ public class WaterSprinkler extends AbstractGrowthAccelerator {
         super(category, item, recipeType, recipe);
 
         createPreset(this, "&bWater Sprinkler",
-            blockMenuPreset -> {
-                for (int i = 0; i < 9; i++)
-                    blockMenuPreset.addItem(i, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
+                blockMenuPreset -> {
+                    for (int i = 0; i < 9; i++)
+                        blockMenuPreset.addItem(i, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
 
-                blockMenuPreset.addItem(PROGRESS_SLOT, noWaterItem);
-            });
+                    blockMenuPreset.addItem(PROGRESS_SLOT, noWaterItem);
+                });
 
         addItemSetting(successChance, particles);
     }
@@ -109,7 +109,7 @@ public class WaterSprinkler extends AbstractGrowthAccelerator {
 
                     if (particles.getValue()) {
                         block.getWorld().spawnParticle(Particle.WATER_SPLASH, block.getLocation().add(0.5D, 0.5D,
-                            0.5D), 4, 0.1F, 0.1F, 0.1F);
+                                0.5D), 4, 0.1F, 0.1F, 0.1F);
                     }
 
                     BlockData blockData = block.getBlockData();
@@ -145,7 +145,7 @@ public class WaterSprinkler extends AbstractGrowthAccelerator {
                     crop.setBlockData(ageable);
 
                     crop.getWorld().spawnParticle(Particle.VILLAGER_HAPPY, crop.getLocation().add(0.5D, 0.5D, 0.5D),
-                        4, 0.1F, 0.1F, 0.1F);
+                            4, 0.1F, 0.1F, 0.1F);
                 }
             }
         }
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/CrankGenerator.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/CrankGenerator.java
similarity index 67%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/CrankGenerator.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/CrankGenerator.java
index 77fd02d..9c2b2d5 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/CrankGenerator.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/CrankGenerator.java
@@ -1,17 +1,13 @@
-package io.ncbpfluffybear.fluffymachines.multiblocks;
+package id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks.components.GeneratorCore;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.FluffyItems;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetProvider;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.core.multiblocks.MultiBlockMachine;
-import io.ncbpfluffybear.fluffymachines.multiblocks.components.GeneratorCore;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
-import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.ncbpfluffybear.fluffymachines.utils.FluffyItems;
-import org.bukkit.Bukkit;
-import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.Sound;
 import org.bukkit.block.Block;
@@ -19,16 +15,14 @@ import org.bukkit.block.BlockFace;
 import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 
-import javax.annotation.Nonnull;
-
 public class CrankGenerator extends MultiBlockMachine {
 
     public static final int RATE = 16;
     public static final int CAPACITY = 64;
 
     public CrankGenerator(ItemGroup category, SlimefunItemStack item) {
-        super(category, item, new ItemStack[] {null, null, null, null, new ItemStack(Material.LEVER), null, null,
-            FluffyItems.GENERATOR_CORE, null}, BlockFace.SELF);
+        super(category, item, new ItemStack[]{null, null, null, null, new ItemStack(Material.LEVER), null, null,
+                FluffyItems.GENERATOR_CORE, null}, BlockFace.SELF);
     }
 
     public void onInteract(Player p, Block b) {
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/ExpDispenser.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/ExpDispenser.java
similarity index 91%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/ExpDispenser.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/ExpDispenser.java
index 1a99526..ed923bc 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/ExpDispenser.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/ExpDispenser.java
@@ -1,11 +1,11 @@
-package io.ncbpfluffybear.fluffymachines.multiblocks;
+package id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.items.Barrel;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.core.multiblocks.MultiBlockMachine;
-import io.ncbpfluffybear.fluffymachines.items.Barrel;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/Foundry.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/Foundry.java
similarity index 75%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/Foundry.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/Foundry.java
index b323836..924619a 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/Foundry.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/Foundry.java
@@ -1,15 +1,14 @@
-package io.ncbpfluffybear.fluffymachines.multiblocks;
+package id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks;
 
-import io.github.thebusybiscuit.slimefun4.core.multiblocks.MultiBlockMachine;
-import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
-import io.ncbpfluffybear.fluffymachines.multiblocks.components.SuperheatedFurnace;
-import io.ncbpfluffybear.fluffymachines.utils.FluffyItems;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
+import id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks.components.SuperheatedFurnace;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.FluffyItems;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import java.util.Objects;
-import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.core.multiblocks.MultiBlockMachine;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
+import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
@@ -27,10 +26,10 @@ import org.bukkit.inventory.ItemStack;
 public class Foundry extends MultiBlockMachine {
 
     public Foundry(ItemGroup category, SlimefunItemStack item) {
-        super(category, item, new ItemStack[] {
-            new ItemStack(Material.NETHERITE_BLOCK), FluffyItems.SUPERHEATED_FURNACE, new ItemStack(Material.NETHERITE_BLOCK),
-            new ItemStack(Material.NETHERITE_BLOCK), new ItemStack(Material.GLASS), new ItemStack(Material.NETHERITE_BLOCK),
-            new ItemStack(Material.NETHERITE_BLOCK), new ItemStack(Material.CAULDRON), new ItemStack(Material.NETHERITE_BLOCK)
+        super(category, item, new ItemStack[]{
+                new ItemStack(Material.NETHERITE_BLOCK), FluffyItems.SUPERHEATED_FURNACE, new ItemStack(Material.NETHERITE_BLOCK),
+                new ItemStack(Material.NETHERITE_BLOCK), new ItemStack(Material.GLASS), new ItemStack(Material.NETHERITE_BLOCK),
+                new ItemStack(Material.NETHERITE_BLOCK), new ItemStack(Material.CAULDRON), new ItemStack(Material.NETHERITE_BLOCK)
         }, BlockFace.DOWN);
     }
 
@@ -49,7 +48,7 @@ public class Foundry extends MultiBlockMachine {
 
                 p.getInventory().getItemInMainHand().setType(Material.BUCKET);
                 ArmorStand lavaStand = (ArmorStand) p.getWorld().spawnEntity(b.getLocation().add(0.5, -3, 0.5),
-                    EntityType.ARMOR_STAND);
+                        EntityType.ARMOR_STAND);
                 lavaStand.getEquipment().setHelmet(new CustomItemStack(
                         SlimefunUtils.getCustomHead("b6965e6a58684c277d18717cec959f2833a72dfa95661019dbcdf3dbf66b048")));
                 lavaStand.setCanPickupItems(false);
@@ -58,7 +57,7 @@ public class Foundry extends MultiBlockMachine {
                 lavaStand.setCustomName("hehexdfluff");
                 lavaStand.setCustomNameVisible(false);
                 Furnace furnace = (Furnace) b.getState();
-                furnace.setBurnTime((short)1000000);
+                furnace.setBurnTime((short) 1000000);
                 furnace.update(true);
 
                 BlockStorage.addBlockInfo(b, "stand", String.valueOf(lavaStand.getUniqueId()));
@@ -69,8 +68,8 @@ public class Foundry extends MultiBlockMachine {
         } else if (BlockStorage.getLocationInfo(b.getLocation(), "ignited") != null) {
             // Reheat furnace (Cosmetic)
             Furnace furnace = (Furnace) b.getState();
-            furnace.setBurnTime((short)1000000);
+            furnace.setBurnTime((short) 1000000);
             furnace.update(true);
         }
-     }
+    }
 }
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/components/GeneratorCore.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/components/GeneratorCore.java
similarity index 94%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/components/GeneratorCore.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/components/GeneratorCore.java
index cef65bc..9ee72fe 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/components/GeneratorCore.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/components/GeneratorCore.java
@@ -1,4 +1,4 @@
-package io.ncbpfluffybear.fluffymachines.multiblocks.components;
+package id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks.components;
 
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/components/SuperheatedFurnace.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/components/SuperheatedFurnace.java
similarity index 87%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/components/SuperheatedFurnace.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/components/SuperheatedFurnace.java
index cbf919e..f93dda7 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/multiblocks/components/SuperheatedFurnace.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/multiblocks/components/SuperheatedFurnace.java
@@ -1,26 +1,26 @@
-package io.ncbpfluffybear.fluffymachines.multiblocks.components;
+package id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks.components;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks.Foundry;
+import id.universenetwork.sfa_loader.addons.fluffymachines.objects.NonHopperableBlock;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Constants;
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;
-import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-import io.ncbpfluffybear.fluffymachines.objects.NonHopperableBlock;
-import io.ncbpfluffybear.fluffymachines.utils.Constants;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
 import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
 import me.mrCookieSlime.Slimefun.api.item_transport.ItemTransportFlow;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
-import io.ncbpfluffybear.fluffymachines.multiblocks.Foundry;
 import org.apache.commons.lang.WordUtils;
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
@@ -38,7 +38,6 @@ import java.util.List;
 import java.util.UUID;
 
 /**
- *
  * Melts and stores dusts and ingots
  * and can be withdrawn in either form.
  * Component of {@link Foundry}
@@ -46,7 +45,6 @@ import java.util.UUID;
  * @author NCBPFluffyBear
  */
 public class SuperheatedFurnace extends NonHopperableBlock {
-
     private static final int[] inputBorder = {0, 2, 9, 11, 18, 19, 20};
     private static final int[] dustOutputBorder = {3, 5, 12, 14, 21, 22, 23};
     private static final int[] ingotOutputBorder = {6, 8, 15, 17, 24, 25, 26};
@@ -61,15 +59,15 @@ public class SuperheatedFurnace extends NonHopperableBlock {
     private static final Material netherite = Material.NETHERITE_BLOCK;
     private final int MAX_STACK_SIZE = 64;
 
-    private static final SlimefunItemStack[] dusts = new SlimefunItemStack[] {
-        SlimefunItems.COPPER_DUST, SlimefunItems.GOLD_DUST, SlimefunItems.IRON_DUST,
-        SlimefunItems.LEAD_DUST, SlimefunItems.ALUMINUM_DUST, SlimefunItems.ZINC_DUST,
-        SlimefunItems.TIN_DUST, SlimefunItems.SILVER_DUST, SlimefunItems.MAGNESIUM_DUST};
+    private static final SlimefunItemStack[] dusts = new SlimefunItemStack[]{
+            SlimefunItems.COPPER_DUST, SlimefunItems.GOLD_DUST, SlimefunItems.IRON_DUST,
+            SlimefunItems.LEAD_DUST, SlimefunItems.ALUMINUM_DUST, SlimefunItems.ZINC_DUST,
+            SlimefunItems.TIN_DUST, SlimefunItems.SILVER_DUST, SlimefunItems.MAGNESIUM_DUST};
 
-    private static final SlimefunItemStack[] ingots = new SlimefunItemStack[] {
-        SlimefunItems.COPPER_INGOT,
-        SlimefunItems.LEAD_INGOT, SlimefunItems.ALUMINUM_INGOT, SlimefunItems.ZINC_INGOT,
-        SlimefunItems.TIN_INGOT, SlimefunItems.SILVER_INGOT, SlimefunItems.MAGNESIUM_INGOT};
+    private static final SlimefunItemStack[] ingots = new SlimefunItemStack[]{
+            SlimefunItems.COPPER_INGOT,
+            SlimefunItems.LEAD_INGOT, SlimefunItems.ALUMINUM_INGOT, SlimefunItems.ZINC_INGOT,
+            SlimefunItems.TIN_INGOT, SlimefunItems.SILVER_INGOT, SlimefunItems.MAGNESIUM_INGOT};
 
     private final int OVERFLOW_AMOUNT = 3240;
 
@@ -82,7 +80,6 @@ public class SuperheatedFurnace extends NonHopperableBlock {
         addItemSetting(breakOnlyWhenEmpty);
 
         new BlockMenuPreset(getId(), "&cFoundry") {
-
             @Override
             public void init() {
                 constructMenu(this);
@@ -94,7 +91,7 @@ public class SuperheatedFurnace extends NonHopperableBlock {
 
                     menu.replaceExistingItem(4, new CustomItemStack(Material.GUNPOWDER, "&6Dust Available: &e0", "&a> &eLeft Click &ahere to retrieve 1", "&a> &eLeft Click &ahere to retrieve 64"));
                     menu.replaceExistingItem(7, new CustomItemStack(Material.IRON_INGOT, "&6Ingots Available: &e0", "&a> &eRight Click &ahere to retrieve 1", "&a> &eLeft Click &ahere to retrieve 64"));
-                    menu.replaceExistingItem(1, new CustomItemStack(Material.CHEST, "&6Melted Dust: &e0 &7(0%)", "&bType: None",  "&7Stacks: 0"));
+                    menu.replaceExistingItem(1, new CustomItemStack(Material.CHEST, "&6Melted Dust: &e0 &7(0%)", "&bType: None", "&7Stacks: 0"));
 
                     BlockStorage.addBlockInfo(b, "stored", "0");
                 }
@@ -115,10 +112,10 @@ public class SuperheatedFurnace extends NonHopperableBlock {
             @Override
             public boolean canOpen(@Nonnull Block b, @Nonnull Player p) {
                 return (p.hasPermission("slimefun.inventory.bypass")
-                    || Slimefun.getProtectionManager().hasPermission(
-                    p, b.getLocation(), Interaction.INTERACT_BLOCK))
-                    && getBlockInfo(b.getLocation(), "accessible") != null
-                    && getBlockInfo(b.getLocation(), "ignited") != null && checkStructure(b);
+                        || Slimefun.getProtectionManager().hasPermission(
+                        p, b.getLocation(), Interaction.INTERACT_BLOCK))
+                        && getBlockInfo(b.getLocation(), "accessible") != null
+                        && getBlockInfo(b.getLocation(), "ignited") != null && checkStructure(b);
             }
 
             @Override
@@ -129,9 +126,9 @@ public class SuperheatedFurnace extends NonHopperableBlock {
             @Override
             public int[] getSlotsAccessedByItemTransport(DirtyChestMenu menu, ItemTransportFlow flow, ItemStack item) {
                 if (flow == ItemTransportFlow.INSERT) {
-                    return new int[] {INPUT_SLOT};
+                    return new int[]{INPUT_SLOT};
                 } else if (flow == ItemTransportFlow.WITHDRAW) {
-                    return new int[] {DUST_OUTPUT_SLOT, INGOT_OUTPUT_SLOT};
+                    return new int[]{DUST_OUTPUT_SLOT, INGOT_OUTPUT_SLOT};
                 } else {
                     return new int[0];
                 }
@@ -184,7 +181,7 @@ public class SuperheatedFurnace extends NonHopperableBlock {
                         if (stored > OVERFLOW_AMOUNT) {
 
                             Utils.send(p, "&eThere are more than " + OVERFLOW_AMOUNT + " items in this superheated furnace! " +
-                                "Dropping " + OVERFLOW_AMOUNT + " items instead!");
+                                    "Dropping " + OVERFLOW_AMOUNT + " items instead!");
                             int toRemove = OVERFLOW_AMOUNT;
                             while (toRemove >= stackSize) {
 
@@ -312,7 +309,7 @@ public class SuperheatedFurnace extends NonHopperableBlock {
                         registerDust(b, "GOLD", amount);
                     }
                 } else if (inputItem.getType() == Material.IRON_INGOT
-                    && inputItem.getItemMeta().equals(new ItemStack(Material.IRON_INGOT).getItemMeta())
+                        && inputItem.getItemMeta().equals(new ItemStack(Material.IRON_INGOT).getItemMeta())
                 ) {
                     inv.consumeItem(INPUT_SLOT, amount);
 
@@ -321,10 +318,10 @@ public class SuperheatedFurnace extends NonHopperableBlock {
 
             } else {
                 if (sfItem != null && ((sfItem.getId().equals(type + "_DUST") || sfItem.getId().equals(type + "_INGOT"))
-                    || (type.equals("GOLD") && sfItem.getId().equals(SlimefunItems.GOLD_4K.getItemId())))
-                    || (type.equals("IRON") && inputItem.getType() == Material.IRON_INGOT
-                    && inputItem.getItemMeta().equals(new ItemStack(Material.IRON_INGOT).getItemMeta()))
-                    && stored + amount < MAX_STORAGE) {
+                        || (type.equals("GOLD") && sfItem.getId().equals(SlimefunItems.GOLD_4K.getItemId())))
+                        || (type.equals("IRON") && inputItem.getType() == Material.IRON_INGOT
+                        && inputItem.getItemMeta().equals(new ItemStack(Material.IRON_INGOT).getItemMeta()))
+                        && stored + amount < MAX_STORAGE) {
                     inv.consumeItem(INPUT_SLOT, amount);
                     addDust(b, amount);
                 }
@@ -353,7 +350,7 @@ public class SuperheatedFurnace extends NonHopperableBlock {
 
         if (stored.equals("0")) {
             setBlockInfo(b, "type", null);
-            inv.replaceExistingItem(INPUT_INDICATOR, new CustomItemStack(new ItemStack(Material.CHEST), "&6Melted Dust: &e0 &7(0%)", "&bType: None",  "&7Stacks: 0"));
+            inv.replaceExistingItem(INPUT_INDICATOR, new CustomItemStack(new ItemStack(Material.CHEST), "&6Melted Dust: &e0 &7(0%)", "&bType: None", "&7Stacks: 0"));
         } else {
             inv.replaceExistingItem(INPUT_INDICATOR, new CustomItemStack(new ItemStack(Material.CHEST), "&6Melted Dust: &e" + stored + " &7(" + Double.parseDouble(stored) / MAX_STORAGE * 100 + "%)", "&bType: " + type, "&7Stacks: " + Double.parseDouble(stored) / 64));
 
@@ -372,7 +369,7 @@ public class SuperheatedFurnace extends NonHopperableBlock {
         int stored = Integer.parseInt(getBlockInfo(b.getLocation(), "stored"));
 
         if (stored > 0 && (menu.getItemInSlot(DUST_OUTPUT_SLOT) == null
-            || menu.getItemInSlot(DUST_OUTPUT_SLOT).getAmount() < 64)) {
+                || menu.getItemInSlot(DUST_OUTPUT_SLOT).getAmount() < 64)) {
 
             String type = getBlockInfo(b.getLocation(), "type");
             int amount;
@@ -405,7 +402,7 @@ public class SuperheatedFurnace extends NonHopperableBlock {
         int stored = Integer.parseInt(getBlockInfo(b.getLocation(), "stored"));
 
         if (stored > 0 && (menu.getItemInSlot(INGOT_OUTPUT_SLOT) == null
-            || menu.getItemInSlot(INGOT_OUTPUT_SLOT).getAmount() < 64)) {
+                || menu.getItemInSlot(INGOT_OUTPUT_SLOT).getAmount() < 64)) {
 
             String type = getBlockInfo(b.getLocation(), "type");
 
@@ -456,12 +453,12 @@ public class SuperheatedFurnace extends NonHopperableBlock {
         // Checks multiblock structure
 
         return b.getRelative(face).getType() == netherite
-            && checkRite(relative.getRelative(0, -1, 0))
-            && checkRite(relative.getRelative(0, -2, 0))
-            && checkRite(b.getRelative(face.getOppositeFace()).getRelative(0, -1, 0))
-            && checkRite(b.getRelative(face.getOppositeFace()).getRelative(0, -2, 0))
-            && b.getRelative(0, -1, 0).getType() == Material.GLASS
-            && b.getRelative(0, -2, 0).getType() == Material.CAULDRON;
+                && checkRite(relative.getRelative(0, -1, 0))
+                && checkRite(relative.getRelative(0, -2, 0))
+                && checkRite(b.getRelative(face.getOppositeFace()).getRelative(0, -1, 0))
+                && checkRite(b.getRelative(face.getOppositeFace()).getRelative(0, -2, 0))
+                && b.getRelative(0, -1, 0).getType() == Material.GLASS
+                && b.getRelative(0, -2, 0).getType() == Material.CAULDRON;
     }
 
     private boolean checkRite(Block b) {
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/objects/AutoCrafter.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/objects/AutoCrafter.java
similarity index 88%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/objects/AutoCrafter.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/objects/AutoCrafter.java
index 32298e3..81816e5 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/objects/AutoCrafter.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/objects/AutoCrafter.java
@@ -1,28 +1,28 @@
-package io.ncbpfluffybear.fluffymachines.objects;
+package id.universenetwork.sfa_loader.addons.fluffymachines.objects;
 
 import io.github.thebusybiscuit.slimefun4.api.events.BlockPlacerPlaceEvent;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetComponent;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockPlaceHandler;
 import io.github.thebusybiscuit.slimefun4.core.multiblocks.MultiBlockMachine;
 import io.github.thebusybiscuit.slimefun4.core.networks.energy.EnergyNetComponentType;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ClickAction;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
 import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
 import me.mrCookieSlime.Slimefun.api.item_transport.ItemTransportFlow;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Player;
@@ -37,7 +37,6 @@ import java.util.Comparator;
 import java.util.List;
 
 public class AutoCrafter extends SlimefunItem implements EnergyNetComponent {
-
     public static final int ENERGY_CONSUMPTION = 128;
     public static final int CAPACITY = ENERGY_CONSUMPTION * 3;
     private final int[] border = {0, 1, 3, 4, 5, 7, 8, 13, 14, 15, 16, 17, 50, 51, 52, 53};
@@ -63,7 +62,6 @@ public class AutoCrafter extends SlimefunItem implements EnergyNetComponent {
 
     private void constructMenu(String displayName) {
         new BlockMenuPreset(getId(), displayName) {
-
             @Override
             public void init() {
                 constructMenu(this);
@@ -114,31 +112,22 @@ public class AutoCrafter extends SlimefunItem implements EnergyNetComponent {
     }
 
     protected int[] getCustomItemTransport(DirtyChestMenu menu, ItemTransportFlow flow, ItemStack item) {
-        if (flow == ItemTransportFlow.WITHDRAW) {
-            return getOutputSlots();
-        }
+        if (flow == ItemTransportFlow.WITHDRAW) return getOutputSlots();
 
         List<Integer> slots = new ArrayList<>();
-        for (int slot : getInputSlots()) {
-            if (menu.getItemInSlot(slot) != null) {
-                slots.add(slot);
-            }
-        }
+        for (int slot : getInputSlots()) if (menu.getItemInSlot(slot) != null) slots.add(slot);
 
         slots.sort(compareSlots(menu));
 
         int[] array = new int[slots.size()];
 
-        for (int i = 0; i < slots.size(); i++) {
-            array[i] = slots.get(i);
-        }
+        for (int i = 0; i < slots.size(); i++) array[i] = slots.get(i);
 
         return array;
     }
 
     private BlockPlaceHandler onPlace() {
         return new BlockPlaceHandler(true) {
-
             @Override
             public void onPlayerPlace(@Nonnull BlockPlaceEvent e) {
                 BlockStorage.addBlockInfo(e.getBlock(), "enabled", String.valueOf(false));
@@ -162,7 +151,6 @@ public class AutoCrafter extends SlimefunItem implements EnergyNetComponent {
                     inv.dropItems(b.getLocation(), getInputSlots());
                     inv.dropItems(b.getLocation(), getOutputSlots());
                 }
-
             }
         };
     }
@@ -174,9 +162,8 @@ public class AutoCrafter extends SlimefunItem implements EnergyNetComponent {
     protected void constructMenu(BlockMenuPreset preset) {
         borders(preset, border, inputBorder, outputBorder);
 
-        for (int i : getOutputSlots()) {
+        for (int i : getOutputSlots())
             preset.addMenuClickHandler(i, new ChestMenu.AdvancedMenuClickHandler() {
-
                 @Override
                 public boolean onClick(Player p, int slot, ItemStack cursor, ClickAction action) {
                     return false;
@@ -189,12 +176,11 @@ public class AutoCrafter extends SlimefunItem implements EnergyNetComponent {
                     return cursor.getType() == Material.AIR;
                 }
             });
-        }
 
         preset.addItem(2, new CustomItemStack(new ItemStack(material), "&eRecipe",
-                "", "&bPut in the Recipe you want to craft", machineName + " Recipes ONLY"
-            ),
-            (p, slot, item, action) -> false);
+                        "", "&bPut in the Recipe you want to craft", machineName + " Recipes ONLY"
+                ),
+                (p, slot, item, action) -> false);
     }
 
     public int getEnergyConsumption() {
@@ -236,13 +222,9 @@ public class AutoCrafter extends SlimefunItem implements EnergyNetComponent {
     }
 
     protected void tick(Block block) {
-        if (BlockStorage.getLocationInfo(block.getLocation(), "enabled").equals(String.valueOf(false))) {
-            return;
-        }
+        if (BlockStorage.getLocationInfo(block.getLocation(), "enabled").equals(String.valueOf(false))) return;
 
-        if (getCharge(block.getLocation()) < getEnergyConsumption()) {
-            return;
-        }
+        if (getCharge(block.getLocation()) < getEnergyConsumption()) return;
 
         craftIfValid(block);
     }
@@ -253,20 +235,15 @@ public class AutoCrafter extends SlimefunItem implements EnergyNetComponent {
         // Make sure at least 1 slot is free
         for (int outSlot : getOutputSlots()) {
             ItemStack outItem = menu.getItemInSlot(outSlot);
-            if (outItem == null || outItem.getAmount() < outItem.getMaxStackSize()) {
-                break;
-            } else if (outSlot == getOutputSlots()[1]) {
-                return;
-            }
+            if (outItem == null || outItem.getAmount() < outItem.getMaxStackSize()) break;
+            else if (outSlot == getOutputSlots()[1]) return;
         }
 
         // Find matching recipe
         for (ItemStack[] input : RecipeType.getRecipeInputList(mblock)) {
             if (isCraftable(menu, input)) {
                 ItemStack output = RecipeType.getRecipeOutputList(mblock, input).clone();
-                if (!menu.fits(output, getOutputSlots())) {
-                    return;
-                }
+                if (!menu.fits(output, getOutputSlots())) return;
                 craft(output, menu);
                 removeCharge(block.getLocation(), getEnergyConsumption());
                 return;
@@ -281,7 +258,7 @@ public class AutoCrafter extends SlimefunItem implements EnergyNetComponent {
         for (int j = 0; j < 9; j++) {
             ItemStack item = inv.getItemInSlot(getInputSlots()[j]);
             if ((item != null && item.getAmount() == 1 && item.getType().getMaxStackSize() != 1)
-                || !SlimefunUtils.isItemSimilar(inv.getItemInSlot(getInputSlots()[j]), recipe[j], true)) {
+                    || !SlimefunUtils.isItemSimilar(inv.getItemInSlot(getInputSlots()[j]), recipe[j], true)) {
                 return false;
             }
         }
@@ -293,29 +270,23 @@ public class AutoCrafter extends SlimefunItem implements EnergyNetComponent {
         for (int j = 0; j < 9; j++) {
             ItemStack item = inv.getItemInSlot(getInputSlots()[j]);
 
-            if (item != null && item.getType() != Material.AIR) {
-                inv.consumeItem(getInputSlots()[j]);
-            }
+            if (item != null && item.getType() != Material.AIR) inv.consumeItem(getInputSlots()[j]);
         }
 
         inv.pushItem(output, outputSlots);
     }
 
     static void borders(BlockMenuPreset preset, int[] border, int[] inputBorder, int[] outputBorder) {
-        for (int i : border) {
+        for (int i : border)
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.GRAY_STAINED_GLASS_PANE), " "),
-                (p, slot, item, action) -> false);
-        }
+                    (p, slot, item, action) -> false);
 
-        for (int i : inputBorder) {
+        for (int i : inputBorder)
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.CYAN_STAINED_GLASS_PANE), " "),
-                (p, slot, item, action) -> false);
-        }
+                    (p, slot, item, action) -> false);
 
-        for (int i : outputBorder) {
+        for (int i : outputBorder)
             preset.addItem(i, new CustomItemStack(new ItemStack(Material.ORANGE_STAINED_GLASS_PANE), " "),
-                (p, slot, item, action) -> false);
-        }
+                    (p, slot, item, action) -> false);
     }
-}
-
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/objects/DoubleHologramOwner.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/objects/DoubleHologramOwner.java
similarity index 91%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/objects/DoubleHologramOwner.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/objects/DoubleHologramOwner.java
index ffe831d..2ba9633 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/objects/DoubleHologramOwner.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/objects/DoubleHologramOwner.java
@@ -1,18 +1,18 @@
-package io.ncbpfluffybear.fluffymachines.objects;
+package id.universenetwork.sfa_loader.addons.fluffymachines.objects;
 
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.utils.Utils;
 import io.github.thebusybiscuit.slimefun4.core.attributes.ItemAttribute;
 import io.github.thebusybiscuit.slimefun4.core.services.holograms.HologramsService;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.implementation.items.blocks.HologramProjector;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.common.ChatColors;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
 import org.bukkit.Location;
 import org.bukkit.block.Block;
 import org.bukkit.util.Vector;
 
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+
 /**
  * This {@link ItemAttribute} manages holograms.
  * Modified version of {@link io.github.thebusybiscuit.slimefun4.core.attributes.HologramOwner}
@@ -20,13 +20,10 @@ import org.bukkit.util.Vector;
  *
  * @author TheBusyBiscuit
  * @author NCBPFluffyBear
- *
  * @see HologramProjector
  * @see HologramsService
- *
  */
 public interface DoubleHologramOwner extends ItemAttribute {
-
     default void updateHologram(@Nonnull Block b, @Nullable String topText, @Nonnull String bottomText) {
         Location locTop = b.getLocation().add(getTopHologramOffset(b));
         Location locBot = b.getLocation().add(getBottomHologramOffset(b));
@@ -46,7 +43,6 @@ public interface DoubleHologramOwner extends ItemAttribute {
         return Slimefun.getHologramsService().getDefaultOffset();
     }
 
-    @Nonnull
     default double getHologramSpacing() {
         return 0.2;
     }
@@ -60,5 +56,4 @@ public interface DoubleHologramOwner extends ItemAttribute {
     default Vector getBottomHologramOffset(@Nonnull Block block) {
         return getHologramOffset(block);
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/objects/NonHopperableBlock.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/objects/NonHopperableBlock.java
similarity index 91%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/objects/NonHopperableBlock.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/objects/NonHopperableBlock.java
index f3f6e17..8404a27 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/objects/NonHopperableBlock.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/objects/NonHopperableBlock.java
@@ -3,7 +3,7 @@
 // (powered by FernFlower decompiler)
 //
 
-package io.ncbpfluffybear.fluffymachines.objects;
+package id.universenetwork.sfa_loader.addons.fluffymachines.objects;
 
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
@@ -25,9 +25,6 @@ public class NonHopperableBlock extends SlimefunItem {
         if (e.getSource().getType() == InventoryType.HOPPER && e.getDestination().getLocation() != null
                 && BlockStorage.hasBlockInfo(e.getDestination().getLocation())
                 && BlockStorage.check(e.getDestination().getLocation()) instanceof NonHopperableBlock
-        ) {
-            e.setCancelled(true);
-        }
-
+        ) e.setCancelled(true);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/CancelPlace.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/CancelPlace.java
new file mode 100644
index 0000000..295fa8c
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/CancelPlace.java
@@ -0,0 +1,4 @@
+package id.universenetwork.sfa_loader.addons.fluffymachines.utils;
+
+public interface CancelPlace {
+}
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/Constants.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/Constants.java
similarity index 64%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/utils/Constants.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/Constants.java
index 04377df..dee7ee6 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/Constants.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/Constants.java
@@ -1,9 +1,9 @@
-package io.ncbpfluffybear.fluffymachines.utils;
+package id.universenetwork.sfa_loader.addons.fluffymachines.utils;
 
-import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
-import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-import io.ncbpfluffybear.fluffymachines.FluffyMachines;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
 import org.bukkit.Bukkit;
 import org.bukkit.NamespacedKey;
 
@@ -15,26 +15,22 @@ import java.util.regex.Pattern;
 public final class Constants {
 
     public static final int SERVER_VERSION = Integer.parseInt(Bukkit.getVersion().replaceFirst(".*MC: ", "").replace(
-        ")", "").replace(".", ""));
+            ")", "").replace(".", ""));
 
     public static final String SLIMEFUN_VERSION = Slimefun.getVersion();
     public static boolean SLIMEFUN_UPDATED = false;
 
     public static final Pattern VERSION_PATTERN = Pattern.compile("(DEV - )([0-9]+)");
 
-    public static final NamespacedKey GLOW_ENCHANT = new NamespacedKey(FluffyMachines.getInstance(),
-        "fm_glow_enchant");
+    public static final NamespacedKey GLOW_ENCHANT = AbstractAddon.createKey("fm_glow_enchant");
 
     public static final boolean isSoulJarsInstalled = Bukkit.getPluginManager().isPluginEnabled("SoulJars");
 
     public static final List<SlimefunItemStack> dusts = new ArrayList<>(Arrays.asList(
-        SlimefunItems.COPPER_DUST, SlimefunItems.GOLD_DUST, SlimefunItems.IRON_DUST,
-        SlimefunItems.LEAD_DUST, SlimefunItems.ALUMINUM_DUST, SlimefunItems.ZINC_DUST,
-        SlimefunItems.TIN_DUST, SlimefunItems.MAGNESIUM_DUST, SlimefunItems.SILVER_DUST
+            SlimefunItems.COPPER_DUST, SlimefunItems.GOLD_DUST, SlimefunItems.IRON_DUST,
+            SlimefunItems.LEAD_DUST, SlimefunItems.ALUMINUM_DUST, SlimefunItems.ZINC_DUST,
+            SlimefunItems.TIN_DUST, SlimefunItems.MAGNESIUM_DUST, SlimefunItems.SILVER_DUST
     ));
 
     public static final int MAX_STACK_SIZE = 64;
-
-    private Constants() {}
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/Events.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/EventUtils.java
similarity index 94%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/utils/Events.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/EventUtils.java
index 0cefe17..67fb829 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/Events.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/EventUtils.java
@@ -1,12 +1,11 @@
-package io.ncbpfluffybear.fluffymachines.utils;
+package id.universenetwork.sfa_loader.addons.fluffymachines.utils;
 
+import id.universenetwork.sfa_loader.addons.fluffymachines.items.Barrel;
+import id.universenetwork.sfa_loader.addons.fluffymachines.items.FireproofRune;
+import id.universenetwork.sfa_loader.addons.fluffymachines.items.HelicopterHat;
+import id.universenetwork.sfa_loader.addons.fluffymachines.items.tools.WateringCan;
+import id.universenetwork.sfa_loader.addons.fluffymachines.machines.AlternateElevatorPlate;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.ncbpfluffybear.fluffymachines.items.Barrel;
-import io.ncbpfluffybear.fluffymachines.items.FireproofRune;
-import io.ncbpfluffybear.fluffymachines.items.HelicopterHat;
-import io.ncbpfluffybear.fluffymachines.items.tools.WateringCan;
-import io.ncbpfluffybear.fluffymachines.machines.AlternateElevatorPlate;
-import javax.annotation.Nonnull;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -34,7 +33,9 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 
-public class Events implements Listener {
+import javax.annotation.Nonnull;
+
+public class EventUtils implements Listener {
 
     final HelicopterHat helicopterHat = (HelicopterHat) FluffyItems.HELICOPTER_HAT.getItem();
     final WateringCan wateringCan = (WateringCan) FluffyItems.WATERING_CAN.getItem();
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/FluffyItems.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/FluffyItems.java
similarity index 94%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/utils/FluffyItems.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/FluffyItems.java
index e9bd0dc..f4e5988 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/FluffyItems.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/FluffyItems.java
@@ -1,28 +1,18 @@
-package io.ncbpfluffybear.fluffymachines.utils;
+package id.universenetwork.sfa_loader.addons.fluffymachines.utils;
 
 import dev.j3fftw.extrautils.utils.LoreBuilderDynamic;
+import id.universenetwork.sfa_loader.addons.fluffymachines.items.FireproofRune;
+import id.universenetwork.sfa_loader.addons.fluffymachines.items.MiniBarrel;
+import id.universenetwork.sfa_loader.addons.fluffymachines.items.tools.FluffyWrench;
+import id.universenetwork.sfa_loader.addons.fluffymachines.items.tools.PortableCharger;
+import id.universenetwork.sfa_loader.addons.fluffymachines.machines.*;
+import id.universenetwork.sfa_loader.addons.fluffymachines.multiblocks.CrankGenerator;
+import id.universenetwork.sfa_loader.addons.fluffymachines.objects.AutoCrafter;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.core.attributes.MachineTier;
 import io.github.thebusybiscuit.slimefun4.core.attributes.MachineType;
 import io.github.thebusybiscuit.slimefun4.utils.LoreBuilder;
 import io.github.thebusybiscuit.slimefun4.utils.itemstack.ColoredFireworkStar;
-import io.ncbpfluffybear.fluffymachines.items.FireproofRune;
-import io.ncbpfluffybear.fluffymachines.items.MiniBarrel;
-import io.ncbpfluffybear.fluffymachines.items.tools.FluffyWrench;
-import io.ncbpfluffybear.fluffymachines.items.tools.PortableCharger;
-import io.ncbpfluffybear.fluffymachines.machines.AdvancedAutoDisenchanter;
-import io.ncbpfluffybear.fluffymachines.machines.AdvancedChargingBench;
-import io.ncbpfluffybear.fluffymachines.machines.AutoAncientAltar;
-import io.ncbpfluffybear.fluffymachines.machines.AutoCraftingTable;
-import io.ncbpfluffybear.fluffymachines.machines.AutoTableSaw;
-import io.ncbpfluffybear.fluffymachines.machines.BackpackLoader;
-import io.ncbpfluffybear.fluffymachines.machines.BackpackUnloader;
-import io.ncbpfluffybear.fluffymachines.machines.ElectricDustFabricator;
-import io.ncbpfluffybear.fluffymachines.machines.ElectricDustRecycler;
-import io.ncbpfluffybear.fluffymachines.machines.SmartFactory;
-import io.ncbpfluffybear.fluffymachines.machines.WaterSprinkler;
-import io.ncbpfluffybear.fluffymachines.multiblocks.CrankGenerator;
-import io.ncbpfluffybear.fluffymachines.objects.AutoCrafter;
 import org.bukkit.Color;
 import org.bukkit.Material;
 import org.bukkit.enchantments.Enchantment;
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/GlowEnchant.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/GlowEnchant.java
similarity index 96%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/utils/GlowEnchant.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/GlowEnchant.java
index ed45f4a..6315cf4 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/GlowEnchant.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/GlowEnchant.java
@@ -1,4 +1,4 @@
-package io.ncbpfluffybear.fluffymachines.utils;
+package id.universenetwork.sfa_loader.addons.fluffymachines.utils;
 
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import org.bukkit.NamespacedKey;
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/McMMOEvents.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/McMMOEvents.java
similarity index 90%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/utils/McMMOEvents.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/McMMOEvents.java
index 154812e..49fbaed 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/McMMOEvents.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/McMMOEvents.java
@@ -1,4 +1,4 @@
-package io.ncbpfluffybear.fluffymachines.utils;
+package id.universenetwork.sfa_loader.addons.fluffymachines.utils;
 
 import com.gmail.nossr50.events.skills.abilities.McMMOPlayerAbilityActivateEvent;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/Utils.java b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/Utils.java
similarity index 71%
rename from src/main/java/io/ncbpfluffybear/fluffymachines/utils/Utils.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/Utils.java
index 8c1b280..5f18024 100644
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/Utils.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/fluffymachines/utils/Utils.java
@@ -1,22 +1,17 @@
-package io.ncbpfluffybear.fluffymachines.utils;
+package id.universenetwork.sfa_loader.addons.fluffymachines.utils;
 
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
+import id.universenetwork.sfa_loader.utils.TextUtils;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.implementation.handlers.SimpleBlockBreakHandler;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.common.ChatColors;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.protection.Interaction;
 import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
-import io.ncbpfluffybear.fluffymachines.FluffyMachines;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.TreeMap;
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import org.apache.commons.lang.WordUtils;
-import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
@@ -26,17 +21,21 @@ import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.persistence.PersistentDataType;
-import org.bukkit.scheduler.BukkitTask;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.TreeMap;
 
 public final class Utils {
 
-    private static final NamespacedKey fluffykey = new NamespacedKey(FluffyMachines.getInstance(), "fluffykey");
-    private static final NamespacedKey nonClickable = new NamespacedKey(FluffyMachines.getInstance(), "nonclickable");
+    private static final NamespacedKey fluffykey = AbstractAddon.createKey("fluffykey");
+    private static final NamespacedKey nonClickable = AbstractAddon.createKey("nonclickable");
 
     private final static TreeMap<Integer, String> map = new TreeMap<>();
 
     static {
-
         map.put(1000, "M");
         map.put(900, "CM");
         map.put(500, "D");
@@ -50,16 +49,10 @@ public final class Utils {
         map.put(5, "V");
         map.put(4, "IV");
         map.put(1, "I");
-
-    }
-
-    private Utils() {
     }
 
     public static String color(String str) {
-        if (str == null) {
-            return null;
-        }
+        if (str == null) return null;
 
         return ChatColor.translateAlternateColorCodes('&', str);
     }
@@ -76,18 +69,13 @@ public final class Utils {
     public static ItemStack buildNonInteractable(Material material, @Nullable String name, @Nullable String... lore) {
         ItemStack nonClickableItem = new ItemStack(material);
         ItemMeta NCMeta = nonClickableItem.getItemMeta();
-        if (name != null) {
-            NCMeta.setDisplayName(ChatColors.color(name));
-        } else {
-            NCMeta.setDisplayName(" ");
-        }
+        if (name != null) NCMeta.setDisplayName(ChatColors.color(name));
+        else NCMeta.setDisplayName(" ");
 
         if (lore.length > 0) {
             List<String> lines = new ArrayList<>();
 
-            for (String line : lore) {
-                lines.add(ChatColor.translateAlternateColorCodes('&', line));
-            }
+            for (String line : lore) lines.add(TextUtils.translateColor(line));
             NCMeta.setLore(lines);
         }
 
@@ -98,22 +86,17 @@ public final class Utils {
 
     // TODO: Deprecate custom model data method of detecting non interactables
     public static boolean checkNonInteractable(ItemStack item) {
-        if (item == null || item.getItemMeta() == null) {
-            return false;
-        }
+        if (item == null || item.getItemMeta() == null) return false;
 
         return item.getItemMeta().getPersistentDataContainer().getOrDefault(nonClickable, PersistentDataType.BYTE, (byte) 0) == 1;
     }
 
     public static void createBorder(ChestMenu menu, ItemStack backgroundItem, int[] slots) {
-        for (int slot : slots) {
-            menu.addItem(slot, backgroundItem, ChestMenuUtils.getEmptyClickHandler());
-        }
+        for (int slot : slots) menu.addItem(slot, backgroundItem, ChestMenuUtils.getEmptyClickHandler());
     }
 
     public static BlockBreakHandler getDefaultBreakHandler(int[] inputs, int[] outputs) {
         return new SimpleBlockBreakHandler() {
-
             @Override
             public void onBlockBreak(@Nonnull Block b) {
                 BlockMenu inv = BlockStorage.getInventory(b);
@@ -123,29 +106,22 @@ public final class Utils {
                     inv.dropItems(b.getLocation(), outputs);
                 }
             }
-
         };
     }
 
     public static void giveOrDropItem(Player p, ItemStack toGive) {
-        for (ItemStack leftover : p.getInventory().addItem(toGive).values()) {
+        for (ItemStack leftover : p.getInventory().addItem(toGive).values())
             p.getWorld().dropItemNaturally(p.getLocation(), leftover);
-        }
     }
 
     public static String getViewableName(ItemStack item) {
-        if (item.getItemMeta().hasDisplayName()) {
-            return item.getItemMeta().getDisplayName();
-        } else {
-            return WordUtils.capitalizeFully(item.getType().name().replace("_", " "));
-        }
+        if (item.getItemMeta().hasDisplayName()) return item.getItemMeta().getDisplayName();
+        else return WordUtils.capitalizeFully(item.getType().name().replace("_", " "));
     }
 
     public static String toRoman(int number) {
         int l = map.floorKey(number);
-        if (number == l) {
-            return map.get(number);
-        }
+        if (number == l) return map.get(number);
         return map.get(l) + toRoman(number - l);
     }
 
@@ -170,16 +146,4 @@ public final class Utils {
                 || Slimefun.getProtectionManager().hasPermission(
                 p, b.getLocation(), Interaction.INTERACT_BLOCK));
     }
-
-    // Don't use Slimefun's runsync
-    public static BukkitTask runSync(Runnable r) {
-        return FluffyMachines.getInstance() != null && FluffyMachines.getInstance().isEnabled() ?
-                Bukkit.getScheduler().runTask(FluffyMachines.getInstance(), r) : null;
-    }
-
-    public static BukkitTask runSync(Runnable r, long delay) {
-        return FluffyMachines.getInstance() != null && FluffyMachines.getInstance().isEnabled() ?
-                Bukkit.getScheduler().runTaskLater(FluffyMachines.getInstance(), r, delay) : null;
-    }
-}
-
+}
\ No newline at end of file
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/FluffyMachines.java b/src/main/java/io/ncbpfluffybear/fluffymachines/FluffyMachines.java
deleted file mode 100644
index 15329c6..0000000
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/FluffyMachines.java
+++ /dev/null
@@ -1,239 +0,0 @@
-package io.ncbpfluffybear.fluffymachines;
-
-import io.github.thebusybiscuit.slimefun4.api.SlimefunAddon;
-import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.collections.Pair;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.config.Config;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.updater.GitHubBuildsUpdater;
-import io.ncbpfluffybear.fluffymachines.listeners.KeyedCrafterListener;
-import io.ncbpfluffybear.fluffymachines.utils.Constants;
-import io.ncbpfluffybear.fluffymachines.utils.Events;
-import io.ncbpfluffybear.fluffymachines.utils.GlowEnchant;
-import io.ncbpfluffybear.fluffymachines.utils.McMMOEvents;
-import io.ncbpfluffybear.fluffymachines.utils.Utils;
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.logging.Level;
-import javax.annotation.Nonnull;
-import lombok.SneakyThrows;
-import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import org.bstats.bukkit.Metrics;
-import org.bukkit.Bukkit;
-import org.bukkit.ChatColor;
-import org.bukkit.command.Command;
-import org.bukkit.command.CommandSender;
-import org.bukkit.enchantments.Enchantment;
-import org.bukkit.entity.Player;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.Recipe;
-import org.bukkit.inventory.RecipeChoice;
-import org.bukkit.inventory.ShapedRecipe;
-import org.bukkit.inventory.ShapelessRecipe;
-import org.bukkit.plugin.java.JavaPlugin;
-import org.bukkit.util.RayTraceResult;
-
-public class FluffyMachines extends JavaPlugin implements SlimefunAddon {
-
-    private static FluffyMachines instance;
-    public static final HashMap<ItemStack, List<Pair<ItemStack, List<RecipeChoice>>>> shapedVanillaRecipes = new HashMap<>();
-    public static final HashMap<ItemStack, List<Pair<ItemStack, List<RecipeChoice>>>> shapelessVanillaRecipes =
-            new HashMap<>();
-
-    @SneakyThrows
-    @Override
-    public void onEnable() {
-        instance = this;
-        // Read something from your config.yml
-        Config cfg = new Config(this);
-
-        if (cfg.getBoolean("options.auto-update") && getDescription().getVersion().startsWith("DEV - ")) {
-            new GitHubBuildsUpdater(this, getFile(), "NCBPFluffyBear/FluffyMachines/master/").start();
-        }
-
-        // Register Glow
-
-        try {
-            if (!Enchantment.isAcceptingRegistrations()) {
-                Field accepting = Enchantment.class.getDeclaredField("acceptingNew");
-                accepting.setAccessible(true);
-                accepting.set(null, true);
-            }
-        } catch (IllegalAccessException | NoSuchFieldException ignored) {
-            getLogger().warning("Failed to register enchantment.");
-        }
-
-        registerGlow();
-
-        // Register ACT Recipes
-        Iterator<Recipe> recipeIterator = Bukkit.recipeIterator();
-        while (recipeIterator.hasNext()) {
-            Recipe r = recipeIterator.next();
-
-            if (r instanceof ShapedRecipe) {
-                ShapedRecipe sr = (ShapedRecipe) r;
-                List<RecipeChoice> rc = new ArrayList<>();
-                ItemStack key = new ItemStack(sr.getResult().getType(), 1);
-
-                // Convert the recipe to a list
-                for (Map.Entry<Character, RecipeChoice> choice : sr.getChoiceMap().entrySet()) {
-                    if (choice.getValue() != null) {
-                        rc.add(choice.getValue());
-                    }
-                }
-
-                if (!shapedVanillaRecipes.containsKey(key)) {
-                    shapedVanillaRecipes.put(key,
-                            new ArrayList<>(Collections.singletonList(new Pair<>(sr.getResult(), rc))));
-                } else {
-                    shapedVanillaRecipes.get(key).add(new Pair<>(sr.getResult(), rc));
-                }
-
-            } else if (r instanceof ShapelessRecipe) {
-                ShapelessRecipe slr = (ShapelessRecipe) r;
-                ItemStack key = new ItemStack(slr.getResult().getType(), 1);
-
-                // Key has a list of recipe options
-                if (!shapelessVanillaRecipes.containsKey(key)) {
-                    shapelessVanillaRecipes.put(key,
-                            new ArrayList<>(Collections.singletonList(new Pair<>(slr.getResult(), slr.getChoiceList()))));
-                } else {
-                    shapelessVanillaRecipes.get(key).add(new Pair<>(slr.getResult(), slr.getChoiceList()));
-                }
-            }
-        }
-
-        // Register McMMO Events
-        if (getServer().getPluginManager().isPluginEnabled("McMMO")) {
-            Bukkit.getLogger().log(Level.INFO, "McMMO found!");
-            getServer().getPluginManager().registerEvents(new McMMOEvents(), this);
-        }
-
-        // Registering Items
-        FluffyItemSetup.setup(this);
-        FluffyItemSetup.setupBarrels(this);
-
-        // Register Events Class
-        getServer().getPluginManager().registerEvents(new Events(), this);
-        getServer().getPluginManager().registerEvents(new KeyedCrafterListener(), this);
-
-        final Metrics metrics = new Metrics(this, 8927);
-
-        getLogger().log(Level.INFO, ChatColor.GREEN + "Hi there! Want to share your server with the " +
-                "Slimefun community?");
-        getLogger().log(Level.INFO, ChatColor.GREEN + "Join the official Slimefun Discord server at " +
-                "https://discord.gg/slimefun");
-    }
-
-    @Override
-    public void onDisable() {
-        // Logic for disabling the plugin...
-    }
-
-    @Override
-    public boolean onCommand(@Nonnull CommandSender sender, @Nonnull Command cmd, @Nonnull String label, String[] args) {
-
-        if (args.length == 0) {
-            Utils.send(sender, "&cInvalid command");
-            return true;
-        }
-
-        if (!(sender instanceof Player)) {
-            Utils.send(sender, "&cThere are no console commands available");
-            return true;
-        }
-
-        Player p = (Player) sender;
-
-        switch (args[0].toUpperCase()) {
-            case "META":
-                Utils.send(p, String.valueOf(p.getInventory().getItemInMainHand().getItemMeta()));
-                return true;
-            case "RAWMETA":
-                p.sendMessage(String.valueOf(p.getInventory().getItemInMainHand().getItemMeta()).replace("§", "&"));
-                return true;
-            case "VERSION":
-            case "V":
-                Utils.send(p, "&eThe current version is " + this.getPluginVersion());
-                return true;
-        }
-
-        if (p.hasPermission("fluffymachines.admin")) {
-            switch (args[0].toUpperCase()) {
-                case "ADDINFO":
-
-                    if (args.length != 3) {
-                        Utils.send(p, "&cPlease specify the key and the data");
-
-                    } else {
-                        RayTraceResult rayResult = p.rayTraceBlocks(5d);
-                        if (rayResult != null && rayResult.getHitBlock() != null
-                                && BlockStorage.hasBlockInfo(rayResult.getHitBlock())) {
-
-                            BlockStorage.addBlockInfo(rayResult.getHitBlock(), args[1], args[2]);
-                            Utils.send(p, "&aInfo has been added.");
-
-                        } else {
-                            Utils.send(p, "&cYou must be looking at a Slimefun block");
-                        }
-                    }
-                    return true;
-                case "SAVEPLAYERS":
-                    saveAllPlayers();
-                    return true;
-            }
-        }
-
-        Utils.send(p, "&cCommand not found");
-
-        return false;
-    }
-
-    private void saveAllPlayers() {
-        Iterator<PlayerProfile> iterator = PlayerProfile.iterator();
-        int players = 0;
-
-        while (iterator.hasNext()) {
-            PlayerProfile profile = iterator.next();
-
-            profile.save();
-            players++;
-        }
-
-        if (players > 0) {
-            Bukkit.getLogger().log(Level.INFO, "Auto-saved all player data for {0} player(s)!", players);
-        }
-    }
-
-    private void registerGlow() {
-        Enchantment glowEnchantment = new GlowEnchant(Constants.GLOW_ENCHANT, new String[]{
-                "SMALL_PORTABLE_CHARGER", "MEDIUM_PORTABLE_CHARGER", "BIG_PORTABLE_CHARGER",
-                "LARGE_PORTABLE_CHARGER", "CARBONADO_PORTABLE_CHARGER", "PAXEL"
-        });
-
-        // Prevent double-registration errors
-        if (Enchantment.getByKey(glowEnchantment.getKey()) == null) {
-            Enchantment.registerEnchantment(glowEnchantment);
-        }
-    }
-
-    @Override
-    public String getBugTrackerURL() {
-        return "https://github.com/NCBPFluffyBear/FluffyMachines/issues";
-    }
-
-    @Nonnull
-    @Override
-    public JavaPlugin getJavaPlugin() {
-        return this;
-    }
-
-    public static FluffyMachines getInstance() {
-        return instance;
-    }
-
-}
diff --git a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/CancelPlace.java b/src/main/java/io/ncbpfluffybear/fluffymachines/utils/CancelPlace.java
deleted file mode 100644
index d4ea2ce..0000000
--- a/src/main/java/io/ncbpfluffybear/fluffymachines/utils/CancelPlace.java
+++ /dev/null
@@ -1,4 +0,0 @@
-package io.ncbpfluffybear.fluffymachines.utils;
-
-public interface CancelPlace {
-}
diff --git a/src/main/resources/config.yml b/src/main/resources/config.yml
deleted file mode 100644
index 89dbdf6..0000000
--- a/src/main/resources/config.yml
+++ /dev/null
@@ -1,3 +0,0 @@
-options:
-  auto-update: true
-  ignore-outdated-warning: false
\ No newline at end of file
diff --git a/src/main/resources/plugin.yml b/src/main/resources/plugin.yml
deleted file mode 100644
index f1301b3..0000000
--- a/src/main/resources/plugin.yml
+++ /dev/null
@@ -1,31 +0,0 @@
-## CHANGE this to the name of your plugin.
-name: FluffyMachines
-
-## CHANGE this to your username.
-author: NCBPFluffyBear
-
-## CHANGE this to a meaninful but short description of your plugin.
-description: A fun addon
-
-## CHANGE this to the path of the class that extends JavaPlugin.
-main: io.ncbpfluffybear.fluffymachines.FluffyMachines
-
-## This is required and marks Slimefun as a plugin dependency.
-depend: [Slimefun]
-softdepend: [mcMMO, NoCheatPlus]
-
-## This value is automatically replaced by the version specified in your pom.xml file, do not change this.
-version: ${project.version}
-
-## This is the minimum minecraft version required to run your plugin.
-api-version: 1.14
-
-commands:
-  fluffymachines:
-    description: FluffyMachines Command
-    usage: /<command>
-    aliases: [fm]
-
-permissions:
-  fluffymachines.admin:
-    description: Allows you to use FluffyMachines admin commands
\ No newline at end of file
-- 
2.41.0.windows.3

