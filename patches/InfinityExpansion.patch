From 7920ed10ea55397f19d1a345e998367442055878 Mon Sep 17 00:00:00 2001
From: ARVIN3108 <31arvin08@gmail.com>
Date: Wed, 12 Jul 2023 09:00:51 +0700
Subject: [PATCH] InfinityExpansion

---
 pom.xml                                       |  95 +------
 .../infinityexpansion/InfinityExpansion.java  |  72 ++++++
 .../infinityexpansion/categories/Groups.java  |  24 +-
 .../categories/InfinityGroup.java             | 182 +++++---------
 .../commands/GiveRecipe.java                  |  57 +++++
 .../infinityexpansion/commands/PrintItem.java |  31 +++
 .../infinityexpansion/commands/SetData.java   | 104 ++++++++
 .../infinityexpansion/items/Researches.java   |  29 +--
 .../items/SlimefunExtension.java              |  93 ++++---
 .../abstracts/AbstractEnergyCrafter.java      |  30 +--
 .../items/blocks/AdvancedAnvil.java           |  96 +++----
 .../items/blocks/Blocks.java                  |  36 ++-
 .../items/blocks/InfinityWorkbench.java       |  56 ++---
 .../items/blocks/StrainerBase.java            |  90 +++----
 .../infinityexpansion/items/gear/Gear.java    | 119 +++++----
 .../items/gear/InfinityArmor.java             |  27 +-
 .../items/gear/InfinityBow.java               |  33 +--
 .../items/gear/InfinityMatrix.java            |  53 ++--
 .../items/gear/InfinityTool.java              |  11 +-
 .../items/gear/VeinMinerRune.java             | 137 +++-------
 .../items/generators/EnergyGenerator.java     |  59 ++---
 .../items/generators/GenerationType.java      |  20 +-
 .../items/generators/Generators.java          |  68 +++--
 .../items/generators/InfinityReactor.java     |  93 +++----
 .../items/machines/GearTransformer.java       |  94 +++----
 .../items/machines/GeoQuarry.java             |  76 +++---
 .../items/machines/GrowingMachine.java        |  64 ++---
 .../items/machines/Machines.java              | 193 +++++++-------
 .../items/machines/MaterialGenerator.java     |  44 ++--
 .../items/machines/PoweredBedrock.java        |  34 +--
 .../items/machines/ResourceSynthesizer.java   |  42 ++--
 .../machines/SingularityConstructor.java      |  79 +++---
 .../items/machines/StoneworksFactory.java     |  70 +++---
 .../items/machines/VoidHarvester.java         |  42 ++--
 .../items/materials/EnderEssence.java         |  33 +--
 .../items/materials/Materials.java            | 113 +++++----
 .../items/materials/Singularity.java          |  34 +--
 .../items/materials/Strainer.java             |  26 +-
 .../items/mobdata/MobData.java                | 126 +++++-----
 .../items/mobdata/MobDataCard.java            |  28 +--
 .../items/mobdata/MobDataInfuser.java         |  37 ++-
 .../items/mobdata/MobDataTier.java            |   5 +-
 .../items/mobdata/MobSimulationChamber.java   |  78 +++---
 .../items/quarries/Oscillator.java            |  34 ++-
 .../items/quarries/Quarries.java              |  91 +++----
 .../items/quarries/Quarry.java                |  71 ++----
 .../items/storage/Storage.java                |  46 ++--
 .../items/storage/StorageCache.java           | 236 ++++++------------
 .../items/storage/StorageForge.java           |  21 +-
 .../items/storage/StorageSaveFix.java         |  21 +-
 .../items/storage/StorageUnit.java            | 120 ++++-----
 .../addons}/infinityexpansion/utils/Util.java |  57 ++---
 .../infinityexpansion/InfinityExpansion.java  |  85 -------
 .../commands/GiveRecipe.java                  |  68 -----
 .../infinityexpansion/commands/PrintItem.java |  44 ----
 .../infinityexpansion/commands/SetData.java   | 102 --------
 .../InfinityExpansion}/config.yml             |  10 +-
 src/main/resources/plugin.yml                 |  27 --
 .../TestInfinityExpansion.java                |  28 ---
 59 files changed, 1576 insertions(+), 2318 deletions(-)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/InfinityExpansion.java
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/categories/Groups.java (70%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/categories/InfinityGroup.java (76%)
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/commands/GiveRecipe.java
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/commands/PrintItem.java
 create mode 100644 src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/commands/SetData.java
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/Researches.java (87%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/SlimefunExtension.java (90%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/abstracts/AbstractEnergyCrafter.java (83%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/blocks/AdvancedAnvil.java (83%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/blocks/Blocks.java (73%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/blocks/InfinityWorkbench.java (73%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/blocks/StrainerBase.java (81%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/gear/Gear.java (84%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/gear/InfinityArmor.java (74%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/gear/InfinityBow.java (88%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/gear/InfinityMatrix.java (76%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/gear/InfinityTool.java (70%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/gear/VeinMinerRune.java (72%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/generators/EnergyGenerator.java (67%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/generators/GenerationType.java (87%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/generators/Generators.java (83%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/generators/InfinityReactor.java (79%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/machines/GearTransformer.java (79%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/machines/GeoQuarry.java (74%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/machines/GrowingMachine.java (71%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/machines/Machines.java (86%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/machines/MaterialGenerator.java (81%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/machines/PoweredBedrock.java (76%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/machines/ResourceSynthesizer.java (84%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/machines/SingularityConstructor.java (88%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/machines/StoneworksFactory.java (77%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/machines/VoidHarvester.java (80%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/materials/EnderEssence.java (73%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/materials/Materials.java (85%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/materials/Singularity.java (75%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/materials/Strainer.java (77%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/mobdata/MobData.java (82%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/mobdata/MobDataCard.java (89%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/mobdata/MobDataInfuser.java (71%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/mobdata/MobDataTier.java (90%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/mobdata/MobSimulationChamber.java (74%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/quarries/Oscillator.java (82%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/quarries/Quarries.java (78%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/quarries/Quarry.java (80%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/storage/Storage.java (82%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/storage/StorageCache.java (70%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/storage/StorageForge.java (68%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/storage/StorageSaveFix.java (86%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/items/storage/StorageUnit.java (73%)
 rename src/main/java/{io/github/mooy1 => id/universenetwork/sfa_loader/addons}/infinityexpansion/utils/Util.java (85%)
 delete mode 100644 src/main/java/io/github/mooy1/infinityexpansion/InfinityExpansion.java
 delete mode 100644 src/main/java/io/github/mooy1/infinityexpansion/commands/GiveRecipe.java
 delete mode 100644 src/main/java/io/github/mooy1/infinityexpansion/commands/PrintItem.java
 delete mode 100644 src/main/java/io/github/mooy1/infinityexpansion/commands/SetData.java
 rename src/main/resources/{ => addons-config/InfinityExpansion}/config.yml (96%)
 delete mode 100644 src/main/resources/plugin.yml
 delete mode 100644 src/test/java/io/github/mooy1/infinityexpansion/TestInfinityExpansion.java

diff --git a/pom.xml b/pom.xml
index 4e75192..a475673 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1,32 +1,24 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project xmlns="http://maven.apache.org/POM/4.0.0"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
     <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>id.universenetwork.sfa_loader</groupId>
+        <artifactId>Addons</artifactId>
+        <version>1.1.0</version>
+    </parent>
+
     <groupId>io.github.mooy1</groupId>
     <artifactId>InfinityExpansion</artifactId>
     <version>MODIFIED</version>
 
-    <properties>
-        <maven.compiler.source>1.8</maven.compiler.source>
-        <maven.compiler.target>1.8</maven.compiler.target>
-        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    </properties>
-
     <repositories>
         <repository>
             <id>spigot-repo</id>
             <url>https://hub.spigotmc.org/nexus/content/repositories/snapshots/</url>
         </repository>
-        <repository>
-            <id>papermc</id>
-            <url>https://repo.papermc.io/repository/maven-public/</url>
-        </repository>
-        <repository>
-            <id>jitpack.io</id>
-            <url>https://jitpack.io</url>
-        </repository>
     </repositories>
 
     <dependencies>
@@ -36,92 +28,23 @@
             <version>1.19-R0.1-SNAPSHOT</version>
             <scope>provided</scope>
         </dependency>
-
-        <dependency>
-            <groupId>com.github.Slimefun</groupId>
-            <artifactId>Slimefun4</artifactId>
-            <version>934ab822a6</version>
-            <scope>provided</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>org.projectlombok</groupId>
-            <artifactId>lombok</artifactId>
-            <version>1.18.24</version>
-            <scope>provided</scope>
-        </dependency>
-
         <dependency>
             <groupId>com.google.code.findbugs</groupId>
             <artifactId>jsr305</artifactId>
             <version>3.0.2</version>
             <scope>provided</scope>
         </dependency>
-
-        <dependency>
-            <groupId>io.github.mooy1</groupId>
-            <artifactId>InfinityLib</artifactId>
-            <version>f784252486</version>
-            <scope>compile</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>org.junit.jupiter</groupId>
-            <artifactId>junit-jupiter</artifactId>
-            <version>5.8.2</version>
-            <scope>test</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>com.github.seeseemelk</groupId>
-            <artifactId>MockBukkit-v1.19</artifactId>
-            <version>2.29.0</version>
-            <scope>test</scope>
-        </dependency>
     </dependencies>
 
     <build>
         <finalName>${project.name} v${project.version}</finalName>
-        <defaultGoal>clean package</defaultGoal>
-        <sourceDirectory>${basedir}/src/main/java</sourceDirectory>
-
-        <resources>
-            <resource>
-                <directory>${basedir}/src/main/resources</directory>
-                <filtering>true</filtering>
-            </resource>
-            <resource>
-                <directory>${basedir}</directory>
-                <includes>
-                    <include>LICENSE</include>
-                </includes>
-            </resource>
-        </resources>
-
         <plugins>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-surefire-plugin</artifactId>
-                <version>3.0.0-M7</version>
-
-                <configuration>
-                    <junitArtifactName>org.junit.jupiter:junit-jupiter</junitArtifactName>
-                    <trimStackTrace>false</trimStackTrace>
-                </configuration>
-            </plugin>
-
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-shade-plugin</artifactId>
                 <version>3.3.0</version>
                 <configuration>
                     <minimizeJar>true</minimizeJar>
-                    <relocations>
-                        <relocation>
-                            <pattern>io.github.mooy1.infinitylib</pattern>
-                            <shadedPattern>io.github.mooy1.infinityexpansion.infinitylib</shadedPattern>
-                        </relocation>
-                    </relocations>
                     <filters>
                         <filter>
                             <artifact>*:*</artifact>
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/InfinityExpansion.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/InfinityExpansion.java
new file mode 100644
index 0000000..02a666f
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/InfinityExpansion.java
@@ -0,0 +1,72 @@
+package id.universenetwork.sfa_loader.addons.infinityexpansion;
+
+import id.universenetwork.sfa_loader.addons.infinityexpansion.categories.Groups;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.commands.GiveRecipe;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.commands.PrintItem;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.commands.SetData;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.Researches;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.SlimefunExtension;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.blocks.Blocks;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.gear.Gear;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.generators.Generators;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.machines.Machines;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.materials.Materials;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.mobdata.MobData;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.quarries.Quarries;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.storage.Storage;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.storage.StorageSaveFix;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Scheduler;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AddonConfig;
+import id.universenetwork.sfa_loader.managers.CommandManager;
+import id.universenetwork.sfa_loader.template.AddonTemplate;
+import org.bukkit.Bukkit;
+import org.bukkit.plugin.Plugin;
+
+import java.util.logging.Level;
+
+public final class InfinityExpansion extends AddonTemplate {
+    private static InfinityExpansion instance;
+
+    public InfinityExpansion() {
+        StorageSaveFix.fixStuff();
+        instance = this;
+    }
+
+    @Override
+    public void onLoad() {
+        Plugin lx = Bukkit.getPluginManager().getPlugin("LiteXpansion");
+        if (lx != null && lx.getConfig().getBoolean("options.nerf-other-addons"))
+            Scheduler.run(() -> AbstractAddon.log(Level.WARNING,
+                    "########################################################",
+                    "LiteXpansion nerfs energy generation in this addon.",
+                    "You can disable these nerfs in the LiteXpansion config.",
+                    "Under 'options:' add 'nerf-other-addons: false'",
+                    "########################################################"
+            ));
+
+        CommandManager.register(new GiveRecipe(), new SetData(), new PrintItem());
+
+        Groups.setup();
+        MobData.setup();
+        Materials.setup();
+        Machines.setup();
+        Quarries.setup();
+        Gear.setup();
+        Blocks.setup();
+        Storage.setup();
+        Generators.setup();
+        SlimefunExtension.setup();
+
+        if (getConfig().getBoolean("balance-options.enable-researches")) Researches.setup();
+    }
+
+    @Override
+    public void onUnload() {
+        instance = null;
+    }
+
+    public static AddonConfig config() {
+        return instance.getConfig();
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/categories/Groups.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/categories/Groups.java
similarity index 70%
rename from src/main/java/io/github/mooy1/infinityexpansion/categories/Groups.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/categories/Groups.java
index 55a9cb0..355ccb4 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/categories/Groups.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/categories/Groups.java
@@ -1,12 +1,12 @@
-package io.github.mooy1.infinityexpansion.categories;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.categories;
 
-import org.bukkit.Material;
-
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinitylib.groups.MultiGroup;
-import io.github.mooy1.infinitylib.groups.SubGroup;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.SlimefunAddonInstance;
+import id.universenetwork.sfa_loader.libraries.infinitylib.groups.MultiGroup;
+import id.universenetwork.sfa_loader.libraries.infinitylib.groups.SubGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import org.bukkit.Material;
 
 /**
  * Categories for this addon
@@ -14,8 +14,7 @@ import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
  * @author Mooy1
  */
 public final class Groups {
-
-    public static final ItemGroup INFINITY = new InfinityGroup(InfinityExpansion.createKey("infinity_recipes"),
+    public static final ItemGroup INFINITY = new InfinityGroup(AbstractAddon.createKey("infinity_recipes"),
             new CustomItemStack(Material.RESPAWN_ANCHOR, "&bInfinity &7Recipes"), 3);
     public static final ItemGroup MAIN_MATERIALS = new SubGroup("main_materials",
             new CustomItemStack(Material.NETHER_STAR, "&bInfinity &7Materials"));
@@ -35,11 +34,10 @@ public final class Groups {
     public static final ItemGroup INFINITY_CHEAT = new SubGroup("infinity_cheat",
             new CustomItemStack(Material.RESPAWN_ANCHOR, "&bInfinity &7Recipes &c- INCORRECT RECIPES"));
 
-    public static void setup(InfinityExpansion inst) {
-        INFINITY.register(inst);
-        MAIN_CATEGORY.register(inst);
+    public static void setup() {
+        INFINITY.register(SlimefunAddonInstance.getSFAInstance());
+        MAIN_CATEGORY.register(SlimefunAddonInstance.getSFAInstance());
         MOB_SIMULATION.setCrossAddonItemGroup(true);
-        INFINITY_CHEAT.register(inst);
+        INFINITY_CHEAT.register(SlimefunAddonInstance.getSFAInstance());
     }
-
 }
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/categories/InfinityGroup.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/categories/InfinityGroup.java
similarity index 76%
rename from src/main/java/io/github/mooy1/infinityexpansion/categories/InfinityGroup.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/categories/InfinityGroup.java
index 0311375..45f1fe1 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/categories/InfinityGroup.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/categories/InfinityGroup.java
@@ -1,32 +1,10 @@
-package io.github.mooy1.infinityexpansion.categories;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.categories;
 
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.LinkedHashMap;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.UUID;
-
-import javax.annotation.Nonnull;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import lombok.AllArgsConstructor;
-
-import org.bukkit.ChatColor;
-import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
-import org.bukkit.Sound;
-import org.bukkit.entity.Player;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.PlayerInventory;
-
-import io.github.mooy1.infinityexpansion.items.blocks.Blocks;
-import io.github.mooy1.infinityexpansion.items.blocks.InfinityWorkbench;
-import io.github.mooy1.infinitylib.common.Scheduler;
-import io.github.mooy1.infinitylib.common.StackUtils;
-import io.github.mooy1.infinitylib.machines.MenuBlock;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.blocks.Blocks;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.blocks.InfinityWorkbench;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Scheduler;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.StackUtils;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.MenuBlock;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.items.groups.FlexItemGroup;
@@ -39,8 +17,20 @@ import io.github.thebusybiscuit.slimefun4.libraries.dough.collections.Pair;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.ItemUtils;
 import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
+import lombok.AllArgsConstructor;
 import me.mrCookieSlime.CSCoreLibPlugin.general.Inventory.ChestMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
+import org.bukkit.ChatColor;
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.Sound;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.PlayerInventory;
+
+import javax.annotation.Nonnull;
+import javax.annotation.ParametersAreNonnullByDefault;
+import java.util.*;
 
 /**
  * A custom category for displaying 6x6 recipes and their sub-recipes
@@ -48,7 +38,6 @@ import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
  * @author Mooy1
  */
 public final class InfinityGroup extends FlexItemGroup {
-
     private static final int[] INFINITY_RECIPE_SLOTS = {
             1, 2, 3, 4, 5, 6,
             10, 11, 12, 13, 14, 15,
@@ -130,29 +119,23 @@ public final class InfinityGroup extends FlexItemGroup {
 
         ChestMenu menu = new ChestMenu("&bInfinity Recipes");
 
-        if (entry.bench != null) {
-            menu.addMenuClickHandler(1, (player1, i, itemStack, clickAction) -> {
-                entry.bench.open(player1);
-                return false;
-            });
-        }
-        else {
-            menu.addMenuClickHandler(1, (player1, i, itemStack, clickAction) -> {
-                entry.profile.getGuideHistory().goBack(entry.impl);
-                return false;
-            });
-        }
+        if (entry.bench != null) menu.addMenuClickHandler(1, (player1, i, itemStack, clickAction) -> {
+            entry.bench.open(player1);
+            return false;
+        });
+        else menu.addMenuClickHandler(1, (player1, i, itemStack, clickAction) -> {
+            entry.profile.getGuideHistory().goBack(entry.impl);
+            return false;
+        });
 
         menu.addItem(0, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
         menu.setEmptySlotsClickable(false);
-        for (int i = 2 ; i < 9 ; i++) {
+        for (int i = 2; i < 9; i++)
             menu.addItem(i, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
-        }
         menu.addItem(45, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
         menu.addItem(46, ChestMenuUtils.getPreviousButton(player, 1, 1), ChestMenuUtils.getEmptyClickHandler());
-        for (int i = 47 ; i < 52 ; i++) {
+        for (int i = 47; i < 52; i++)
             menu.addItem(i, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
-        }
         menu.addItem(52, ChestMenuUtils.getNextButton(player, 1, 1), ChestMenuUtils.getEmptyClickHandler());
         menu.addItem(53, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
 
@@ -161,14 +144,10 @@ public final class InfinityGroup extends FlexItemGroup {
 
         int i = 9;
         for (Pair<SlimefunItemStack, ItemStack[]> item : ITEMS.values()) {
-            if (i == 45) {
-                break;
-            }
+            if (i == 45) break;
 
             SlimefunItem sfItem = item.getFirstValue().getItem();
-            if (sfItem == null) {
-                return;
-            }
+            if (sfItem == null) return;
 
             Research research = sfItem.getResearch();
             if (research != null && !entry.profile.hasUnlocked(research)) {
@@ -185,13 +164,10 @@ public final class InfinityGroup extends FlexItemGroup {
                     research.unlockFromGuide(GUIDE, p, entry.profile, sfItem, Groups.INFINITY, 0);
                     return false;
                 });
-            }
-            else {
-                menu.addItem(i, item.getFirstValue(), (p, slot, item1, action) -> {
-                    openInfinityRecipe(p, item.getFirstValue().getItemId(), entry);
-                    return false;
-                });
-            }
+            } else menu.addItem(i, item.getFirstValue(), (p, slot, item1, action) -> {
+                openInfinityRecipe(p, item.getFirstValue().getItemId(), entry);
+                return false;
+            });
 
             i++;
         }
@@ -207,9 +183,7 @@ public final class InfinityGroup extends FlexItemGroup {
     private static void openInfinityRecipe(Player player, String id, BackEntry entry) {
         Pair<SlimefunItemStack, ItemStack[]> pair = ITEMS.get(id);
 
-        if (pair == null) {
-            return;
-        }
+        if (pair == null) return;
 
         ChestMenu menu = new ChestMenu(Objects.requireNonNull(pair.getFirstValue().getDisplayName()));
         menu.setEmptySlotsClickable(false);
@@ -219,24 +193,21 @@ public final class InfinityGroup extends FlexItemGroup {
             return false;
         });
 
-        for (int i = 0 ; i < INFINITY_RECIPE_SLOTS.length ; i++) {
+        for (int i = 0; i < INFINITY_RECIPE_SLOTS.length; i++) {
             ItemStack recipeItem = pair.getSecondValue()[i];
-            if (recipeItem != null) {
-                menu.addItem(INFINITY_RECIPE_SLOTS[i], recipeItem, (p, slot, item, action) -> {
-                    SlimefunItem slimefunItem = SlimefunItem.getByItem(recipeItem);
-                    if (slimefunItem != null && !slimefunItem.isDisabled()) {
-                        if (slimefunItem.getRecipeType() == InfinityWorkbench.TYPE) {
-                            openInfinityRecipe(p, slimefunItem.getId(), entry);
-                        }
-                        else {
-                            LinkedList<SlimefunItem> list = new LinkedList<>();
-                            list.add(slimefunItem);
-                            openSlimefunRecipe(p, entry, id, list);
-                        }
+            if (recipeItem != null) menu.addItem(INFINITY_RECIPE_SLOTS[i], recipeItem, (p, slot, item, action) -> {
+                SlimefunItem slimefunItem = SlimefunItem.getByItem(recipeItem);
+                if (slimefunItem != null && !slimefunItem.isDisabled()) {
+                    if (slimefunItem.getRecipeType() == InfinityWorkbench.TYPE)
+                        openInfinityRecipe(p, slimefunItem.getId(), entry);
+                    else {
+                        LinkedList<SlimefunItem> list = new LinkedList<>();
+                        list.add(slimefunItem);
+                        openSlimefunRecipe(p, entry, id, list);
                     }
-                    return false;
-                });
-            }
+                }
+                return false;
+            });
         }
 
         if (entry.bench == null) {
@@ -249,64 +220,50 @@ public final class InfinityGroup extends FlexItemGroup {
                 }
                 return false;
             });
-        }
-        else {
-            menu.addItem(INFINITY_BENCH, BENCH, (p, slot, item, action) -> {
-                moveRecipe(p, entry.bench, pair, action.isRightClicked());
-                return false;
-            });
-        }
+        } else menu.addItem(INFINITY_BENCH, BENCH, (p, slot, item, action) -> {
+            moveRecipe(p, entry.bench, pair, action.isRightClicked());
+            return false;
+        });
 
         int page = IDS.indexOf(id);
 
         menu.addItem(PREV, ChestMenuUtils.getPreviousButton(player, page + 1, IDS.size()), (player1, i, itemStack, clickAction) -> {
-            if (page > 0) {
-                openInfinityRecipe(player1, IDS.get(page - 1), entry);
-            }
+            if (page > 0) openInfinityRecipe(player1, IDS.get(page - 1), entry);
             return false;
         });
 
         menu.addItem(NEXT, ChestMenuUtils.getNextButton(player, page + 1, IDS.size()), (player1, i, itemStack, clickAction) -> {
-            if (page < IDS.size() - 1) {
-                openInfinityRecipe(player1, IDS.get(page + 1), entry);
-            }
+            if (page < IDS.size() - 1) openInfinityRecipe(player1, IDS.get(page + 1), entry);
             return false;
         });
 
-        for (int slot : INFINITY_BACKGROUND) {
+        for (int slot : INFINITY_BACKGROUND)
             menu.addItem(slot, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
-        }
-        for (int slot : INFINITY_OUTPUT_BORDER) {
+        for (int slot : INFINITY_OUTPUT_BORDER)
             menu.addItem(slot, MenuBlock.OUTPUT_BORDER, ChestMenuUtils.getEmptyClickHandler());
-        }
         menu.addItem(INFINITY_OUTPUT, pair.getFirstValue(), ChestMenuUtils.getEmptyClickHandler());
-        for (int slot : WORKBENCH_BORDER) {
-            menu.addItem(slot, INFO, ChestMenuUtils.getEmptyClickHandler());
-        }
+        for (int slot : WORKBENCH_BORDER) menu.addItem(slot, INFO, ChestMenuUtils.getEmptyClickHandler());
 
         player.playSound(player.getLocation(), Sound.ITEM_BOOK_PAGE_TURN, 1, 1);
 
         HISTORY.put(player.getUniqueId(), id);
 
         menu.open(player);
-
     }
 
     private static void moveRecipe(@Nonnull Player player, @Nonnull BlockMenu menu, Pair<SlimefunItemStack, ItemStack[]> pair, boolean max) {
         ItemStack[] recipe = pair.getSecondValue();
         PlayerInventory inv = player.getInventory();
 
-        for (int i = 0 ; i < (max ? 64 : 1) ; i++) {
-            for (int slot = 0 ; slot < recipe.length ; slot++) { //each item in recipe
+        for (int i = 0; i < (max ? 64 : 1); i++) {
+            for (int slot = 0; slot < recipe.length; slot++) { //each item in recipe
                 ItemStack recipeItem = recipe[slot];
 
-                if (recipeItem == null) {
-                    continue;
-                }
+                if (recipeItem == null) continue;
 
                 String id = StackUtils.getIdOrType(recipeItem);
 
-                for (ItemStack item : inv.getContents()) { //each slot in their inv
+                for (ItemStack item : inv.getContents()) //each slot in their inv
                     if (item != null && StackUtils.getIdOrType(item).equals(id)) { //matches recipe
                         //get item
                         ItemStack output = item.clone();
@@ -320,21 +277,17 @@ public final class InfinityGroup extends FlexItemGroup {
                             break;
                         }
                     }
-                }
             }
         }
 
         menu.open(player);
-
     }
 
     @ParametersAreNonnullByDefault
     private static void openSlimefunRecipe(Player player, BackEntry entry, String backID, LinkedList<SlimefunItem> slimefunHistory) {
         SlimefunItem slimefunItem = slimefunHistory.peekLast();
 
-        if (slimefunItem == null) {
-            return;
-        }
+        if (slimefunItem == null) return;
 
         ItemStack output = slimefunItem.getRecipeOutput().clone();
 
@@ -344,9 +297,7 @@ public final class InfinityGroup extends FlexItemGroup {
         int length = slimefunHistory.size();
 
         menu.addItem(0, ChestMenuUtils.getBackButton(player, ""), (p, slot, item, action) -> {
-            if (length == 1) {
-                openInfinityRecipe(player, backID, entry);
-            }
+            if (length == 1) openInfinityRecipe(player, backID, entry);
             else {
                 slimefunHistory.removeLast();
                 openSlimefunRecipe(player, entry, backID, slimefunHistory);
@@ -354,7 +305,7 @@ public final class InfinityGroup extends FlexItemGroup {
             return false;
         });
 
-        for (int i = 0 ; i < NORMAL_RECIPE_SLOTS.length ; i++) {
+        for (int i = 0; i < NORMAL_RECIPE_SLOTS.length; i++) {
             ItemStack recipeItem = slimefunItem.getRecipe()[i];
 
             if (recipeItem != null) {
@@ -368,14 +319,12 @@ public final class InfinityGroup extends FlexItemGroup {
                     return false;
                 });
             }
-
         }
 
         menu.addItem(NORMAL_RECIPE_TYPE, slimefunItem.getRecipeType().toItem(), ChestMenuUtils.getEmptyClickHandler());
 
-        for (int slot : NORMAL_RECIPE_BACKGROUND) {
+        for (int slot : NORMAL_RECIPE_BACKGROUND)
             menu.addItem(slot, ChestMenuUtils.getBackground(), ChestMenuUtils.getEmptyClickHandler());
-        }
 
         menu.addItem(NORMAL_RECIPE_OUTPUT, output, ChestMenuUtils.getEmptyClickHandler());
 
@@ -391,5 +340,4 @@ public final class InfinityGroup extends FlexItemGroup {
         private final SlimefunGuideImplementation impl;
 
     }
-
 }
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/commands/GiveRecipe.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/commands/GiveRecipe.java
new file mode 100644
index 0000000..9041778
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/commands/GiveRecipe.java
@@ -0,0 +1,57 @@
+package id.universenetwork.sfa_loader.addons.infinityexpansion.commands;
+
+import cloud.commandframework.annotations.Argument;
+import cloud.commandframework.annotations.CommandDescription;
+import cloud.commandframework.annotations.CommandMethod;
+import cloud.commandframework.annotations.CommandPermission;
+import cloud.commandframework.annotations.suggestions.Suggestions;
+import cloud.commandframework.context.CommandContext;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.multiblocks.MultiBlockMachine;
+import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
+import org.bukkit.ChatColor;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.ItemStack;
+
+import java.util.ArrayList;
+import java.util.List;
+
+@SuppressWarnings("unused")
+public final class GiveRecipe {
+    @CommandMethod("infinityexpansion|ie|ix|infinity giverecipe <id>")
+    @CommandPermission("infinityexpansion.giverecipe")
+    @CommandDescription("Gives all the items in a Slimefun item recipe")
+    public void cmdGiveRecipe(final CommandSender sender,
+                              final @Argument(value = "id", suggestions = "idList") String id) {
+        if (!(sender instanceof Player)) {
+            sender.sendMessage("Only players can use this!");
+            return;
+        }
+
+        SlimefunItem sfItem = SlimefunItem.getById(id.toUpperCase());
+
+        if (sfItem == null || sfItem instanceof MultiBlockMachine || sfItem.getRecipeType() == RecipeType.GEO_MINER) {
+            sender.sendMessage(ChatColor.RED + "Invalid Slimefun item!");
+            return;
+        }
+
+        sender.sendMessage(ChatColor.GREEN + "Gave recipe for " + sfItem.getItemName());
+
+        Player p = (Player) sender;
+
+        List<ItemStack> recipe = new ArrayList<>();
+
+        for (ItemStack e : sfItem.getRecipe()) if (e != null) recipe.add(e);
+
+        p.getInventory().addItem(recipe.toArray(new ItemStack[0]));
+    }
+
+    @Suggestions("idList")
+    public List<String> idList(CommandContext<CommandSender> sender, String context) {
+        List<String> tabs = new ArrayList<>();
+        for (SlimefunItem item : Slimefun.getRegistry().getEnabledSlimefunItems()) tabs.add(item.getId());
+        return tabs;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/commands/PrintItem.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/commands/PrintItem.java
new file mode 100644
index 0000000..4270b46
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/commands/PrintItem.java
@@ -0,0 +1,31 @@
+package id.universenetwork.sfa_loader.addons.infinityexpansion.commands;
+
+import cloud.commandframework.annotations.CommandDescription;
+import cloud.commandframework.annotations.CommandMethod;
+import cloud.commandframework.annotations.CommandPermission;
+import org.bukkit.ChatColor;
+import org.bukkit.Material;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.ItemStack;
+
+@SuppressWarnings("unused")
+public final class PrintItem {
+    @CommandMethod("infinityexpansion|ie|ix|infinity printitem")
+    @CommandPermission("infinityexpansion.printitem")
+    @CommandDescription("Prints the internal data of an item for debugging purposes")
+    public void cmdPrintItem(final CommandSender sender) {
+        if (!(sender instanceof Player)) return;
+
+        Player p = (Player) sender;
+
+        ItemStack item = p.getInventory().getItemInMainHand();
+
+        if (item.getType() == Material.AIR) {
+            p.sendMessage(ChatColor.RED + "You must be holding an item!");
+            return;
+        }
+
+        p.sendMessage(item.toString());
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/commands/SetData.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/commands/SetData.java
new file mode 100644
index 0000000..49d9bf7
--- /dev/null
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/commands/SetData.java
@@ -0,0 +1,104 @@
+package id.universenetwork.sfa_loader.addons.infinityexpansion.commands;
+
+import cloud.commandframework.annotations.Argument;
+import cloud.commandframework.annotations.CommandDescription;
+import cloud.commandframework.annotations.CommandMethod;
+import cloud.commandframework.annotations.CommandPermission;
+import cloud.commandframework.annotations.suggestions.Suggestions;
+import cloud.commandframework.context.CommandContext;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.storage.StorageUnit;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import me.mrCookieSlime.Slimefun.api.BlockStorage;
+import org.bukkit.ChatColor;
+import org.bukkit.FluidCollisionMode;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.command.CommandSender;
+import org.bukkit.entity.Player;
+
+import java.util.ArrayList;
+import java.util.List;
+
+@SuppressWarnings("unused")
+public final class SetData {
+    @CommandMethod("infinityexpansion|ie|ix|infinity setdata <key> <value>")
+    @CommandPermission("infinityexpansion.setdata")
+    @CommandDescription("Set slimefun block data of the block you are looking at")
+    public void cmdSetData(final CommandSender sender,
+                           final @Argument(value = "key", suggestions = "keyList") String key,
+                           final @Argument(value = "value", suggestions = "valueList") String value) {
+        if (!(sender instanceof Player)) {
+            sender.sendMessage("Only players can use this!");
+            return;
+        }
+
+        Player p = (Player) sender;
+
+        Block target = p.getTargetBlockExact(8, FluidCollisionMode.NEVER);
+
+        if (target == null || target.getType() == Material.AIR) {
+            p.sendMessage(ChatColor.RED + "You need to target a block to use this command!");
+            return;
+        }
+
+        String id = BlockStorage.getLocationInfo(target.getLocation(), "id");
+
+        if (id == null) {
+            p.sendMessage(ChatColor.RED + "You need to target a slimefun block to use this command!");
+            return;
+        }
+
+        if (key.equals("id")) {
+            p.sendMessage(ChatColor.RED + "You cannot change the id of this block, it could cause internal issues!");
+            return;
+        }
+
+        if (value.equals("\\remove")) {
+            p.sendMessage(ChatColor.GREEN + "Successfully removed value of key '" + key + "' in " + id);
+            BlockStorage.addBlockInfo(target, key, null);
+        } else {
+            p.sendMessage(ChatColor.GREEN + "Successfully set key '" + key + "' to value '" + value + "' in " + id);
+            BlockStorage.addBlockInfo(target, key, value);
+        }
+
+        SlimefunItem unit = SlimefunItem.getById(id);
+        if (unit instanceof StorageUnit) ((StorageUnit) unit).reloadCache(target);
+    }
+
+    @Suggestions(value = "keyList")
+    public List<String> keyList(CommandContext<CommandSender> sender, String context) {
+        return parseArgs(sender.getSender(), context, true);
+    }
+
+    @Suggestions(value = "valueList")
+    public List<String> valueList(CommandContext<CommandSender> sender, String context) {
+        return parseArgs(sender.getSender(), context, false);
+    }
+
+    private List<String> parseArgs(CommandSender sender, String context, boolean isKey) {
+        final List<String> list = new ArrayList<>();
+
+        if (!(sender instanceof Player)) return list;
+
+        Player p = (Player) sender;
+
+        Block target = p.getTargetBlockExact(8, FluidCollisionMode.NEVER);
+
+        if (target == null || target.getType() == Material.AIR) return list;
+
+        if (isKey) {
+            if (BlockStorage.hasBlockInfo(target)) {
+                list.addAll(BlockStorage.getLocationInfo(target.getLocation()).getKeys());
+                list.remove("id");
+            }
+        } else if (!context.equals("id")) {
+            String current = BlockStorage.getLocationInfo(target.getLocation(), context);
+            if (current != null) {
+                list.add(current);
+                list.add("\\remove");
+            }
+        }
+
+        return list;
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/Researches.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/Researches.java
similarity index 87%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/Researches.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/Researches.java
index abc225e..16c7514 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/Researches.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/Researches.java
@@ -1,22 +1,20 @@
-package io.github.mooy1.infinityexpansion.items;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items;
 
-import lombok.experimental.UtilityClass;
-
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinityexpansion.items.blocks.Blocks;
-import io.github.mooy1.infinityexpansion.items.gear.Gear;
-import io.github.mooy1.infinityexpansion.items.generators.Generators;
-import io.github.mooy1.infinityexpansion.items.machines.Machines;
-import io.github.mooy1.infinityexpansion.items.materials.Materials;
-import io.github.mooy1.infinityexpansion.items.mobdata.MobData;
-import io.github.mooy1.infinityexpansion.items.quarries.Quarries;
-import io.github.mooy1.infinityexpansion.items.storage.Storage;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.blocks.Blocks;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.gear.Gear;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.generators.Generators;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.machines.Machines;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.materials.Materials;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.mobdata.MobData;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.quarries.Quarries;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.storage.Storage;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.researches.Research;
+import lombok.experimental.UtilityClass;
 
 @UtilityClass
 public final class Researches {
-
     private static final int FIRST_RESEARCH_ID = 314000000;
 
     public static void setup() {
@@ -135,7 +133,6 @@ public final class Researches {
     }
 
     private static void create(int id, String key, String name, int cost, SlimefunItemStack... items) {
-        new Research(InfinityExpansion.createKey(key), FIRST_RESEARCH_ID + id, name, cost).addItems(items).register();
+        new Research(AbstractAddon.createKey(key), FIRST_RESEARCH_ID + id, name, cost).addItems(items).register();
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/SlimefunExtension.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/SlimefunExtension.java
similarity index 90%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/SlimefunExtension.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/SlimefunExtension.java
index daf1459..3efdc30 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/SlimefunExtension.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/SlimefunExtension.java
@@ -1,26 +1,11 @@
-package io.github.mooy1.infinityexpansion.items;
-
-import javax.annotation.Nonnull;
-
-import lombok.experimental.UtilityClass;
-
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.World;
-import org.bukkit.block.Block;
-import org.bukkit.entity.Entity;
-import org.bukkit.entity.LivingEntity;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.potion.PotionEffect;
-import org.bukkit.potion.PotionEffectType;
-import org.bukkit.util.RayTraceResult;
-
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinityexpansion.categories.Groups;
-import io.github.mooy1.infinityexpansion.items.blocks.InfinityWorkbench;
-import io.github.mooy1.infinityexpansion.items.materials.Materials;
-import io.github.mooy1.infinitylib.common.Scheduler;
-import io.github.mooy1.infinitylib.machines.MachineLore;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items;
+
+import id.universenetwork.sfa_loader.addons.infinityexpansion.categories.Groups;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.blocks.InfinityWorkbench;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.materials.Materials;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Scheduler;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.SlimefunAddonInstance;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.MachineLore;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
@@ -32,12 +17,24 @@ import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines
 import io.github.thebusybiscuit.slimefun4.implementation.items.electric.reactors.NetherStarReactor;
 import io.github.thebusybiscuit.slimefun4.implementation.items.geo.GEOMiner;
 import io.github.thebusybiscuit.slimefun4.utils.HeadTexture;
+import lombok.experimental.UtilityClass;
 import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineFuel;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.World;
+import org.bukkit.block.Block;
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.potion.PotionEffect;
+import org.bukkit.potion.PotionEffectType;
+import org.bukkit.util.RayTraceResult;
+
+import javax.annotation.Nonnull;
 
 @UtilityClass
 public final class SlimefunExtension {
-
     private static final int INFINITY_CAPACITY = 2000000000;
     private static final int VOID_CAPACITY = 16000000;
 
@@ -165,26 +162,26 @@ public final class SlimefunExtension {
             "&8\u21E8 &e\u26A1 " + MachineLore.format(VOID_CAPACITY) + " &7J Capacity"
     );
 
-    public static void setup(InfinityExpansion plugin) {
+    public static void setup() {
 
         new Capacitor(Groups.INFINITY_CHEAT, INFINITY_CAPACITY, INFINITY_CAPACITOR,
-                InfinityWorkbench.TYPE, new ItemStack[] {
+                InfinityWorkbench.TYPE, new ItemStack[]{
                 null, Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT, null,
                 null, Materials.INFINITE_INGOT, Materials.INFINITE_CIRCUIT, Materials.INFINITE_CIRCUIT, Materials.INFINITE_INGOT, null,
                 null, Materials.INFINITE_INGOT, SlimefunItems.ENERGIZED_CAPACITOR, SlimefunItems.ENERGIZED_CAPACITOR, Materials.INFINITE_INGOT, null,
                 null, Materials.INFINITE_INGOT, SlimefunItems.ENERGIZED_CAPACITOR, SlimefunItems.ENERGIZED_CAPACITOR, Materials.INFINITE_INGOT, null,
                 null, Materials.INFINITE_INGOT, Materials.INFINITE_CIRCUIT, Materials.INFINITE_CIRCUIT, Materials.INFINITE_INGOT, null,
                 null, Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT, null
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
         new Capacitor(Groups.ADVANCED_MACHINES, VOID_CAPACITY, VOID_CAPACITOR,
-                RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+                RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.VOID_INGOT, Materials.REDSTONE_SINGULARITY, Materials.VOID_INGOT,
                 Materials.VOID_INGOT, SlimefunItems.ENERGIZED_CAPACITOR, Materials.VOID_INGOT,
                 Materials.VOID_INGOT, Materials.REDSTONE_SINGULARITY, Materials.VOID_INGOT
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
-        new AutoEnchanter(Groups.ADVANCED_MACHINES, ADVANCED_ENCHANTER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new AutoEnchanter(Groups.ADVANCED_MACHINES, ADVANCED_ENCHANTER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.MAGSTEEL, Materials.MAGSTEEL, Materials.MAGSTEEL,
                 Materials.MAGSTEEL_PLATE, SlimefunItems.AUTO_ENCHANTER, Materials.MAGSTEEL_PLATE,
                 Materials.MACHINE_CIRCUIT, Materials.MACHINE_CORE, Materials.MACHINE_CIRCUIT
@@ -193,9 +190,9 @@ public final class SlimefunExtension {
             public ItemStack getProgressBar() {
                 return new ItemStack(Material.NETHERITE_CHESTPLATE);
             }
-        }.setCapacity(ADVANCED_EN_ENERGY).setEnergyConsumption(ADVANCED_EN_ENERGY).setProcessingSpeed(ADVANCED_EN_SPEED).register(plugin);
+        }.setCapacity(ADVANCED_EN_ENERGY).setEnergyConsumption(ADVANCED_EN_ENERGY).setProcessingSpeed(ADVANCED_EN_SPEED).register(SlimefunAddonInstance.getSFAInstance());
 
-        new AutoDisenchanter(Groups.ADVANCED_MACHINES, ADVANCED_DISENCHANTER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new AutoDisenchanter(Groups.ADVANCED_MACHINES, ADVANCED_DISENCHANTER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.MAGSTEEL, Materials.MAGSTEEL, Materials.MAGSTEEL,
                 Materials.MAGSTEEL_PLATE, SlimefunItems.AUTO_DISENCHANTER, Materials.MAGSTEEL_PLATE,
                 Materials.MACHINE_CIRCUIT, Materials.MACHINE_CORE, Materials.MACHINE_CIRCUIT
@@ -204,9 +201,9 @@ public final class SlimefunExtension {
             public ItemStack getProgressBar() {
                 return new ItemStack(Material.ENCHANTED_BOOK);
             }
-        }.setCapacity(ADVANCED_DIS_ENERGY).setEnergyConsumption(ADVANCED_DIS_ENERGY).setProcessingSpeed(ADVANCED_DIS_SPEED).register(plugin);
+        }.setCapacity(ADVANCED_DIS_ENERGY).setEnergyConsumption(ADVANCED_DIS_ENERGY).setProcessingSpeed(ADVANCED_DIS_SPEED).register(SlimefunAddonInstance.getSFAInstance());
 
-        new AutoEnchanter(Groups.INFINITY_CHEAT, INFINITY_ENCHANTER, InfinityWorkbench.TYPE, new ItemStack[] {
+        new AutoEnchanter(Groups.INFINITY_CHEAT, INFINITY_ENCHANTER, InfinityWorkbench.TYPE, new ItemStack[]{
                 null, null, null, null, null, null,
                 Materials.VOID_INGOT, null, null, null, null, Materials.VOID_INGOT,
                 Materials.VOID_INGOT, Materials.VOID_INGOT, ADVANCED_ENCHANTER, ADVANCED_ENCHANTER, Materials.VOID_INGOT, Materials.VOID_INGOT,
@@ -218,9 +215,9 @@ public final class SlimefunExtension {
             public ItemStack getProgressBar() {
                 return new ItemStack(Material.NETHERITE_CHESTPLATE);
             }
-        }.setCapacity(INFINITY_EN_ENERGY).setEnergyConsumption(INFINITY_EN_ENERGY).setProcessingSpeed(INFINITY_EN_SPEED).register(plugin);
+        }.setCapacity(INFINITY_EN_ENERGY).setEnergyConsumption(INFINITY_EN_ENERGY).setProcessingSpeed(INFINITY_EN_SPEED).register(SlimefunAddonInstance.getSFAInstance());
 
-        new AutoDisenchanter(Groups.INFINITY_CHEAT, INFINITY_DISENCHANTER, InfinityWorkbench.TYPE, new ItemStack[] {
+        new AutoDisenchanter(Groups.INFINITY_CHEAT, INFINITY_DISENCHANTER, InfinityWorkbench.TYPE, new ItemStack[]{
                 null, null, null, null, null, null,
                 Materials.VOID_INGOT, null, null, null, null, Materials.VOID_INGOT,
                 Materials.VOID_INGOT, Materials.VOID_INGOT, ADVANCED_DISENCHANTER, ADVANCED_DISENCHANTER, Materials.VOID_INGOT, Materials.VOID_INGOT,
@@ -232,30 +229,30 @@ public final class SlimefunExtension {
             public ItemStack getProgressBar() {
                 return new ItemStack(Material.ENCHANTED_BOOK);
             }
-        }.setCapacity(INFINITY_DIS_ENERGY).setEnergyConsumption(INFINITY_DIS_ENERGY).setProcessingSpeed(INFINITY_DIS_SPEED).register(plugin);
+        }.setCapacity(INFINITY_DIS_ENERGY).setEnergyConsumption(INFINITY_DIS_ENERGY).setProcessingSpeed(INFINITY_DIS_SPEED).register(SlimefunAddonInstance.getSFAInstance());
 
-        new ChargingBench(Groups.ADVANCED_MACHINES, ADVANCED_CHARGER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new ChargingBench(Groups.ADVANCED_MACHINES, ADVANCED_CHARGER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.MAGSTEEL_PLATE, Materials.MACHINE_CIRCUIT, Materials.MAGSTEEL_PLATE,
                 Materials.MACHINE_CIRCUIT, SlimefunItems.CHARGING_BENCH, Materials.MACHINE_CIRCUIT,
                 Materials.MAGSTEEL_PLATE, Materials.MACHINE_CORE, Materials.MAGSTEEL_PLATE,
-        }).setCapacity(ADVANCED_CHARGER_ENERGY).setEnergyConsumption(ADVANCED_CHARGER_ENERGY).setProcessingSpeed(ADVANCED_CHARGER_SPEED).register(plugin);
+        }).setCapacity(ADVANCED_CHARGER_ENERGY).setEnergyConsumption(ADVANCED_CHARGER_ENERGY).setProcessingSpeed(ADVANCED_CHARGER_SPEED).register(SlimefunAddonInstance.getSFAInstance());
 
-        new ChargingBench(Groups.INFINITY_CHEAT, INFINITY_CHARGER, InfinityWorkbench.TYPE, new ItemStack[] {
+        new ChargingBench(Groups.INFINITY_CHEAT, INFINITY_CHARGER, InfinityWorkbench.TYPE, new ItemStack[]{
                 null, null, null, null, null, null,
                 Materials.VOID_INGOT, Materials.MACHINE_CIRCUIT, Materials.MACHINE_CIRCUIT, Materials.MACHINE_CIRCUIT, Materials.MACHINE_CIRCUIT, Materials.VOID_INGOT,
                 Materials.VOID_INGOT, Materials.MACHINE_CIRCUIT, ADVANCED_CHARGER, ADVANCED_CHARGER, Materials.MACHINE_CIRCUIT, Materials.VOID_INGOT,
                 Materials.VOID_INGOT, Materials.MACHINE_CIRCUIT, ADVANCED_CHARGER, ADVANCED_CHARGER, Materials.MACHINE_CIRCUIT, Materials.VOID_INGOT,
                 Materials.VOID_INGOT, Materials.INFINITE_CIRCUIT, Materials.INFINITE_CORE, Materials.INFINITE_CORE, Materials.INFINITE_CIRCUIT, Materials.VOID_INGOT,
                 Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT
-        }).setCapacity(INFINITY_CHARGER_ENERGY).setEnergyConsumption(INFINITY_CHARGER_ENERGY).setProcessingSpeed(INFINITY_CHARGER_SPEED).register(plugin);
+        }).setCapacity(INFINITY_CHARGER_ENERGY).setEnergyConsumption(INFINITY_CHARGER_ENERGY).setProcessingSpeed(INFINITY_CHARGER_SPEED).register(SlimefunAddonInstance.getSFAInstance());
 
-        new GEOMiner(Groups.ADVANCED_MACHINES, ADVANCED_GEO_MINER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new GEOMiner(Groups.ADVANCED_MACHINES, ADVANCED_GEO_MINER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.MAGSTEEL_PLATE, Materials.MAGSTEEL_PLATE, Materials.MAGSTEEL_PLATE,
                 SlimefunItems.COBALT_PICKAXE, SlimefunItems.GEO_MINER, SlimefunItems.COBALT_PICKAXE,
                 Materials.MACHINE_CIRCUIT, Materials.MACHINE_CORE, Materials.MACHINE_CIRCUIT
-        }).setCapacity(ADVANCED_GEO_ENERGY).setProcessingSpeed(ADVANCED_GEO_SPEED).setEnergyConsumption(ADVANCED_GEO_ENERGY).register(plugin);
+        }).setCapacity(ADVANCED_GEO_ENERGY).setProcessingSpeed(ADVANCED_GEO_SPEED).setEnergyConsumption(ADVANCED_GEO_ENERGY).register(SlimefunAddonInstance.getSFAInstance());
 
-        new NetherStarReactor(Groups.ADVANCED_MACHINES, ADVANCED_NETHER_STAR_REACTOR, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new NetherStarReactor(Groups.ADVANCED_MACHINES, ADVANCED_NETHER_STAR_REACTOR, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.WITHER_PROOF_GLASS, SlimefunItems.WITHER_PROOF_GLASS, SlimefunItems.WITHER_PROOF_GLASS,
                 Materials.MACHINE_CIRCUIT, SlimefunItems.NETHER_STAR_REACTOR, Materials.MACHINE_CIRCUIT,
                 SlimefunItems.WITHER_PROOF_OBSIDIAN, SlimefunItems.WITHER_PROOF_OBSIDIAN, SlimefunItems.WITHER_PROOF_OBSIDIAN,
@@ -278,7 +275,7 @@ public final class SlimefunExtension {
 
             @Override
             public void extraTick(@Nonnull Location l) {
-                if (InfinityExpansion.slimefunTickCount() % 4 != 0) {
+                if (SlimefunAddonInstance.slimefunTickCount() % 4 != 0) {
                     return;
                 }
 
@@ -308,13 +305,13 @@ public final class SlimefunExtension {
                     }
                 });
             }
-        }.register(plugin);
+        }.register(SlimefunAddonInstance.getSFAInstance());
 
-        new ElectricSmeltery(Groups.ADVANCED_MACHINES, ADVANCED_SMELTERY, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new ElectricSmeltery(Groups.ADVANCED_MACHINES, ADVANCED_SMELTERY, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.ELECTRIC_SMELTERY_2, SlimefunItems.ELECTRIC_SMELTERY_2, SlimefunItems.ELECTRIC_SMELTERY_2,
                 SlimefunItems.ELECTRIC_SMELTERY_2, SlimefunItems.ELECTRIC_SMELTERY_2, SlimefunItems.ELECTRIC_SMELTERY_2,
                 Materials.MACHINE_CIRCUIT, Materials.MACHINE_CORE, Materials.MACHINE_CIRCUIT
-        }).setCapacity(ADVANCED_SMELTERY_ENERGY).setProcessingSpeed(ADVANCED_SMELTERY_SPEED).setEnergyConsumption(ADVANCED_SMELTERY_ENERGY).register(plugin);
+        }).setCapacity(ADVANCED_SMELTERY_ENERGY).setProcessingSpeed(ADVANCED_SMELTERY_SPEED).setEnergyConsumption(ADVANCED_SMELTERY_ENERGY).register(SlimefunAddonInstance.getSFAInstance());
     }
 
 }
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/abstracts/AbstractEnergyCrafter.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/abstracts/AbstractEnergyCrafter.java
similarity index 83%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/abstracts/AbstractEnergyCrafter.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/abstracts/AbstractEnergyCrafter.java
index 5506d31..bea624d 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/abstracts/AbstractEnergyCrafter.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/abstracts/AbstractEnergyCrafter.java
@@ -1,13 +1,6 @@
-package io.github.mooy1.infinityexpansion.items.abstracts;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.abstracts;
 
-import javax.annotation.Nonnull;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.Material;
-import org.bukkit.block.Block;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinitylib.machines.TickingMenuBlock;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.TickingMenuBlock;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -16,15 +9,20 @@ import io.github.thebusybiscuit.slimefun4.core.networks.energy.EnergyNetComponen
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+import javax.annotation.ParametersAreNonnullByDefault;
 
 @ParametersAreNonnullByDefault
 public abstract class AbstractEnergyCrafter extends TickingMenuBlock implements EnergyNetComponent {
-
     protected final int energy;
     protected final int statusSlot;
 
-    public AbstractEnergyCrafter(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, int energy, int statusSlot) {
-        super(category, item, recipeType, recipe);
+    public AbstractEnergyCrafter(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, int energy, int statusSlot) {
+        super(itemGroup, item, recipeType, recipe);
         this.energy = energy;
         this.statusSlot = statusSlot;
     }
@@ -41,10 +39,7 @@ public abstract class AbstractEnergyCrafter extends TickingMenuBlock implements
                         "&aCharge: " + charge + "/" + this.energy + " J",
                         ""
                 ));
-            }
-            else {
-                update(blockMenu);
-            }
+            } else update(blockMenu);
         }
     }
 
@@ -65,5 +60,4 @@ public abstract class AbstractEnergyCrafter extends TickingMenuBlock implements
     protected final int[] getInputSlots(DirtyChestMenu menu, ItemStack item) {
         return new int[0];
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/blocks/AdvancedAnvil.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/blocks/AdvancedAnvil.java
similarity index 83%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/blocks/AdvancedAnvil.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/blocks/AdvancedAnvil.java
index b5857f0..279140b 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/blocks/AdvancedAnvil.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/blocks/AdvancedAnvil.java
@@ -1,13 +1,18 @@
-package io.github.mooy1.infinityexpansion.items.blocks;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Objects;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.blocks;
 
+import com.google.common.collect.MapDifference;
+import com.google.common.collect.Maps;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.InfinityExpansion;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.abstracts.AbstractEnergyCrafter;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.utils.Util;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
 import org.bukkit.ChatColor;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -19,18 +24,11 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.EnchantmentStorageMeta;
 import org.bukkit.inventory.meta.ItemMeta;
 
-import com.google.common.collect.MapDifference;
-import com.google.common.collect.Maps;
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinityexpansion.items.abstracts.AbstractEnergyCrafter;
-import io.github.mooy1.infinityexpansion.utils.Util;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
-import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
-import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
-import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Objects;
 
 /**
  * Combines slimefun items, exceeds vanilla anvil limits
@@ -38,7 +36,6 @@ import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
  * @author Mooy1
  */
 public final class AdvancedAnvil extends AbstractEnergyCrafter {
-
     private static final Map<Enchantment, Integer> MAX_LEVELS = Util.getEnchants(Objects.requireNonNull(
             InfinityExpansion.config().getConfigurationSection("advanced-anvil-max-levels")
     ));
@@ -60,20 +57,20 @@ public final class AdvancedAnvil extends AbstractEnergyCrafter {
             45, 46, 52, 53
     };
 
-    public AdvancedAnvil(ItemGroup category, SlimefunItemStack item, RecipeType type, ItemStack[] recipe, int energy) {
-        super(category, item, type, recipe, energy, STATUS_SLOT);
+    public AdvancedAnvil(ItemGroup itemGroup, SlimefunItemStack item, RecipeType type, ItemStack[] recipe, int energy) {
+        super(itemGroup, item, type, recipe, energy, STATUS_SLOT);
     }
 
     @Override
     protected void setup(@Nonnull BlockMenuPreset blockMenuPreset) {
         blockMenuPreset.drawBackground(BACKGROUND);
         blockMenuPreset.drawBackground(ANVIL_SLOT, ANVIL_SLOTS);
-        blockMenuPreset.drawBackground(INPUT_BORDER, new int[] {
+        blockMenuPreset.drawBackground(INPUT_BORDER, new int[]{
                 0, 1, 2, 3, 4, 5,
                 9, 11, 12, 14,
                 18, 19, 20, 21, 22, 23
         });
-        blockMenuPreset.drawBackground(OUTPUT_BORDER, new int[] {
+        blockMenuPreset.drawBackground(OUTPUT_BORDER, new int[]{
                 6, 7, 8,
                 15, 17,
                 24, 25, 26
@@ -117,12 +114,12 @@ public final class AdvancedAnvil extends AbstractEnergyCrafter {
             return;
         }
 
-        if(sfItem2 != null && !sfItem2.isDisenchantable()){
+        if (sfItem2 != null && !sfItem2.isDisenchantable()) {
             p.sendMessage(ChatColor.RED + "Slimefun item is not disenchantable!");
             return;
         }
 
-        if(sfItem1 != null && !sfItem1.isEnchantable()){
+        if (sfItem1 != null && !sfItem1.isEnchantable()) {
             p.sendMessage(ChatColor.RED + "Slimefun item is not enchantable!");
             return;
         }
@@ -151,9 +148,7 @@ public final class AdvancedAnvil extends AbstractEnergyCrafter {
     private static ItemStack getOutput(@Nonnull ItemStack item1, @Nonnull ItemStack item2) {
         Map<Enchantment, Integer> enchants1 = getEnchants(item1.getItemMeta());
         Map<Enchantment, Integer> enchants2 = getEnchants(item2.getItemMeta());
-        if (enchants1.size() == 0 && enchants2.size() == 0) {
-            return null;
-        }
+        if (enchants1.size() == 0 && enchants2.size() == 0) return null;
         return combineEnchants(Maps.difference(enchants1, enchants2), item1, item2);
     }
 
@@ -161,13 +156,8 @@ public final class AdvancedAnvil extends AbstractEnergyCrafter {
     private static Map<Enchantment, Integer> getEnchants(@Nonnull ItemMeta meta) {
         if (meta instanceof EnchantmentStorageMeta) {
             EnchantmentStorageMeta book = (EnchantmentStorageMeta) meta;
-            if (book.hasStoredEnchants()) {
-                return book.getStoredEnchants();
-            }
-        }
-        else if (meta.hasEnchants()) {
-            return meta.getEnchants();
-        }
+            if (book.hasStoredEnchants()) return book.getStoredEnchants();
+        } else if (meta.hasEnchants()) return meta.getEnchants();
 
         return new HashMap<>();
     }
@@ -175,16 +165,11 @@ public final class AdvancedAnvil extends AbstractEnergyCrafter {
     private static void setEnchants(@Nonnull ItemStack item, @Nonnull ItemMeta meta, @Nonnull Map<Enchantment, Integer> enchants) {
         if (meta instanceof EnchantmentStorageMeta) {
             EnchantmentStorageMeta book = (EnchantmentStorageMeta) meta;
-            for (Map.Entry<Enchantment, Integer> entry : enchants.entrySet()) {
+            for (Map.Entry<Enchantment, Integer> entry : enchants.entrySet())
                 book.addStoredEnchant(entry.getKey(), entry.getValue(), true);
-            }
             item.setItemMeta(book);
-        }
-        else {
-            for (Map.Entry<Enchantment, Integer> entry : enchants.entrySet()) {
-                item.addUnsafeEnchantment(entry.getKey(), entry.getValue());
-            }
-        }
+        } else for (Map.Entry<Enchantment, Integer> entry : enchants.entrySet())
+            item.addUnsafeEnchantment(entry.getKey(), entry.getValue());
     }
 
     @Nullable
@@ -198,30 +183,24 @@ public final class AdvancedAnvil extends AbstractEnergyCrafter {
         boolean changed = false;
 
         //upgrades (same enchant and level)
-        for (Map.Entry<Enchantment, Integer> e : dif.entriesInCommon().entrySet()) {
+        for (Map.Entry<Enchantment, Integer> e : dif.entriesInCommon().entrySet())
             if (MAX_LEVELS.containsKey(e.getKey()) && e.getValue() < MAX_LEVELS.get(e.getKey())) {
                 enchants.put(e.getKey(), e.getValue() + 1);
                 changed = true;
             }
-        }
 
         //override (same enchant different level)
-        for (Map.Entry<Enchantment, MapDifference.ValueDifference<Integer>> e : dif.entriesDiffering().entrySet()) {
+        for (Map.Entry<Enchantment, MapDifference.ValueDifference<Integer>> e : dif.entriesDiffering().entrySet())
             if (e.getValue().rightValue() > e.getValue().leftValue()) {
                 enchants.put(e.getKey(), e.getValue().rightValue());
                 changed = true;
             }
-        }
 
         boolean bookOntoTool = item2.getType() == Material.ENCHANTED_BOOK && item1.getType() != Material.ENCHANTED_BOOK;
 
         //unique (different enchants from 2nd item)
         for (Map.Entry<Enchantment, Integer> e : dif.entriesOnlyOnRight().entrySet()) {
-            if (bookOntoTool) {
-                if (!e.getKey().canEnchantItem(item)) {
-                    continue;
-                }
-            }
+            if (bookOntoTool) if (!e.getKey().canEnchantItem(item)) continue;
             enchants.put(e.getKey(), e.getValue());
             changed = true;
         }
@@ -229,10 +208,7 @@ public final class AdvancedAnvil extends AbstractEnergyCrafter {
         if (changed) {
             setEnchants(item, meta, enchants);
             return item;
-        }
-        else {
-            return null;
-        }
+        } else return null;
     }
 
     @Override
@@ -253,7 +229,5 @@ public final class AdvancedAnvil extends AbstractEnergyCrafter {
         }
 
         inv.replaceExistingItem(STATUS_SLOT, Util.getDisplayItem(output));
-
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/blocks/Blocks.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/blocks/Blocks.java
similarity index 73%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/blocks/Blocks.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/blocks/Blocks.java
index 2672e38..571713b 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/blocks/Blocks.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/blocks/Blocks.java
@@ -1,21 +1,18 @@
-package io.github.mooy1.infinityexpansion.items.blocks;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.blocks;
 
-import lombok.experimental.UtilityClass;
-
-import org.bukkit.Material;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinityexpansion.categories.Groups;
-import io.github.mooy1.infinityexpansion.items.materials.Materials;
-import io.github.mooy1.infinitylib.machines.MachineLore;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.categories.Groups;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.materials.Materials;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.SlimefunAddonInstance;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.MachineLore;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
+import lombok.experimental.UtilityClass;
+import org.bukkit.Material;
+import org.bukkit.inventory.ItemStack;
 
 @UtilityClass
 public final class Blocks {
-
     public static final SlimefunItemStack STRAINER_BASE = new SlimefunItemStack(
             "STRAINER_BASE",
             Material.SANDSTONE_WALL,
@@ -39,22 +36,21 @@ public final class Blocks {
             MachineLore.energy(10000000) + "per item"
     );
 
-    public static void setup(InfinityExpansion plugin) {
-        new StrainerBase(Groups.BASIC_MACHINES, STRAINER_BASE, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+    public static void setup() {
+        new StrainerBase(Groups.BASIC_MACHINES, STRAINER_BASE, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 new ItemStack(Material.STICK), new ItemStack(Material.STRING), new ItemStack(Material.STICK),
                 new ItemStack(Material.STICK), new ItemStack(Material.STRING), new ItemStack(Material.STICK),
                 Materials.MAGSTEEL, Materials.MAGSTEEL, Materials.MAGSTEEL,
-        }, 48).register(plugin);
-        new AdvancedAnvil(Groups.MAIN_MATERIALS, ADVANCED_ANVIL, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        }, 48).register(SlimefunAddonInstance.getSFAInstance());
+        new AdvancedAnvil(Groups.MAIN_MATERIALS, ADVANCED_ANVIL, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.MACHINE_PLATE, Materials.MACHINE_PLATE, Materials.MACHINE_PLATE,
                 Materials.MACHINE_PLATE, new ItemStack(Material.ANVIL), Materials.MACHINE_PLATE,
                 Materials.MACHINE_CIRCUIT, Materials.MACHINE_CORE, Materials.MACHINE_CIRCUIT
-        }, 100000).register(plugin);
-        new InfinityWorkbench(Groups.MAIN_MATERIALS, INFINITY_FORGE, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        }, 100000).register(SlimefunAddonInstance.getSFAInstance());
+        new InfinityWorkbench(Groups.MAIN_MATERIALS, INFINITY_FORGE, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.VOID_INGOT, Materials.MACHINE_PLATE, Materials.VOID_INGOT,
                 SlimefunItems.ENERGIZED_CAPACITOR, new ItemStack(Material.CRAFTING_TABLE), SlimefunItems.ENERGIZED_CAPACITOR,
                 Materials.VOID_INGOT, Materials.MACHINE_PLATE, Materials.VOID_INGOT
-        }, 10000000).register(plugin);
+        }, 10000000).register(SlimefunAddonInstance.getSFAInstance());
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/blocks/InfinityWorkbench.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/blocks/InfinityWorkbench.java
similarity index 73%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/blocks/InfinityWorkbench.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/blocks/InfinityWorkbench.java
index 2964c4e..982fe97 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/blocks/InfinityWorkbench.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/blocks/InfinityWorkbench.java
@@ -1,17 +1,9 @@
-package io.github.mooy1.infinityexpansion.items.blocks;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.blocks;
 
-import javax.annotation.Nonnull;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.ChatColor;
-import org.bukkit.Material;
-import org.bukkit.block.Block;
-import org.bukkit.entity.Player;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinityexpansion.categories.InfinityGroup;
-import io.github.mooy1.infinitylib.machines.MachineLayout;
-import io.github.mooy1.infinitylib.machines.MachineRecipeType;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.categories.InfinityGroup;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.CraftingBlock;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.MachineLayout;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.MachineRecipeType;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -21,10 +13,17 @@ import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
+import org.bukkit.ChatColor;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.ItemStack;
 
-@ParametersAreNonnullByDefault
-public final class InfinityWorkbench extends io.github.mooy1.infinitylib.machines.CraftingBlock implements EnergyNetComponent {
+import javax.annotation.Nonnull;
+import javax.annotation.ParametersAreNonnullByDefault;
 
+@ParametersAreNonnullByDefault
+public final class InfinityWorkbench extends CraftingBlock implements EnergyNetComponent {
     public static final int[] INPUT_SLOTS = {
             0, 1, 2, 3, 4, 5,
             9, 10, 11, 12, 13, 14,
@@ -40,19 +39,19 @@ public final class InfinityWorkbench extends io.github.mooy1.infinitylib.machine
 
     private final int energy;
 
-    public InfinityWorkbench(ItemGroup category, SlimefunItemStack item, RecipeType type, ItemStack[] recipe, int energy) {
-        super(category, item, type, recipe);
+    public InfinityWorkbench(ItemGroup itemGroup, SlimefunItemStack item, RecipeType type, ItemStack[] recipe, int energy) {
+        super(itemGroup, item, type, recipe);
         addRecipesFrom(TYPE);
         layout(new MachineLayout()
                 .inputSlots(INPUT_SLOTS)
-                .outputSlots(new int[] { 43 })
+                .outputSlots(new int[]{43})
                 .statusSlot(16)
                 .inputBorder(new int[0])
-                .outputBorder(new int[] {
+                .outputBorder(new int[]{
                         33, 34, 35,
                         42, 44,
                         51, 52, 53
-                }).background(new int[] {
+                }).background(new int[]{
                         6, 8, 15, 17, 24, 25, 26
                 })
         );
@@ -77,15 +76,11 @@ public final class InfinityWorkbench extends io.github.mooy1.infinitylib.machine
     @Override
     protected void craft(Block b, BlockMenu menu, Player p) {
         int charge = getCharge(menu.getLocation());
-        if (charge < this.energy) {
-            p.sendMessage(
-                    ChatColor.RED + "Not enough energy!",
-                    ChatColor.GREEN + "Charge: " + ChatColor.RED + charge + ChatColor.GREEN + "/" + this.energy + " J"
-            );
-        }
-        else {
-            super.craft(b, menu, p);
-        }
+        if (charge < this.energy) p.sendMessage(
+                ChatColor.RED + "Not enough energy!",
+                ChatColor.GREEN + "Charge: " + ChatColor.RED + charge + ChatColor.GREEN + "/" + this.energy + " J"
+        );
+        else super.craft(b, menu, p);
     }
 
     @Override
@@ -103,5 +98,4 @@ public final class InfinityWorkbench extends io.github.mooy1.infinitylib.machine
     public int getCapacity() {
         return this.energy;
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/blocks/StrainerBase.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/blocks/StrainerBase.java
similarity index 81%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/blocks/StrainerBase.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/blocks/StrainerBase.java
index f8dc190..9b8567c 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/blocks/StrainerBase.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/blocks/StrainerBase.java
@@ -1,25 +1,9 @@
-package io.github.mooy1.infinityexpansion.items.blocks;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.blocks;
 
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Random;
-import java.util.concurrent.ThreadLocalRandom;
-
-import javax.annotation.Nonnull;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.Material;
-import org.bukkit.block.Block;
-import org.bukkit.enchantments.Enchantment;
-import org.bukkit.entity.Player;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.Damageable;
-import org.bukkit.inventory.meta.ItemMeta;
-
-import io.github.mooy1.infinityexpansion.items.materials.Materials;
-import io.github.mooy1.infinityexpansion.items.materials.Strainer;
-import io.github.mooy1.infinityexpansion.utils.Util;
-import io.github.mooy1.infinitylib.machines.TickingMenuBlock;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.materials.Materials;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.materials.Strainer;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.utils.Util;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.TickingMenuBlock;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -30,6 +14,20 @@ import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
 import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.enchantments.Enchantment;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.meta.Damageable;
+import org.bukkit.inventory.meta.ItemMeta;
+
+import javax.annotation.Nonnull;
+import javax.annotation.ParametersAreNonnullByDefault;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+import java.util.concurrent.ThreadLocalRandom;
 
 /**
  * Generates items slowly using up strainers, must be waterlogged
@@ -38,8 +36,6 @@ import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
  */
 @ParametersAreNonnullByDefault
 public final class StrainerBase extends TickingMenuBlock implements RecipeDisplayItem {
-
-
     private static final ItemStack POTATO = new CustomItemStack(Material.POTATO, "&7:&6Potatofish&7:", "&eLucky");
     private static final int STATUS_SLOT = 10;
     private static final int[] OUTPUT_SLOTS = {
@@ -73,20 +69,20 @@ public final class StrainerBase extends TickingMenuBlock implements RecipeDispla
 
     private final int time;
 
-    public StrainerBase(ItemGroup category, SlimefunItemStack item, RecipeType type, ItemStack[] recipe, int time) {
-        super(category, item, type, recipe);
+    public StrainerBase(ItemGroup itemGroup, SlimefunItemStack item, RecipeType type, ItemStack[] recipe, int time) {
+        super(itemGroup, item, type, recipe);
         this.time = time;
     }
 
     @Override
     protected void setup(@Nonnull BlockMenuPreset blockMenuPreset) {
-        blockMenuPreset.drawBackground(new int[] {
+        blockMenuPreset.drawBackground(new int[]{
                 0, 1, 2, 9, 11, 18, 19, 20
         });
-        blockMenuPreset.drawBackground(INPUT_BORDER, new int[] {
+        blockMenuPreset.drawBackground(INPUT_BORDER, new int[]{
                 27, 28, 29, 36, 38, 45, 46, 47
         });
-        blockMenuPreset.drawBackground(OUTPUT_BORDER, new int[] {
+        blockMenuPreset.drawBackground(OUTPUT_BORDER, new int[]{
                 3, 4, 5, 6, 7, 8,
                 12, 17,
                 21, 26,
@@ -100,12 +96,8 @@ public final class StrainerBase extends TickingMenuBlock implements RecipeDispla
     @Nonnull
     @Override
     public int[] getInputSlots(@Nonnull DirtyChestMenu menu, @Nonnull ItemStack item) {
-        if (Strainer.getStrainer(item) > 0) {
-            return INPUT_SLOTS;
-        }
-        else {
-            return new int[0];
-        }
+        if (Strainer.getStrainer(item) > 0) return INPUT_SLOTS;
+        else return new int[0];
     }
 
     @Override
@@ -141,9 +133,7 @@ public final class StrainerBase extends TickingMenuBlock implements RecipeDispla
     protected void tick(Block b, BlockMenu inv) {
 
         //check water
-        if (!Util.isWaterLogged(b)) {
-            return;
-        }
+        if (!Util.isWaterLogged(b)) return;
 
         //check input
 
@@ -152,9 +142,8 @@ public final class StrainerBase extends TickingMenuBlock implements RecipeDispla
 
         if (speed == 0) {
 
-            if (inv.hasViewer()) {
+            if (inv.hasViewer())
                 inv.replaceExistingItem(STATUS_SLOT, new CustomItemStack(Material.BARRIER, "&cInput a Strainer!"));
-            }
 
             return;
         }
@@ -165,18 +154,15 @@ public final class StrainerBase extends TickingMenuBlock implements RecipeDispla
 
         if (random.nextInt(this.time / speed) != 0) {
 
-            if (inv.hasViewer()) {
+            if (inv.hasViewer())
                 inv.replaceExistingItem(STATUS_SLOT, new CustomItemStack(Material.LIME_STAINED_GLASS_PANE, "&aCollecting..."));
-            }
 
             return;
         }
 
         //fish
 
-        if (random.nextInt(10000) == 0) {
-            inv.pushItem(POTATO, OUTPUT_SLOTS);
-        }
+        if (random.nextInt(10000) == 0) inv.pushItem(POTATO, OUTPUT_SLOTS);
 
         ItemStack output = OUTPUTS[random.nextInt(OUTPUTS.length)];
 
@@ -184,9 +170,7 @@ public final class StrainerBase extends TickingMenuBlock implements RecipeDispla
 
         if (!inv.fits(output, OUTPUT_SLOTS)) {
 
-            if (inv.hasViewer()) {
-                inv.replaceExistingItem(STATUS_SLOT, NO_ROOM_ITEM);
-            }
+            if (inv.hasViewer()) inv.replaceExistingItem(STATUS_SLOT, NO_ROOM_ITEM);
 
             return;
         }
@@ -195,9 +179,8 @@ public final class StrainerBase extends TickingMenuBlock implements RecipeDispla
 
         inv.pushItem(output.clone(), OUTPUT_SLOTS);
 
-        if (inv.hasViewer()) {
+        if (inv.hasViewer())
             inv.replaceExistingItem(STATUS_SLOT, new CustomItemStack(Material.LIME_STAINED_GLASS_PANE, "&aMaterial Collected!"));
-        }
 
         //reduce durability
 
@@ -207,11 +190,7 @@ public final class StrainerBase extends TickingMenuBlock implements RecipeDispla
 
             int current = durability.getDamage();
 
-            if (current + 1 == Material.FISHING_ROD.getMaxDurability()) {
-
-                inv.consumeItem(INPUT_SLOTS[0]);
-
-            }
+            if (current + 1 == Material.FISHING_ROD.getMaxDurability()) inv.consumeItem(INPUT_SLOTS[0]);
             else { //reduce
 
                 ((Damageable) itemMeta).setDamage(current + 1);
@@ -221,5 +200,4 @@ public final class StrainerBase extends TickingMenuBlock implements RecipeDispla
             }
         }
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/gear/Gear.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/gear/Gear.java
similarity index 84%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/gear/Gear.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/gear/Gear.java
index 3f7ccaa..08b0224 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/gear/Gear.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/gear/Gear.java
@@ -1,13 +1,17 @@
-package io.github.mooy1.infinityexpansion.items.gear;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.logging.Level;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.gear;
 
+import id.universenetwork.sfa_loader.addons.infinityexpansion.InfinityExpansion;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.categories.Groups;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.blocks.InfinityWorkbench;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.materials.Materials;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.utils.Util;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.SlimefunAddonInstance;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
 import lombok.experimental.UtilityClass;
-
 import org.bukkit.ChatColor;
 import org.bukkit.Material;
 import org.bukkit.configuration.ConfigurationSection;
@@ -18,19 +22,14 @@ import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinityexpansion.categories.Groups;
-import io.github.mooy1.infinityexpansion.items.blocks.InfinityWorkbench;
-import io.github.mooy1.infinityexpansion.items.materials.Materials;
-import io.github.mooy1.infinityexpansion.utils.Util;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import java.util.Objects;
+import java.util.logging.Level;
 
 @UtilityClass
 public final class Gear {
-
     public static final SlimefunItemStack ENDER_FLAME = new SlimefunItemStack(
             "ENDER_FLAME",
             Material.ENCHANTED_BOOK,
@@ -115,8 +114,8 @@ public final class Gear {
             "&7Upgrades a tool to vein-mine certain materials"
     );
 
-    public static void setup(InfinityExpansion plugin) {
-        addInfinityEnchants(plugin,
+    public static void setup() {
+        addInfinityEnchants(
                 CROWN, CHESTPLATE, LEGGINGS, BOOTS,
                 AXE, BLADE, PICKAXE,
                 SHIELD, SHOVEL, BOW
@@ -124,125 +123,125 @@ public final class Gear {
         EnchantmentStorageMeta storageMeta = (EnchantmentStorageMeta) ENDER_FLAME.getItemMeta();
         Objects.requireNonNull(storageMeta).addStoredEnchant(Enchantment.FIRE_ASPECT, 10, true);
         ENDER_FLAME.setItemMeta(storageMeta);
-        new SlimefunItem(Groups.MAIN_MATERIALS, ENDER_FLAME, RecipeType.MAGIC_WORKBENCH, new ItemStack[] {
+        new SlimefunItem(Groups.MAIN_MATERIALS, ENDER_FLAME, RecipeType.MAGIC_WORKBENCH, new ItemStack[]{
                 Materials.ENDER_ESSENCE, Materials.ENDER_ESSENCE, Materials.ENDER_ESSENCE,
                 Materials.ENDER_ESSENCE, new ItemStack(Material.BOOK), Materials.ENDER_ESSENCE,
                 Materials.ENDER_ESSENCE, Materials.ENDER_ESSENCE, Materials.ENDER_ESSENCE
-        }).register(plugin);
-        new InfinityArmor(CROWN, new PotionEffect[] {
+        }).register(SlimefunAddonInstance.getSFAInstance());
+        new InfinityArmor(CROWN, new PotionEffect[]{
                 new PotionEffect(PotionEffectType.NIGHT_VISION, 600, 0, false, false, false),
                 new PotionEffect(PotionEffectType.CONDUIT_POWER, 600, 0, false, false, false),
-        }, new ItemStack[] {
+        }, new ItemStack[]{
                 null, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, null,
                 Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT,
                 Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT,
                 null, Materials.INFINITE_INGOT, null, null, Materials.INFINITE_INGOT, null,
                 null, null, null, null, null, null,
                 null, null, null, null, null, null
-        }).register(plugin);
-        new InfinityArmor(CHESTPLATE, new PotionEffect[] {
+        }).register(SlimefunAddonInstance.getSFAInstance());
+        new InfinityArmor(CHESTPLATE, new PotionEffect[]{
                 new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 600, 0, false, false, false),
                 new PotionEffect(PotionEffectType.INCREASE_DAMAGE, 600, 1, false, false, false),
                 new PotionEffect(PotionEffectType.FIRE_RESISTANCE, 600, 0, false, false, false)
-        }, new ItemStack[] {
+        }, new ItemStack[]{
                 null, Materials.INFINITE_INGOT, null, null, Materials.INFINITE_INGOT, null,
                 Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT,
                 Materials.VOID_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.VOID_INGOT,
                 Materials.VOID_INGOT, Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT, Materials.VOID_INGOT,
                 null, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, null,
                 null, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, null
-        }).register(plugin);
-        new InfinityArmor(LEGGINGS, new PotionEffect[] {
+        }).register(SlimefunAddonInstance.getSFAInstance());
+        new InfinityArmor(LEGGINGS, new PotionEffect[]{
                 new PotionEffect(PotionEffectType.FAST_DIGGING, 600, 2, false, false, false),
                 new PotionEffect(PotionEffectType.REGENERATION, 600, 0, false, false, false),
                 new PotionEffect(PotionEffectType.SATURATION, 600, 0, false, false, false),
-        }, new ItemStack[] {
+        }, new ItemStack[]{
                 null, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, null,
                 Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT,
                 Materials.VOID_INGOT, Materials.INFINITE_INGOT, null, null, Materials.INFINITE_INGOT, Materials.VOID_INGOT,
                 Materials.VOID_INGOT, Materials.INFINITE_INGOT, null, null, Materials.INFINITE_INGOT, Materials.VOID_INGOT,
                 Materials.VOID_INGOT, Materials.INFINITE_INGOT, null, null, Materials.INFINITE_INGOT, Materials.VOID_INGOT,
                 null, Materials.INFINITE_INGOT, null, null, Materials.INFINITE_INGOT, null
-        }).register(plugin);
-        new InfinityArmor(BOOTS, new PotionEffect[] {
+        }).register(SlimefunAddonInstance.getSFAInstance());
+        new InfinityArmor(BOOTS, new PotionEffect[]{
                 new PotionEffect(PotionEffectType.SPEED, 600, 2, false, false, false),
                 new PotionEffect(PotionEffectType.DOLPHINS_GRACE, 600, 0, false, false, false),
-        }, new ItemStack[] {
+        }, new ItemStack[]{
                 null, null, null, null, null, null,
                 Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, null, null, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT,
                 Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, null, null, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT,
                 Materials.VOID_INGOT, Materials.VOID_INGOT, null, null, Materials.VOID_INGOT, Materials.VOID_INGOT,
                 Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, null, null, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT,
                 Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, null, null, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT
-        }).register(plugin);
-        new InfinityTool(SHIELD, new ItemStack[] {
+        }).register(SlimefunAddonInstance.getSFAInstance());
+        new InfinityTool(SHIELD, new ItemStack[]{
                 Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, null, null, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT,
                 Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT,
                 Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT,
                 Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT,
                 null, Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT, null,
                 null, Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT, null
-        }).register(plugin);
-        new InfinityBow(Groups.INFINITY_CHEAT, BOW, InfinityWorkbench.TYPE, new ItemStack[] {
+        }).register(SlimefunAddonInstance.getSFAInstance());
+        new InfinityBow(Groups.INFINITY_CHEAT, BOW, InfinityWorkbench.TYPE, new ItemStack[]{
                 null, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.VOID_INGOT, null, null,
                 Materials.INFINITE_INGOT, null, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.VOID_INGOT, null,
                 Materials.VOID_INGOT, null, null, ENDER_FLAME, Materials.INFINITE_INGOT, Materials.VOID_INGOT,
                 null, Materials.VOID_INGOT, null, null, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT,
                 null, null, Materials.VOID_INGOT, null, null, Materials.INFINITE_INGOT,
                 null, null, null, Materials.VOID_INGOT, Materials.INFINITE_INGOT, null
-        }).register(plugin);
-        new InfinityTool(AXE, new ItemStack[] {
+        }).register(SlimefunAddonInstance.getSFAInstance());
+        new InfinityTool(AXE, new ItemStack[]{
                 null, Materials.VOID_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, null, null,
                 Materials.VOID_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.VOID_INGOT, null,
                 null, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT,
                 null, null, Materials.VOID_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT,
                 null, Materials.VOID_INGOT, null, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.VOID_INGOT,
                 Materials.VOID_INGOT, null, null, null, Materials.VOID_INGOT, null
-        }).register(plugin);
-        new InfinityTool(BLADE, new ItemStack[] {
+        }).register(SlimefunAddonInstance.getSFAInstance());
+        new InfinityTool(BLADE, new ItemStack[]{
                 null, null, null, null, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT,
                 null, null, null, Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT,
                 null, null, Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT, null,
                 Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT, null, null,
                 null, Materials.VOID_INGOT, Materials.INFINITE_INGOT, null, null, null,
                 Materials.VOID_INGOT, null, Materials.INFINITE_INGOT, null, null, null
-        }).register(plugin);
-        new InfinityTool(SHOVEL, new ItemStack[] {
+        }).register(SlimefunAddonInstance.getSFAInstance());
+        new InfinityTool(SHOVEL, new ItemStack[]{
                 null, null, null, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT,
                 null, null, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT,
                 null, null, Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT,
                 null, null, Materials.VOID_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, null,
                 null, Materials.VOID_INGOT, null, null, null, null,
                 Materials.VOID_INGOT, null, null, null, null, null
-        }).register(plugin);
-        new InfinityTool(PICKAXE, new ItemStack[] {
+        }).register(SlimefunAddonInstance.getSFAInstance());
+        new InfinityTool(PICKAXE, new ItemStack[]{
                 null, Materials.VOID_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, null,
                 null, null, null, Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT,
                 null, null, null, Materials.VOID_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT,
                 null, null, Materials.VOID_INGOT, null, null, Materials.INFINITE_INGOT,
                 null, Materials.VOID_INGOT, null, null, null, Materials.VOID_INGOT,
                 Materials.VOID_INGOT, null, null, null, null, null
-        }).register(plugin);
-        new InfinityMatrix(Groups.INFINITY_CHEAT, INFINITY_MATRIX, InfinityWorkbench.TYPE, new ItemStack[] {
+        }).register(SlimefunAddonInstance.getSFAInstance());
+        new InfinityMatrix(Groups.INFINITY_CHEAT, INFINITY_MATRIX, InfinityWorkbench.TYPE, new ItemStack[]{
                 Materials.INFINITE_INGOT, null, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, null, Materials.INFINITE_INGOT,
                 Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT,
                 Materials.VOID_INGOT, Materials.VOID_INGOT, new ItemStack(Material.ELYTRA), new ItemStack(Material.ELYTRA), Materials.VOID_INGOT, Materials.VOID_INGOT,
                 Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT,
                 Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT,
                 Materials.INFINITE_INGOT, null, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, null, Materials.INFINITE_INGOT
-        }).register(plugin);
-        new VeinMinerRune(Groups.MAIN_MATERIALS, VEIN_MINER_RUNE, RecipeType.MAGIC_WORKBENCH, new ItemStack[] {
+        }).register(SlimefunAddonInstance.getSFAInstance());
+        new VeinMinerRune(Groups.MAIN_MATERIALS, VEIN_MINER_RUNE, RecipeType.MAGIC_WORKBENCH, new ItemStack[]{
                 Materials.MAGSTEEL_PLATE, SlimefunItems.PICKAXE_OF_VEIN_MINING, Materials.MAGSTEEL_PLATE,
                 Materials.ENDER_ESSENCE, SlimefunItems.BLANK_RUNE, Materials.ENDER_ESSENCE,
                 Materials.MAGSTEEL_PLATE, SlimefunItems.PICKAXE_OF_VEIN_MINING, Materials.MAGSTEEL_PLATE,
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
     }
 
-    private static void addInfinityEnchants(InfinityExpansion plugin, SlimefunItemStack... items) {
-        ConfigurationSection typeSection = plugin.getConfig().getConfigurationSection("infinity-enchant-levels");
+    private static void addInfinityEnchants(SlimefunItemStack... items) {
+        ConfigurationSection typeSection = InfinityExpansion.config().getConfigurationSection("infinity-enchant-levels");
 
         if (typeSection == null) {
-            InfinityExpansion.log(Level.SEVERE, "Config section \"infinity-enchant-levels\" missing, Check your config and report this!");
+            AbstractAddon.log(Level.SEVERE, "Config section \"infinity-enchant-levels\" missing, Check your config and report this!");
             return;
         }
 
@@ -251,12 +250,8 @@ public final class Gear {
 
             // lore
             List<String> lore;
-            if (meta.hasLore()) {
-                lore = meta.getLore();
-            }
-            else {
-                lore = new ArrayList<>();
-            }
+            if (meta.hasLore()) lore = meta.getLore();
+            else lore = new ArrayList<>();
             lore.add(ChatColor.AQUA + "Soulbound");
             meta.setLore(lore);
 
@@ -266,12 +261,10 @@ public final class Gear {
 
             // unbreakable and enchants
             meta.setUnbreakable(Objects.requireNonNull(itemSection).getBoolean("unbreakable"));
-            for (Map.Entry<Enchantment, Integer> entry : Util.getEnchants(itemSection).entrySet()) {
+            for (Map.Entry<Enchantment, Integer> entry : Util.getEnchants(itemSection).entrySet())
                 meta.addEnchant(entry.getKey(), entry.getValue(), true);
-            }
 
             item.setItemMeta(meta);
         }
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/gear/InfinityArmor.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/gear/InfinityArmor.java
similarity index 74%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/gear/InfinityArmor.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/gear/InfinityArmor.java
index 5eda353..1f4e71b 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/gear/InfinityArmor.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/gear/InfinityArmor.java
@@ -1,20 +1,19 @@
-package io.github.mooy1.infinityexpansion.items.gear;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.gear;
 
-import javax.annotation.Nonnull;
-
-import org.bukkit.NamespacedKey;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.potion.PotionEffect;
-
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinityexpansion.categories.Groups;
-import io.github.mooy1.infinityexpansion.items.blocks.InfinityWorkbench;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.categories.Groups;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.blocks.InfinityWorkbench;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;
 import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectionType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectiveArmor;
 import io.github.thebusybiscuit.slimefun4.core.attributes.Soulbound;
 import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArmorPiece;
+import org.bukkit.NamespacedKey;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.potion.PotionEffect;
+
+import javax.annotation.Nonnull;
 
 /**
  * armor
@@ -22,8 +21,7 @@ import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArm
  * @author Mooy1
  */
 public final class InfinityArmor extends SlimefunArmorPiece implements ProtectiveArmor, Soulbound, NotPlaceable {
-
-    private static final NamespacedKey KEY = InfinityExpansion.createKey("infinity_armor");
+    private static final NamespacedKey KEY = AbstractAddon.createKey("infinity_armor");
 
     public InfinityArmor(SlimefunItemStack item, PotionEffect[] effects, ItemStack[] recipe) {
         super(Groups.INFINITY_CHEAT, item, InfinityWorkbench.TYPE, recipe, effects);
@@ -32,7 +30,7 @@ public final class InfinityArmor extends SlimefunArmorPiece implements Protectiv
     @Nonnull
     @Override
     public ProtectionType[] getProtectionTypes() {
-        return new ProtectionType[] {
+        return new ProtectionType[]{
                 ProtectionType.BEES, ProtectionType.RADIATION, ProtectionType.FLYING_INTO_WALL
         };
     }
@@ -47,5 +45,4 @@ public final class InfinityArmor extends SlimefunArmorPiece implements Protectiv
     public NamespacedKey getArmorSetId() {
         return KEY;
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/gear/InfinityBow.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/gear/InfinityBow.java
similarity index 88%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/gear/InfinityBow.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/gear/InfinityBow.java
index f8272af..5e96f73 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/gear/InfinityBow.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/gear/InfinityBow.java
@@ -1,14 +1,4 @@
-package io.github.mooy1.infinityexpansion.items.gear;
-
-import javax.annotation.Nonnull;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.Effect;
-import org.bukkit.Material;
-import org.bukkit.entity.Player;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.potion.PotionEffect;
-import org.bukkit.potion.PotionEffectType;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.gear;
 
 import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
@@ -19,9 +9,17 @@ import io.github.thebusybiscuit.slimefun4.core.attributes.Soulbound;
 import io.github.thebusybiscuit.slimefun4.core.handlers.BowShootHandler;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.implementation.items.weapons.ExplosiveBow;
+import org.bukkit.Effect;
+import org.bukkit.Material;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.potion.PotionEffect;
+import org.bukkit.potion.PotionEffectType;
 
-public final class InfinityBow extends ExplosiveBow implements NotPlaceable, Soulbound {
+import javax.annotation.Nonnull;
+import javax.annotation.ParametersAreNonnullByDefault;
 
+public final class InfinityBow extends ExplosiveBow implements NotPlaceable, Soulbound {
     @ParametersAreNonnullByDefault
     public InfinityBow(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
         super(itemGroup, item, recipe);
@@ -39,13 +37,9 @@ public final class InfinityBow extends ExplosiveBow implements NotPlaceable, Sou
                 Player p = (Player) target;
 
                 // Fixes #3060 - Don't apply effects if the arrow was successfully blocked.
-                if (p.isBlocking() && e.getFinalDamage() <= 0) {
-                    return;
-                }
+                if (p.isBlocking() && e.getFinalDamage() <= 0) return;
 
-                if (Slimefun.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_17)) {
-                    p.setFreezeTicks(60);
-                }
+                if (Slimefun.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_17)) p.setFreezeTicks(60);
             }
 
             target.getWorld().playEffect(target.getLocation(), Effect.STEP_SOUND, Material.ICE);
@@ -54,5 +48,4 @@ public final class InfinityBow extends ExplosiveBow implements NotPlaceable, Sou
             target.addPotionEffect(new PotionEffect(PotionEffectType.JUMP, 20 * 2, -10));
         };
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/gear/InfinityMatrix.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/gear/InfinityMatrix.java
similarity index 76%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/gear/InfinityMatrix.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/gear/InfinityMatrix.java
index ce6dd77..05f64da 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/gear/InfinityMatrix.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/gear/InfinityMatrix.java
@@ -1,17 +1,6 @@
-package io.github.mooy1.infinityexpansion.items.gear;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.gear;
 
-import java.util.Iterator;
-import java.util.List;
-
-import javax.annotation.Nonnull;
-
-import org.bukkit.ChatColor;
-import org.bukkit.entity.Player;
-import org.bukkit.event.Listener;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.ItemMeta;
-
-import io.github.mooy1.infinitylib.common.Events;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Events;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -19,11 +8,19 @@ import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;
 import io.github.thebusybiscuit.slimefun4.core.attributes.Soulbound;
 import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;
 import io.github.thebusybiscuit.slimefun4.implementation.items.SimpleSlimefunItem;
+import org.bukkit.ChatColor;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Listener;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.meta.ItemMeta;
 
-public final class InfinityMatrix extends SimpleSlimefunItem<ItemUseHandler> implements Listener, Soulbound, NotPlaceable {
+import javax.annotation.Nonnull;
+import java.util.Iterator;
+import java.util.List;
 
-    public InfinityMatrix(ItemGroup category, SlimefunItemStack item, RecipeType type, ItemStack[] recipe) {
-        super(category, item, type, recipe);
+public final class InfinityMatrix extends SimpleSlimefunItem<ItemUseHandler> implements Listener, Soulbound, NotPlaceable {
+    public InfinityMatrix(ItemGroup itemGroup, SlimefunItemStack item, RecipeType type, ItemStack[] recipe) {
+        super(itemGroup, item, type, recipe);
         Events.registerListener(this);
     }
 
@@ -33,8 +30,10 @@ public final class InfinityMatrix extends SimpleSlimefunItem<ItemUseHandler> imp
     }
 
     private static void enableFlight(Player p) {
-        p.sendMessage(ChatColor.GREEN + "Infinity Flight Enabled!");
-        p.setAllowFlight(true);
+        if (p.hasPermission("sfaloader.use.infinitymatrix")) {
+            p.sendMessage(ChatColor.GREEN + "Infinity Flight Enabled!");
+            p.setAllowFlight(true);
+        } else p.sendMessage(ChatColor.RED + "You don't have permission to use Infinity Matrix!");
     }
 
     @Nonnull
@@ -42,13 +41,9 @@ public final class InfinityMatrix extends SimpleSlimefunItem<ItemUseHandler> imp
     public ItemUseHandler getItemHandler() {
         return e -> {
             ItemStack item = e.getItem();
-            if (!item.hasItemMeta()) {
-                return;
-            }
+            if (!item.hasItemMeta()) return;
             ItemMeta meta = item.getItemMeta();
-            if (!meta.hasLore()) {
-                return;
-            }
+            if (!meta.hasLore()) return;
             List<String> lore = meta.getLore();
 
             Player p = e.getPlayer();
@@ -73,13 +68,8 @@ public final class InfinityMatrix extends SimpleSlimefunItem<ItemUseHandler> imp
                         p.sendMessage(ChatColor.GOLD + "Ownership removed!");
                         disableFlight(p);
 
-                    }
-                    else if (p.getAllowFlight()) {
-                        disableFlight(p);
-                    }
-                    else {
-                        enableFlight(p);
-                    }
+                    } else if (p.getAllowFlight()) disableFlight(p);
+                    else enableFlight(p);
 
                     return;
                 }
@@ -92,5 +82,4 @@ public final class InfinityMatrix extends SimpleSlimefunItem<ItemUseHandler> imp
             enableFlight(p);
         };
     }
-
 }
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/gear/InfinityTool.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/gear/InfinityTool.java
similarity index 70%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/gear/InfinityTool.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/gear/InfinityTool.java
index 8ece7b1..d5175c2 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/gear/InfinityTool.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/gear/InfinityTool.java
@@ -1,13 +1,12 @@
-package io.github.mooy1.infinityexpansion.items.gear;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.gear;
 
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinityexpansion.categories.Groups;
-import io.github.mooy1.infinityexpansion.items.blocks.InfinityWorkbench;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.categories.Groups;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.blocks.InfinityWorkbench;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;
 import io.github.thebusybiscuit.slimefun4.core.attributes.Soulbound;
+import org.bukkit.inventory.ItemStack;
 
 /**
  * tools
@@ -15,9 +14,7 @@ import io.github.thebusybiscuit.slimefun4.core.attributes.Soulbound;
  * @author Mooy1
  */
 public final class InfinityTool extends SlimefunItem implements Soulbound, NotPlaceable {
-
     public InfinityTool(SlimefunItemStack stack, ItemStack[] recipe) {
         super(Groups.INFINITY_CHEAT, stack, InfinityWorkbench.TYPE, recipe);
     }
-
 }
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/gear/VeinMinerRune.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/gear/VeinMinerRune.java
similarity index 72%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/gear/VeinMinerRune.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/gear/VeinMinerRune.java
index 38c683b..11fc776 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/gear/VeinMinerRune.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/gear/VeinMinerRune.java
@@ -1,24 +1,17 @@
-package io.github.mooy1.infinityexpansion.items.gear;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Set;
-import java.util.concurrent.ThreadLocalRandom;
-
-import javax.annotation.Nullable;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.gear;
 
-import org.bukkit.Bukkit;
-import org.bukkit.ChatColor;
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
-import org.bukkit.Sound;
-import org.bukkit.World;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.CoolDowns;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Events;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Scheduler;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
+import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;
+import io.github.thebusybiscuit.slimefun4.implementation.items.magical.runes.SoulboundRune;
+import me.mrCookieSlime.Slimefun.api.BlockStorage;
+import org.bukkit.*;
 import org.bukkit.block.Block;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.ExperienceOrb;
@@ -35,17 +28,9 @@ import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.persistence.PersistentDataContainer;
 import org.bukkit.persistence.PersistentDataType;
 
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinitylib.common.CoolDowns;
-import io.github.mooy1.infinitylib.common.Events;
-import io.github.mooy1.infinitylib.common.Scheduler;
-import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;
-import io.github.thebusybiscuit.slimefun4.implementation.items.magical.runes.SoulboundRune;
-import me.mrCookieSlime.Slimefun.api.BlockStorage;
+import javax.annotation.Nullable;
+import java.util.*;
+import java.util.concurrent.ThreadLocalRandom;
 
 /**
  * A VeinMiner rune, most code from {@link SoulboundRune}
@@ -53,7 +38,6 @@ import me.mrCookieSlime.Slimefun.api.BlockStorage;
  * @author Mooy1
  */
 public final class VeinMinerRune extends SlimefunItem implements Listener, NotPlaceable {
-
     private static final String[] ALLOWED = {
             "_ORE", "_LOG", "_WOOD", "GILDED", "SOUL", "GRAVEL",
             "MAGMA", "OBSIDIAN", "DIORITE", "ANDESITE", "GRANITE", "_LEAVES",
@@ -62,28 +46,25 @@ public final class VeinMinerRune extends SlimefunItem implements Listener, NotPl
     private static final double RANGE = 1.5;
     private static final int MAX = 64;
     private static final String LORE = ChatColor.AQUA + "Veinminer - Crouch to use";
-    private static final NamespacedKey key = InfinityExpansion.createKey("vein_miner");
+    private static final NamespacedKey key = AbstractAddon.createKey("vein_miner");
 
     private final CoolDowns cooldowns = new CoolDowns(1000);
     private Block processing;
 
-    public VeinMinerRune(ItemGroup category, SlimefunItemStack item, RecipeType type, ItemStack[] recipe) {
-        super(category, item, type, recipe);
+    public VeinMinerRune(ItemGroup itemGroup, SlimefunItemStack item, RecipeType type, ItemStack[] recipe) {
+        super(itemGroup, item, type, recipe);
         Events.registerListener(this);
     }
 
     @EventHandler
     public void onDrop(PlayerDropItemEvent e) {
-        if (isItem(e.getItemDrop().getItemStack()) && e.getItemDrop().getItemStack().getAmount() == 1) {
+        if (isItem(e.getItemDrop().getItemStack()) && e.getItemDrop().getItemStack().getAmount() == 1)
             Scheduler.run(20, () -> activate(e.getPlayer(), e.getItemDrop()));
-        }
     }
 
     private void activate(Player p, Item rune) {
         // Being sure the entity is still valid and not picked up or whatsoever.
-        if (!rune.isValid()) {
-            return;
-        }
+        if (!rune.isValid()) return;
 
         Location l = rune.getLocation();
         Collection<Entity> entities = Objects.requireNonNull(l.getWorld()).getNearbyEntities(l, RANGE, RANGE, RANGE, this::findCompatibleItem);
@@ -112,16 +93,10 @@ public final class VeinMinerRune extends SlimefunItem implements Listener, NotPl
                         l.getWorld().dropItemNaturally(l, itemStack);
 
                         p.sendMessage(ChatColor.GREEN + "Added Vein Miner to tool!");
-                    }
-                    else {
-                        p.sendMessage(ChatColor.RED + "Failed to add vein miner!");
-                    }
+                    } else p.sendMessage(ChatColor.RED + "Failed to add vein miner!");
                 });
 
-            }
-            else {
-                p.sendMessage(ChatColor.RED + "Failed to add vein miner!");
-            }
+            } else p.sendMessage(ChatColor.RED + "Failed to add vein miner!");
         }
     }
 
@@ -138,16 +113,12 @@ public final class VeinMinerRune extends SlimefunItem implements Listener, NotPl
     }
 
     public static boolean isVeinMiner(@Nullable ItemStack item) {
-        if (item == null || !item.hasItemMeta()) {
-            return false;
-        }
+        if (item == null || !item.hasItemMeta()) return false;
         return item.getItemMeta().getPersistentDataContainer().has(key, PersistentDataType.BYTE);
     }
 
     public static void setVeinMiner(@Nullable ItemStack item, boolean makeVeinMiner) {
-        if (item == null) {
-            return;
-        }
+        if (item == null) return;
 
         ItemMeta meta = item.getItemMeta();
 
@@ -158,12 +129,8 @@ public final class VeinMinerRune extends SlimefunItem implements Listener, NotPl
         if (makeVeinMiner && !isVeinMiner) {
             container.set(key, PersistentDataType.BYTE, (byte) 1);
             List<String> lore;
-            if (meta.hasLore()) {
-                lore = meta.getLore();
-            }
-            else {
-                lore = new ArrayList<>();
-            }
+            if (meta.hasLore()) lore = meta.getLore();
+            else lore = new ArrayList<>();
             lore.add(LORE);
             meta.setLore(lore);
             item.setItemMeta(meta);
@@ -184,21 +151,15 @@ public final class VeinMinerRune extends SlimefunItem implements Listener, NotPl
     public void onBlockBreak(BlockBreakEvent e) {
         Block b = e.getBlock();
 
-        if (this.processing == b) {
-            return;
-        }
+        if (this.processing == b) return;
 
         Player p = e.getPlayer();
 
-        if (!p.isSneaking()) {
-            return;
-        }
+        if (!p.isSneaking()) return;
 
         ItemStack item = p.getInventory().getItemInMainHand();
 
-        if (!isVeinMiner(item)) {
-            return;
-        }
+        if (!isVeinMiner(item)) return;
 
         if (p.getFoodLevel() == 0) {
             p.sendMessage(ChatColor.GOLD + "You are too tired to vein-mine!");
@@ -207,15 +168,11 @@ public final class VeinMinerRune extends SlimefunItem implements Listener, NotPl
 
         String type = b.getType().toString();
 
-        if (!isAllowed(type)) {
-            return;
-        }
+        if (!isAllowed(type)) return;
 
         Location l = b.getLocation();
 
-        if (BlockStorage.hasBlockInfo(l)) {
-            return;
-        }
+        if (BlockStorage.hasBlockInfo(l)) return;
 
         if (!this.cooldowns.checkAndReset(p.getUniqueId())) {
             p.sendMessage(ChatColor.GOLD + "You must wait 1 second before using again!");
@@ -234,48 +191,33 @@ public final class VeinMinerRune extends SlimefunItem implements Listener, NotPl
             BlockBreakEvent event = new BlockBreakEvent(mine, p);
             Bukkit.getPluginManager().callEvent(event);
             if (!event.isCancelled()) {
-                if (event.isDropItems()) {
-                    for (ItemStack drop : mine.getDrops(item)) {
-                        w.dropItemNaturally(l, drop);
-                    }
-                }
+                if (event.isDropItems()) for (ItemStack drop : mine.getDrops(item)) w.dropItemNaturally(l, drop);
                 mine.setType(Material.AIR);
             }
         }
 
-        if (type.endsWith("ORE")) {
-            w.spawn(b.getLocation(), ExperienceOrb.class).setExperience(found.size() * 2);
-        }
+        if (type.endsWith("ORE")) w.spawn(b.getLocation(), ExperienceOrb.class).setExperience(found.size() * 2);
 
         if (ThreadLocalRandom.current().nextBoolean()) {
             FoodLevelChangeEvent event = new FoodLevelChangeEvent(p, p.getFoodLevel() - 1);
             Bukkit.getPluginManager().callEvent(event);
-            if (!event.isCancelled()) {
-                p.setFoodLevel(event.getFoodLevel());
-            }
+            if (!event.isCancelled()) p.setFoodLevel(event.getFoodLevel());
         }
     }
 
     private static boolean isAllowed(String mat) {
-        for (String test : ALLOWED) {
-            if (mat.contains(test)) {
-                return true;
-            }
-        }
+        for (String test : ALLOWED) if (mat.contains(test)) return true;
         return false;
     }
 
     private static void getVein(Set<Location> checked, Set<Block> found, Location l, Block b) {
-        if (found.size() >= MAX) {
-            return;
-        }
+        if (found.size() >= MAX) return;
 
-        for (Location check : getAdjacentLocations(l)) {
+        for (Location check : getAdjacentLocations(l))
             if (checked.add(check) && check.getBlock().getType() == b.getType() && !BlockStorage.hasBlockInfo(b)) {
                 found.add(b);
                 getVein(checked, found, check, check.getBlock());
             }
-        }
     }
 
     private static List<Location> getAdjacentLocations(Location l) {
@@ -289,5 +231,4 @@ public final class VeinMinerRune extends SlimefunItem implements Listener, NotPl
         Collections.shuffle(list);
         return list;
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/generators/EnergyGenerator.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/generators/EnergyGenerator.java
similarity index 67%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/generators/EnergyGenerator.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/generators/EnergyGenerator.java
index 156238d..bfe34e1 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/generators/EnergyGenerator.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/generators/EnergyGenerator.java
@@ -1,14 +1,7 @@
-package io.github.mooy1.infinityexpansion.items.generators;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.generators;
 
-import javax.annotation.Nonnull;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinitylib.machines.MachineLore;
-import io.github.mooy1.infinitylib.machines.MenuBlock;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.MachineLore;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.MenuBlock;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -20,30 +13,35 @@ import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
 import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+import javax.annotation.ParametersAreNonnullByDefault;
 
 /**
  * Solar panels and some other basic generators
  *
  * @author Mooy1
- *
+ * <p>
  * Thanks to panda for some stuff to work off of
  */
 @ParametersAreNonnullByDefault
 public final class EnergyGenerator extends MenuBlock implements EnergyNetProvider {
-
     private final GenerationType type;
     private final int generation;
 
-    public EnergyGenerator(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe,
+    public EnergyGenerator(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe,
                            int generation, GenerationType type) {
-        super(category, item, recipeType, recipe);
+        super(itemGroup, item, recipeType, recipe);
         this.type = type;
         this.generation = generation;
     }
 
     @Override
     protected void setup(BlockMenuPreset blockMenuPreset) {
-        blockMenuPreset.drawBackground(new int[] {
+        blockMenuPreset.drawBackground(new int[]{
                 0, 1, 2, 3, 4, 5, 6, 7, 8
         });
     }
@@ -70,22 +68,18 @@ public final class EnergyGenerator extends MenuBlock implements EnergyNetProvide
 
         BlockMenu inv = BlockStorage.getInventory(l);
         if (inv != null && inv.hasViewer()) {
-            if (gen == 0) {
-                inv.replaceExistingItem(4, new CustomItemStack(
-                        Material.GREEN_STAINED_GLASS_PANE,
-                        "&cNot generating",
-                        "&7Stored: &6" + MachineLore.format(getCharge(l)) + " J"
-                ));
-            }
-            else {
-                inv.replaceExistingItem(4, new CustomItemStack(
-                        Material.GREEN_STAINED_GLASS_PANE,
-                        "&aGeneration",
-                        "&7Type: &6" + this.type,
-                        "&7Generating: &6" + MachineLore.formatEnergy(gen) + " J/s ",
-                        "&7Stored: &6" + MachineLore.format(getCharge(l)) + " J"
-                ));
-            }
+            if (gen == 0) inv.replaceExistingItem(4, new CustomItemStack(
+                    Material.GREEN_STAINED_GLASS_PANE,
+                    "&cNot generating",
+                    "&7Stored: &6" + MachineLore.format(getCharge(l)) + " J"
+            ));
+            else inv.replaceExistingItem(4, new CustomItemStack(
+                    Material.GREEN_STAINED_GLASS_PANE,
+                    "&aGeneration",
+                    "&7Type: &6" + this.type,
+                    "&7Generating: &6" + MachineLore.formatEnergy(gen) + " J/s ",
+                    "&7Stored: &6" + MachineLore.format(getCharge(l)) + " J"
+            ));
         }
 
         return gen;
@@ -101,5 +95,4 @@ public final class EnergyGenerator extends MenuBlock implements EnergyNetProvide
     public EnergyNetComponentType getEnergyComponentType() {
         return EnergyNetComponentType.GENERATOR;
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/generators/GenerationType.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/generators/GenerationType.java
similarity index 87%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/generators/GenerationType.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/generators/GenerationType.java
index 525bc01..3ce20b7 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/generators/GenerationType.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/generators/GenerationType.java
@@ -1,18 +1,15 @@
-package io.github.mooy1.infinityexpansion.items.generators;
-
-import javax.annotation.Nonnull;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.generators;
 
+import id.universenetwork.sfa_loader.addons.infinityexpansion.utils.Util;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
-
 import org.bukkit.World;
 import org.bukkit.block.Block;
 
-import io.github.mooy1.infinityexpansion.utils.Util;
+import javax.annotation.Nonnull;
 
 @AllArgsConstructor
 public enum GenerationType {
-
     HYDROELECTRIC("Hydroelectric") {
         @Override
         protected int generate(@Nonnull World world, @Nonnull Block block, int def) {
@@ -37,9 +34,7 @@ public enum GenerationType {
         protected int generate(@Nonnull World world, @Nonnull Block block, int def) {
             if (world.getEnvironment() == World.Environment.NORMAL
                     && world.getTime() < 13000
-                    && block.getLocation().add(0, 1, 0).getBlock().getLightFromSky() == 15) {
-                return def;
-            }
+                    && block.getLocation().add(0, 1, 0).getBlock().getLightFromSky() == 15) return def;
             return 0;
         }
     },
@@ -52,9 +47,7 @@ public enum GenerationType {
                     return def;
                 case NORMAL: {
                     if (world.getTime() >= 13000
-                            || block.getLocation().add(0, 1, 0).getBlock().getLightFromSky() != 15) {
-                        return def;
-                    }
+                            || block.getLocation().add(0, 1, 0).getBlock().getLightFromSky() != 15) return def;
                     return 0;
                 }
                 default:
@@ -73,5 +66,4 @@ public enum GenerationType {
     private final String toString;
 
     protected abstract int generate(@Nonnull World world, @Nonnull Block block, int def);
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/generators/Generators.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/generators/Generators.java
similarity index 83%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/generators/Generators.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/generators/Generators.java
index 988261a..42c64ed 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/generators/Generators.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/generators/Generators.java
@@ -1,23 +1,20 @@
-package io.github.mooy1.infinityexpansion.items.generators;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.generators;
 
-import lombok.experimental.UtilityClass;
-
-import org.bukkit.Material;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinityexpansion.categories.Groups;
-import io.github.mooy1.infinityexpansion.items.SlimefunExtension;
-import io.github.mooy1.infinityexpansion.items.blocks.InfinityWorkbench;
-import io.github.mooy1.infinityexpansion.items.materials.Materials;
-import io.github.mooy1.infinitylib.machines.MachineLore;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.categories.Groups;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.SlimefunExtension;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.blocks.InfinityWorkbench;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.materials.Materials;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.SlimefunAddonInstance;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.MachineLore;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
+import lombok.experimental.UtilityClass;
+import org.bukkit.Material;
+import org.bukkit.inventory.ItemStack;
 
 @UtilityClass
 public final class Generators {
-
     private static final int HYDRO_ENERGY = 5;
     private static final int ADVANCED_HYDRO_ENERGY = 45;
     private static final int GEO_ENERGY = 35;
@@ -123,68 +120,67 @@ public final class Generators {
             MachineLore.energyPerSecond(INFINITY_ENERGY)
     );
 
-    public static void setup(InfinityExpansion plugin) {
-        new InfinityReactor(Groups.INFINITY_CHEAT, INFINITY_REACTOR, InfinityWorkbench.TYPE, new ItemStack[] {
+    public static void setup() {
+        new InfinityReactor(Groups.INFINITY_CHEAT, INFINITY_REACTOR, InfinityWorkbench.TYPE, new ItemStack[]{
                 null, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, null,
                 Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT,
                 Materials.INFINITE_INGOT, Materials.MACHINE_PLATE, Materials.MACHINE_PLATE, Materials.MACHINE_PLATE, Materials.MACHINE_PLATE, Materials.INFINITE_INGOT,
                 Materials.INFINITE_INGOT, Materials.MACHINE_PLATE, SlimefunExtension.ADVANCED_NETHER_STAR_REACTOR, SlimefunExtension.ADVANCED_NETHER_STAR_REACTOR, Materials.MACHINE_PLATE, Materials.INFINITE_INGOT,
                 Materials.INFINITE_INGOT, Materials.MACHINE_PLATE, Materials.MACHINE_PLATE, Materials.MACHINE_PLATE, Materials.MACHINE_PLATE, Materials.INFINITE_INGOT,
                 Materials.INFINITE_INGOT, Materials.INFINITE_CIRCUIT, Materials.INFINITE_CORE, Materials.INFINITE_CORE, Materials.INFINITE_CIRCUIT, Materials.INFINITE_INGOT
-        }, INFINITY_REACTOR_ENERGY).register(plugin);
+        }, INFINITY_REACTOR_ENERGY).register(SlimefunAddonInstance.getSFAInstance());
 
-        new EnergyGenerator(Groups.BASIC_MACHINES, HYDRO, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new EnergyGenerator(Groups.BASIC_MACHINES, HYDRO, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.MAGSTEEL, Materials.MACHINE_CIRCUIT, Materials.MAGSTEEL,
                 new ItemStack(Material.BUCKET), SlimefunItems.ELECTRO_MAGNET, new ItemStack(Material.BUCKET),
                 Materials.MAGSTEEL, Materials.MACHINE_CIRCUIT, Materials.MAGSTEEL
-        }, HYDRO_ENERGY, GenerationType.HYDROELECTRIC).register(plugin);
-        new EnergyGenerator(Groups.ADVANCED_MACHINES, REINFORCED_HYDRO, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        }, HYDRO_ENERGY, GenerationType.HYDROELECTRIC).register(SlimefunAddonInstance.getSFAInstance());
+        new EnergyGenerator(Groups.ADVANCED_MACHINES, REINFORCED_HYDRO, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 HYDRO, Materials.MACHINE_CIRCUIT, HYDRO,
                 Materials.MAGSTEEL_PLATE, Materials.MACHINE_CORE, Materials.MAGSTEEL_PLATE,
                 HYDRO, Materials.MACHINE_CIRCUIT, HYDRO
-        }, ADVANCED_HYDRO_ENERGY, GenerationType.HYDROELECTRIC).register(plugin);
+        }, ADVANCED_HYDRO_ENERGY, GenerationType.HYDROELECTRIC).register(SlimefunAddonInstance.getSFAInstance());
 
-        new EnergyGenerator(Groups.ADVANCED_MACHINES, GEOTHERMAL, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new EnergyGenerator(Groups.ADVANCED_MACHINES, GEOTHERMAL, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.MAGSTEEL_PLATE, Materials.MAGSTEEL_PLATE, Materials.MAGSTEEL_PLATE,
                 SlimefunItems.LAVA_GENERATOR_2, SlimefunItems.LAVA_GENERATOR_2, SlimefunItems.LAVA_GENERATOR_2,
                 Materials.MACHINE_CIRCUIT, Materials.MACHINE_CORE, Materials.MACHINE_CIRCUIT
-        }, GEO_ENERGY, GenerationType.GEOTHERMAL).register(plugin);
-        new EnergyGenerator(Groups.ADVANCED_MACHINES, REINFORCED_GEOTHERMAL, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        }, GEO_ENERGY, GenerationType.GEOTHERMAL).register(SlimefunAddonInstance.getSFAInstance());
+        new EnergyGenerator(Groups.ADVANCED_MACHINES, REINFORCED_GEOTHERMAL, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 GEOTHERMAL, Materials.MACHINE_CIRCUIT, GEOTHERMAL,
                 Materials.MACHINE_PLATE, Materials.MACHINE_CORE, Materials.MACHINE_PLATE,
                 GEOTHERMAL, Materials.MACHINE_CIRCUIT, GEOTHERMAL
-        }, ADVANCED_GEO_ENERGY, GenerationType.GEOTHERMAL).register(plugin);
+        }, ADVANCED_GEO_ENERGY, GenerationType.GEOTHERMAL).register(SlimefunAddonInstance.getSFAInstance());
 
-        new EnergyGenerator(Groups.BASIC_MACHINES, BASIC_PANEL, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new EnergyGenerator(Groups.BASIC_MACHINES, BASIC_PANEL, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.MAGSTEEL, Materials.MAGSTEEL_PLATE, Materials.MAGSTEEL,
                 SlimefunItems.SOLAR_PANEL, SlimefunItems.SOLAR_PANEL, SlimefunItems.SOLAR_PANEL,
                 Materials.MACHINE_CIRCUIT, Materials.MACHINE_CIRCUIT, Materials.MACHINE_CIRCUIT
-        }, BASIC_SOLAR_ENERGY, GenerationType.SOLAR).register(plugin);
-        new EnergyGenerator(Groups.ADVANCED_MACHINES, ADVANCED_PANEL, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        }, BASIC_SOLAR_ENERGY, GenerationType.SOLAR).register(SlimefunAddonInstance.getSFAInstance());
+        new EnergyGenerator(Groups.ADVANCED_MACHINES, ADVANCED_PANEL, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 BASIC_PANEL, BASIC_PANEL, BASIC_PANEL,
                 Materials.TITANIUM, SlimefunItems.SOLAR_GENERATOR_4, Materials.TITANIUM,
                 Materials.MACHINE_CIRCUIT, Materials.MACHINE_CIRCUIT, Materials.MACHINE_CIRCUIT
-        }, ADVANCED_SOLAR_ENERGY, GenerationType.SOLAR).register(plugin);
+        }, ADVANCED_SOLAR_ENERGY, GenerationType.SOLAR).register(SlimefunAddonInstance.getSFAInstance());
 
-        new EnergyGenerator(Groups.ADVANCED_MACHINES, CELESTIAL_PANEL, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new EnergyGenerator(Groups.ADVANCED_MACHINES, CELESTIAL_PANEL, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.MACHINE_PLATE, Materials.MACHINE_PLATE, Materials.MACHINE_PLATE,
                 ADVANCED_PANEL, ADVANCED_PANEL, ADVANCED_PANEL,
                 Materials.MACHINE_CIRCUIT, Materials.MACHINE_CORE, Materials.MACHINE_CIRCUIT
-        }, CELESTIAL_ENERGY, GenerationType.SOLAR).register(plugin);
-        new EnergyGenerator(Groups.ADVANCED_MACHINES, VOID_PANEL, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        }, CELESTIAL_ENERGY, GenerationType.SOLAR).register(SlimefunAddonInstance.getSFAInstance());
+        new EnergyGenerator(Groups.ADVANCED_MACHINES, VOID_PANEL, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT,
                 CELESTIAL_PANEL, CELESTIAL_PANEL, CELESTIAL_PANEL,
                 Materials.MAGNONIUM, Materials.MAGNONIUM, Materials.MAGNONIUM
-        }, VOID_ENERGY, GenerationType.LUNAR).register(plugin);
+        }, VOID_ENERGY, GenerationType.LUNAR).register(SlimefunAddonInstance.getSFAInstance());
 
-        new EnergyGenerator(Groups.INFINITY_CHEAT, INFINITE_PANEL, InfinityWorkbench.TYPE, new ItemStack[] {
+        new EnergyGenerator(Groups.INFINITY_CHEAT, INFINITE_PANEL, InfinityWorkbench.TYPE, new ItemStack[]{
                 CELESTIAL_PANEL, CELESTIAL_PANEL, CELESTIAL_PANEL, CELESTIAL_PANEL, CELESTIAL_PANEL, CELESTIAL_PANEL,
                 CELESTIAL_PANEL, CELESTIAL_PANEL, CELESTIAL_PANEL, CELESTIAL_PANEL, CELESTIAL_PANEL, CELESTIAL_PANEL,
                 Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT,
                 Materials.INFINITE_INGOT, Materials.INFINITE_CIRCUIT, Materials.INFINITE_CORE, Materials.INFINITE_CORE, Materials.INFINITE_CIRCUIT, Materials.INFINITE_INGOT,
                 Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT,
                 VOID_PANEL, VOID_PANEL, VOID_PANEL, VOID_PANEL, VOID_PANEL, VOID_PANEL
-        }, INFINITY_ENERGY, GenerationType.INFINITY).register(plugin);
+        }, INFINITY_ENERGY, GenerationType.INFINITY).register(SlimefunAddonInstance.getSFAInstance());
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/generators/InfinityReactor.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/generators/InfinityReactor.java
similarity index 79%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/generators/InfinityReactor.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/generators/InfinityReactor.java
index a170a1e..78c4f4d 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/generators/InfinityReactor.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/generators/InfinityReactor.java
@@ -1,20 +1,8 @@
-package io.github.mooy1.infinityexpansion.items.generators;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.generators;
 
-import java.util.ArrayList;
-import java.util.List;
-
-import javax.annotation.Nonnull;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.ChatColor;
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.block.Block;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinityexpansion.items.materials.Materials;
-import io.github.mooy1.infinitylib.common.StackUtils;
-import io.github.mooy1.infinitylib.machines.MenuBlock;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.materials.Materials;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.StackUtils;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.MenuBlock;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -26,6 +14,16 @@ import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
 import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+import javax.annotation.ParametersAreNonnullByDefault;
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * A reactor that generates huge power but costs infinity ingots and void ingots
@@ -34,41 +32,39 @@ import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
  */
 @ParametersAreNonnullByDefault
 public final class InfinityReactor extends MenuBlock implements EnergyNetProvider, RecipeDisplayItem {
-
     private static final int INFINITY_INTERVAL = 196000;
     private static final int VOID_INTERVAL = 32000;
-    private static final int[] INPUT_SLOTS = { 10, 16 };
+    private static final int[] INPUT_SLOTS = {10, 16};
     private static final int STATUS_SLOT = 13;
 
     private final int gen;
 
-    public InfinityReactor(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, int gen) {
-        super(category, item, recipeType, recipe);
+    public InfinityReactor(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, int gen) {
+        super(itemGroup, item, recipeType, recipe);
         this.gen = gen;
     }
 
     @Override
     protected void onNewInstance(@Nonnull BlockMenu menu, @Nonnull Block b) {
-        if (BlockStorage.getLocationInfo(b.getLocation(), "progress") == null) {
+        if (BlockStorage.getLocationInfo(b.getLocation(), "progress") == null)
             BlockStorage.addBlockInfo(b, "progress", "0");
-        }
     }
 
     @Override
     protected void setup(@Nonnull BlockMenuPreset blockMenuPreset) {
         blockMenuPreset.drawBackground(new CustomItemStack(Material.WHITE_STAINED_GLASS_PANE,
-                "&fInfinity Ingot Input"), new int[] {
+                "&fInfinity Ingot Input"), new int[]{
                 0, 1, 2,
                 9, 11,
                 18, 19, 20
         });
-        blockMenuPreset.drawBackground(new int[] {
+        blockMenuPreset.drawBackground(new int[]{
                 3, 4, 5,
                 12, 13, 14,
                 21, 22, 23
         });
         blockMenuPreset.drawBackground(new CustomItemStack(Material.BLACK_STAINED_GLASS_PANE,
-                "&8Void Ingot Input"), new int[] {
+                "&8Void Ingot Input"), new int[]{
                 6, 7, 8,
                 15, 17,
                 24, 25, 26
@@ -79,15 +75,9 @@ public final class InfinityReactor extends MenuBlock implements EnergyNetProvide
     @Override
     public int[] getInputSlots(DirtyChestMenu menu, ItemStack item) {
         String input = StackUtils.getId(item);
-        if (Materials.VOID_INGOT.getItemId().equals(input)) {
-            return new int[] { INPUT_SLOTS[1] };
-        }
-        else if (Materials.INFINITE_INGOT.getItemId().equals(input)) {
-            return new int[] { INPUT_SLOTS[0] };
-        }
-        else {
-            return new int[0];
-        }
+        if (Materials.VOID_INGOT.getItemId().equals(input)) return new int[]{INPUT_SLOTS[1]};
+        else if (Materials.INFINITE_INGOT.getItemId().equals(input)) return new int[]{INPUT_SLOTS[0]};
+        else return new int[0];
     }
 
     @Override
@@ -112,30 +102,27 @@ public final class InfinityReactor extends MenuBlock implements EnergyNetProvide
 
             if (infinityInput == null || !Materials.INFINITE_INGOT.getItemId().equals(StackUtils.getId(infinityInput))) { //wrong input
 
-                if (inv.hasViewer()) {
+                if (inv.hasViewer())
                     inv.replaceExistingItem(STATUS_SLOT, new CustomItemStack(Material.RED_STAINED_GLASS_PANE, "&cInput more &fInfinity Ingots"));
-                }
                 return 0;
 
             }
 
             if (voidInput == null || !Materials.VOID_INGOT.getItemId().equals(StackUtils.getId(voidInput))) { //wrong input
 
-                if (inv.hasViewer()) {
+                if (inv.hasViewer())
                     inv.replaceExistingItem(STATUS_SLOT, new CustomItemStack(Material.RED_STAINED_GLASS_PANE, "&cInput more &8Void Ingots"));
-                }
                 return 0;
 
             }
 
             //correct input
-            if (inv.hasViewer()) {
+            if (inv.hasViewer())
                 inv.replaceExistingItem(STATUS_SLOT, new CustomItemStack(Material.LIME_STAINED_GLASS_PANE,
                         "&aStarting Generation",
                         "&aTime until infinity ingot needed: " + INFINITY_INTERVAL,
                         "&aTime until void ingot needed: " + VOID_INTERVAL
                 ));
-            }
             inv.consumeItem(INPUT_SLOTS[0]);
             inv.consumeItem(INPUT_SLOTS[1]);
             BlockStorage.addBlockInfo(l, "progress", "1");
@@ -145,9 +132,8 @@ public final class InfinityReactor extends MenuBlock implements EnergyNetProvide
 
         if (progress >= INFINITY_INTERVAL) { //done
 
-            if (inv.hasViewer()) {
+            if (inv.hasViewer())
                 inv.replaceExistingItem(STATUS_SLOT, new CustomItemStack(Material.LIME_STAINED_GLASS_PANE, "&aFinished Generation"));
-            }
             BlockStorage.addBlockInfo(l, "progress", "0");
             return this.gen;
 
@@ -157,21 +143,19 @@ public final class InfinityReactor extends MenuBlock implements EnergyNetProvide
 
             if (voidInput == null || !Materials.VOID_INGOT.getItemId().equals(StackUtils.getId(voidInput))) { //wrong input
 
-                if (inv.hasViewer()) {
+                if (inv.hasViewer())
                     inv.replaceExistingItem(STATUS_SLOT, new CustomItemStack(Material.RED_STAINED_GLASS_PANE, "&cInput more &8Void Ingots"));
-                }
                 return 0;
 
             }
 
             //right input
-            if (inv.hasViewer()) {
+            if (inv.hasViewer())
                 inv.replaceExistingItem(STATUS_SLOT, new CustomItemStack(Material.LIME_STAINED_GLASS_PANE,
                         "&aGenerating...",
                         "&aTime until infinity ingot needed: " + (INFINITY_INTERVAL - progress),
                         "&aTime until void ingot needed: " + (VOID_INTERVAL - Math.floorMod(progress, VOID_INTERVAL))
                 ));
-            }
             BlockStorage.addBlockInfo(l, "progress", String.valueOf(progress + 1));
             inv.consumeItem(INPUT_SLOTS[1]);
             return this.gen;
@@ -180,14 +164,12 @@ public final class InfinityReactor extends MenuBlock implements EnergyNetProvide
 
         //generate
 
-        if (inv.hasViewer()) {
-            inv.replaceExistingItem(STATUS_SLOT, new CustomItemStack(Material.LIME_STAINED_GLASS_PANE,
-                            "&aGenerating...",
-                            "&aTime until infinity ingot needed: " + (INFINITY_INTERVAL - progress),
-                            "&aTime until void ingot needed: " + (VOID_INTERVAL - Math.floorMod(progress, VOID_INTERVAL))
-                    )
-            );
-        }
+        if (inv.hasViewer()) inv.replaceExistingItem(STATUS_SLOT, new CustomItemStack(Material.LIME_STAINED_GLASS_PANE,
+                        "&aGenerating...",
+                        "&aTime until infinity ingot needed: " + (INFINITY_INTERVAL - progress),
+                        "&aTime until void ingot needed: " + (VOID_INTERVAL - Math.floorMod(progress, VOID_INTERVAL))
+                )
+        );
         BlockStorage.addBlockInfo(l, "progress", String.valueOf(progress + 1));
         return this.gen;
     }
@@ -214,5 +196,4 @@ public final class InfinityReactor extends MenuBlock implements EnergyNetProvide
 
         return items;
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/machines/GearTransformer.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/GearTransformer.java
similarity index 79%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/machines/GearTransformer.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/GearTransformer.java
index 6dc74ce..812d5cb 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/machines/GearTransformer.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/GearTransformer.java
@@ -1,18 +1,8 @@
-package io.github.mooy1.infinityexpansion.items.machines;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.machines;
 
-import java.util.ArrayList;
-import java.util.List;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.Material;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinityexpansion.items.abstracts.AbstractEnergyCrafter;
-import io.github.mooy1.infinitylib.common.StackUtils;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.InfinityExpansion;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.abstracts.AbstractEnergyCrafter;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.StackUtils;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -21,6 +11,14 @@ import io.github.thebusybiscuit.slimefun4.libraries.dough.collections.Pair;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
+import org.bukkit.Material;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import javax.annotation.ParametersAreNonnullByDefault;
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * Machine that changes the material of gear and tools
@@ -29,10 +27,9 @@ import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
  */
 @ParametersAreNonnullByDefault
 public final class GearTransformer extends AbstractEnergyCrafter implements RecipeDisplayItem {
-
     private static final boolean SF = InfinityExpansion.config().getBoolean("balance-options.allow-sf-item-transform");
-    private static final int[] OUTPUT_SLOTS = { 40 };
-    private static final int[] INPUT_SLOTS = { 10, 16 };
+    private static final int[] OUTPUT_SLOTS = {40};
+    private static final int[] INPUT_SLOTS = {10, 16};
     private static final int STATUS_SLOT = 13;
     private static final ItemStack[] TOOL_RECIPE = {
             new ItemStack(Material.OAK_PLANKS, 4),
@@ -80,31 +77,31 @@ public final class GearTransformer extends AbstractEnergyCrafter implements Reci
             "NETHERITE"
     };
 
-    public GearTransformer(ItemGroup category, SlimefunItemStack item, RecipeType type, ItemStack[] recipe, int energy) {
-        super(category, item, type, recipe, energy, STATUS_SLOT);
+    public GearTransformer(ItemGroup itemGroup, SlimefunItemStack item, RecipeType type, ItemStack[] recipe, int energy) {
+        super(itemGroup, item, type, recipe, energy, STATUS_SLOT);
     }
 
     @Override
     protected void setup(@Nonnull BlockMenuPreset blockMenuPreset) {
-        blockMenuPreset.drawBackground(new int[] {
+        blockMenuPreset.drawBackground(new int[]{
                 3, 4, 5,
                 12, STATUS_SLOT, 14,
-                21, 22 , 23,
+                21, 22, 23,
                 27, 29, 33, 35,
                 36, 44,
                 45, 46, 47, 51, 52, 53
         });
-        blockMenuPreset.drawBackground(OUTPUT_BORDER, new int[] {
+        blockMenuPreset.drawBackground(OUTPUT_BORDER, new int[]{
                 28, 30, 31, 32, 34,
                 37, 38, 39, 41, 42, 43,
                 48, 49, 50
         });
-        blockMenuPreset.drawBackground(new CustomItemStack(Material.BLUE_STAINED_GLASS_PANE, "&9Tool Input"), new int[] {
+        blockMenuPreset.drawBackground(new CustomItemStack(Material.BLUE_STAINED_GLASS_PANE, "&9Tool Input"), new int[]{
                 0, 1, 2,
                 9, 11,
                 18, 19, 20
         });
-        blockMenuPreset.drawBackground(new CustomItemStack(Material.BLUE_STAINED_GLASS_PANE, "&9Material Input"), new int[] {
+        blockMenuPreset.drawBackground(new CustomItemStack(Material.BLUE_STAINED_GLASS_PANE, "&9Material Input"), new int[]{
                 6, 7, 8,
                 15, 17,
                 24, 25, 26
@@ -124,37 +121,31 @@ public final class GearTransformer extends AbstractEnergyCrafter implements Reci
     @Nullable
     private static Pair<Material, Integer> getOutput(ItemStack inputMaterial, String inputToolType) {
 
-        for (String toolType : TOOL_TYPES) {
+        for (String toolType : TOOL_TYPES)
             if (inputToolType.equals(toolType)) { //make sure its a tool
 
-                for (int i = 0 ; i < TOOL_RECIPE.length ; i++) { //compare to each recipe
+                for (int i = 0; i < TOOL_RECIPE.length; i++) { //compare to each recipe
                     ItemStack recipe = TOOL_RECIPE[i];
 
-                    if (inputMaterial.getType() == recipe.getType() && inputMaterial.getAmount() >= recipe.getAmount()) {
-
+                    if (inputMaterial.getType() == recipe.getType() && inputMaterial.getAmount() >= recipe.getAmount())
                         return new Pair<>(Material.getMaterial(TOOL_MATERIALS[i] + toolType), recipe.getAmount());
-                    }
                 }
 
                 break;
             }
-        }
 
-        for (String armorType : ARMOR_TYPES) {
-            if (inputToolType.equals(armorType)) { //make sure its a armor
+        for (String armorType : ARMOR_TYPES)
+            if (inputToolType.equals(armorType)) { //make sure it's a armor
 
-                for (int i = 0 ; i < ARMOR_RECIPE.length ; i++) { //compare to each recipe
+                for (int i = 0; i < ARMOR_RECIPE.length; i++) { //compare to each recipe
                     ItemStack recipe = ARMOR_RECIPE[i];
 
-                    if (inputMaterial.getType() == recipe.getType() && inputMaterial.getAmount() >= recipe.getAmount()) {
-
+                    if (inputMaterial.getType() == recipe.getType() && inputMaterial.getAmount() >= recipe.getAmount())
                         return new Pair<>(Material.getMaterial(ARMOR_MATERIALS[i] + armorType), recipe.getAmount());
-                    }
                 }
 
                 break;
             }
-        }
 
         return null;
     }
@@ -163,25 +154,13 @@ public final class GearTransformer extends AbstractEnergyCrafter implements Reci
     private static String getType(ItemStack item) {
         Material material = item.getType();
 
-        for (String armorType : ARMOR_TYPES) {
-
-            for (String armorMaterial : ARMOR_MATERIALS) {
+        for (String armorType : ARMOR_TYPES)
+            for (String armorMaterial : ARMOR_MATERIALS)
+                if (material == Material.getMaterial(armorMaterial + armorType)) return armorType;
 
-                if (material == Material.getMaterial(armorMaterial + armorType)) {
-                    return armorType;
-                }
-            }
-        }
-
-        for (String toolType : TOOL_TYPES) {
-
-            for (String toolMaterial : TOOL_MATERIALS) {
-
-                if (material == Material.getMaterial(toolMaterial + toolType)) {
-                    return toolType;
-                }
-            }
-        }
+        for (String toolType : TOOL_TYPES)
+            for (String toolMaterial : TOOL_MATERIALS)
+                if (material == Material.getMaterial(toolMaterial + toolType)) return toolType;
         return null;
 
     }
@@ -191,7 +170,7 @@ public final class GearTransformer extends AbstractEnergyCrafter implements Reci
     public List<ItemStack> getDisplayRecipes() {
         List<ItemStack> items = new ArrayList<>();
 
-        for (int i = 0 ; i < TOOL_RECIPE.length ; i++) {
+        for (int i = 0; i < TOOL_RECIPE.length; i++) {
             items.add(TOOL_RECIPE[i]);
             items.add(ARMOR_RECIPE[i]);
         }
@@ -260,5 +239,4 @@ public final class GearTransformer extends AbstractEnergyCrafter implements Reci
 
         inv.replaceExistingItem(STATUS_SLOT, new CustomItemStack(Material.LIME_STAINED_GLASS_PANE, "&aTool Transformed!"));
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/machines/GeoQuarry.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/GeoQuarry.java
similarity index 74%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/machines/GeoQuarry.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/GeoQuarry.java
index a5374e0..0dd9ef5 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/machines/GeoQuarry.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/GeoQuarry.java
@@ -1,23 +1,7 @@
-package io.github.mooy1.infinityexpansion.items.machines;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.machines;
 
-import java.util.HashMap;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-
-import javax.annotation.Nonnull;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import lombok.Setter;
-
-import org.bukkit.Material;
-import org.bukkit.World;
-import org.bukkit.block.Biome;
-import org.bukkit.block.Block;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinitylib.machines.AbstractMachineBlock;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.SlimefunAddonInstance;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.AbstractMachineBlock;
 import io.github.thebusybiscuit.slimefun4.api.geo.GEOResource;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -27,29 +11,41 @@ import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.collections.Pair;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.collections.RandomizedSet;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import lombok.Setter;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
+import org.bukkit.Material;
+import org.bukkit.World;
+import org.bukkit.block.Biome;
+import org.bukkit.block.Block;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+import javax.annotation.ParametersAreNonnullByDefault;
+import java.util.HashMap;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
 
 @ParametersAreNonnullByDefault
 public final class GeoQuarry extends AbstractMachineBlock implements RecipeDisplayItem {
-
     private static final int STATUS = 4;
-    private static final int[] OUTPUT_SLOTS = { 29, 30, 31, 32, 33, 38, 39, 40, 41, 42 };
+    private static final int[] OUTPUT_SLOTS = {29, 30, 31, 32, 33, 38, 39, 40, 41, 42};
 
     private final Map<Pair<Biome, World.Environment>, RandomizedSet<ItemStack>> recipes = new HashMap<>();
     @Setter
     private int ticksPerOutput;
 
-    public GeoQuarry(ItemGroup category, SlimefunItemStack item, RecipeType type, ItemStack[] recipe) {
-        super(category, item, type, recipe);
+    public GeoQuarry(ItemGroup itemGroup, SlimefunItemStack item, RecipeType type, ItemStack[] recipe) {
+        super(itemGroup, item, type, recipe);
     }
 
     @Override
     protected void setup(@Nonnull BlockMenuPreset blockMenuPreset) {
-        blockMenuPreset.drawBackground(new int[] {
+        blockMenuPreset.drawBackground(new int[]{
                 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 26, 27, 35, 36, 44, 45, 53
         });
-        blockMenuPreset.drawBackground(OUTPUT_BORDER, new int[] {
+        blockMenuPreset.drawBackground(OUTPUT_BORDER, new int[]{
                 19, 20, 21, 22, 23, 24, 25, 28, 34, 37, 43, 46, 47, 48, 49, 50, 51, 52
         });
     }
@@ -66,42 +62,34 @@ public final class GeoQuarry extends AbstractMachineBlock implements RecipeDispl
 
     @Override
     public void onNewInstance(@Nonnull BlockMenu menu, @Nonnull Block b) {
-
     }
 
     @Override
     protected boolean process(Block b, BlockMenu inv) {
-        if (InfinityExpansion.slimefunTickCount() % this.ticksPerOutput != 0) {
-            if (inv.hasViewer()) {
+        if (SlimefunAddonInstance.slimefunTickCount() % this.ticksPerOutput != 0) {
+            if (inv.hasViewer())
                 inv.replaceExistingItem(STATUS, new CustomItemStack(Material.LIME_STAINED_GLASS_PANE, "&aDrilling..."));
-            }
             return true;
         }
 
         ItemStack output = this.recipes.computeIfAbsent(new Pair<>(b.getBiome(), b.getWorld().getEnvironment()), k -> {
             RandomizedSet<ItemStack> set = new RandomizedSet<>();
-            for (GEOResource resource : Slimefun.getRegistry().getGEOResources().values()) {
+            for (GEOResource resource : Slimefun.getRegistry().getGEOResources().values())
                 if (resource.isObtainableFromGEOMiner()) {
                     int supply = resource.getDefaultSupply(b.getWorld().getEnvironment(), b.getBiome());
-                    if (supply > 0) {
-                        set.add(resource.getItem(), supply);
-                    }
+                    if (supply > 0) set.add(resource.getItem(), supply);
                 }
-            }
             return set;
         }).getRandom();
 
         if (!inv.fits(output, OUTPUT_SLOTS)) {
-            if (inv.hasViewer()) {
-                inv.replaceExistingItem(STATUS, NO_ROOM_ITEM);
-            }
+            if (inv.hasViewer()) inv.replaceExistingItem(STATUS, NO_ROOM_ITEM);
             return false;
         }
 
         inv.pushItem(output.clone(), OUTPUT_SLOTS);
-        if (inv.hasViewer()) {
+        if (inv.hasViewer())
             inv.replaceExistingItem(STATUS, new CustomItemStack(Material.LIME_STAINED_GLASS_PANE, "&aFound!"));
-        }
         return true;
     }
 
@@ -115,13 +103,9 @@ public final class GeoQuarry extends AbstractMachineBlock implements RecipeDispl
     public List<ItemStack> getDisplayRecipes() {
         List<ItemStack> displayRecipes = new LinkedList<>();
 
-        for (GEOResource resource : Slimefun.getRegistry().getGEOResources().values()) {
-            if (resource.isObtainableFromGEOMiner()) {
-                displayRecipes.add(resource.getItem());
-            }
-        }
+        for (GEOResource resource : Slimefun.getRegistry().getGEOResources().values())
+            if (resource.isObtainableFromGEOMiner()) displayRecipes.add(resource.getItem());
 
         return displayRecipes;
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/machines/GrowingMachine.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/GrowingMachine.java
similarity index 71%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/machines/GrowingMachine.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/GrowingMachine.java
index 57f45bf..a5518b5 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/machines/GrowingMachine.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/GrowingMachine.java
@@ -1,37 +1,33 @@
-package io.github.mooy1.infinityexpansion.items.machines;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.machines;
 
-import java.util.ArrayList;
-import java.util.EnumMap;
-import java.util.List;
-import java.util.Map;
-
-import javax.annotation.Nonnull;
-
-import lombok.Setter;
-
-import org.bukkit.Material;
-import org.bukkit.block.Block;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinitylib.machines.AbstractMachineBlock;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.SlimefunAddonInstance;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.AbstractMachineBlock;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.RecipeDisplayItem;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import lombok.Setter;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.inventory.ItemStack;
 
-public final class GrowingMachine extends AbstractMachineBlock implements RecipeDisplayItem {
+import javax.annotation.Nonnull;
+import java.util.ArrayList;
+import java.util.EnumMap;
+import java.util.List;
+import java.util.Map;
 
+public final class GrowingMachine extends AbstractMachineBlock implements RecipeDisplayItem {
     private static final int[] OUTPUT_SLOTS = {
             13, 14, 15, 16,
             22, 23, 24, 25,
             31, 32, 33, 34,
             40, 41, 42, 43
     };
-    private static final int[] INPUT_SLOTS = { 37 };
+    private static final int[] INPUT_SLOTS = {37};
     private static final int STATUS_SLOT = 10;
     private static final ItemStack GROWING = new CustomItemStack(Material.LIME_STAINED_GLASS_PANE, "&aGrowing...");
     private static final ItemStack INPUT_PLANT = new CustomItemStack(Material.BLUE_STAINED_GLASS_PANE, "&9Input a plant!");
@@ -41,31 +37,22 @@ public final class GrowingMachine extends AbstractMachineBlock implements Recipe
     @Setter
     private int ticksPerOutput;
 
-    public GrowingMachine(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public GrowingMachine(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
     }
 
     @Override
     protected boolean process(@Nonnull Block b, @Nonnull BlockMenu menu) {
         ItemStack input = menu.getItemInSlot(INPUT_SLOTS[0]);
         if (input != null && this.recipes.containsKey(input.getType())) {
-            if (menu.hasViewer()) {
-                menu.replaceExistingItem(STATUS_SLOT, GROWING);
-            }
-            if (InfinityExpansion.slimefunTickCount() % this.ticksPerOutput == 0) {
+            if (menu.hasViewer()) menu.replaceExistingItem(STATUS_SLOT, GROWING);
+            if (SlimefunAddonInstance.slimefunTickCount() % this.ticksPerOutput == 0) {
                 ItemStack[] output = this.recipes.get(input.getType());
-                if (output != null) {
-                    for (ItemStack item : output) {
-                        menu.pushItem(item.clone(), OUTPUT_SLOTS);
-                    }
-                }
+                if (output != null) for (ItemStack item : output) menu.pushItem(item.clone(), OUTPUT_SLOTS);
             }
             return true;
-        }
-        else {
-            if (menu.hasViewer()) {
-                menu.replaceExistingItem(STATUS_SLOT, INPUT_PLANT);
-            }
+        } else {
+            if (menu.hasViewer()) menu.replaceExistingItem(STATUS_SLOT, INPUT_PLANT);
             return false;
         }
     }
@@ -77,13 +64,13 @@ public final class GrowingMachine extends AbstractMachineBlock implements Recipe
 
     @Override
     protected void setup(@Nonnull BlockMenuPreset blockMenuPreset) {
-        blockMenuPreset.drawBackground(new int[] {
+        blockMenuPreset.drawBackground(new int[]{
                 0, 1, 2, 9, 10, 11, 18, 19, 20
         });
-        blockMenuPreset.drawBackground(INPUT_BORDER, new int[] {
+        blockMenuPreset.drawBackground(INPUT_BORDER, new int[]{
                 27, 28, 29, 36, 38, 45, 46, 47
         });
-        blockMenuPreset.drawBackground(OUTPUT_BORDER, new int[] {
+        blockMenuPreset.drawBackground(OUTPUT_BORDER, new int[]{
                 3, 4, 5, 6, 7, 8,
                 12, 17,
                 21, 26,
@@ -116,5 +103,4 @@ public final class GrowingMachine extends AbstractMachineBlock implements Recipe
     protected int[] getOutputSlots() {
         return OUTPUT_SLOTS;
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/machines/Machines.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/Machines.java
similarity index 86%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/machines/Machines.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/Machines.java
index ae008e4..ae528ec 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/machines/Machines.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/Machines.java
@@ -1,29 +1,25 @@
-package io.github.mooy1.infinityexpansion.items.machines;
-
-import java.util.EnumMap;
-import java.util.concurrent.ThreadLocalRandom;
-
-import javax.annotation.Nonnull;
-
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.machines;
+
+import id.universenetwork.sfa_loader.addons.infinityexpansion.categories.Groups;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.SlimefunExtension;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.blocks.InfinityWorkbench;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.materials.Materials;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.SlimefunAddonInstance;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.MachineBlock;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.MachineLore;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
 import lombok.experimental.UtilityClass;
-
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
 
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinityexpansion.categories.Groups;
-import io.github.mooy1.infinityexpansion.items.SlimefunExtension;
-import io.github.mooy1.infinityexpansion.items.blocks.InfinityWorkbench;
-import io.github.mooy1.infinityexpansion.items.materials.Materials;
-import io.github.mooy1.infinitylib.machines.MachineBlock;
-import io.github.mooy1.infinitylib.machines.MachineLore;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
+import javax.annotation.Nonnull;
+import java.util.EnumMap;
+import java.util.concurrent.ThreadLocalRandom;
 
 @UtilityClass
 public final class Machines {
-
     public static final SlimefunItemStack COBBLE_PRESS = new SlimefunItemStack(
             "COBBLE_PRESS",
             Material.SMOOTH_STONE,
@@ -260,172 +256,172 @@ public final class Machines {
             MachineLore.energyPerSecond(12000)
     );
 
-    public static void setup(InfinityExpansion plugin) {
-        new VoidHarvester(Groups.ADVANCED_MACHINES, VOID_HARVESTER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+    public static void setup() {
+        new VoidHarvester(Groups.ADVANCED_MACHINES, VOID_HARVESTER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.TITANIUM, Materials.TITANIUM, Materials.TITANIUM,
                 Materials.MACHINE_PLATE, SlimefunItems.GEO_MINER, Materials.MACHINE_PLATE,
                 Materials.MACHINE_CIRCUIT, Materials.MACHINE_CORE, Materials.MACHINE_CIRCUIT
-        }, 1).energyPerTick(120).register(plugin);
-        new VoidHarvester(Groups.INFINITY_CHEAT, INFINITE_VOID_HARVESTER, InfinityWorkbench.TYPE, new ItemStack[] {
+        }, 1).energyPerTick(120).register(SlimefunAddonInstance.getSFAInstance());
+        new VoidHarvester(Groups.INFINITY_CHEAT, INFINITE_VOID_HARVESTER, InfinityWorkbench.TYPE, new ItemStack[]{
                 Materials.MACHINE_PLATE, Materials.MACHINE_PLATE, Materials.MACHINE_PLATE, Materials.MACHINE_PLATE, Materials.MACHINE_PLATE, Materials.MACHINE_PLATE,
                 Materials.MAGNONIUM, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.MAGNONIUM,
                 Materials.MAGNONIUM, Materials.VOID_INGOT, Materials.INFINITE_CIRCUIT, Materials.INFINITE_CIRCUIT, Materials.VOID_INGOT, Materials.MAGNONIUM,
                 Materials.MAGNONIUM, Materials.VOID_INGOT, VOID_HARVESTER, VOID_HARVESTER, Materials.VOID_INGOT, Materials.MAGNONIUM,
                 Materials.MAGNONIUM, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.MAGNONIUM,
                 Materials.MACHINE_PLATE, Materials.MACHINE_PLATE, Materials.MACHINE_PLATE, Materials.MACHINE_PLATE, Materials.MACHINE_PLATE, Materials.MACHINE_PLATE
-        }, 64).energyPerTick(12000).register(plugin);
-        new StoneworksFactory(Groups.ADVANCED_MACHINES, STONEWORKS_FACTORY, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        }, 64).energyPerTick(12000).register(SlimefunAddonInstance.getSFAInstance());
+        new StoneworksFactory(Groups.ADVANCED_MACHINES, STONEWORKS_FACTORY, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.MAGSTEEL_PLATE, BASIC_COBBLE, Materials.MAGSTEEL_PLATE,
                 SlimefunItems.ELECTRIC_FURNACE_3, Materials.MACHINE_CIRCUIT, SlimefunItems.ELECTRIC_ORE_GRINDER,
                 Materials.MAGSTEEL_PLATE, SlimefunItems.ELECTRIC_PRESS, Materials.MAGSTEEL_PLATE
-        }).energyPerTick(240).register(plugin);
+        }).energyPerTick(240).register(SlimefunAddonInstance.getSFAInstance());
 
-        new SingularityConstructor(Groups.ADVANCED_MACHINES, SINGULARITY_CONSTRUCTOR, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new SingularityConstructor(Groups.ADVANCED_MACHINES, SINGULARITY_CONSTRUCTOR, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.MAGSTEEL, Materials.MAGSTEEL, Materials.MAGSTEEL,
                 Materials.MACHINE_PLATE, SlimefunItems.CARBON_PRESS_3, Materials.MACHINE_PLATE,
                 Materials.MACHINE_CIRCUIT, Materials.MACHINE_CORE, Materials.MACHINE_CIRCUIT
-        }).speed(1).energyPerTick(120).register(plugin);
-        new SingularityConstructor(Groups.INFINITY_CHEAT, INFINITY_CONSTRUCTOR, InfinityWorkbench.TYPE, new ItemStack[] {
+        }).speed(1).energyPerTick(120).register(SlimefunAddonInstance.getSFAInstance());
+        new SingularityConstructor(Groups.INFINITY_CHEAT, INFINITY_CONSTRUCTOR, InfinityWorkbench.TYPE, new ItemStack[]{
                 null, Materials.MACHINE_PLATE, Materials.MACHINE_PLATE, Materials.MACHINE_PLATE, Materials.MACHINE_PLATE, null,
                 null, Materials.VOID_INGOT, Materials.INFINITE_CIRCUIT, Materials.INFINITE_CIRCUIT, Materials.VOID_INGOT, null,
                 null, Materials.VOID_INGOT, SINGULARITY_CONSTRUCTOR, SINGULARITY_CONSTRUCTOR, Materials.VOID_INGOT, null,
                 null, Materials.VOID_INGOT, SINGULARITY_CONSTRUCTOR, SINGULARITY_CONSTRUCTOR, Materials.VOID_INGOT, null,
                 null, Materials.INFINITE_INGOT, Materials.INFINITE_CORE, Materials.INFINITE_CORE, Materials.INFINITE_INGOT, null,
                 Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT
-        }).speed(64).energyPerTick(1200).register(plugin);
+        }).speed(64).energyPerTick(1200).register(SlimefunAddonInstance.getSFAInstance());
 
-        new ResourceSynthesizer(Groups.ADVANCED_MACHINES, RESOURCE_SYNTHESIZER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new ResourceSynthesizer(Groups.ADVANCED_MACHINES, RESOURCE_SYNTHESIZER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.ADAMANTITE, Materials.ADAMANTITE, Materials.ADAMANTITE,
                 Materials.MACHINE_PLATE, SlimefunItems.REINFORCED_FURNACE, Materials.MACHINE_PLATE,
                 Materials.MACHINE_PLATE, Materials.MACHINE_CORE, Materials.MACHINE_PLATE
-        }).recipes(new SlimefunItemStack[] {
+        }).recipes(new SlimefunItemStack[]{
                 Materials.IRON_SINGULARITY, Materials.COAL_SINGULARITY, new SlimefunItemStack(SlimefunItems.REINFORCED_ALLOY_INGOT, 32),
                 Materials.IRON_SINGULARITY, Materials.REDSTONE_SINGULARITY, new SlimefunItemStack(SlimefunItems.REDSTONE_ALLOY, 32),
                 Materials.DIAMOND_SINGULARITY, Materials.COAL_SINGULARITY, new SlimefunItemStack(SlimefunItems.CARBONADO, 16),
                 Materials.GOLD_SINGULARITY, Materials.EMERALD_SINGULARITY, new SlimefunItemStack(SlimefunItems.BLISTERING_INGOT_3, 16),
                 Materials.COPPER_SINGULARITY, Materials.ZINC_SINGULARITY, new SlimefunItemStack(SlimefunItems.ELECTRO_MAGNET, 64),
                 Materials.IRON_SINGULARITY, Materials.QUARTZ_SINGULARITY, new SlimefunItemStack(SlimefunItems.SOLAR_PANEL, 64)
-        }).energyPerTick(1_000_000).register(plugin);
+        }).energyPerTick(1_000_000).register(SlimefunAddonInstance.getSFAInstance());
 
-        new PoweredBedrock(Groups.INFINITY_CHEAT, POWERED_BEDROCK, InfinityWorkbench.TYPE, new ItemStack[] {
+        new PoweredBedrock(Groups.INFINITY_CHEAT, POWERED_BEDROCK, InfinityWorkbench.TYPE, new ItemStack[]{
                 Materials.COBBLE_5, Materials.COBBLE_5, Materials.COBBLE_5, Materials.COBBLE_5, Materials.COBBLE_5, Materials.COBBLE_5,
                 Materials.COBBLE_5, Materials.MACHINE_PLATE, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.MACHINE_PLATE, Materials.COBBLE_5,
                 Materials.COBBLE_5, Materials.VOID_INGOT, SlimefunItems.ENERGIZED_CAPACITOR, SlimefunItems.ENERGIZED_CAPACITOR, Materials.VOID_INGOT, Materials.COBBLE_5,
                 Materials.COBBLE_5, Materials.VOID_INGOT, Materials.INFINITE_CORE, Materials.INFINITE_CIRCUIT, Materials.VOID_INGOT, Materials.COBBLE_5,
                 Materials.COBBLE_5, Materials.MACHINE_PLATE, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.MACHINE_PLATE, Materials.COBBLE_5,
                 Materials.COBBLE_5, Materials.COBBLE_5, Materials.COBBLE_5, Materials.COBBLE_5, Materials.COBBLE_5, Materials.COBBLE_5
-        }, BEDROCK_ENERGY).register(plugin);
-        new MaterialGenerator(Groups.BASIC_MACHINES, BASIC_COBBLE, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        }, BEDROCK_ENERGY).register(SlimefunAddonInstance.getSFAInstance());
+        new MaterialGenerator(Groups.BASIC_MACHINES, BASIC_COBBLE, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.MAGSTEEL, new ItemStack(Material.DIAMOND_PICKAXE), Materials.MAGSTEEL,
                 new ItemStack(Material.WATER_BUCKET), Materials.COBBLE_2, new ItemStack(Material.LAVA_BUCKET),
                 Materials.MAGSTEEL, Materials.MACHINE_CIRCUIT, Materials.MAGSTEEL
-        }).material(Material.COBBLESTONE).speed(1).energyPerTick(24).register(plugin);
-        new MaterialGenerator(Groups.ADVANCED_MACHINES, ADVANCED_COBBLE, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        }).material(Material.COBBLESTONE).speed(1).energyPerTick(24).register(SlimefunAddonInstance.getSFAInstance());
+        new MaterialGenerator(Groups.ADVANCED_MACHINES, ADVANCED_COBBLE, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.MAGSTEEL_PLATE, BASIC_COBBLE, Materials.MAGSTEEL_PLATE,
                 new ItemStack(Material.WATER_BUCKET), Materials.COBBLE_3, new ItemStack(Material.LAVA_BUCKET),
                 Materials.MACHINE_CIRCUIT, BASIC_COBBLE, Materials.MACHINE_CIRCUIT
-        }).material(Material.COBBLESTONE).speed(4).energyPerTick(75).register(plugin);
-        new MaterialGenerator(Groups.INFINITY_CHEAT, INFINITY_COBBLE, InfinityWorkbench.TYPE, new ItemStack[] {
+        }).material(Material.COBBLESTONE).speed(4).energyPerTick(75).register(SlimefunAddonInstance.getSFAInstance());
+        new MaterialGenerator(Groups.INFINITY_CHEAT, INFINITY_COBBLE, InfinityWorkbench.TYPE, new ItemStack[]{
                 Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT,
                 Materials.VOID_INGOT, ADVANCED_COBBLE, ADVANCED_COBBLE, ADVANCED_COBBLE, ADVANCED_COBBLE, Materials.VOID_INGOT,
                 Materials.VOID_INGOT, ADVANCED_COBBLE, ADVANCED_COBBLE, ADVANCED_COBBLE, ADVANCED_COBBLE, Materials.VOID_INGOT,
                 Materials.VOID_INGOT, ADVANCED_COBBLE, ADVANCED_COBBLE, ADVANCED_COBBLE, ADVANCED_COBBLE, Materials.VOID_INGOT,
                 Materials.VOID_INGOT, ADVANCED_COBBLE, ADVANCED_COBBLE, ADVANCED_COBBLE, ADVANCED_COBBLE, Materials.VOID_INGOT,
                 Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT
-        }).material(Material.COBBLESTONE).speed(64).energyPerTick(800).register(plugin);
-        new MaterialGenerator(Groups.ADVANCED_MACHINES, BASIC_OBSIDIAN, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        }).material(Material.COBBLESTONE).speed(64).energyPerTick(800).register(SlimefunAddonInstance.getSFAInstance());
+        new MaterialGenerator(Groups.ADVANCED_MACHINES, BASIC_OBSIDIAN, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.FLUID_PUMP, SlimefunItems.PROGRAMMABLE_ANDROID_MINER, SlimefunItems.FLUID_PUMP,
                 new ItemStack(Material.DISPENSER), Materials.VOID_INGOT, new ItemStack(Material.DISPENSER),
                 Materials.MACHINE_CIRCUIT, ADVANCED_COBBLE, Materials.MACHINE_CIRCUIT
-        }).material(Material.OBSIDIAN).speed(1).energyPerTick(240).register(plugin);
+        }).material(Material.OBSIDIAN).speed(1).energyPerTick(240).register(SlimefunAddonInstance.getSFAInstance());
 
         EnumMap<Material, ItemStack[]> crops = new EnumMap<>(Material.class);
-        crops.put(Material.WHEAT_SEEDS, new ItemStack[] { new ItemStack(Material.WHEAT, 2) });
-        crops.put(Material.CARROT, new ItemStack[] { new ItemStack(Material.CARROT, 2) });
-        crops.put(Material.POTATO, new ItemStack[] { new ItemStack(Material.POTATO, 2) });
-        crops.put(Material.BEETROOT_SEEDS, new ItemStack[] { new ItemStack(Material.BEETROOT, 2) });
-        crops.put(Material.PUMPKIN_SEEDS, new ItemStack[] { new ItemStack(Material.PUMPKIN) });
-        crops.put(Material.MELON_SEEDS, new ItemStack[] { new ItemStack(Material.MELON) });
-        crops.put(Material.SUGAR_CANE, new ItemStack[] { new ItemStack(Material.SUGAR_CANE, 2) });
-        crops.put(Material.COCOA_BEANS, new ItemStack[] { new ItemStack(Material.COCOA_BEANS, 2) });
-        crops.put(Material.CACTUS, new ItemStack[] { new ItemStack(Material.CACTUS, 2) });
-        crops.put(Material.BAMBOO, new ItemStack[] { new ItemStack(Material.BAMBOO, 6) });
-        crops.put(Material.CHORUS_FLOWER, new ItemStack[] { new ItemStack(Material.CHORUS_FRUIT, 6) });
-        crops.put(Material.NETHER_WART, new ItemStack[] { new ItemStack(Material.NETHER_WART, 2) });
-
-        new GrowingMachine(Groups.BASIC_MACHINES, BASIC_GROWER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        crops.put(Material.WHEAT_SEEDS, new ItemStack[]{new ItemStack(Material.WHEAT, 2)});
+        crops.put(Material.CARROT, new ItemStack[]{new ItemStack(Material.CARROT, 2)});
+        crops.put(Material.POTATO, new ItemStack[]{new ItemStack(Material.POTATO, 2)});
+        crops.put(Material.BEETROOT_SEEDS, new ItemStack[]{new ItemStack(Material.BEETROOT, 2)});
+        crops.put(Material.PUMPKIN_SEEDS, new ItemStack[]{new ItemStack(Material.PUMPKIN)});
+        crops.put(Material.MELON_SEEDS, new ItemStack[]{new ItemStack(Material.MELON)});
+        crops.put(Material.SUGAR_CANE, new ItemStack[]{new ItemStack(Material.SUGAR_CANE, 2)});
+        crops.put(Material.COCOA_BEANS, new ItemStack[]{new ItemStack(Material.COCOA_BEANS, 2)});
+        crops.put(Material.CACTUS, new ItemStack[]{new ItemStack(Material.CACTUS, 2)});
+        crops.put(Material.BAMBOO, new ItemStack[]{new ItemStack(Material.BAMBOO, 6)});
+        crops.put(Material.CHORUS_FLOWER, new ItemStack[]{new ItemStack(Material.CHORUS_FRUIT, 6)});
+        crops.put(Material.NETHER_WART, new ItemStack[]{new ItemStack(Material.NETHER_WART, 2)});
+
+        new GrowingMachine(Groups.BASIC_MACHINES, BASIC_GROWER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 new ItemStack(Material.GLASS), new ItemStack(Material.GLASS), new ItemStack(Material.GLASS),
                 Materials.MAGSTEEL, new ItemStack(Material.DIAMOND_HOE), Materials.MAGSTEEL,
                 Materials.MACHINE_CIRCUIT, new ItemStack(Material.GRASS_BLOCK), Materials.MACHINE_CIRCUIT
-        }).recipes(crops).ticksPerOutput(300).energyPerTick(18).register(plugin);
-        new GrowingMachine(Groups.ADVANCED_MACHINES, ADVANCED_GROWER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        }).recipes(crops).ticksPerOutput(300).energyPerTick(18).register(SlimefunAddonInstance.getSFAInstance());
+        new GrowingMachine(Groups.ADVANCED_MACHINES, ADVANCED_GROWER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.HARDENED_GLASS, SlimefunItems.HARDENED_GLASS, SlimefunItems.HARDENED_GLASS,
                 Materials.MAGNONIUM, BASIC_GROWER, Materials.MAGNONIUM,
                 Materials.MACHINE_CIRCUIT, Materials.MACHINE_CORE, Materials.MACHINE_CIRCUIT
-        }).recipes(crops).ticksPerOutput(60).energyPerTick(90).register(plugin);
-        new GrowingMachine(Groups.INFINITY_CHEAT, INFINITY_GROWER, InfinityWorkbench.TYPE, new ItemStack[] {
+        }).recipes(crops).ticksPerOutput(60).energyPerTick(90).register(SlimefunAddonInstance.getSFAInstance());
+        new GrowingMachine(Groups.INFINITY_CHEAT, INFINITY_GROWER, InfinityWorkbench.TYPE, new ItemStack[]{
                 new ItemStack(Material.GLASS), new ItemStack(Material.GLASS), new ItemStack(Material.GLASS), new ItemStack(Material.GLASS), new ItemStack(Material.GLASS), new ItemStack(Material.GLASS),
                 new ItemStack(Material.GLASS), null, null, null, null, new ItemStack(Material.GLASS),
                 new ItemStack(Material.GLASS), null, null, null, null, new ItemStack(Material.GLASS),
                 new ItemStack(Material.GLASS), new ItemStack(Material.GRASS_BLOCK), new ItemStack(Material.GRASS_BLOCK), new ItemStack(Material.GRASS_BLOCK), new ItemStack(Material.GRASS_BLOCK), new ItemStack(Material.GLASS),
                 Materials.MACHINE_PLATE, SlimefunItems.CROP_GROWTH_ACCELERATOR_2, ADVANCED_GROWER, ADVANCED_GROWER, SlimefunItems.CROP_GROWTH_ACCELERATOR_2, Materials.MACHINE_PLATE,
                 Materials.MACHINE_PLATE, Materials.INFINITE_CIRCUIT, Materials.INFINITE_CORE, Materials.INFINITE_CORE, Materials.INFINITE_CIRCUIT, Materials.MACHINE_PLATE
-        }).recipes(crops).ticksPerOutput(12).energyPerTick(900).register(plugin);
+        }).recipes(crops).ticksPerOutput(12).energyPerTick(900).register(SlimefunAddonInstance.getSFAInstance());
 
         EnumMap<Material, ItemStack[]> trees = new EnumMap<>(Material.class);
 
-        trees.put(Material.OAK_SAPLING, new ItemStack[] {
+        trees.put(Material.OAK_SAPLING, new ItemStack[]{
                 new ItemStack(Material.OAK_LEAVES, 8), new ItemStack(Material.OAK_LOG, 6), new ItemStack(Material.STICK), new ItemStack(Material.APPLE)
         });
-        trees.put(Material.SPRUCE_SAPLING, new ItemStack[] {
+        trees.put(Material.SPRUCE_SAPLING, new ItemStack[]{
                 new ItemStack(Material.SPRUCE_LEAVES, 8), new ItemStack(Material.SPRUCE_LOG, 6), new ItemStack(Material.STICK, 2)
         });
-        trees.put(Material.DARK_OAK_SAPLING, new ItemStack[] {
+        trees.put(Material.DARK_OAK_SAPLING, new ItemStack[]{
                 new ItemStack(Material.DARK_OAK_LEAVES, 8), new ItemStack(Material.DARK_OAK_LOG, 6), new ItemStack(Material.APPLE)
         });
-        trees.put(Material.BIRCH_SAPLING, new ItemStack[] {
+        trees.put(Material.BIRCH_SAPLING, new ItemStack[]{
                 new ItemStack(Material.BIRCH_LEAVES, 8), new ItemStack(Material.BIRCH_LOG, 6)
         });
-        trees.put(Material.ACACIA_SAPLING, new ItemStack[] {
+        trees.put(Material.ACACIA_SAPLING, new ItemStack[]{
                 new ItemStack(Material.ACACIA_LEAVES, 8), new ItemStack(Material.ACACIA_LOG, 6)
         });
-        trees.put(Material.JUNGLE_SAPLING, new ItemStack[] {
+        trees.put(Material.JUNGLE_SAPLING, new ItemStack[]{
                 new ItemStack(Material.JUNGLE_LEAVES, 8), new ItemStack(Material.JUNGLE_LOG, 6), new ItemStack(Material.COCOA_BEANS)
         });
-        trees.put(Material.WARPED_FUNGUS, new ItemStack[] {
+        trees.put(Material.WARPED_FUNGUS, new ItemStack[]{
                 new ItemStack(Material.WARPED_HYPHAE, 8), new ItemStack(Material.WARPED_STEM, 6), new ItemStack(Material.SHROOMLIGHT)
         });
-        trees.put(Material.CRIMSON_FUNGUS, new ItemStack[] {
+        trees.put(Material.CRIMSON_FUNGUS, new ItemStack[]{
                 new ItemStack(Material.CRIMSON_HYPHAE, 8), new ItemStack(Material.CRIMSON_STEM, 6), new ItemStack(Material.WEEPING_VINES)
         });
 
-        new GrowingMachine(Groups.BASIC_MACHINES, BASIC_TREE, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new GrowingMachine(Groups.BASIC_MACHINES, BASIC_TREE, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 new ItemStack(Material.GLASS), new ItemStack(Material.GLASS), new ItemStack(Material.GLASS),
                 Materials.MAGSTEEL, new ItemStack(Material.PODZOL), Materials.MAGSTEEL,
                 Materials.MACHINE_CIRCUIT, BASIC_GROWER, Materials.MACHINE_CIRCUIT
-        }).recipes(trees).ticksPerOutput(600).energyPerTick(36).register(plugin);
-        new GrowingMachine(Groups.ADVANCED_MACHINES, ADVANCED_TREE, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        }).recipes(trees).ticksPerOutput(600).energyPerTick(36).register(SlimefunAddonInstance.getSFAInstance());
+        new GrowingMachine(Groups.ADVANCED_MACHINES, ADVANCED_TREE, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.HARDENED_GLASS, SlimefunItems.HARDENED_GLASS, SlimefunItems.HARDENED_GLASS,
                 Materials.MAGNONIUM, BASIC_TREE, Materials.MAGNONIUM,
                 Materials.MACHINE_CIRCUIT, Materials.MACHINE_CORE, Materials.MACHINE_CIRCUIT
-        }).recipes(trees).ticksPerOutput(120).energyPerTick(180).register(plugin);
-        new GrowingMachine(Groups.INFINITY_CHEAT, INFINITY_TREE, InfinityWorkbench.TYPE, new ItemStack[] {
+        }).recipes(trees).ticksPerOutput(120).energyPerTick(180).register(SlimefunAddonInstance.getSFAInstance());
+        new GrowingMachine(Groups.INFINITY_CHEAT, INFINITY_TREE, InfinityWorkbench.TYPE, new ItemStack[]{
                 new ItemStack(Material.GLASS), new ItemStack(Material.GLASS), new ItemStack(Material.GLASS), new ItemStack(Material.GLASS), new ItemStack(Material.GLASS), new ItemStack(Material.GLASS),
                 new ItemStack(Material.GLASS), SlimefunItems.TREE_GROWTH_ACCELERATOR, null, null, SlimefunItems.TREE_GROWTH_ACCELERATOR, new ItemStack(Material.GLASS),
                 new ItemStack(Material.GLASS), ADVANCED_TREE, null, null, ADVANCED_TREE, new ItemStack(Material.GLASS),
                 new ItemStack(Material.GLASS), SlimefunItems.TREE_GROWTH_ACCELERATOR, null, null, SlimefunItems.TREE_GROWTH_ACCELERATOR, new ItemStack(Material.GLASS),
                 Materials.MACHINE_PLATE, new ItemStack(Material.PODZOL), new ItemStack(Material.PODZOL), new ItemStack(Material.PODZOL), new ItemStack(Material.PODZOL), Materials.MACHINE_PLATE,
                 Materials.MACHINE_PLATE, Materials.INFINITE_CIRCUIT, Materials.INFINITE_CORE, Materials.INFINITE_CORE, Materials.INFINITE_CIRCUIT, Materials.MACHINE_PLATE
-        }).recipes(trees).ticksPerOutput(24).energyPerTick(1800).register(plugin);
+        }).recipes(trees).ticksPerOutput(24).energyPerTick(1800).register(SlimefunAddonInstance.getSFAInstance());
 
-        new MachineBlock(Groups.ADVANCED_MACHINES, EXTREME_FREEZER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new MachineBlock(Groups.ADVANCED_MACHINES, EXTREME_FREEZER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.FREEZER_2, SlimefunItems.FREEZER_2, SlimefunItems.FREEZER_2,
                 new ItemStack(Material.WATER_BUCKET), SlimefunItems.FLUID_PUMP, new ItemStack(Material.WATER_BUCKET),
                 Materials.MACHINE_CIRCUIT, Materials.MACHINE_CORE, Materials.MACHINE_CIRCUIT
         }).addRecipe(SlimefunItems.NETHER_ICE_COOLANT_CELL, new ItemStack(Material.MAGMA_BLOCK, 2))
                 .ticksPerOutput(1)
                 .addRecipe(SlimefunItems.REACTOR_COOLANT_CELL, new ItemStack(Material.ICE, 2))
-                .energyPerTick(90).register(plugin);
+                .energyPerTick(90).register(SlimefunAddonInstance.getSFAInstance());
 
         RandomizedItemStack twoDust = new RandomizedItemStack(
                 new SlimefunItemStack(SlimefunItems.COPPER_DUST, 2),
@@ -438,7 +434,7 @@ public final class Machines {
                 new SlimefunItemStack(SlimefunItems.IRON_DUST, 2),
                 new SlimefunItemStack(SlimefunItems.MAGNESIUM_DUST, 2)
         );
-        new MachineBlock(Groups.ADVANCED_MACHINES, DUST_EXTRACTOR, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new MachineBlock(Groups.ADVANCED_MACHINES, DUST_EXTRACTOR, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.ELECTRIC_ORE_GRINDER_2, SlimefunItems.ELECTRIC_GOLD_PAN_3, SlimefunItems.ELECTRIC_DUST_WASHER_3,
                 SlimefunItems.ELECTRIC_ORE_GRINDER_2, SlimefunItems.ELECTRIC_GOLD_PAN_3, SlimefunItems.ELECTRIC_DUST_WASHER_3,
                 Materials.MACHINE_CIRCUIT, Materials.MACHINE_CORE, Materials.MACHINE_CIRCUIT,
@@ -447,7 +443,7 @@ public final class Machines {
                 .addRecipe(twoDust, new ItemStack(Material.STONE, 4))
                 .addRecipe(twoDust, new ItemStack(Material.DIORITE, 4))
                 .addRecipe(twoDust, new ItemStack(Material.GRANITE, 4))
-                .energyPerTick(240).register(plugin);
+                .energyPerTick(240).register(SlimefunAddonInstance.getSFAInstance());
 
         RandomizedItemStack sixtyFourDust = new RandomizedItemStack(
                 new SlimefunItemStack(SlimefunItems.COPPER_DUST, 64),
@@ -460,7 +456,7 @@ public final class Machines {
                 new SlimefunItemStack(SlimefunItems.IRON_DUST, 64),
                 new SlimefunItemStack(SlimefunItems.MAGNESIUM_DUST, 64)
         );
-        new MachineBlock(Groups.INFINITY_CHEAT, INFINITY_DUST_EXTRACTOR, InfinityWorkbench.TYPE, new ItemStack[] {
+        new MachineBlock(Groups.INFINITY_CHEAT, INFINITY_DUST_EXTRACTOR, InfinityWorkbench.TYPE, new ItemStack[]{
                 Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT,
                 Materials.VOID_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_CIRCUIT, Materials.INFINITE_CIRCUIT, Materials.INFINITE_INGOT, Materials.VOID_INGOT,
                 Materials.VOID_INGOT, Materials.INFINITE_INGOT, DUST_EXTRACTOR, DUST_EXTRACTOR, Materials.INFINITE_INGOT, Materials.VOID_INGOT,
@@ -472,9 +468,9 @@ public final class Machines {
                 .addRecipe(sixtyFourDust, new ItemStack(Material.STONE, 64))
                 .addRecipe(sixtyFourDust, new ItemStack(Material.DIORITE, 64))
                 .addRecipe(sixtyFourDust, new ItemStack(Material.GRANITE, 64))
-                .ticksPerOutput(1).energyPerTick(7200).register(plugin);
+                .ticksPerOutput(1).energyPerTick(7200).register(SlimefunAddonInstance.getSFAInstance());
 
-        new MachineBlock(Groups.ADVANCED_MACHINES, COBBLE_PRESS, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new MachineBlock(Groups.ADVANCED_MACHINES, COBBLE_PRESS, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.MACHINE_PLATE, Materials.COBBLE_3, Materials.MACHINE_PLATE,
                 SlimefunItems.ELECTRIC_PRESS_2, SlimefunItems.ELECTRIC_PRESS_2, SlimefunItems.ELECTRIC_PRESS_2,
                 Materials.MACHINE_PLATE, Materials.COBBLE_3, Materials.MACHINE_PLATE
@@ -483,9 +479,9 @@ public final class Machines {
                 .addRecipe(new SlimefunItemStack(Materials.COBBLE_3, 8), new SlimefunItemStack(Materials.COBBLE_2, 64))
                 .addRecipe(new SlimefunItemStack(Materials.COBBLE_4, 8), new SlimefunItemStack(Materials.COBBLE_3, 64))
                 .addRecipe(new SlimefunItemStack(Materials.COBBLE_5, 8), new SlimefunItemStack(Materials.COBBLE_4, 64))
-                .ticksPerOutput(1).energyPerTick(120).register(plugin);
+                .ticksPerOutput(1).energyPerTick(120).register(SlimefunAddonInstance.getSFAInstance());
 
-        new MachineBlock(Groups.ADVANCED_MACHINES, INGOT_FORMER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new MachineBlock(Groups.ADVANCED_MACHINES, INGOT_FORMER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.ELECTRIC_INGOT_FACTORY_2, SlimefunItems.ELECTRIC_INGOT_FACTORY_2, SlimefunItems.ELECTRIC_INGOT_FACTORY_2,
                 SlimefunItems.ELECTRIC_INGOT_FACTORY_2, SlimefunItems.ELECTRIC_INGOT_FACTORY_2, SlimefunItems.ELECTRIC_INGOT_FACTORY_2,
                 Materials.MACHINE_CIRCUIT, Materials.MACHINE_CORE, Materials.MACHINE_CIRCUIT,
@@ -498,9 +494,9 @@ public final class Machines {
                 .addRecipe(new SlimefunItemStack(SlimefunItems.GOLD_24K, 1), new SlimefunItemStack(SlimefunItems.GOLD_DUST, 8))
                 .addRecipe(new ItemStack(Material.IRON_INGOT, 4), new SlimefunItemStack(SlimefunItems.IRON_DUST, 8))
                 .addRecipe(new SlimefunItemStack(SlimefunItems.MAGNESIUM_INGOT, 4), new SlimefunItemStack(SlimefunItems.MAGNESIUM_DUST, 8))
-                .ticksPerOutput(1).energyPerTick(240).register(plugin);
+                .ticksPerOutput(1).energyPerTick(240).register(SlimefunAddonInstance.getSFAInstance());
 
-        new MachineBlock(Groups.INFINITY_CHEAT, INFINITY_INGOT_FORMER, InfinityWorkbench.TYPE, new ItemStack[] {
+        new MachineBlock(Groups.INFINITY_CHEAT, INFINITY_INGOT_FORMER, InfinityWorkbench.TYPE, new ItemStack[]{
                 Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT, Materials.VOID_INGOT,
                 Materials.VOID_INGOT, Materials.INFINITE_INGOT, Materials.INFINITE_CIRCUIT, Materials.INFINITE_CIRCUIT, Materials.INFINITE_INGOT, Materials.VOID_INGOT,
                 Materials.VOID_INGOT, Materials.INFINITE_INGOT, INGOT_FORMER, INGOT_FORMER, Materials.INFINITE_INGOT, Materials.VOID_INGOT,
@@ -516,9 +512,9 @@ public final class Machines {
                 .addRecipe(new SlimefunItemStack(SlimefunItems.GOLD_24K, 10), new SlimefunItemStack(SlimefunItems.GOLD_DUST, 64))
                 .addRecipe(new ItemStack(Material.IRON_INGOT, 32), new SlimefunItemStack(SlimefunItems.IRON_DUST, 64))
                 .addRecipe(new SlimefunItemStack(SlimefunItems.MAGNESIUM_INGOT, 32), new SlimefunItemStack(SlimefunItems.MAGNESIUM_DUST, 64))
-                .ticksPerOutput(1).energyPerTick(7200).register(plugin);
+                .ticksPerOutput(1).energyPerTick(7200).register(SlimefunAddonInstance.getSFAInstance());
 
-        new MachineBlock(Groups.ADVANCED_MACHINES, URANIUM_EXTRACTOR, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new MachineBlock(Groups.ADVANCED_MACHINES, URANIUM_EXTRACTOR, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.ELECTRIC_ORE_GRINDER_2, SlimefunItems.ELECTRIC_ORE_GRINDER_2, SlimefunItems.ELECTRIC_ORE_GRINDER_2,
                 SlimefunItems.ELECTRIC_GOLD_PAN_3, SlimefunItems.ELECTRIC_DUST_WASHER_3, SlimefunItems.ENHANCED_AUTO_CRAFTER,
                 Materials.MACHINE_CIRCUIT, Materials.MACHINE_CORE, Materials.MACHINE_CIRCUIT,
@@ -527,9 +523,9 @@ public final class Machines {
                 .addRecipe(SlimefunItems.SMALL_URANIUM, new ItemStack(Material.STONE, 4))
                 .addRecipe(SlimefunItems.SMALL_URANIUM, new ItemStack(Material.DIORITE, 4))
                 .addRecipe(SlimefunItems.SMALL_URANIUM, new ItemStack(Material.GRANITE, 4))
-                .ticksPerOutput(1).energyPerTick(240).register(plugin);
+                .ticksPerOutput(1).energyPerTick(240).register(SlimefunAddonInstance.getSFAInstance());
 
-        new MachineBlock(Groups.ADVANCED_MACHINES, DECOMPRESSOR, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new MachineBlock(Groups.ADVANCED_MACHINES, DECOMPRESSOR, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.MAGSTEEL_PLATE, Materials.MAGSTEEL_PLATE, Materials.MAGSTEEL_PLATE,
                 new ItemStack(Material.STICKY_PISTON), SlimefunItems.ELECTRIC_PRESS_2, new ItemStack(Material.STICKY_PISTON),
                 Materials.MACHINE_CIRCUIT, Materials.MACHINE_CORE, Materials.MACHINE_CIRCUIT,
@@ -547,23 +543,22 @@ public final class Machines {
                 .addRecipe(new SlimefunItemStack(Materials.COBBLE_2, 8), Materials.COBBLE_3)
                 .addRecipe(new SlimefunItemStack(Materials.COBBLE_1, 8), Materials.COBBLE_2)
                 .addRecipe(new ItemStack(Material.COBBLESTONE, 8), Materials.COBBLE_1)
-                .ticksPerOutput(1).energyPerTick(60).register(plugin);
+                .ticksPerOutput(1).energyPerTick(60).register(SlimefunAddonInstance.getSFAInstance());
 
-        new GearTransformer(Groups.ADVANCED_MACHINES, GEAR_TRANSFORMER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new GearTransformer(Groups.ADVANCED_MACHINES, GEAR_TRANSFORMER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.MAGSTEEL_PLATE, Materials.MACHINE_CIRCUIT, Materials.MAGSTEEL_PLATE,
                 Materials.MACHINE_CIRCUIT, new ItemStack(Material.SMITHING_TABLE), Materials.MACHINE_CIRCUIT,
                 Materials.MAGSTEEL_PLATE, Materials.MACHINE_CIRCUIT, Materials.MAGSTEEL_PLATE
-        }, GEAR_TRANSFORMER_ENERGY).register(plugin);
+        }, GEAR_TRANSFORMER_ENERGY).register(SlimefunAddonInstance.getSFAInstance());
 
-        new GeoQuarry(Groups.ADVANCED_MACHINES, GEO_QUARRY, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new GeoQuarry(Groups.ADVANCED_MACHINES, GEO_QUARRY, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.MACHINE_PLATE, Materials.VOID_INGOT, Materials.MACHINE_PLATE,
                 Materials.VOID_INGOT, SlimefunExtension.ADVANCED_GEO_MINER, Materials.VOID_INGOT,
                 Materials.MACHINE_PLATE, Materials.VOID_INGOT, Materials.MACHINE_PLATE,
-        }).ticksPerOutput(GEO_QUARRY_INTERVAL).energyPerTick(GEO_QUARRY_ENERGY).register(plugin);
+        }).ticksPerOutput(GEO_QUARRY_INTERVAL).energyPerTick(GEO_QUARRY_ENERGY).register(SlimefunAddonInstance.getSFAInstance());
     }
 
     private static final class RandomizedItemStack extends ItemStack {
-
         private final ItemStack[] items;
 
         public RandomizedItemStack(ItemStack... outputs) {
@@ -576,7 +571,5 @@ public final class Machines {
         public ItemStack clone() {
             return this.items[ThreadLocalRandom.current().nextInt(this.items.length)].clone();
         }
-
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/machines/MaterialGenerator.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/MaterialGenerator.java
similarity index 81%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/machines/MaterialGenerator.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/MaterialGenerator.java
index 2d01aaa..736dea5 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/machines/MaterialGenerator.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/MaterialGenerator.java
@@ -1,25 +1,22 @@
-package io.github.mooy1.infinityexpansion.items.machines;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.machines;
 
-import java.util.ArrayList;
-import java.util.List;
-
-import javax.annotation.Nonnull;
-
-import lombok.Setter;
-
-import org.bukkit.Material;
-import org.bukkit.block.Block;
-import org.bukkit.entity.Player;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinitylib.machines.AbstractMachineBlock;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.AbstractMachineBlock;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.RecipeDisplayItem;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import lombok.Setter;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * Machines that generate materials at the cost of energy
@@ -27,8 +24,7 @@ import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
  * @author Mooy1
  */
 public final class MaterialGenerator extends AbstractMachineBlock implements RecipeDisplayItem {
-
-    private static final int[] OUTPUT_SLOTS = { 13 };
+    private static final int[] OUTPUT_SLOTS = {13};
     private static final int STATUS_SLOT = 4;
 
     @Setter
@@ -36,13 +32,13 @@ public final class MaterialGenerator extends AbstractMachineBlock implements Rec
     @Setter
     private Material material;
 
-    public MaterialGenerator(ItemGroup category, SlimefunItemStack item, RecipeType type, ItemStack[] recipe) {
-        super(category, item, type, recipe);
+    public MaterialGenerator(ItemGroup itemGroup, SlimefunItemStack item, RecipeType type, ItemStack[] recipe) {
+        super(itemGroup, item, type, recipe);
     }
 
     @Override
     protected void setup(@Nonnull BlockMenuPreset blockMenuPreset) {
-        blockMenuPreset.drawBackground(new int[] {
+        blockMenuPreset.drawBackground(new int[]{
                 0, 1, 2, 3, 4, 5, 6, 7, 8,
                 9, 10, 11, 12, 14, 15, 16, 17
         });
@@ -89,20 +85,16 @@ public final class MaterialGenerator extends AbstractMachineBlock implements Rec
 
         if (!inv.fits(output, OUTPUT_SLOTS)) {
 
-            if (inv.hasViewer()) {
-                inv.replaceExistingItem(STATUS_SLOT, NO_ROOM_ITEM);
-            }
+            if (inv.hasViewer()) inv.replaceExistingItem(STATUS_SLOT, NO_ROOM_ITEM);
             return false;
 
         }
 
         inv.pushItem(output, OUTPUT_SLOTS);
 
-        if (inv.hasViewer()) {
+        if (inv.hasViewer())
             inv.replaceExistingItem(STATUS_SLOT, new CustomItemStack(Material.LIME_STAINED_GLASS_PANE, "&aGenerating..."));
-        }
 
         return true;
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/machines/PoweredBedrock.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/PoweredBedrock.java
similarity index 76%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/machines/PoweredBedrock.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/PoweredBedrock.java
index 4267b6c..a8456e8 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/machines/PoweredBedrock.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/PoweredBedrock.java
@@ -1,13 +1,6 @@
-package io.github.mooy1.infinityexpansion.items.machines;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.machines;
 
-import javax.annotation.Nonnull;
-
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.block.Block;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.SlimefunAddonInstance;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
@@ -16,6 +9,12 @@ import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetComponent;
 import io.github.thebusybiscuit.slimefun4.core.networks.energy.EnergyNetComponentType;
 import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
 import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
 
 /**
  * A block that becomes bedrock when powered, for decoration of course
@@ -23,11 +22,10 @@ import me.mrCookieSlime.Slimefun.Objects.handlers.BlockTicker;
  * @author Mooy1
  */
 public final class PoweredBedrock extends SlimefunItem implements EnergyNetComponent {
-
     private final int energy;
 
-    public PoweredBedrock(ItemGroup category, SlimefunItemStack item, RecipeType type, ItemStack[] recipe, int energy) {
-        super(category, item, type, recipe);
+    public PoweredBedrock(ItemGroup itemGroup, SlimefunItemStack item, RecipeType type, ItemStack[] recipe, int energy) {
+        super(itemGroup, item, type, recipe);
         this.energy = energy;
 
         addItemHandler(new BlockTicker() {
@@ -38,19 +36,14 @@ public final class PoweredBedrock extends SlimefunItem implements EnergyNetCompo
 
             @Override
             public void tick(Block b, SlimefunItem item, Config data) {
-                if (InfinityExpansion.slimefunTickCount() % 8 == 0) {
-                    return;
-                }
+                if (SlimefunAddonInstance.slimefunTickCount() % 8 == 0) return;
                 Location l = b.getLocation();
                 if (getCharge(l) < energy) {
                     if (b.getType() != Material.NETHERITE_BLOCK) {
                         b.setType(Material.NETHERITE_BLOCK);
                         return;
                     }
-                }
-                else if (b.getType() != Material.BEDROCK) {
-                    b.setType(Material.BEDROCK);
-                }
+                } else if (b.getType() != Material.BEDROCK) b.setType(Material.BEDROCK);
                 removeCharge(l, energy);
             }
         });
@@ -66,5 +59,4 @@ public final class PoweredBedrock extends SlimefunItem implements EnergyNetCompo
     public int getCapacity() {
         return this.energy * 2;
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/machines/ResourceSynthesizer.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/ResourceSynthesizer.java
similarity index 84%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/machines/ResourceSynthesizer.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/ResourceSynthesizer.java
index 174e283..74aa47b 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/machines/ResourceSynthesizer.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/ResourceSynthesizer.java
@@ -1,25 +1,22 @@
-package io.github.mooy1.infinityexpansion.items.machines;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.machines;
 
-import java.util.ArrayList;
-import java.util.List;
-
-import javax.annotation.Nonnull;
-
-import lombok.Setter;
-
-import org.bukkit.Material;
-import org.bukkit.block.Block;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinitylib.common.StackUtils;
-import io.github.mooy1.infinitylib.machines.AbstractMachineBlock;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.StackUtils;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.AbstractMachineBlock;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.RecipeDisplayItem;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import lombok.Setter;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * Creates special resources from the combination of singularities
@@ -39,8 +36,8 @@ public final class ResourceSynthesizer extends AbstractMachineBlock implements R
     @Setter
     private SlimefunItemStack[] recipes;
 
-    public ResourceSynthesizer(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public ResourceSynthesizer(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
     }
 
     @Override
@@ -50,7 +47,7 @@ public final class ResourceSynthesizer extends AbstractMachineBlock implements R
 
     @Override
     protected void setup(@Nonnull BlockMenuPreset blockMenuPreset) {
-        blockMenuPreset.drawBackground(new int[] {
+        blockMenuPreset.drawBackground(new int[]{
                 3, 4, 5,
                 12, 13, 14,
                 21, 22, 23,
@@ -58,12 +55,12 @@ public final class ResourceSynthesizer extends AbstractMachineBlock implements R
                 36, 44,
                 45, 46, 47, 51, 52, 53
         });
-        blockMenuPreset.drawBackground(INPUT_BORDER, new int[] {
+        blockMenuPreset.drawBackground(INPUT_BORDER, new int[]{
                 0, 1, 2, 6, 7, 8,
                 9, 11, 15, 17,
                 18, 19, 20, 24, 25, 26
         });
-        blockMenuPreset.drawBackground(OUTPUT_BORDER, new int[] {
+        blockMenuPreset.drawBackground(OUTPUT_BORDER, new int[]{
                 28, 34, 37, 38, 42, 43,
                 30, 31, 32,
                 39, 41,
@@ -86,7 +83,7 @@ public final class ResourceSynthesizer extends AbstractMachineBlock implements R
     public List<ItemStack> getDisplayRecipes() {
         final List<ItemStack> items = new ArrayList<>();
 
-        for (int i = 0 ; i < this.recipes.length ; i += 3) {
+        for (int i = 0; i < this.recipes.length; i += 3) {
             items.add(this.recipes[i]);
             items.add(this.recipes[i + 2]);
             items.add(this.recipes[i + 1]);
@@ -125,7 +122,7 @@ public final class ResourceSynthesizer extends AbstractMachineBlock implements R
 
         ItemStack recipe = null;
 
-        for (int i = 0 ; i < this.recipes.length ; i += 3) {
+        for (int i = 0; i < this.recipes.length; i += 3) {
             if ((id1.equals(this.recipes[i].getItemId()) && id2.equals(this.recipes[i + 1].getItemId()) || (id2.equals(this.recipes[i].getItemId()) && id1.equals(this.recipes[i + 1].getItemId())))) {
                 recipe = this.recipes[i + 2];
             }
@@ -153,8 +150,7 @@ public final class ResourceSynthesizer extends AbstractMachineBlock implements R
             }
             return true;
 
-        }
-        else { //not enough room
+        } else { //not enough room
 
             if (inv.hasViewer()) {
                 inv.replaceExistingItem(STATUS_SLOT, NO_ROOM_ITEM);
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/machines/SingularityConstructor.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/SingularityConstructor.java
similarity index 88%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/machines/SingularityConstructor.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/SingularityConstructor.java
index 59088a3..dd4e3f0 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/machines/SingularityConstructor.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/SingularityConstructor.java
@@ -1,35 +1,32 @@
-package io.github.mooy1.infinityexpansion.items.machines;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.machines;
 
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-
-import lombok.AllArgsConstructor;
-import lombok.Setter;
-
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.block.Block;
-import org.bukkit.event.block.BlockBreakEvent;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinityexpansion.utils.Util;
-import io.github.mooy1.infinitylib.common.StackUtils;
-import io.github.mooy1.infinitylib.machines.AbstractMachineBlock;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.utils.Util;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.StackUtils;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.AbstractMachineBlock;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.RecipeDisplayItem;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.collections.Pair;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import lombok.AllArgsConstructor;
+import lombok.Setter;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.event.block.BlockBreakEvent;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
 
 /**
  * Constructs singularities form many items
@@ -40,7 +37,7 @@ public final class SingularityConstructor extends AbstractMachineBlock implement
 
     private static final List<Recipe> RECIPE_LIST = new ArrayList<>();
     private static final Map<String, Pair<Integer, Recipe>> RECIPE_MAP = new HashMap<>();
-    public static final RecipeType TYPE = new RecipeType(InfinityExpansion.createKey("singularity_constructor"),
+    public static final RecipeType TYPE = new RecipeType(AbstractAddon.createKey("singularity_constructor"),
             Machines.SINGULARITY_CONSTRUCTOR, (stacks, itemStack) -> {
         int amt = 0;
         for (ItemStack item : stacks) {
@@ -62,8 +59,8 @@ public final class SingularityConstructor extends AbstractMachineBlock implement
     @Setter
     private int speed;
 
-    public SingularityConstructor(ItemGroup category, SlimefunItemStack item, RecipeType type, ItemStack[] recipe) {
-        super(category, item, type, recipe);
+    public SingularityConstructor(ItemGroup itemGroup, SlimefunItemStack item, RecipeType type, ItemStack[] recipe) {
+        super(itemGroup, item, type, recipe);
     }
 
     @Override
@@ -83,7 +80,7 @@ public final class SingularityConstructor extends AbstractMachineBlock implement
                 int stacks = progress / 64;
 
                 if (stacks > 0) {
-                    for (int i = 0 ; i < stacks ; i++) {
+                    for (int i = 0; i < stacks; i++) {
                         e.getBlock().getWorld().dropItemNaturally(l, drop);
                     }
                 }
@@ -107,8 +104,7 @@ public final class SingularityConstructor extends AbstractMachineBlock implement
         String inputID;
         if (input == null) {
             inputID = null;
-        }
-        else {
+        } else {
             inputID = StackUtils.getIdOrType(input);
         }
 
@@ -129,18 +125,15 @@ public final class SingularityConstructor extends AbstractMachineBlock implement
                     progressID = pair.getFirstValue();
                     triplet = pair.getSecondValue();
                     takeCharge = true;
-                }
-                else {
+                } else {
                     // invalid input
                     triplet = null;
                 }
-            }
-            else {
+            } else {
                 // still haven't started
                 triplet = null;
             }
-        }
-        else {
+        } else {
             // started
             triplet = RECIPE_LIST.get(progressID);
             if (inputID != null) {
@@ -169,16 +162,14 @@ public final class SingularityConstructor extends AbstractMachineBlock implement
                             "&7Complete"
                     ));
                 }
-            }
-            else if (menu.hasViewer()) {
+            } else if (menu.hasViewer()) {
                 menu.replaceExistingItem(STATUS_SLOT, new CustomItemStack(
                         Material.LIME_STAINED_GLASS_PANE,
                         "&aConstructing " + triplet.output.getDisplayName() + "...",
                         "&7" + progress + " / " + triplet.amount
                 ));
             }
-        }
-        else if (menu.hasViewer()) {
+        } else if (menu.hasViewer()) {
             invalidInput(menu);
         }
 
@@ -191,17 +182,17 @@ public final class SingularityConstructor extends AbstractMachineBlock implement
 
     @Override
     protected void setup(@Nonnull BlockMenuPreset blockMenuPreset) {
-        blockMenuPreset.drawBackground(INPUT_BORDER, new int[] {
+        blockMenuPreset.drawBackground(INPUT_BORDER, new int[]{
                 0, 1, 2,
                 9, 11,
                 18, 19, 20
         });
-        blockMenuPreset.drawBackground(new int[] {
+        blockMenuPreset.drawBackground(new int[]{
                 3, 4, 5,
                 12, 13, 14,
                 21, 22, 23
         });
-        blockMenuPreset.drawBackground(OUTPUT_BORDER, new int[] {
+        blockMenuPreset.drawBackground(OUTPUT_BORDER, new int[]{
                 6, 7, 8,
                 15, 17,
                 24, 25, 26
@@ -242,8 +233,7 @@ public final class SingularityConstructor extends AbstractMachineBlock implement
     private static void setProgressID(Location l, @Nullable Integer progressID) {
         if (progressID == null) {
             BlockStorage.addBlockInfo(l, "progressid", null);
-        }
-        else {
+        } else {
             BlockStorage.addBlockInfo(l, "progressid", String.valueOf(progressID));
         }
     }
@@ -253,8 +243,7 @@ public final class SingularityConstructor extends AbstractMachineBlock implement
         String id = BlockStorage.getLocationInfo(l, "progressid");
         if (id == null) {
             return null;
-        }
-        else {
+        } else {
             try {
                 return Integer.parseInt(id);
             } catch (NumberFormatException e) {
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/machines/StoneworksFactory.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/StoneworksFactory.java
similarity index 77%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/machines/StoneworksFactory.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/StoneworksFactory.java
index 05faa9c..7c2259b 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/machines/StoneworksFactory.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/StoneworksFactory.java
@@ -1,20 +1,7 @@
-package io.github.mooy1.infinityexpansion.items.machines;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.machines;
 
-import java.util.ArrayList;
-import java.util.List;
-
-import javax.annotation.Nonnull;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import lombok.AllArgsConstructor;
-
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.block.Block;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinitylib.machines.AbstractMachineBlock;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.SlimefunAddonInstance;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.AbstractMachineBlock;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -22,10 +9,20 @@ import io.github.thebusybiscuit.slimefun4.core.attributes.NotHopperable;
 import io.github.thebusybiscuit.slimefun4.core.attributes.RecipeDisplayItem;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
+import lombok.AllArgsConstructor;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
 import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+import javax.annotation.ParametersAreNonnullByDefault;
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * Turns cobble into stuff
@@ -33,17 +30,17 @@ import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
 @ParametersAreNonnullByDefault
 public final class StoneworksFactory extends AbstractMachineBlock implements RecipeDisplayItem, NotHopperable {
 
-    private static final int[] PROCESS_BORDER = { 0, 1, 2, 3, 4, 5, 18, 19, 20, 21, 22, 23 };
-    private static final int[] OUT_BORDER = { 6, 7, 8, 17, 24, 25, 26 };
-    private static final int[] OUTPUT_SLOTS = { 16 };
+    private static final int[] PROCESS_BORDER = {0, 1, 2, 3, 4, 5, 18, 19, 20, 21, 22, 23};
+    private static final int[] OUT_BORDER = {6, 7, 8, 17, 24, 25, 26};
+    private static final int[] OUTPUT_SLOTS = {16};
     private static final int STATUS_SLOT = 9;
-    private static final int[] CHOICE_SLOTS = { 11, 13, 15 };
-    private static final int[] PROCESS_SLOTS = { 10, 12, 14 };
+    private static final int[] CHOICE_SLOTS = {11, 13, 15};
+    private static final int[] PROCESS_SLOTS = {10, 12, 14};
     private static final ItemStack COBBLE_GEN = new CustomItemStack(Material.GRAY_CONCRETE, "&8Cobblegen");
     private static final ItemStack PROCESSING = new CustomItemStack(Material.LIME_STAINED_GLASS_PANE, "&aProcessing");
 
-    public StoneworksFactory(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        super(category, item, recipeType, recipe);
+    public StoneworksFactory(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        super(itemGroup, item, recipeType, recipe);
     }
 
     @Override
@@ -64,11 +61,11 @@ public final class StoneworksFactory extends AbstractMachineBlock implements Rec
             setChoice(l, 2, Choice.NONE);
         }
 
-        for (int i = 0 ; i < CHOICE_SLOTS.length ; i++) {
+        for (int i = 0; i < CHOICE_SLOTS.length; i++) {
             menu.replaceExistingItem(CHOICE_SLOTS[i], getChoice(l, i).item);
         }
 
-        for (int i = 0 ; i < 3 ; i++) {
+        for (int i = 0; i < 3; i++) {
             int finalI = i;
             menu.addMenuClickHandler(CHOICE_SLOTS[i], (p, slot, item, action) -> {
                 int current = getChoice(b.getLocation(), finalI).ordinal();
@@ -130,7 +127,7 @@ public final class StoneworksFactory extends AbstractMachineBlock implements Rec
     public List<ItemStack> getDisplayRecipes() {
         List<ItemStack> items = new ArrayList<>();
         for (Choice option : Choice.values) {
-            for (int i = 0 ; i < option.inputs.length ; i++) {
+            for (int i = 0; i < option.inputs.length; i++) {
                 items.add(new ItemStack(option.inputs[i]));
                 items.add(new ItemStack(option.outputs[i]));
             }
@@ -172,12 +169,11 @@ public final class StoneworksFactory extends AbstractMachineBlock implements Rec
         if (inv.hasViewer()) {
             inv.replaceExistingItem(STATUS_SLOT, PROCESSING);
         }
-        int tick = InfinityExpansion.slimefunTickCount() % 4;
+        int tick = SlimefunAddonInstance.slimefunTickCount() % 4;
 
         if (tick == 3) {
             inv.pushItem(new ItemStack(Material.COBBLESTONE), PROCESS_SLOTS[0]);
-        }
-        else {
+        } else {
             process(tick, inv, b.getLocation());
         }
 
@@ -196,20 +192,20 @@ public final class StoneworksFactory extends AbstractMachineBlock implements Rec
                 new Material[0]
         ),
         FURNACE(new CustomItemStack(Material.FURNACE, "&8Smelting", "", "&7 > Click to cycle"),
-                new Material[] { Material.COBBLESTONE, Material.STONE, Material.SAND, Material.STONE_BRICKS },
-                new Material[] { Material.STONE, Material.SMOOTH_STONE, Material.GLASS, Material.CRACKED_STONE_BRICKS }
+                new Material[]{Material.COBBLESTONE, Material.STONE, Material.SAND, Material.STONE_BRICKS},
+                new Material[]{Material.STONE, Material.SMOOTH_STONE, Material.GLASS, Material.CRACKED_STONE_BRICKS}
         ),
         CRUSH(new CustomItemStack(Material.DIAMOND_PICKAXE, "&8Crushing", "", "&7 > Click to cycle"),
-                new Material[] { Material.COBBLESTONE, Material.GRAVEL },
-                new Material[] { Material.GRAVEL, Material.SAND }
+                new Material[]{Material.COBBLESTONE, Material.GRAVEL},
+                new Material[]{Material.GRAVEL, Material.SAND}
         ),
         COMPACT(new CustomItemStack(Material.PISTON, "&8Compacting", "", "&7 > Click to cycle"),
-                new Material[] { Material.STONE, Material.GRANITE, Material.DIORITE, Material.ANDESITE, Material.SAND },
-                new Material[] { Material.STONE_BRICKS, Material.POLISHED_GRANITE, Material.POLISHED_DIORITE, Material.POLISHED_ANDESITE, Material.SANDSTONE }
+                new Material[]{Material.STONE, Material.GRANITE, Material.DIORITE, Material.ANDESITE, Material.SAND},
+                new Material[]{Material.STONE_BRICKS, Material.POLISHED_GRANITE, Material.POLISHED_DIORITE, Material.POLISHED_ANDESITE, Material.SANDSTONE}
         ),
         TRANSFORM(new CustomItemStack(Material.ANDESITE, "&8Transforming", "", "&7 > Click to cycle"),
-                new Material[] { Material.COBBLESTONE, Material.ANDESITE, Material.DIORITE },
-                new Material[] { Material.ANDESITE, Material.DIORITE, Material.GRANITE }
+                new Material[]{Material.COBBLESTONE, Material.ANDESITE, Material.DIORITE},
+                new Material[]{Material.ANDESITE, Material.DIORITE, Material.GRANITE}
         );
 
         private final ItemStack item;
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/machines/VoidHarvester.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/VoidHarvester.java
similarity index 80%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/machines/VoidHarvester.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/VoidHarvester.java
index 25ce655..9a991fb 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/machines/VoidHarvester.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/machines/VoidHarvester.java
@@ -1,18 +1,8 @@
-package io.github.mooy1.infinityexpansion.items.machines;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.machines;
 
-import java.util.ArrayList;
-import java.util.List;
-
-import javax.annotation.Nonnull;
-
-import org.bukkit.Material;
-import org.bukkit.block.Block;
-import org.bukkit.entity.Player;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinityexpansion.items.materials.Materials;
-import io.github.mooy1.infinitylib.machines.AbstractMachineBlock;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.materials.Materials;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.AbstractMachineBlock;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -21,6 +11,14 @@ import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
 import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
+import org.bukkit.Material;
+import org.bukkit.block.Block;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * harvests void bits from... the void
@@ -29,15 +27,15 @@ import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
  */
 public final class VoidHarvester extends AbstractMachineBlock implements RecipeDisplayItem {
 
-    public static final RecipeType TYPE = new RecipeType(InfinityExpansion.createKey("void_harvester"), Machines.VOID_HARVESTER);
+    public static final RecipeType TYPE = new RecipeType(AbstractAddon.createKey("void_harvester"), Machines.VOID_HARVESTER);
 
-    private static final int[] OUTPUT_SLOTS = { 13 };
+    private static final int[] OUTPUT_SLOTS = {13};
     private static final int TIME = 1024;
 
     private final int speed;
 
-    public VoidHarvester(ItemGroup category, SlimefunItemStack item, RecipeType type, ItemStack[] recipe, int speed) {
-        super(category, item, type, recipe);
+    public VoidHarvester(ItemGroup itemGroup, SlimefunItemStack item, RecipeType type, ItemStack[] recipe, int speed) {
+        super(itemGroup, item, type, recipe);
         this.speed = speed;
     }
 
@@ -55,15 +53,13 @@ public final class VoidHarvester extends AbstractMachineBlock implements RecipeD
 
                 progress = this.speed;
 
-            }
-            else {
+            } else {
                 if (inv.hasViewer()) {
                     inv.replaceExistingItem(getStatusSlot(), NO_ROOM_ITEM);
                 }
                 return false;
             }
-        }
-        else {
+        } else {
             progress += this.speed;
         }
 
@@ -84,7 +80,7 @@ public final class VoidHarvester extends AbstractMachineBlock implements RecipeD
 
     @Override
     protected void setup(BlockMenuPreset blockMenuPreset) {
-        blockMenuPreset.drawBackground(new int[] {
+        blockMenuPreset.drawBackground(new int[]{
                 0, 1, 2, 3, 4, 5, 6, 7, 8,
                 9, 10, 11, 12, 14, 15, 16, 17
         });
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/materials/EnderEssence.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/materials/EnderEssence.java
similarity index 73%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/materials/EnderEssence.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/materials/EnderEssence.java
index d273310..1f41196 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/materials/EnderEssence.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/materials/EnderEssence.java
@@ -1,11 +1,4 @@
-package io.github.mooy1.infinityexpansion.items.materials;
-
-import javax.annotation.Nonnull;
-
-import org.bukkit.NamespacedKey;
-import org.bukkit.World;
-import org.bukkit.block.Biome;
-import org.bukkit.inventory.ItemStack;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.materials;
 
 import io.github.thebusybiscuit.slimefun4.api.geo.GEOResource;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
@@ -13,6 +6,12 @@ import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;
+import org.bukkit.NamespacedKey;
+import org.bukkit.World;
+import org.bukkit.block.Biome;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
 
 /**
  * Ender essence geo-resource item
@@ -20,26 +19,19 @@ import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;
  * @author Mooy1
  */
 public final class EnderEssence extends SlimefunItem implements NotPlaceable, GEOResource {
-
     private final NamespacedKey key;
 
-    public EnderEssence(ItemGroup category, SlimefunItemStack item, NamespacedKey key) {
-        super(category, item, RecipeType.GEO_MINER, new ItemStack[9]);
+    public EnderEssence(ItemGroup itemGroup, SlimefunItemStack item, NamespacedKey key) {
+        super(itemGroup, item, RecipeType.GEO_MINER, new ItemStack[9]);
         this.key = key;
         register();
     }
 
     @Override
     public int getDefaultSupply(@Nonnull World.Environment environment, @Nonnull Biome biome) {
-        if (environment == World.Environment.THE_END) {
-            return 12;
-        }
-        if (biome == Biome.THE_VOID) {
-            return 8;
-        }
-        if (environment == World.Environment.NETHER) {
-            return 4;
-        }
+        if (environment == World.Environment.THE_END) return 12;
+        if (biome == Biome.THE_VOID) return 8;
+        if (environment == World.Environment.NETHER) return 4;
         return 0;
     }
 
@@ -64,5 +56,4 @@ public final class EnderEssence extends SlimefunItem implements NotPlaceable, GE
     public boolean isObtainableFromGEOMiner() {
         return true;
     }
-
 }
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/materials/Materials.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/materials/Materials.java
similarity index 85%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/materials/Materials.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/materials/Materials.java
index 7706f45..ac19088 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/materials/Materials.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/materials/Materials.java
@@ -1,28 +1,25 @@
-package io.github.mooy1.infinityexpansion.items.materials;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.materials;
 
-import java.util.Arrays;
-
-import lombok.experimental.UtilityClass;
-
-import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinityexpansion.categories.Groups;
-import io.github.mooy1.infinityexpansion.items.blocks.InfinityWorkbench;
-import io.github.mooy1.infinityexpansion.items.machines.VoidHarvester;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.categories.Groups;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.blocks.InfinityWorkbench;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.machines.VoidHarvester;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.SlimefunAddonInstance;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
 import io.github.thebusybiscuit.slimefun4.utils.LoreBuilder;
+import lombok.experimental.UtilityClass;
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.inventory.ItemStack;
+
+import java.util.Arrays;
 
 @UtilityClass
 public final class Materials {
-
-
     public static final SlimefunItemStack INFINITE_CIRCUIT = new SlimefunItemStack(
             "INFINITE_MACHINE_CIRCUIT",
             Material.DIAMOND,
@@ -279,39 +276,40 @@ public final class Materials {
             LoreBuilder.speed(20)
     );
 
-    public static void setup(InfinityExpansion plugin) {
-        new EnderEssence(Groups.MAIN_MATERIALS, ENDER_ESSENCE, new NamespacedKey(plugin, "ender_essence")).register(plugin);
-        registerEnhanced(COBBLE_1, new ItemStack[] {
+    public static void setup() {
+        new EnderEssence(Groups.MAIN_MATERIALS, ENDER_ESSENCE, new NamespacedKey(AbstractAddon.instance(), "ender_essence"))
+                .register(SlimefunAddonInstance.getSFAInstance());
+        registerEnhanced(COBBLE_1, new ItemStack[]{
                 new ItemStack(Material.COBBLESTONE), new ItemStack(Material.COBBLESTONE), new ItemStack(Material.COBBLESTONE),
                 new ItemStack(Material.COBBLESTONE), new ItemStack(Material.COBBLESTONE), new ItemStack(Material.COBBLESTONE),
                 new ItemStack(Material.COBBLESTONE), new ItemStack(Material.COBBLESTONE), new ItemStack(Material.COBBLESTONE)
         });
-        registerEnhanced(COBBLE_2, new ItemStack[] {
+        registerEnhanced(COBBLE_2, new ItemStack[]{
                 COBBLE_1, COBBLE_1, COBBLE_1,
                 COBBLE_1, COBBLE_1, COBBLE_1,
                 COBBLE_1, COBBLE_1, COBBLE_1
         });
-        registerEnhanced(COBBLE_3, new ItemStack[] {
+        registerEnhanced(COBBLE_3, new ItemStack[]{
                 COBBLE_2, COBBLE_2, COBBLE_2,
                 COBBLE_2, COBBLE_2, COBBLE_2,
                 COBBLE_2, COBBLE_2, COBBLE_2
         });
-        registerEnhanced(COBBLE_4, new ItemStack[] {
+        registerEnhanced(COBBLE_4, new ItemStack[]{
                 COBBLE_3, COBBLE_3, COBBLE_3,
                 COBBLE_3, COBBLE_3, COBBLE_3,
                 COBBLE_3, COBBLE_3, COBBLE_3
         });
-        registerEnhanced(COBBLE_5, new ItemStack[] {
+        registerEnhanced(COBBLE_5, new ItemStack[]{
                 COBBLE_4, COBBLE_4, COBBLE_4,
                 COBBLE_4, COBBLE_4, COBBLE_4,
                 COBBLE_4, COBBLE_4, COBBLE_4
         });
-        registerEnhanced(VOID_DUST, new ItemStack[] {
+        registerEnhanced(VOID_DUST, new ItemStack[]{
                 VOID_BIT, VOID_BIT, VOID_BIT,
                 VOID_BIT, VOID_BIT, VOID_BIT,
                 VOID_BIT, VOID_BIT, VOID_BIT
         });
-        registerEnhanced(VOID_INGOT, new ItemStack[] {
+        registerEnhanced(VOID_INGOT, new ItemStack[]{
                 VOID_DUST, VOID_DUST, VOID_DUST,
                 VOID_DUST, VOID_DUST, VOID_DUST,
                 VOID_DUST, VOID_DUST, VOID_DUST
@@ -327,42 +325,42 @@ public final class Materials {
         registerSmeltery(ADAMANTITE, SlimefunItems.REDSTONE_ALLOY, DIAMOND_SINGULARITY, MAGSTEEL);
         registerSmeltery(MAGNONIUM, MAGSTEEL, MAGNESIUM_SINGULARITY, ENDER_ESSENCE);
         register(VOID_BIT, VoidHarvester.TYPE, new ItemStack[0]);
-        registerEnhanced(MAGSTEEL_PLATE, new ItemStack[] {
+        registerEnhanced(MAGSTEEL_PLATE, new ItemStack[]{
                 MAGSTEEL, MAGSTEEL, MAGSTEEL,
                 MAGSTEEL, SlimefunItems.HARDENED_METAL_INGOT, MAGSTEEL,
                 MAGSTEEL, MAGSTEEL, MAGSTEEL
         });
-        registerEnhanced(MACHINE_CIRCUIT, new ItemStack[] {
+        registerEnhanced(MACHINE_CIRCUIT, new ItemStack[]{
                 SlimefunItems.COPPER_INGOT, SlimefunItems.ELECTRO_MAGNET, SlimefunItems.COPPER_INGOT,
                 SlimefunItems.COPPER_INGOT, SlimefunItems.SILICON, SlimefunItems.COPPER_INGOT,
                 SlimefunItems.COPPER_INGOT, SlimefunItems.ELECTRO_MAGNET, SlimefunItems.COPPER_INGOT
         });
-        new Strainer(BASIC_STRAINER, new ItemStack[] {
+        new Strainer(BASIC_STRAINER, new ItemStack[]{
                 new ItemStack(Material.STICK), new ItemStack(Material.STRING), new ItemStack(Material.STICK),
                 new ItemStack(Material.STRING), new ItemStack(Material.STICK), new ItemStack(Material.STRING),
                 new ItemStack(Material.STICK), new ItemStack(Material.STRING), new ItemStack(Material.STICK),
-        }, 1).register(plugin);
-        new Strainer(ADVANCED_STRAINER, new ItemStack[] {
+        }, 1).register(SlimefunAddonInstance.getSFAInstance());
+        new Strainer(ADVANCED_STRAINER, new ItemStack[]{
                 Materials.MAGSTEEL, new ItemStack(Material.STRING), Materials.MAGSTEEL,
                 new ItemStack(Material.STRING), BASIC_STRAINER, new ItemStack(Material.STRING),
                 Materials.MAGSTEEL, new ItemStack(Material.STRING), Materials.MAGSTEEL
-        }, 4).register(plugin);
-        new Strainer(REINFORCED_STRAINER, new ItemStack[] {
+        }, 4).register(SlimefunAddonInstance.getSFAInstance());
+        new Strainer(REINFORCED_STRAINER, new ItemStack[]{
                 SlimefunItems.REINFORCED_ALLOY_INGOT, new ItemStack(Material.STRING), SlimefunItems.REINFORCED_ALLOY_INGOT,
                 new ItemStack(Material.STRING), ADVANCED_STRAINER, new ItemStack(Material.STRING),
                 SlimefunItems.REINFORCED_ALLOY_INGOT, new ItemStack(Material.STRING), SlimefunItems.REINFORCED_ALLOY_INGOT
-        }, 20).register(plugin);
-        registerEnhanced(MACHINE_CORE, new ItemStack[] {
+        }, 20).register(SlimefunAddonInstance.getSFAInstance());
+        registerEnhanced(MACHINE_CORE, new ItemStack[]{
                 TITANIUM, MACHINE_CIRCUIT, TITANIUM,
                 MACHINE_CIRCUIT, MACHINE_PLATE, MACHINE_CIRCUIT,
                 TITANIUM, MACHINE_CIRCUIT, TITANIUM
         });
-        registerEnhanced(MACHINE_PLATE, new ItemStack[] {
+        registerEnhanced(MACHINE_PLATE, new ItemStack[]{
                 SlimefunItems.REINFORCED_ALLOY_INGOT, SlimefunItems.REINFORCED_PLATE, SlimefunItems.REINFORCED_ALLOY_INGOT,
                 MAGSTEEL_PLATE, TITANIUM, MAGSTEEL_PLATE,
                 SlimefunItems.REINFORCED_ALLOY_INGOT, SlimefunItems.REINFORCED_PLATE, SlimefunItems.REINFORCED_ALLOY_INGOT
         });
-        register(Groups.INFINITY_CHEAT, INFINITE_CIRCUIT, InfinityWorkbench.TYPE, new ItemStack[] {
+        register(Groups.INFINITY_CHEAT, INFINITE_CIRCUIT, InfinityWorkbench.TYPE, new ItemStack[]{
                 MACHINE_CIRCUIT, INFINITE_INGOT, MACHINE_CIRCUIT, MACHINE_CIRCUIT, INFINITE_INGOT, MACHINE_CIRCUIT,
                 VOID_INGOT, MACHINE_CIRCUIT, VOID_INGOT, VOID_INGOT, MACHINE_CIRCUIT, VOID_INGOT,
                 INFINITE_INGOT, VOID_INGOT, MACHINE_CIRCUIT, MACHINE_CIRCUIT, VOID_INGOT, INFINITE_INGOT,
@@ -370,7 +368,7 @@ public final class Materials {
                 VOID_INGOT, MACHINE_CIRCUIT, VOID_INGOT, VOID_INGOT, MACHINE_CIRCUIT, VOID_INGOT,
                 MACHINE_CIRCUIT, INFINITE_INGOT, MACHINE_CIRCUIT, MACHINE_CIRCUIT, INFINITE_INGOT, MACHINE_CIRCUIT
         });
-        register(Groups.INFINITY_CHEAT, INFINITE_CORE, InfinityWorkbench.TYPE, new ItemStack[] {
+        register(Groups.INFINITY_CHEAT, INFINITE_CORE, InfinityWorkbench.TYPE, new ItemStack[]{
                 MACHINE_PLATE, MACHINE_CORE, INFINITE_INGOT, INFINITE_INGOT, MACHINE_CORE, MACHINE_PLATE,
                 MACHINE_CORE, MACHINE_PLATE, MACHINE_CIRCUIT, MACHINE_CIRCUIT, MACHINE_PLATE, MACHINE_CORE,
                 INFINITE_INGOT, MACHINE_CIRCUIT, INFINITE_INGOT, INFINITE_INGOT, MACHINE_CIRCUIT, INFINITE_INGOT,
@@ -378,23 +376,25 @@ public final class Materials {
                 MACHINE_CORE, MACHINE_PLATE, MACHINE_CIRCUIT, MACHINE_CIRCUIT, MACHINE_PLATE, MACHINE_CORE,
                 MACHINE_PLATE, MACHINE_CORE, INFINITE_INGOT, INFINITE_INGOT, MACHINE_CORE, MACHINE_PLATE
         });
-        new Singularity(COPPER_SINGULARITY, SlimefunItems.COPPER_INGOT, 3000).register(plugin);
-        new Singularity(ZINC_SINGULARITY, SlimefunItems.ZINC_INGOT, 3000).register(plugin);
-        new Singularity(TIN_SINGULARITY, SlimefunItems.TIN_INGOT, 3000).register(plugin);
-        new Singularity(ALUMINUM_SINGULARITY, SlimefunItems.ALUMINUM_INGOT, 3000).register(plugin);
-        new Singularity(SILVER_SINGULARITY, SlimefunItems.SILVER_INGOT, 3000).register(plugin);
-        new Singularity(MAGNESIUM_SINGULARITY, SlimefunItems.MAGNESIUM_INGOT, 3000).register(plugin);
-        new Singularity(LEAD_SINGULARITY, SlimefunItems.LEAD_INGOT, 3000).register(plugin);
-        new Singularity(GOLD_SINGULARITY, Material.GOLD_INGOT, 2000).register(plugin);
-        new Singularity(IRON_SINGULARITY, Material.IRON_INGOT, 2000).register(plugin);
-        new Singularity(DIAMOND_SINGULARITY, Material.DIAMOND, 500).register(plugin);
-        new Singularity(EMERALD_SINGULARITY, Material.EMERALD, 500).register(plugin);
-        new Singularity(NETHERITE_SINGULARITY, Material.NETHERITE_INGOT, 200).register(plugin);
-        new Singularity(COAL_SINGULARITY, Material.COAL, 1500).register(plugin);
-        new Singularity(REDSTONE_SINGULARITY, Material.REDSTONE, 1500).register(plugin);
-        new Singularity(LAPIS_SINGULARITY, Material.LAPIS_LAZULI, 1500).register(plugin);
-        new Singularity(QUARTZ_SINGULARITY, Material.QUARTZ, 1500).register(plugin);
-        new Singularity(INFINITY_SINGULARITY, INFINITE_INGOT, 100).register(plugin);
+        new Singularity(COPPER_SINGULARITY, SlimefunItems.COPPER_INGOT, 3000).register(SlimefunAddonInstance.getSFAInstance());
+        new Singularity(ZINC_SINGULARITY, SlimefunItems.ZINC_INGOT, 3000).register(SlimefunAddonInstance.getSFAInstance());
+        new Singularity(TIN_SINGULARITY, SlimefunItems.TIN_INGOT, 3000).register(SlimefunAddonInstance.getSFAInstance());
+        new Singularity(ALUMINUM_SINGULARITY, SlimefunItems.ALUMINUM_INGOT, 3000)
+                .register(SlimefunAddonInstance.getSFAInstance());
+        new Singularity(SILVER_SINGULARITY, SlimefunItems.SILVER_INGOT, 3000).register(SlimefunAddonInstance.getSFAInstance());
+        new Singularity(MAGNESIUM_SINGULARITY, SlimefunItems.MAGNESIUM_INGOT, 3000)
+                .register(SlimefunAddonInstance.getSFAInstance());
+        new Singularity(LEAD_SINGULARITY, SlimefunItems.LEAD_INGOT, 3000).register(SlimefunAddonInstance.getSFAInstance());
+        new Singularity(GOLD_SINGULARITY, Material.GOLD_INGOT, 2000).register(SlimefunAddonInstance.getSFAInstance());
+        new Singularity(IRON_SINGULARITY, Material.IRON_INGOT, 2000).register(SlimefunAddonInstance.getSFAInstance());
+        new Singularity(DIAMOND_SINGULARITY, Material.DIAMOND, 500).register(SlimefunAddonInstance.getSFAInstance());
+        new Singularity(EMERALD_SINGULARITY, Material.EMERALD, 500).register(SlimefunAddonInstance.getSFAInstance());
+        new Singularity(NETHERITE_SINGULARITY, Material.NETHERITE_INGOT, 200).register(SlimefunAddonInstance.getSFAInstance());
+        new Singularity(COAL_SINGULARITY, Material.COAL, 1500).register(SlimefunAddonInstance.getSFAInstance());
+        new Singularity(REDSTONE_SINGULARITY, Material.REDSTONE, 1500).register(SlimefunAddonInstance.getSFAInstance());
+        new Singularity(LAPIS_SINGULARITY, Material.LAPIS_LAZULI, 1500).register(SlimefunAddonInstance.getSFAInstance());
+        new Singularity(QUARTZ_SINGULARITY, Material.QUARTZ, 1500).register(SlimefunAddonInstance.getSFAInstance());
+        new Singularity(INFINITY_SINGULARITY, INFINITE_INGOT, 100).register(SlimefunAddonInstance.getSFAInstance());
     }
 
     private static void registerEnhanced(SlimefunItemStack item, ItemStack[] recipe) {
@@ -409,8 +409,7 @@ public final class Materials {
         register(Groups.MAIN_MATERIALS, itemStack, type, recipe);
     }
 
-    private static void register(ItemGroup category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
-        new SlimefunItem(category, item, recipeType, recipe).register(InfinityExpansion.instance());
+    private static void register(ItemGroup itemGroup, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {
+        new SlimefunItem(itemGroup, item, recipeType, recipe).register(SlimefunAddonInstance.getSFAInstance());
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/materials/Singularity.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/materials/Singularity.java
similarity index 75%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/materials/Singularity.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/materials/Singularity.java
index faded27..7b07da8 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/materials/Singularity.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/materials/Singularity.java
@@ -1,19 +1,17 @@
-package io.github.mooy1.infinityexpansion.items.materials;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.materials;
 
-import java.util.ArrayList;
-import java.util.List;
-
-import javax.annotation.Nonnull;
-
-import org.bukkit.Material;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinityexpansion.categories.Groups;
-import io.github.mooy1.infinityexpansion.items.machines.SingularityConstructor;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.InfinityExpansion;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.categories.Groups;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.machines.SingularityConstructor;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.implementation.items.blocks.UnplaceableBlock;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import org.bukkit.Material;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * Singularities and there recipe displays
@@ -21,7 +19,6 @@ import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
  * @author Mooy1
  */
 public final class Singularity extends UnplaceableBlock {
-
     private static final double COST_MULTIPLIER =
             InfinityExpansion.config().getDouble("balance-options.singularity-cost-multiplier", 0.1, 100);
 
@@ -42,17 +39,12 @@ public final class Singularity extends UnplaceableBlock {
         int stacks = (int) Math.floor(amount / 64D);
         int extra = amount % 64;
 
-        for (int i = 0 ; i < stacks ; i++) {
-            recipe.add(new CustomItemStack(item, 64));
-        }
+        for (int i = 0; i < stacks; i++) recipe.add(new CustomItemStack(item, 64));
 
         recipe.add(new CustomItemStack(item, extra));
 
-        while (recipe.size() < 9) {
-            recipe.add(null);
-        }
+        while (recipe.size() < 9) recipe.add(null);
 
         return recipe.toArray(new ItemStack[9]);
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/materials/Strainer.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/materials/Strainer.java
similarity index 77%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/materials/Strainer.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/materials/Strainer.java
index 576ab4b..3655bd6 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/materials/Strainer.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/materials/Strainer.java
@@ -1,18 +1,17 @@
-package io.github.mooy1.infinityexpansion.items.materials;
-
-import javax.annotation.Nullable;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.materials;
 
+import id.universenetwork.sfa_loader.addons.infinityexpansion.categories.Groups;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
+import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;
 import org.bukkit.NamespacedKey;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.persistence.PersistentDataType;
 
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinityexpansion.categories.Groups;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;
+import javax.annotation.Nullable;
 
 /**
  * Items to be used in the Strainer Base
@@ -20,8 +19,7 @@ import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;
  * @author Mooy1
  */
 public final class Strainer extends SlimefunItem implements NotPlaceable {
-
-    private static final NamespacedKey KEY = InfinityExpansion.createKey("strainer_speed");
+    private static final NamespacedKey KEY = AbstractAddon.createKey("strainer_speed");
 
     public Strainer(SlimefunItemStack item, ItemStack[] recipe, int speed) {
         super(Groups.BASIC_MACHINES, item, RecipeType.ENHANCED_CRAFTING_TABLE, recipe);
@@ -36,10 +34,8 @@ public final class Strainer extends SlimefunItem implements NotPlaceable {
      * @return speed
      */
     public static int getStrainer(@Nullable ItemStack item) {
-        if (item != null && item.hasItemMeta()) {
+        if (item != null && item.hasItemMeta())
             return item.getItemMeta().getPersistentDataContainer().getOrDefault(Strainer.KEY, PersistentDataType.INTEGER, 0);
-        }
         return 0;
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/mobdata/MobData.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/mobdata/MobData.java
similarity index 82%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/mobdata/MobData.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/mobdata/MobData.java
index b3e54fb..2e922f2 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/mobdata/MobData.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/mobdata/MobData.java
@@ -1,23 +1,22 @@
-package io.github.mooy1.infinityexpansion.items.mobdata;
-
-import lombok.experimental.UtilityClass;
-
-import org.bukkit.Material;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinityexpansion.categories.Groups;
-import io.github.mooy1.infinityexpansion.items.materials.Materials;
-import io.github.mooy1.infinitylib.core.Environment;
-import io.github.mooy1.infinitylib.machines.MachineLore;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.mobdata;
+
+import id.universenetwork.sfa_loader.addons.infinityexpansion.InfinityExpansion;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.categories.Groups;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.materials.Materials;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.Environment;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.SlimefunAddonInstance;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.MachineLore;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
+import lombok.experimental.UtilityClass;
+import org.bukkit.Material;
+import org.bukkit.inventory.ItemStack;
 
 @UtilityClass
 public final class MobData {
-
     private static final int CHAMBER_INTERVAL =
             InfinityExpansion.config().getInt("mob-simulation-options.ticks-per-output", 1, 1000);
     private static final int CHAMBER_BUFFER = 15000;
@@ -72,128 +71,133 @@ public final class MobData {
     public static final SlimefunItemStack WITHER = MobDataCard.create("Wither", MobDataTier.MINI_BOSS);
     public static final SlimefunItemStack ENDER_DRAGON = MobDataCard.create("Ender Dragon", MobDataTier.BOSS);
 
-    public static void setup(InfinityExpansion plugin) {
+    public static void setup() {
 
-        new MobSimulationChamber(Groups.MOB_SIMULATION, CHAMBER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new MobSimulationChamber(Groups.MOB_SIMULATION, CHAMBER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.MAGSTEEL_PLATE, Materials.MACHINE_PLATE, Materials.MAGSTEEL_PLATE,
                 Materials.MACHINE_CIRCUIT, SlimefunItems.PROGRAMMABLE_ANDROID_BUTCHER, Materials.MACHINE_CIRCUIT,
                 Materials.MAGSTEEL_PLATE, Materials.MACHINE_PLATE, Materials.MAGSTEEL_PLATE,
-        }, CHAMBER_ENERGY, CHAMBER_INTERVAL).register(plugin);
+        }, CHAMBER_ENERGY, CHAMBER_INTERVAL).register(SlimefunAddonInstance.getSFAInstance());
 
-        new MobDataInfuser(Groups.MOB_SIMULATION, INFUSER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new MobDataInfuser(Groups.MOB_SIMULATION, INFUSER, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.MACHINE_CIRCUIT, SlimefunItems.REINFORCED_ALLOY_INGOT, Materials.MACHINE_CIRCUIT,
                 SlimefunItems.REINFORCED_ALLOY_INGOT, Materials.MACHINE_CORE, SlimefunItems.REINFORCED_ALLOY_INGOT,
                 Materials.MACHINE_CIRCUIT, SlimefunItems.REINFORCED_ALLOY_INGOT, Materials.MACHINE_CIRCUIT
-        }, INFUSER_ENERGY).register(plugin);
+        }, INFUSER_ENERGY).register(SlimefunAddonInstance.getSFAInstance());
 
-        new SlimefunItem(Groups.MOB_SIMULATION, EMPTY_DATA_CARD, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new SlimefunItem(Groups.MOB_SIMULATION, EMPTY_DATA_CARD, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 SlimefunItems.MAGNESIUM_INGOT, Materials.MACHINE_CIRCUIT, SlimefunItems.MAGNESIUM_INGOT,
                 SlimefunItems.SYNTHETIC_SAPPHIRE, SlimefunItems.SYNTHETIC_DIAMOND, SlimefunItems.SYNTHETIC_EMERALD,
                 SlimefunItems.MAGNESIUM_INGOT, Materials.MACHINE_CIRCUIT, SlimefunItems.MAGNESIUM_INGOT
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
 
-        if (InfinityExpansion.environment() == Environment.TESTING) {
+        if (AbstractAddon.environment() == Environment.TESTING) {
             // There is some issues with player skull items in randomized sets when testing
             return;
         }
 
-        new MobDataCard(ZOMBIE, MobDataTier.HOSTILE, new ItemStack[] {
+        new MobDataCard(ZOMBIE, MobDataTier.HOSTILE, new ItemStack[]{
                 new ItemStack(Material.IRON_SWORD, 1), new ItemStack(Material.ROTTEN_FLESH, 16), new ItemStack(Material.IRON_SHOVEL, 1),
                 new ItemStack(Material.IRON_INGOT, 64), EMPTY_DATA_CARD, new ItemStack(Material.IRON_INGOT, 64),
                 new ItemStack(Material.CARROT, 64), new ItemStack(Material.ROTTEN_FLESH, 16), new ItemStack(Material.POTATO, 64)
-        }).addDrop(Material.ROTTEN_FLESH, 1).register(plugin);
-        new MobDataCard(SLIME, MobDataTier.NEUTRAL, new ItemStack[] {
+        }).addDrop(Material.ROTTEN_FLESH, 1).register(SlimefunAddonInstance.getSFAInstance());
+        new MobDataCard(SLIME, MobDataTier.NEUTRAL, new ItemStack[]{
                 new ItemStack(Material.SLIME_BLOCK, 16), new ItemStack(Material.LIME_DYE, 16), new ItemStack(Material.SLIME_BLOCK, 16),
                 new ItemStack(Material.LIME_DYE, 16), EMPTY_DATA_CARD, new ItemStack(Material.LIME_DYE, 16),
                 new ItemStack(Material.SLIME_BLOCK, 16), new ItemStack(Material.LIME_DYE, 16), new ItemStack(Material.SLIME_BLOCK, 16)
-        }).addDrop(Material.SLIME_BALL, 1).register(plugin);
-        new MobDataCard(MAGMA_CUBE, MobDataTier.NEUTRAL, new ItemStack[] {
+        }).addDrop(Material.SLIME_BALL, 1).register(SlimefunAddonInstance.getSFAInstance());
+        new MobDataCard(MAGMA_CUBE, MobDataTier.NEUTRAL, new ItemStack[]{
                 new ItemStack(Material.MAGMA_BLOCK, 64), new ItemStack(Material.MAGMA_CREAM, 16), new ItemStack(Material.MAGMA_BLOCK, 64),
                 new ItemStack(Material.SLIME_BLOCK, 16), EMPTY_DATA_CARD, new ItemStack(Material.SLIME_BLOCK, 16),
                 new ItemStack(Material.MAGMA_BLOCK, 64), new ItemStack(Material.MAGMA_CREAM, 16), new ItemStack(Material.MAGMA_BLOCK, 64)
-        }).addDrop(Material.MAGMA_CREAM, 1).register(plugin);
-        new MobDataCard(COW, MobDataTier.PASSIVE, new ItemStack[] {
+        }).addDrop(Material.MAGMA_CREAM, 1).register(SlimefunAddonInstance.getSFAInstance());
+        new MobDataCard(COW, MobDataTier.PASSIVE, new ItemStack[]{
                 new ItemStack(Material.LEATHER, 64), new ItemStack(Material.BEEF, 64), new ItemStack(Material.LEATHER, 64),
                 new ItemStack(Material.COOKED_BEEF, 64), EMPTY_DATA_CARD, new ItemStack(Material.COOKED_BEEF, 64),
                 new ItemStack(Material.LEATHER, 64), new ItemStack(Material.BEEF, 64), new ItemStack(Material.LEATHER, 64)
-        }).addDrop(Material.LEATHER, 1).addDrop(Material.BEEF, 1).register(plugin);
-        new MobDataCard(SHEEP, MobDataTier.PASSIVE, new ItemStack[] {
+        }).addDrop(Material.LEATHER, 1).addDrop(Material.BEEF, 1).register(SlimefunAddonInstance.getSFAInstance());
+        new MobDataCard(SHEEP, MobDataTier.PASSIVE, new ItemStack[]{
                 new ItemStack(Material.WHITE_WOOL, 64), new ItemStack(Material.MUTTON, 64), new ItemStack(Material.WHITE_WOOL, 64),
                 new ItemStack(Material.COOKED_MUTTON, 64), EMPTY_DATA_CARD, new ItemStack(Material.COOKED_MUTTON, 64),
                 new ItemStack(Material.WHITE_WOOL, 64), new ItemStack(Material.MUTTON, 64), new ItemStack(Material.WHITE_WOOL, 64)
-        }).addDrop(Material.WHITE_WOOL, 1).addDrop(Material.MUTTON, 1).addDrop(Material.PINK_WOOL, 10000).register(plugin);
-        new MobDataCard(SPIDER, MobDataTier.HOSTILE, new ItemStack[] {
+        }).addDrop(Material.WHITE_WOOL, 1).addDrop(Material.MUTTON, 1).addDrop(Material.PINK_WOOL, 10000)
+                .register(SlimefunAddonInstance.getSFAInstance());
+        new MobDataCard(SPIDER, MobDataTier.HOSTILE, new ItemStack[]{
                 new ItemStack(Material.COBWEB, 8), new ItemStack(Material.STRING, 64), new ItemStack(Material.COBWEB, 8),
                 new ItemStack(Material.SPIDER_EYE, 32), EMPTY_DATA_CARD, new ItemStack(Material.SPIDER_EYE, 32),
                 new ItemStack(Material.COBWEB, 8), new ItemStack(Material.STRING, 64), new ItemStack(Material.COBWEB, 8)
-        }).addDrop(Material.STRING, 1).addDrop(Material.SPIDER_EYE, 2).register(plugin);
-        new MobDataCard(SKELETON, MobDataTier.HOSTILE, new ItemStack[] {
+        }).addDrop(Material.STRING, 1).addDrop(Material.SPIDER_EYE, 2).register(SlimefunAddonInstance.getSFAInstance());
+        new MobDataCard(SKELETON, MobDataTier.HOSTILE, new ItemStack[]{
                 new ItemStack(Material.LEATHER_HELMET, 1), new ItemStack(Material.BONE, 64), new ItemStack(Material.LEATHER_HELMET, 1),
                 new ItemStack(Material.ARROW, 64), EMPTY_DATA_CARD, new ItemStack(Material.ARROW, 64),
                 new ItemStack(Material.BOW, 1), new ItemStack(Material.BONE, 64), new ItemStack(Material.BOW, 1)
-        }).addDrop(Material.BONE, 1).addDrop(Material.ARROW, 3).register(plugin);
-        new MobDataCard(WITHER_SKELETON, MobDataTier.ADVANCED, new ItemStack[] {
+        }).addDrop(Material.BONE, 1).addDrop(Material.ARROW, 3).register(SlimefunAddonInstance.getSFAInstance());
+        new MobDataCard(WITHER_SKELETON, MobDataTier.ADVANCED, new ItemStack[]{
                 new ItemStack(Material.WITHER_SKELETON_SKULL, 8), new ItemStack(Material.BONE, 64), new ItemStack(Material.WITHER_SKELETON_SKULL, 8),
                 new ItemStack(Material.COAL_BLOCK, 64), EMPTY_DATA_CARD, new ItemStack(Material.COAL_BLOCK, 64),
                 new ItemStack(Material.STONE_SWORD, 1), new ItemStack(Material.BONE, 64), new ItemStack(Material.STONE_SWORD, 1)
-        }).addDrop(Material.COAL, 2, 1).addDrop(Material.BONE, 3).addDrop(Material.WITHER_SKELETON_SKULL, 15).register(plugin);
-        new MobDataCard(ENDERMEN, MobDataTier.ADVANCED, new ItemStack[] {
+        }).addDrop(Material.COAL, 2, 1).addDrop(Material.BONE, 3).addDrop(Material.WITHER_SKELETON_SKULL, 15)
+                .register(SlimefunAddonInstance.getSFAInstance());
+        new MobDataCard(ENDERMEN, MobDataTier.ADVANCED, new ItemStack[]{
                 new ItemStack(Material.ENDER_EYE, 16), new ItemStack(Material.OBSIDIAN, 64), new ItemStack(Material.ENDER_EYE, 16),
                 new ItemStack(Material.ENDER_PEARL, 16), EMPTY_DATA_CARD, new ItemStack(Material.ENDER_PEARL, 16),
                 new ItemStack(Material.ENDER_EYE, 16), new ItemStack(Material.OBSIDIAN, 64), new ItemStack(Material.ENDER_EYE, 16)
-        }).addDrop(Material.ENDER_PEARL, 1).register(plugin);
-        new MobDataCard(CREEPER, MobDataTier.HOSTILE, new ItemStack[] {
+        }).addDrop(Material.ENDER_PEARL, 1).register(SlimefunAddonInstance.getSFAInstance());
+        new MobDataCard(CREEPER, MobDataTier.HOSTILE, new ItemStack[]{
                 new ItemStack(Material.TNT, 16), new ItemStack(Material.GREEN_DYE, 64), new ItemStack(Material.TNT, 16),
                 new ItemStack(Material.GUNPOWDER, 16), EMPTY_DATA_CARD, new ItemStack(Material.GUNPOWDER, 16),
                 new ItemStack(Material.TNT, 16), new ItemStack(Material.GREEN_DYE, 64), new ItemStack(Material.TNT, 16)
-        }).addDrop(Material.GUNPOWDER, 1).register(plugin);
-        new MobDataCard(GUARDIAN, MobDataTier.HOSTILE, new ItemStack[] {
+        }).addDrop(Material.GUNPOWDER, 1).register(SlimefunAddonInstance.getSFAInstance());
+        new MobDataCard(GUARDIAN, MobDataTier.HOSTILE, new ItemStack[]{
                 new ItemStack(Material.COD, 16), new ItemStack(Material.PRISMARINE_SHARD, 64), new ItemStack(Material.PRISMARINE_CRYSTALS, 64),
                 new ItemStack(Material.SPONGE, 4), EMPTY_DATA_CARD, new ItemStack(Material.PUFFERFISH, 4),
                 new ItemStack(Material.PRISMARINE_CRYSTALS, 64), new ItemStack(Material.PRISMARINE_SHARD, 64), new ItemStack(Material.COOKED_COD, 16)
         }).addDrop(Material.PRISMARINE_SHARD, 1).addDrop(Material.PRISMARINE_CRYSTALS, 2)
-                .addDrop(Material.COD, 3).addDrop(Material.SPONGE, 40).register(plugin);
-        new MobDataCard(CHICKEN, MobDataTier.PASSIVE, new ItemStack[] {
+                .addDrop(Material.COD, 3).addDrop(Material.SPONGE, 40).register(SlimefunAddonInstance.getSFAInstance());
+        new MobDataCard(CHICKEN, MobDataTier.PASSIVE, new ItemStack[]{
                 new ItemStack(Material.CHICKEN, 64), new ItemStack(Material.FEATHER, 64), new ItemStack(Material.COOKED_CHICKEN, 64),
                 new ItemStack(Material.EGG, 16), EMPTY_DATA_CARD, new ItemStack(Material.EGG, 16),
                 new ItemStack(Material.COOKED_CHICKEN, 64), new ItemStack(Material.FEATHER, 64), new ItemStack(Material.CHICKEN, 64)
-        }).addDrop(Material.CHICKEN, 1).addDrop(Material.FEATHER, 2).register(plugin);
-        new MobDataCard(IRON_GOLEM, MobDataTier.ADVANCED, new ItemStack[] {
+        }).addDrop(Material.CHICKEN, 1).addDrop(Material.FEATHER, 2).register(SlimefunAddonInstance.getSFAInstance());
+        new MobDataCard(IRON_GOLEM, MobDataTier.ADVANCED, new ItemStack[]{
                 new ItemStack(Material.IRON_BLOCK, 64), new ItemStack(Material.PUMPKIN, 16), new ItemStack(Material.IRON_BLOCK, 64),
                 new ItemStack(Material.POPPY, 16), EMPTY_DATA_CARD, new ItemStack(Material.POPPY, 16),
                 new ItemStack(Material.IRON_BLOCK, 64), new ItemStack(Material.PUMPKIN, 16), new ItemStack(Material.IRON_BLOCK, 64)
-        }).addDrop(Material.IRON_INGOT, 2, 1).addDrop(Material.POPPY, 3).addDrop(SlimefunItems.BASIC_CIRCUIT_BOARD, 3).register(plugin);
-        new MobDataCard(BLAZE, MobDataTier.ADVANCED, new ItemStack[] {
+        }).addDrop(Material.IRON_INGOT, 2, 1).addDrop(Material.POPPY, 3).addDrop(SlimefunItems.BASIC_CIRCUIT_BOARD, 3)
+                .register(SlimefunAddonInstance.getSFAInstance());
+        new MobDataCard(BLAZE, MobDataTier.ADVANCED, new ItemStack[]{
                 new ItemStack(Material.MAGMA_BLOCK, 64), new ItemStack(Material.BLAZE_ROD, 64), new ItemStack(Material.MAGMA_BLOCK, 64),
                 new ItemStack(Material.BLAZE_ROD, 64), EMPTY_DATA_CARD, new ItemStack(Material.BLAZE_ROD, 64),
                 new ItemStack(Material.MAGMA_BLOCK, 64), new ItemStack(Material.BLAZE_ROD, 64), new ItemStack(Material.MAGMA_BLOCK, 64)
-        }).addDrop(Material.BLAZE_ROD, 1).register(plugin);
-        new MobDataCard(WITHER, MobDataTier.MINI_BOSS, new ItemStack[] {
+        }).addDrop(Material.BLAZE_ROD, 1).register(SlimefunAddonInstance.getSFAInstance());
+        new MobDataCard(WITHER, MobDataTier.MINI_BOSS, new ItemStack[]{
                 new ItemStack(Material.WITHER_SKELETON_SKULL, 64), new ItemStack(Material.WITHER_SKELETON_SKULL, 64), new ItemStack(Material.WITHER_SKELETON_SKULL, 64),
                 new SlimefunItemStack(SlimefunItems.WITHER_PROOF_OBSIDIAN, 64), EMPTY_DATA_CARD, new SlimefunItemStack(SlimefunItems.WITHER_PROOF_OBSIDIAN, 64),
                 new SlimefunItemStack(Materials.VOID_INGOT, 4), new SlimefunItemStack(SlimefunItems.WITHER_ASSEMBLER, 4), new SlimefunItemStack(Materials.VOID_INGOT, 4)
-        }).addDrop(Material.NETHER_STAR, 1).addDrop(SlimefunItems.COMPRESSED_CARBON, 8, 2).register(plugin);
-        new MobDataCard(ENDER_DRAGON, MobDataTier.BOSS, new ItemStack[] {
+        }).addDrop(Material.NETHER_STAR, 1).addDrop(SlimefunItems.COMPRESSED_CARBON, 8, 2)
+                .register(SlimefunAddonInstance.getSFAInstance());
+        new MobDataCard(ENDER_DRAGON, MobDataTier.BOSS, new ItemStack[]{
                 new ItemStack(Material.END_CRYSTAL, 64), new SlimefunItemStack(Materials.VOID_INGOT, 32), new ItemStack(Material.CHORUS_FLOWER, 64),
                 SlimefunItems.INFUSED_ELYTRA, EMPTY_DATA_CARD, new ItemStack(Material.DRAGON_HEAD, 1),
                 new SlimefunItemStack(SlimefunItems.ENDER_LUMP_3, 64), new SlimefunItemStack(Materials.VOID_INGOT, 32), new ItemStack(Material.DRAGON_BREATH, 64)
-        }).addDrop(Materials.VOID_DUST, 1).addDrop(Materials.ENDER_ESSENCE, 4).addDrop(Material.DRAGON_EGG, 1_000_000).register(plugin);
-        new MobDataCard(BEE, MobDataTier.NEUTRAL, new ItemStack[] {
+        }).addDrop(Materials.VOID_DUST, 1).addDrop(Materials.ENDER_ESSENCE, 4).addDrop(Material.DRAGON_EGG, 1_000_000)
+                .register(SlimefunAddonInstance.getSFAInstance());
+        new MobDataCard(BEE, MobDataTier.NEUTRAL, new ItemStack[]{
                 new ItemStack(Material.HONEYCOMB_BLOCK, 16), new ItemStack(Material.HONEY_BLOCK, 16), new ItemStack(Material.HONEYCOMB_BLOCK, 16),
                 new ItemStack(Material.HONEY_BLOCK, 16), EMPTY_DATA_CARD, new ItemStack(Material.HONEY_BLOCK, 16),
                 new ItemStack(Material.HONEYCOMB_BLOCK, 16), new ItemStack(Material.HONEY_BLOCK, 16), new ItemStack(Material.HONEYCOMB_BLOCK, 16)
-        }).addDrop(Material.HONEYCOMB, 1).register(plugin);
-        new MobDataCard(VILLAGER, MobDataTier.NEUTRAL, new ItemStack[] {
+        }).addDrop(Material.HONEYCOMB, 1).register(SlimefunAddonInstance.getSFAInstance());
+        new MobDataCard(VILLAGER, MobDataTier.NEUTRAL, new ItemStack[]{
                 new ItemStack(Material.EMERALD, 64), new ItemStack(Material.POTATO, 64), new ItemStack(Material.EMERALD, 64),
                 new ItemStack(Material.CARROT, 64), EMPTY_DATA_CARD, new ItemStack(Material.WHEAT, 64),
                 new ItemStack(Material.EMERALD, 64), new ItemStack(Material.PUMPKIN, 64), new ItemStack(Material.EMERALD, 64)
-        }).addDrop(Material.EMERALD, 1).register(plugin);
-        new MobDataCard(WITCH, MobDataTier.ADVANCED, new ItemStack[] {
+        }).addDrop(Material.EMERALD, 1).register(SlimefunAddonInstance.getSFAInstance());
+        new MobDataCard(WITCH, MobDataTier.ADVANCED, new ItemStack[]{
                 new ItemStack(Material.REDSTONE_BLOCK, 64), new ItemStack(Material.GLASS, 64), new ItemStack(Material.SUGAR, 64),
                 new ItemStack(Material.GLOWSTONE, 64), EMPTY_DATA_CARD, new ItemStack(Material.GLOWSTONE, 64),
                 new ItemStack(Material.SUGAR, 64), new ItemStack(Material.GLASS, 64), new ItemStack(Material.REDSTONE_BLOCK, 64)
         }).addDrop(Material.SUGAR, 1).addDrop(Material.REDSTONE, 1)
-                .addDrop(Material.GLASS_BOTTLE, 1).addDrop(Material.GLOWSTONE_DUST, 1).register(plugin);
+                .addDrop(Material.GLASS_BOTTLE, 1).addDrop(Material.GLOWSTONE_DUST, 1)
+                .register(SlimefunAddonInstance.getSFAInstance());
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/mobdata/MobDataCard.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/mobdata/MobDataCard.java
similarity index 89%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/mobdata/MobDataCard.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/mobdata/MobDataCard.java
index 106b5ff..d5b5c64 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/mobdata/MobDataCard.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/mobdata/MobDataCard.java
@@ -1,32 +1,25 @@
-package io.github.mooy1.infinityexpansion.items.mobdata;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.mobdata;
 
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-
-import javax.annotation.Nonnull;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.Material;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinityexpansion.categories.Groups;
-import io.github.mooy1.infinitylib.machines.MachineLore;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.categories.Groups;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.MachineLore;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.core.attributes.NotPlaceable;
 import io.github.thebusybiscuit.slimefun4.core.attributes.RecipeDisplayItem;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.collections.RandomizedSet;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import org.bukkit.Material;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+import javax.annotation.ParametersAreNonnullByDefault;
+import java.util.*;
 
 /**
  * A mob data card which will be able to be used in the {@link MobSimulationChamber}
  */
 @ParametersAreNonnullByDefault
 public final class MobDataCard extends SlimefunItem implements RecipeDisplayItem, NotPlaceable {
-
     static final Map<String, MobDataCard> CARDS = new HashMap<>();
 
     public static SlimefunItemStack create(String name, MobDataTier tier) {
@@ -82,5 +75,4 @@ public final class MobDataCard extends SlimefunItem implements RecipeDisplayItem
         }
         return items;
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/mobdata/MobDataInfuser.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/mobdata/MobDataInfuser.java
similarity index 71%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/mobdata/MobDataInfuser.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/mobdata/MobDataInfuser.java
index 72f502b..64746c2 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/mobdata/MobDataInfuser.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/mobdata/MobDataInfuser.java
@@ -1,43 +1,37 @@
-package io.github.mooy1.infinityexpansion.items.mobdata;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.mobdata;
 
-import javax.annotation.Nonnull;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.ChatColor;
-import org.bukkit.block.Block;
-import org.bukkit.entity.Player;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinitylib.machines.CraftingBlock;
-import io.github.mooy1.infinitylib.machines.MachineRecipeType;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.CraftingBlock;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.MachineRecipeType;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.core.attributes.EnergyNetComponent;
 import io.github.thebusybiscuit.slimefun4.core.networks.energy.EnergyNetComponentType;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
+import org.bukkit.ChatColor;
+import org.bukkit.block.Block;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+import javax.annotation.ParametersAreNonnullByDefault;
 
 @ParametersAreNonnullByDefault
 public final class MobDataInfuser extends CraftingBlock implements EnergyNetComponent {
-
     static final MachineRecipeType TYPE = new MachineRecipeType("mob_data_infuser", MobData.INFUSER);
 
     private final int energy;
 
-    public MobDataInfuser(ItemGroup category, SlimefunItemStack stack, RecipeType type, ItemStack[] recipe, int energy) {
-        super(category, stack, type, recipe);
+    public MobDataInfuser(ItemGroup itemGroup, SlimefunItemStack stack, RecipeType type, ItemStack[] recipe, int energy) {
+        super(itemGroup, stack, type, recipe);
         addRecipesFrom(TYPE);
         this.energy = energy;
     }
 
     @Override
     protected void craft(Block b, BlockMenu menu, Player p) {
-        if (getCharge(menu.getLocation()) < this.energy) {
-            p.sendMessage(ChatColor.RED + "Not enough energy!");
-        }
-        else {
-            super.craft(b, menu, p);
-        }
+        if (getCharge(menu.getLocation()) < this.energy) p.sendMessage(ChatColor.RED + "Not enough energy!");
+        else super.craft(b, menu, p);
     }
 
     @Override
@@ -55,5 +49,4 @@ public final class MobDataInfuser extends CraftingBlock implements EnergyNetComp
     public int getCapacity() {
         return this.energy;
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/mobdata/MobDataTier.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/mobdata/MobDataTier.java
similarity index 90%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/mobdata/MobDataTier.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/mobdata/MobDataTier.java
index 3596976..d09ac3e 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/mobdata/MobDataTier.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/mobdata/MobDataTier.java
@@ -1,4 +1,4 @@
-package io.github.mooy1.infinityexpansion.items.mobdata;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.mobdata;
 
 import org.bukkit.Material;
 
@@ -31,5 +31,4 @@ public enum MobDataTier {
         this.energy = energy;
         this.material = material;
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/mobdata/MobSimulationChamber.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/mobdata/MobSimulationChamber.java
similarity index 74%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/mobdata/MobSimulationChamber.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/mobdata/MobSimulationChamber.java
index 85605b6..d9258c5 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/mobdata/MobSimulationChamber.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/mobdata/MobSimulationChamber.java
@@ -1,20 +1,12 @@
-package io.github.mooy1.infinityexpansion.items.mobdata;
-
-import javax.annotation.Nonnull;
-
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.Sound;
-import org.bukkit.block.Block;
-import org.bukkit.event.block.BlockBreakEvent;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinityexpansion.utils.Util;
-import io.github.mooy1.infinitylib.common.StackUtils;
-import io.github.mooy1.infinitylib.machines.AbstractMachineBlock;
-import io.github.mooy1.infinitylib.machines.MachineLore;
-import io.github.mooy1.infinitylib.machines.TickingMenuBlock;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.mobdata;
+
+import id.universenetwork.sfa_loader.addons.infinityexpansion.InfinityExpansion;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.utils.Util;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.StackUtils;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.SlimefunAddonInstance;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.AbstractMachineBlock;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.MachineLore;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.TickingMenuBlock;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -25,9 +17,16 @@ import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
 import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.Sound;
+import org.bukkit.block.Block;
+import org.bukkit.event.block.BlockBreakEvent;
+import org.bukkit.inventory.ItemStack;
 
-public final class MobSimulationChamber extends TickingMenuBlock implements EnergyNetComponent {
+import javax.annotation.Nonnull;
 
+public final class MobSimulationChamber extends TickingMenuBlock implements EnergyNetComponent {
     static final double XP_MULTIPLIER = InfinityExpansion.config().getDouble("mob-simulation-options.xp-multiplier", 0, 1000);
 
     private static final ItemStack NO_CARD = new CustomItemStack(Material.BARRIER, "&cInput a Mob Data Card!");
@@ -44,8 +43,8 @@ public final class MobSimulationChamber extends TickingMenuBlock implements Ener
     private final int energy;
     private final int interval;
 
-    public MobSimulationChamber(ItemGroup category, SlimefunItemStack item, RecipeType type, ItemStack[] recipe, int energy, int interval) {
-        super(category, item, type, recipe);
+    public MobSimulationChamber(ItemGroup itemGroup, SlimefunItemStack item, RecipeType type, ItemStack[] recipe, int energy, int interval) {
+        super(itemGroup, item, type, recipe);
         this.energy = energy;
         this.interval = interval;
     }
@@ -70,7 +69,7 @@ public final class MobSimulationChamber extends TickingMenuBlock implements Ener
 
     @Override
     protected void setup(BlockMenuPreset blockMenuPreset) {
-        blockMenuPreset.drawBackground(OUTPUT_BORDER, new int[] {
+        blockMenuPreset.drawBackground(OUTPUT_BORDER, new int[]{
                 3, 4, 5, 6, 7, 8,
                 12, 17,
                 21, 26,
@@ -78,13 +77,13 @@ public final class MobSimulationChamber extends TickingMenuBlock implements Ener
                 39, 44,
                 48, 49, 50, 51, 52, 53
         });
-        blockMenuPreset.drawBackground(new int[] {
+        blockMenuPreset.drawBackground(new int[]{
                 0, 1, 2,
                 9, 11,
                 18, 19, 20,
                 STATUS_SLOT, XP_SLOT
         });
-        blockMenuPreset.drawBackground(INPUT_BORDER, new int[] {
+        blockMenuPreset.drawBackground(INPUT_BORDER, new int[]{
                 27, 28, 29,
                 36, 38,
                 45, 46, 47
@@ -99,7 +98,7 @@ public final class MobSimulationChamber extends TickingMenuBlock implements Ener
 
     @Override
     protected int[] getInputSlots() {
-        return new int[] { CARD_SLOT };
+        return new int[]{CARD_SLOT};
     }
 
     @Override
@@ -110,9 +109,7 @@ public final class MobSimulationChamber extends TickingMenuBlock implements Ener
     @Override
     public void onNewInstance(@Nonnull BlockMenu menu, @Nonnull Block b) {
         Location l = b.getLocation();
-        if (BlockStorage.getLocationInfo(l, "xp") == null) {
-            BlockStorage.addBlockInfo(l, "xp", "O");
-        }
+        if (BlockStorage.getLocationInfo(l, "xp") == null) BlockStorage.addBlockInfo(l, "xp", "O");
         menu.replaceExistingItem(XP_SLOT, makeXpItem(0));
         menu.addMenuClickHandler(XP_SLOT, (p, slot, item, action) -> {
             int xp = Util.getIntData("xp", l);
@@ -134,25 +131,19 @@ public final class MobSimulationChamber extends TickingMenuBlock implements Ener
     protected void tick(@Nonnull Block b, @Nonnull BlockMenu inv) {
         ItemStack input = inv.getItemInSlot(CARD_SLOT);
 
-        if (input == null) {
-            return;
-        }
+        if (input == null) return;
 
         MobDataCard card = MobDataCard.CARDS.get(StackUtils.getId(input));
 
         if (card == null) {
-            if (inv.hasViewer()) {
-                inv.replaceExistingItem(STATUS_SLOT, NO_CARD);
-            }
+            if (inv.hasViewer()) inv.replaceExistingItem(STATUS_SLOT, NO_CARD);
             return;
         }
 
         int energy = card.tier.energy + this.energy;
 
         if (getCharge(b.getLocation()) < energy) {
-            if (inv.hasViewer()) {
-                inv.replaceExistingItem(STATUS_SLOT, AbstractMachineBlock.NO_ENERGY_ITEM);
-            }
+            if (inv.hasViewer()) inv.replaceExistingItem(STATUS_SLOT, AbstractMachineBlock.NO_ENERGY_ITEM);
             return;
         }
 
@@ -167,19 +158,12 @@ public final class MobSimulationChamber extends TickingMenuBlock implements Ener
             inv.replaceExistingItem(XP_SLOT, makeXpItem(xp));
         }
 
-        if (InfinityExpansion.slimefunTickCount() % this.interval != 0) {
-            return;
-        }
+        if (SlimefunAddonInstance.slimefunTickCount() % this.interval != 0) return;
 
         BlockStorage.addBlockInfo(b.getLocation(), "xp", String.valueOf(xp + card.tier.xp));
 
         ItemStack item = card.drops.getRandom();
-        if (inv.fits(item, OUTPUT_SLOTS)) {
-            inv.pushItem(item.clone(), OUTPUT_SLOTS);
-        }
-        else if (inv.hasViewer()) {
-            inv.replaceExistingItem(STATUS_SLOT, NO_ROOM_ITEM);
-        }
+        if (inv.fits(item, OUTPUT_SLOTS)) inv.pushItem(item.clone(), OUTPUT_SLOTS);
+        else if (inv.hasViewer()) inv.replaceExistingItem(STATUS_SLOT, NO_ROOM_ITEM);
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/quarries/Oscillator.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/quarries/Oscillator.java
similarity index 82%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/quarries/Oscillator.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/quarries/Oscillator.java
index 5fee750..e10c46b 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/quarries/Oscillator.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/quarries/Oscillator.java
@@ -1,34 +1,29 @@
-package io.github.mooy1.infinityexpansion.items.quarries;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.quarries;
 
-import java.util.HashMap;
-import java.util.Map;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-
-import org.bukkit.Material;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinityexpansion.categories.Groups;
-import io.github.mooy1.infinityexpansion.items.materials.Materials;
-import io.github.mooy1.infinitylib.common.StackUtils;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.categories.Groups;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.materials.Materials;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.StackUtils;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
 import io.github.thebusybiscuit.slimefun4.libraries.dough.items.ItemUtils;
+import org.bukkit.Material;
+import org.bukkit.inventory.ItemStack;
 
-public final class Oscillator extends SlimefunItem {
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.util.HashMap;
+import java.util.Map;
 
+public final class Oscillator extends SlimefunItem {
     private static final Map<String, Oscillator> OSCILLATORS = new HashMap<>();
 
     public final double chance;
 
     @Nullable
     public static Oscillator getOscillator(@Nullable ItemStack item) {
-        if (item == null) {
-            return null;
-        }
+        if (item == null) return null;
         return OSCILLATORS.get(StackUtils.getId(item));
     }
 
@@ -44,7 +39,7 @@ public final class Oscillator extends SlimefunItem {
     }
 
     public Oscillator(SlimefunItemStack item, double chance) {
-        super(Groups.MAIN_MATERIALS, item, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        super(Groups.MAIN_MATERIALS, item, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.MACHINE_PLATE, SlimefunItems.BLISTERING_INGOT_3, Materials.MACHINE_PLATE,
                 SlimefunItems.BLISTERING_INGOT_3, new ItemStack(item.getType()), SlimefunItems.BLISTERING_INGOT_3,
                 Materials.MACHINE_PLATE, SlimefunItems.BLISTERING_INGOT_3, Materials.MACHINE_PLATE
@@ -52,5 +47,4 @@ public final class Oscillator extends SlimefunItem {
         OSCILLATORS.put(getId(), this);
         this.chance = chance;
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/quarries/Quarries.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/quarries/Quarries.java
similarity index 78%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/quarries/Quarries.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/quarries/Quarries.java
index df8d493..b85a01e 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/quarries/Quarries.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/quarries/Quarries.java
@@ -1,31 +1,29 @@
-package io.github.mooy1.infinityexpansion.items.quarries;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Objects;
-
-import lombok.experimental.UtilityClass;
-
-import org.bukkit.Material;
-import org.bukkit.configuration.ConfigurationSection;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinityexpansion.categories.Groups;
-import io.github.mooy1.infinityexpansion.items.SlimefunExtension;
-import io.github.mooy1.infinityexpansion.items.blocks.InfinityWorkbench;
-import io.github.mooy1.infinityexpansion.items.gear.Gear;
-import io.github.mooy1.infinityexpansion.items.materials.Materials;
-import io.github.mooy1.infinitylib.machines.MachineLore;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.quarries;
+
+import id.universenetwork.sfa_loader.addons.infinityexpansion.InfinityExpansion;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.categories.Groups;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.SlimefunExtension;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.blocks.InfinityWorkbench;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.gear.Gear;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.materials.Materials;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.SlimefunAddonInstance;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.MachineLore;
 import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
 import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;
+import lombok.experimental.UtilityClass;
+import org.bukkit.Material;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.inventory.ItemStack;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Objects;
 
 @UtilityClass
 public final class Quarries {
-
     public static final SlimefunItemStack BASIC_QUARRY = new SlimefunItemStack(
             "BASIC_QUARRY",
             Material.CHISELED_SANDSTONE,
@@ -77,8 +75,8 @@ public final class Quarries {
         return InfinityExpansion.config().getDouble("quarry-options.oscillators." + type, 0, 1);
     }
 
-    public static void setup(InfinityExpansion plugin) {
-        ConfigurationSection section = plugin.getConfig().getConfigurationSection("quarry-options.resources");
+    public static void setup() {
+        ConfigurationSection section = InfinityExpansion.config().getConfigurationSection("quarry-options.resources");
         Objects.requireNonNull(section);
         List<Material> outputs = new ArrayList<>();
 
@@ -89,13 +87,9 @@ public final class Quarries {
             outputs.add(Material.COAL);
         }
 
-        if (section.getBoolean("iron")) {
-            outputs.add(Material.IRON_INGOT);
-        }
+        if (section.getBoolean("iron")) outputs.add(Material.IRON_INGOT);
 
-        if (section.getBoolean("gold")) {
-            outputs.add(Material.GOLD_INGOT);
-        }
+        if (section.getBoolean("gold")) outputs.add(Material.GOLD_INGOT);
 
         if (Slimefun.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_17) && section.getBoolean("copper")) {
             outputs.add(Material.COPPER_INGOT);
@@ -103,74 +97,67 @@ public final class Quarries {
         }
 
         if (section.getBoolean("redstone")) {
-            new Oscillator(REDSTONE_OSCILLATOR, REDSTONE_CHANCE).register(plugin);
+            new Oscillator(REDSTONE_OSCILLATOR, REDSTONE_CHANCE).register(SlimefunAddonInstance.getSFAInstance());
             outputs.add(Material.REDSTONE);
         }
 
         if (section.getBoolean("lapis")) {
-            new Oscillator(LAPIS_OSCILLATOR, LAPIS_CHANCE).register(plugin);
+            new Oscillator(LAPIS_OSCILLATOR, LAPIS_CHANCE).register(SlimefunAddonInstance.getSFAInstance());
             outputs.add(Material.LAPIS_LAZULI);
         }
 
         if (section.getBoolean("emerald")) {
-            new Oscillator(EMERALD_OSCILLATOR, EMERALD_CHANCE).register(plugin);
+            new Oscillator(EMERALD_OSCILLATOR, EMERALD_CHANCE).register(SlimefunAddonInstance.getSFAInstance());
             outputs.add(Material.EMERALD);
         }
 
         if (section.getBoolean("diamond")) {
-            new Oscillator(DIAMOND_OSCILLATOR, DIAMOND_CHANCE).register(plugin);
+            new Oscillator(DIAMOND_OSCILLATOR, DIAMOND_CHANCE).register(SlimefunAddonInstance.getSFAInstance());
             outputs.add(Material.DIAMOND);
         }
 
-        new Quarry(Groups.ADVANCED_MACHINES, BASIC_QUARRY, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new Quarry(Groups.ADVANCED_MACHINES, BASIC_QUARRY, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.MAGSTEEL_PLATE, SlimefunItems.CARBONADO_EDGED_CAPACITOR, Materials.MAGSTEEL_PLATE,
                 new ItemStack(Material.IRON_PICKAXE), SlimefunItems.GEO_MINER, new ItemStack(Material.IRON_PICKAXE),
                 Materials.MACHINE_CIRCUIT, Materials.MACHINE_CORE, Materials.MACHINE_CIRCUIT
-        }, 1, 6, outputs.toArray(new Material[0])).energyPerTick(300).register(plugin);
+        }, 1, 6, outputs.toArray(new Material[0])).energyPerTick(300).register(SlimefunAddonInstance.getSFAInstance());
 
         if (section.getBoolean("quartz")) {
-            new Oscillator(QUARTZ_OSCILLATOR, QUARTZ_CHANCE).register(plugin);
+            new Oscillator(QUARTZ_OSCILLATOR, QUARTZ_CHANCE).register(SlimefunAddonInstance.getSFAInstance());
 
             outputs.add(Material.QUARTZ);
         }
 
-        if (section.getBoolean("netherite")) {
-            outputs.add(Material.NETHERITE_INGOT);
-        }
+        if (section.getBoolean("netherite")) outputs.add(Material.NETHERITE_INGOT);
 
         if (section.getBoolean("netherrack")) {
             outputs.add(Material.NETHERRACK);
             outputs.add(Material.NETHERRACK);
         }
 
-        new Quarry(Groups.ADVANCED_MACHINES, ADVANCED_QUARRY, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new Quarry(Groups.ADVANCED_MACHINES, ADVANCED_QUARRY, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.MACHINE_PLATE, SlimefunItems.ENERGIZED_CAPACITOR, Materials.MACHINE_PLATE,
                 new ItemStack(Material.DIAMOND_PICKAXE), BASIC_QUARRY, new ItemStack(Material.DIAMOND_PICKAXE),
                 Materials.MACHINE_CIRCUIT, Materials.MACHINE_CORE, Materials.MACHINE_CIRCUIT
-        }, 2, 4, outputs.toArray(new Material[0])).energyPerTick(900).register(plugin);
+        }, 2, 4, outputs.toArray(new Material[0])).energyPerTick(900).register(SlimefunAddonInstance.getSFAInstance());
 
-        if (coal) {
-            outputs.add(Material.COAL);
-        }
+        if (coal) outputs.add(Material.COAL);
 
-        new Quarry(Groups.ADVANCED_MACHINES, VOID_QUARRY, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+        new Quarry(Groups.ADVANCED_MACHINES, VOID_QUARRY, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.VOID_INGOT, SlimefunExtension.VOID_CAPACITOR, Materials.VOID_INGOT,
                 new ItemStack(Material.NETHERITE_PICKAXE), ADVANCED_QUARRY, new ItemStack(Material.NETHERITE_PICKAXE),
                 Materials.MACHINE_CIRCUIT, Materials.MACHINE_CORE, Materials.MACHINE_CIRCUIT
-        }, 6, 2, outputs.toArray(new Material[0])).energyPerTick(3600).register(plugin);
+        }, 6, 2, outputs.toArray(new Material[0])).energyPerTick(3600).register(SlimefunAddonInstance.getSFAInstance());
 
-        if (coal) {
-            outputs.add(Material.COAL);
-        }
+        if (coal) outputs.add(Material.COAL);
 
-        new Quarry(Groups.INFINITY_CHEAT, INFINITY_QUARRY, InfinityWorkbench.TYPE, new ItemStack[] {
+        new Quarry(Groups.INFINITY_CHEAT, INFINITY_QUARRY, InfinityWorkbench.TYPE, new ItemStack[]{
                 null, Materials.MACHINE_PLATE, Materials.MACHINE_PLATE, Materials.MACHINE_PLATE, Materials.MACHINE_PLATE, null,
                 Materials.MACHINE_PLATE, Gear.PICKAXE, Materials.INFINITE_CIRCUIT, Materials.INFINITE_CIRCUIT, Gear.PICKAXE, Materials.MACHINE_PLATE,
                 Materials.MACHINE_PLATE, VOID_QUARRY, Materials.INFINITE_CORE, Materials.INFINITE_CORE, VOID_QUARRY, Materials.MACHINE_PLATE,
                 Materials.VOID_INGOT, null, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, null, Materials.VOID_INGOT,
                 Materials.VOID_INGOT, null, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, null, Materials.VOID_INGOT,
                 Materials.VOID_INGOT, null, Materials.INFINITE_INGOT, Materials.INFINITE_INGOT, null, Materials.VOID_INGOT
-        }, 64, 1, outputs.toArray(new Material[0])).energyPerTick(36000).register(plugin);
+        }, 64, 1, outputs.toArray(new Material[0])).energyPerTick(36000).register(SlimefunAddonInstance.getSFAInstance());
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/quarries/Quarry.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/quarries/Quarry.java
similarity index 80%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/quarries/Quarry.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/quarries/Quarry.java
index b24ac75..1895886 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/quarries/Quarry.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/quarries/Quarry.java
@@ -1,20 +1,8 @@
-package io.github.mooy1.infinityexpansion.items.quarries;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.quarries;
 
-import java.util.ArrayList;
-import java.util.List;
-import java.util.concurrent.ThreadLocalRandom;
-
-import javax.annotation.Nonnull;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.Material;
-import org.bukkit.World;
-import org.bukkit.block.Block;
-import org.bukkit.entity.Player;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinitylib.machines.AbstractMachineBlock;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.InfinityExpansion;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.SlimefunAddonInstance;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.AbstractMachineBlock;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
@@ -24,6 +12,17 @@ import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
 import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
+import org.bukkit.Material;
+import org.bukkit.World;
+import org.bukkit.block.Block;
+import org.bukkit.entity.Player;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.Nonnull;
+import javax.annotation.ParametersAreNonnullByDefault;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.ThreadLocalRandom;
 
 /**
  * Mines stuff
@@ -32,7 +31,6 @@ import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
  */
 @ParametersAreNonnullByDefault
 public final class Quarry extends AbstractMachineBlock implements RecipeDisplayItem {
-
     private static final boolean ALLOW_NETHER_IN_OVERWORLD =
             InfinityExpansion.config().getBoolean("quarry-options.output-nether-materials-in-overworld");
     private static final int INTERVAL =
@@ -57,9 +55,9 @@ public final class Quarry extends AbstractMachineBlock implements RecipeDisplayI
     private final int chance;
     private final Material[] outputs;
 
-    public Quarry(ItemGroup category, SlimefunItemStack item, RecipeType type, ItemStack[] recipe,
+    public Quarry(ItemGroup itemGroup, SlimefunItemStack item, RecipeType type, ItemStack[] recipe,
                   int speed, int chance, Material... outputs) {
-        super(category, item, type, recipe);
+        super(itemGroup, item, type, recipe);
 
         this.speed = speed;
         this.chance = chance;
@@ -68,7 +66,7 @@ public final class Quarry extends AbstractMachineBlock implements RecipeDisplayI
 
     @Override
     protected void setup(@Nonnull BlockMenuPreset blockMenuPreset) {
-        blockMenuPreset.drawBackground(new int[] {
+        blockMenuPreset.drawBackground(new int[]{
                 0, 1, 2, 3, 4, 5, 6, 7, 8, 45, 46, 47, 51, 52, 53
         });
         blockMenuPreset.addItem(48, OSCILLATOR_INFO, ChestMenuUtils.getEmptyClickHandler());
@@ -82,7 +80,7 @@ public final class Quarry extends AbstractMachineBlock implements RecipeDisplayI
 
     @Override
     protected int[] getInputSlots() {
-        return new int[] { OSCILLATOR_SLOT };
+        return new int[]{OSCILLATOR_SLOT};
     }
 
     @Override
@@ -92,18 +90,13 @@ public final class Quarry extends AbstractMachineBlock implements RecipeDisplayI
 
     @Override
     public void onNewInstance(@Nonnull BlockMenu menu, @Nonnull Block b) {
-
     }
 
     @Override
     protected boolean process(Block b, BlockMenu inv) {
-        if (inv.hasViewer()) {
-            inv.replaceExistingItem(STATUS_SLOT, MINING);
-        }
+        if (inv.hasViewer()) inv.replaceExistingItem(STATUS_SLOT, MINING);
 
-        if (InfinityExpansion.slimefunTickCount() % INTERVAL != 0) {
-            return true;
-        }
+        if (SlimefunAddonInstance.slimefunTickCount() % INTERVAL != 0) return true;
 
         ItemStack outputItem;
 
@@ -112,21 +105,12 @@ public final class Quarry extends AbstractMachineBlock implements RecipeDisplayI
             if (oscillator == null || ThreadLocalRandom.current().nextDouble() >= oscillator.chance) {
                 Material outputType = this.outputs[ThreadLocalRandom.current().nextInt(this.outputs.length)];
                 if (!ALLOW_NETHER_IN_OVERWORLD && b.getWorld().getEnvironment() != World.Environment.NETHER &&
-                        (outputType == Material.QUARTZ || outputType == Material.NETHERITE_INGOT || outputType == Material.NETHERRACK)
-                ) {
+                        (outputType == Material.QUARTZ || outputType == Material.NETHERITE_INGOT
+                                || outputType == Material.NETHERRACK))
                     outputItem = new ItemStack(Material.COBBLESTONE, this.speed);
-                }
-                else {
-                    outputItem = new ItemStack(outputType, this.speed);
-                }
-            }
-            else {
-                outputItem = new ItemStack(oscillator.getItem().getType(), this.speed);
-            }
-        }
-        else {
-            outputItem = new ItemStack(Material.COBBLESTONE, this.speed);
-        }
+                else outputItem = new ItemStack(outputType, this.speed);
+            } else outputItem = new ItemStack(oscillator.getItem().getType(), this.speed);
+        } else outputItem = new ItemStack(Material.COBBLESTONE, this.speed);
 
         inv.pushItem(outputItem, OUTPUT_SLOTS);
         return true;
@@ -155,5 +139,4 @@ public final class Quarry extends AbstractMachineBlock implements RecipeDisplayI
     public String getRecipeSectionLabel(@Nonnull Player p) {
         return "&7Mines:";
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/storage/Storage.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/storage/Storage.java
similarity index 82%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/storage/Storage.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/storage/Storage.java
index 42ae455..99b6ecd 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/storage/Storage.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/storage/Storage.java
@@ -1,20 +1,17 @@
-package io.github.mooy1.infinityexpansion.items.storage;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.storage;
 
+import id.universenetwork.sfa_loader.addons.infinityexpansion.categories.Groups;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.items.materials.Materials;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.SlimefunAddonInstance;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.MachineLore;
+import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
+import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import lombok.experimental.UtilityClass;
-
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
 
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinityexpansion.categories.Groups;
-import io.github.mooy1.infinityexpansion.items.materials.Materials;
-import io.github.mooy1.infinitylib.machines.MachineLore;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-
 @UtilityClass
 public final class Storage {
-
     public static final SlimefunItemStack STORAGE_FORGE = new SlimefunItemStack(
             "STORAGE_FORGE",
             Material.BEEHIVE,
@@ -60,37 +57,36 @@ public final class Storage {
             "&6Capacity: &e" + MachineLore.format(INFINITY_AMOUNT) + " &eitems"
     );
 
-    public static void setup(InfinityExpansion plugin) {
-        new StorageForge(Groups.STORAGE, STORAGE_FORGE, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[] {
+    public static void setup() {
+        new StorageForge(Groups.STORAGE, STORAGE_FORGE, RecipeType.ENHANCED_CRAFTING_TABLE, new ItemStack[]{
                 Materials.MAGSTEEL, new ItemStack(Material.ANVIL), Materials.MAGSTEEL,
                 Materials.MAGSTEEL, new ItemStack(Material.CRAFTING_TABLE), Materials.MAGSTEEL,
                 Materials.MAGSTEEL, new ItemStack(Material.BARREL), Materials.MAGSTEEL,
-        }).register(plugin);
-        new StorageUnit(BASIC_STORAGE, BASIC_AMOUNT, new ItemStack[] {
+        }).register(SlimefunAddonInstance.getSFAInstance());
+        new StorageUnit(BASIC_STORAGE, BASIC_AMOUNT, new ItemStack[]{
                 new ItemStack(Material.OAK_LOG), Materials.MAGSTEEL, new ItemStack(Material.OAK_LOG),
                 new ItemStack(Material.OAK_LOG), new ItemStack(Material.BARREL), new ItemStack(Material.OAK_LOG),
                 new ItemStack(Material.OAK_LOG), Materials.MAGSTEEL, new ItemStack(Material.OAK_LOG)
-        }).register(plugin);
-        new StorageUnit(ADVANCED_STORAGE, ADVANCED_AMOUNT, new ItemStack[] {
+        }).register(SlimefunAddonInstance.getSFAInstance());
+        new StorageUnit(ADVANCED_STORAGE, ADVANCED_AMOUNT, new ItemStack[]{
                 Materials.MAGSTEEL, Materials.MACHINE_CIRCUIT, Materials.MAGSTEEL,
                 Materials.MAGSTEEL, BASIC_STORAGE, Materials.MAGSTEEL,
                 Materials.MAGSTEEL, Materials.MACHINE_CIRCUIT, Materials.MAGSTEEL
-        }).register(plugin);
-        new StorageUnit(REINFORCED_STORAGE, REINFORCED_AMOUNT, new ItemStack[] {
+        }).register(SlimefunAddonInstance.getSFAInstance());
+        new StorageUnit(REINFORCED_STORAGE, REINFORCED_AMOUNT, new ItemStack[]{
                 Materials.MAGSTEEL_PLATE, Materials.MACHINE_CIRCUIT, Materials.MAGSTEEL_PLATE,
                 Materials.MAGSTEEL_PLATE, ADVANCED_STORAGE, Materials.MAGSTEEL_PLATE,
                 Materials.MAGSTEEL_PLATE, Materials.MACHINE_PLATE, Materials.MAGSTEEL_PLATE
-        }).register(plugin);
-        new StorageUnit(VOID_STORAGE, VOID_AMOUNT, new ItemStack[] {
+        }).register(SlimefunAddonInstance.getSFAInstance());
+        new StorageUnit(VOID_STORAGE, VOID_AMOUNT, new ItemStack[]{
                 Materials.VOID_INGOT, Materials.MACHINE_PLATE, Materials.VOID_INGOT,
                 Materials.MAGNONIUM, REINFORCED_STORAGE, Materials.MAGNONIUM,
                 Materials.VOID_INGOT, Materials.MACHINE_CORE, Materials.VOID_INGOT
-        }).register(plugin);
-        new StorageUnit(INFINITY_STORAGE, INFINITY_AMOUNT, new ItemStack[] {
+        }).register(SlimefunAddonInstance.getSFAInstance());
+        new StorageUnit(INFINITY_STORAGE, INFINITY_AMOUNT, new ItemStack[]{
                 Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT,
                 Materials.INFINITE_INGOT, VOID_STORAGE, Materials.INFINITE_INGOT,
                 Materials.INFINITE_INGOT, Materials.VOID_INGOT, Materials.INFINITE_INGOT
-        }).register(plugin);
+        }).register(SlimefunAddonInstance.getSFAInstance());
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/storage/StorageCache.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/storage/StorageCache.java
similarity index 70%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/storage/StorageCache.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/storage/StorageCache.java
index 604c5e8..ff9870e 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/storage/StorageCache.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/storage/StorageCache.java
@@ -1,11 +1,15 @@
-package io.github.mooy1.infinityexpansion.items.storage;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.regex.Pattern;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.storage;
 
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.SlimefunAddonInstance;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.MachineLore;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.common.ChatColors;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.items.ItemUtils;
+import io.github.thebusybiscuit.slimefun4.utils.tags.SlimefunTag;
 import lombok.Setter;
-
+import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
+import me.mrCookieSlime.Slimefun.api.BlockStorage;
+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
 import org.bukkit.Material;
@@ -19,23 +23,9 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.persistence.PersistentDataType;
 
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinitylib.machines.MachineLore;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.common.ChatColors;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.CustomItemStack;
-import io.github.thebusybiscuit.slimefun4.libraries.dough.items.ItemUtils;
-import io.github.thebusybiscuit.slimefun4.utils.tags.SlimefunTag;
-import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;
-import me.mrCookieSlime.Slimefun.api.BlockStorage;
-import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
-
-import static io.github.mooy1.infinityexpansion.items.storage.StorageUnit.DISPLAY_KEY;
-import static io.github.mooy1.infinityexpansion.items.storage.StorageUnit.DISPLAY_SLOT;
-import static io.github.mooy1.infinityexpansion.items.storage.StorageUnit.EMPTY_KEY;
-import static io.github.mooy1.infinityexpansion.items.storage.StorageUnit.INPUT_SLOT;
-import static io.github.mooy1.infinityexpansion.items.storage.StorageUnit.INTERACT_SLOT;
-import static io.github.mooy1.infinityexpansion.items.storage.StorageUnit.OUTPUT_SLOT;
-import static io.github.mooy1.infinityexpansion.items.storage.StorageUnit.STATUS_SLOT;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.regex.Pattern;
 
 /**
  * Represents a single storage unit with cached data
@@ -56,7 +46,7 @@ public final class StorageCache {
     /* Menu Items */
     private static final ItemStack EMPTY_ITEM = new CustomItemStack(Material.BARRIER, meta -> {
         meta.setDisplayName(ChatColor.WHITE + "Empty");
-        meta.getPersistentDataContainer().set(EMPTY_KEY, PersistentDataType.BYTE, (byte) 1);
+        meta.getPersistentDataContainer().set(StorageUnit.EMPTY_KEY, PersistentDataType.BYTE, (byte) 1);
     });
 
     /* Space Pattern for Sign Display Names */
@@ -85,37 +75,31 @@ public final class StorageCache {
         if (isEmpty()) {
             // empty
             setEmptyDisplayName();
-            menu.replaceExistingItem(DISPLAY_SLOT, EMPTY_ITEM);
-        }
-        else {
+            menu.replaceExistingItem(StorageUnit.DISPLAY_SLOT, EMPTY_ITEM);
+        } else {
             // something is stored
-            ItemStack display = menu.getItemInSlot(DISPLAY_SLOT);
+            ItemStack display = menu.getItemInSlot(StorageUnit.DISPLAY_SLOT);
             if (display != null) {
                 ItemMeta copy = display.getItemMeta();
                 // fix if they somehow store the empty item
-                if (copy.getPersistentDataContainer().has(EMPTY_KEY, PersistentDataType.BYTE)) {
+                if (copy.getPersistentDataContainer().has(StorageUnit.EMPTY_KEY, PersistentDataType.BYTE)) {
                     // attempt to recover the correct item from output
-                    ItemStack output = menu.getItemInSlot(OUTPUT_SLOT);
+                    ItemStack output = menu.getItemInSlot(StorageUnit.OUTPUT_SLOT);
                     if (output != null) {
                         setStored(output);
-                        menu.replaceExistingItem(OUTPUT_SLOT, null);
-                    }
-                    else {
+                        menu.replaceExistingItem(StorageUnit.OUTPUT_SLOT, null);
+                    } else {
                         // no output to recover
-                        menu.replaceExistingItem(DISPLAY_SLOT, EMPTY_ITEM);
+                        menu.replaceExistingItem(StorageUnit.DISPLAY_SLOT, EMPTY_ITEM);
                         setEmptyDisplayName();
                         this.amount = 0;
                     }
-                }
-                else {
-                    // load the item in menu
-                    load(display, copy);
-                }
+                } else load(display, copy); // load the item in menu
             }
         }
 
         // void excess handler
-        menu.addMenuClickHandler(STATUS_SLOT, (p, slot, item, action) -> {
+        menu.addMenuClickHandler(StorageUnit.STATUS_SLOT, (p, slot, item, action) -> {
             this.voidExcess = !this.voidExcess;
             BlockStorage.addBlockInfo(this.menu.getLocation(), VOID_EXCESS, this.voidExcess ? "true" : null);
             ItemMeta meta = item.getItemMeta();
@@ -127,31 +111,17 @@ public final class StorageCache {
         });
 
         // interact handler
-        menu.addMenuClickHandler(INTERACT_SLOT, (p, slot, item, action) -> {
+        menu.addMenuClickHandler(StorageUnit.INTERACT_SLOT, (p, slot, item, action) -> {
             if (this.amount == 1) {
-                if (action.isShiftClicked() && !action.isRightClicked()) {
-                    depositAll(p);
-                }
-                else {
-                    withdrawLast(p);
-                }
-            }
-            else if (!isEmpty()) {
+                if (action.isShiftClicked() && !action.isRightClicked()) depositAll(p);
+                else withdrawLast(p);
+            } else if (!isEmpty()) {
                 if (action.isRightClicked()) {
-                    if (action.isShiftClicked()) {
-                        withdraw(p, this.amount - 1);
-                    }
-                    else {
-                        withdraw(p, Math.min(this.material.getMaxStackSize(), this.amount - 1));
-                    }
-                }
-                else {
-                    if (action.isShiftClicked()) {
-                        depositAll(p);
-                    }
-                    else {
-                        withdraw(p, 1);
-                    }
+                    if (action.isShiftClicked()) withdraw(p, this.amount - 1);
+                    else withdraw(p, Math.min(this.material.getMaxStackSize(), this.amount - 1));
+                } else {
+                    if (action.isShiftClicked()) depositAll(p);
+                    else withdraw(p, 1);
                 }
             }
             return false;
@@ -174,18 +144,11 @@ public final class StorageCache {
         String color;
         if (len >= 2 && name.charAt(0) == ChatColor.COLOR_CHAR) {
             char second = name.charAt(1);
-            if (len >= 14 && second == 'x') {
-                color = name.substring(0, 14);
-            }
-            else {
-                color = new String(new char[] {
-                        ChatColor.COLOR_CHAR, second
-                });
-            }
-        }
-        else {
-            color = null;
-        }
+            if (len >= 14 && second == 'x') color = name.substring(0, 14);
+            else color = new String(new char[]{
+                    ChatColor.COLOR_CHAR, second
+            });
+        } else color = null;
 
         if (name.length() <= 15) {
             this.signDisplay[0] = color != null ? name : ChatColor.WHITE + name;
@@ -196,35 +159,23 @@ public final class StorageCache {
         String[] words = SPACE.split(name);
         int i = 1;
         StringBuilder firstLine = new StringBuilder();
-        if (color == null) {
-            firstLine.append(ChatColor.WHITE);
-        }
+        if (color == null) firstLine.append(ChatColor.WHITE);
         firstLine.append(words[0]);
-        while (i < words.length && words[i].length() + firstLine.length() < 15) {
+        while (i < words.length && words[i].length() + firstLine.length() < 15)
             firstLine.append(' ').append(words[i++]);
-        }
         this.signDisplay[0] = firstLine.toString();
 
         if (i < words.length) {
             StringBuilder secondLine = new StringBuilder();
             String first = words[i++];
             if (first.length() <= 1 || first.charAt(0) != ChatColor.COLOR_CHAR) {
-                if (color == null) {
-                    secondLine.append(ChatColor.WHITE);
-                }
-                else {
-                    secondLine.append(color);
-                }
+                if (color == null) secondLine.append(ChatColor.WHITE);
+                else secondLine.append(color);
             }
             secondLine.append(first);
-            while (i < words.length) {
-                secondLine.append(' ').append(words[i++]);
-            }
+            while (i < words.length) secondLine.append(' ').append(words[i++]);
             this.signDisplay[1] = secondLine.toString();
-        }
-        else {
-            this.signDisplay[1] = "";
-        }
+        } else this.signDisplay[1] = "";
     }
 
     private void setEmptyDisplayName() {
@@ -236,7 +187,7 @@ public final class StorageCache {
     void destroy(BlockBreakEvent e, List<ItemStack> drops) {
 
         // add output slot
-        ItemStack output = this.menu.getItemInSlot(OUTPUT_SLOT);
+        ItemStack output = this.menu.getItemInSlot(StorageUnit.OUTPUT_SLOT);
         if (output != null && matches(output)) {
             int add = Math.min(this.storageUnit.max - this.amount, output.getAmount());
             if (add != 0) {
@@ -246,7 +197,7 @@ public final class StorageCache {
         }
 
         ItemStack drop = this.storageUnit.getItem().clone();
-        drop.setItemMeta(StorageUnit.saveToStack(drop.getItemMeta(), this.menu.getItemInSlot(DISPLAY_SLOT), this.displayName, this.amount));
+        drop.setItemMeta(StorageUnit.saveToStack(drop.getItemMeta(), this.menu.getItemInSlot(StorageUnit.DISPLAY_SLOT), this.displayName, this.amount));
         e.getPlayer().sendMessage(ChatColor.GREEN + "Stored items transferred to dropped item");
         drops.add(drop);
     }
@@ -259,49 +210,40 @@ public final class StorageCache {
     }
 
     void load(ItemStack stored, ItemMeta copy) {
-        this.menu.replaceExistingItem(DISPLAY_SLOT, stored);
+        this.menu.replaceExistingItem(StorageUnit.DISPLAY_SLOT, stored);
 
         // remove the display key from copy
-        copy.getPersistentDataContainer().remove(DISPLAY_KEY);
+        copy.getPersistentDataContainer().remove(StorageUnit.DISPLAY_KEY);
 
         // check if the copy has anything besides the display key
-        if (copy.equals(Bukkit.getItemFactory().getItemMeta(stored.getType()))) {
-            this.meta = null;
-        }
-        else {
-            this.meta = copy;
-        }
+        if (copy.equals(Bukkit.getItemFactory().getItemMeta(stored.getType()))) this.meta = null;
+        else this.meta = copy;
         setDisplayName(ItemUtils.getItemName(stored));
         this.material = stored.getType();
     }
 
     void input() {
-        ItemStack input = this.menu.getItemInSlot(INPUT_SLOT);
-        if (input == null) {
-            return;
-        }
+        ItemStack input = this.menu.getItemInSlot(StorageUnit.INPUT_SLOT);
+        if (input == null) return;
         if (isEmpty()) {
             // set the stored item to input
             this.amount = input.getAmount();
             setStored(input);
-            this.menu.replaceExistingItem(INPUT_SLOT, null, false);
-        }
-        else if (matches(input)) {
+            this.menu.replaceExistingItem(StorageUnit.INPUT_SLOT, null, false);
+        } else if (matches(input)) {
             if (this.voidExcess) {
                 // input and void excess
                 if (this.amount < this.storageUnit.max) {
                     this.amount = Math.min(this.amount + input.getAmount(), this.storageUnit.max);
                 }
                 input.setAmount(0);
-            }
-            else if (this.amount < this.storageUnit.max) {
+            } else if (this.amount < this.storageUnit.max) {
                 // input as much as possible
                 if (input.getAmount() + this.amount >= this.storageUnit.max) {
                     // last item
                     input.setAmount(input.getAmount() - (this.storageUnit.max - this.amount));
                     this.amount = this.storageUnit.max;
-                }
-                else {
+                } else {
                     this.amount += input.getAmount();
                     input.setAmount(0);
                 }
@@ -313,19 +255,17 @@ public final class StorageCache {
         if (this.amount == 0) {
             return;
         }
-        ItemStack outputSlot = this.menu.getItemInSlot(OUTPUT_SLOT);
+        ItemStack outputSlot = this.menu.getItemInSlot(StorageUnit.OUTPUT_SLOT);
         if (outputSlot == null) {
             if (this.amount == 1) {
-                this.menu.replaceExistingItem(OUTPUT_SLOT, createItem(1), false);
+                this.menu.replaceExistingItem(StorageUnit.OUTPUT_SLOT, createItem(1), false);
                 setEmpty();
-            }
-            else {
+            } else {
                 int amt = Math.min(this.material.getMaxStackSize(), this.amount - 1);
-                this.menu.replaceExistingItem(OUTPUT_SLOT, createItem(amt), false);
+                this.menu.replaceExistingItem(StorageUnit.OUTPUT_SLOT, createItem(amt), false);
                 this.amount -= amt;
             }
-        }
-        else if (this.amount > 1) {
+        } else if (this.amount > 1) {
             int amt = Math.min(this.material.getMaxStackSize() - outputSlot.getAmount(), this.amount - 1);
             if (amt != 0 && matches(outputSlot)) {
                 outputSlot.setAmount(outputSlot.getAmount() + amt);
@@ -343,12 +283,10 @@ public final class StorageCache {
         BlockStorage.addBlockInfo(this.menu.getLocation(), STORED_AMOUNT, String.valueOf(this.amount));
 
         // status
-        if (this.menu.hasViewer()) {
-            updateStatus();
-        }
+        if (this.menu.hasViewer()) updateStatus();
 
         // signs
-        if (InfinityExpansion.slimefunTickCount() % 20 == 0) {
+        if (SlimefunAddonInstance.slimefunTickCount() % 20 == 0) {
             Block check = block.getRelative(0, 1, 0);
             if (SlimefunTag.SIGNS.isTagged(check.getType())
                     || checkWallSign(check = block.getRelative(1, 0, 0), block)
@@ -367,13 +305,12 @@ public final class StorageCache {
     }
 
     private void updateStatus() {
-        this.menu.replaceExistingItem(STATUS_SLOT, new CustomItemStack(Material.CYAN_STAINED_GLASS_PANE, meta -> {
+        this.menu.replaceExistingItem(StorageUnit.STATUS_SLOT, new CustomItemStack(Material.CYAN_STAINED_GLASS_PANE, meta -> {
             meta.setDisplayName(ChatColor.AQUA + "Status");
             List<String> lore = new ArrayList<>();
             if (this.amount == 0) {
                 lore.add(ChatColors.color("&6Stored: &e0 / " + MachineLore.format(this.storageUnit.max) + " &7(0%)"));
-            }
-            else {
+            } else {
                 lore.add(ChatColors.color("&6Stored: &e" + MachineLore.format(this.amount)
                         + " / " + MachineLore.format(this.storageUnit.max)
                         + " &7(" + MachineLore.format((double) this.amount * 100.D / this.storageUnit.max) + "%)"
@@ -397,18 +334,18 @@ public final class StorageCache {
 
         // add the display key to the display input and set amount 1
         ItemMeta meta = input.getItemMeta();
-        meta.getPersistentDataContainer().set(DISPLAY_KEY, PersistentDataType.BYTE, (byte) 1);
+        meta.getPersistentDataContainer().set(StorageUnit.DISPLAY_KEY, PersistentDataType.BYTE, (byte) 1);
         input.setItemMeta(meta);
         input.setAmount(1);
 
-        this.menu.replaceExistingItem(DISPLAY_SLOT, input);
+        this.menu.replaceExistingItem(StorageUnit.DISPLAY_SLOT, input);
     }
 
     private void setEmpty() {
         setEmptyDisplayName();
         this.meta = null;
         this.material = null;
-        this.menu.replaceExistingItem(DISPLAY_SLOT, EMPTY_ITEM);
+        this.menu.replaceExistingItem(StorageUnit.DISPLAY_SLOT, EMPTY_ITEM);
         this.amount = 0;
     }
 
@@ -420,9 +357,7 @@ public final class StorageCache {
 
     private ItemStack createItem(int amount) {
         ItemStack item = new ItemStack(this.material, amount);
-        if (this.meta != null) {
-            item.setItemMeta(this.meta);
-        }
+        if (this.meta != null) item.setItemMeta(this.meta);
         return item;
     }
 
@@ -434,13 +369,8 @@ public final class StorageCache {
         if (this.material.getMaxStackSize() == 64) {
             ItemStack remaining = p.getInventory().addItem(createItem(withdraw)).get(0);
             if (remaining != null) {
-                if (remaining.getAmount() != withdraw) {
-                    this.amount += remaining.getAmount() - withdraw;
-                }
-            }
-            else {
-                this.amount -= withdraw;
-            }
+                if (remaining.getAmount() != withdraw) this.amount += remaining.getAmount() - withdraw;
+            } else this.amount -= withdraw;
             return;
         }
 
@@ -452,10 +382,7 @@ public final class StorageCache {
             if (remaining != null) {
                 toWithdraw -= amt - remaining.getAmount();
                 break;
-            }
-            else {
-                toWithdraw -= amt;
-            }
+            } else toWithdraw -= amt;
         }
         while (toWithdraw > 0);
         if (toWithdraw != withdraw) {
@@ -464,9 +391,7 @@ public final class StorageCache {
     }
 
     private void withdrawLast(Player p) {
-        if (p.getInventory().addItem(createItem(1)).get(0) == null) {
-            setEmpty();
-        }
+        if (p.getInventory().addItem(createItem(1)).get(0) == null) setEmpty();
     }
 
     private void depositAll(Player p) {
@@ -485,21 +410,14 @@ public final class StorageCache {
                         // last item
                         item.setAmount(item.getAmount() - (this.storageUnit.max - this.amount));
                         this.amount = this.storageUnit.max;
-                    }
-                    else {
+                    } else {
                         this.amount += item.getAmount();
                         item.setAmount(0);
                     }
                 }
             }
         }
-        if (observeVoiding && this.voidExcess) {
-            for (ItemStack item : itemStacks) {
-                if (item != null && matches(item)) {
-                    item.setAmount(0);
-                }
-            }
-        }
+        if (observeVoiding && this.voidExcess)
+            for (ItemStack item : itemStacks) if (item != null && matches(item)) item.setAmount(0);
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/storage/StorageForge.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/storage/StorageForge.java
similarity index 68%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/storage/StorageForge.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/storage/StorageForge.java
index 2b4fd7e..c2e2f46 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/storage/StorageForge.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/storage/StorageForge.java
@@ -1,15 +1,14 @@
-package io.github.mooy1.infinityexpansion.items.storage;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.storage;
 
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinitylib.machines.CraftingBlock;
-import io.github.mooy1.infinitylib.machines.MachineRecipeType;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.CraftingBlock;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.MachineRecipeType;
 import io.github.thebusybiscuit.slimefun4.api.items.ItemGroup;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
+import org.bukkit.inventory.ItemStack;
+
+import javax.annotation.ParametersAreNonnullByDefault;
 
 /**
  * A crafting machine for upgrading storage units and retaining the stored items
@@ -18,11 +17,10 @@ import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
  */
 @ParametersAreNonnullByDefault
 public final class StorageForge extends CraftingBlock {
-
     public static final MachineRecipeType TYPE = new MachineRecipeType("storage_forge", Storage.STORAGE_FORGE);
 
-    public StorageForge(ItemGroup category, SlimefunItemStack stack, RecipeType type, ItemStack[] recipe) {
-        super(category, stack, type, recipe);
+    public StorageForge(ItemGroup itemGroup, SlimefunItemStack stack, RecipeType type, ItemStack[] recipe) {
+        super(itemGroup, stack, type, recipe);
         addRecipesFrom(TYPE);
     }
 
@@ -30,5 +28,4 @@ public final class StorageForge extends CraftingBlock {
     protected void onSuccessfulCraft(BlockMenu menu, ItemStack toOutput) {
         StorageUnit.transferToStack(menu.getItemInSlot(layout.inputSlots()[4]), toOutput);
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/storage/StorageSaveFix.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/storage/StorageSaveFix.java
similarity index 86%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/storage/StorageSaveFix.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/storage/StorageSaveFix.java
index 1eb8d59..c3bf6df 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/storage/StorageSaveFix.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/storage/StorageSaveFix.java
@@ -1,4 +1,8 @@
-package io.github.mooy1.infinityexpansion.items.storage;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.storage;
+
+import id.universenetwork.sfa_loader.utils.LogUtils;
+import io.github.thebusybiscuit.slimefun4.libraries.dough.common.CommonPatterns;
+import lombok.experimental.UtilityClass;
 
 import java.io.File;
 import java.io.IOException;
@@ -7,17 +11,10 @@ import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
-import java.util.logging.Level;
-import java.util.logging.Logger;
-
-import lombok.experimental.UtilityClass;
-
-import io.github.thebusybiscuit.slimefun4.libraries.dough.common.CommonPatterns;
 
 @UtilityClass
 public final class StorageSaveFix {
-
-    public static void fixStuff(Logger logger) {
+    public static void fixStuff() {
         long time = System.nanoTime();
 
         File folder = new File("data-storage/Slimefun/stored-blocks/");
@@ -26,7 +23,7 @@ public final class StorageSaveFix {
         }
 
         int fixed = 0;
-        String[] ids = new String[] {
+        String[] ids = new String[]{
                 "INFINITY_STORAGE",
                 "VOID_STORAGE",
                 "REINFORCED_STORAGE",
@@ -69,7 +66,7 @@ public final class StorageSaveFix {
                         changed = true;
                         if (fixed++ < 25) {
                             String[] cords = CommonPatterns.SEMICOLON.split(location);
-                            logger.log(Level.INFO, "Fixed bugged " + correct + " in "
+                            LogUtils.info("Fixed bugged " + correct + " in "
                                     + name + " @ "
                                     + cords[0] + ", "
                                     + cords[1] + ", "
@@ -88,7 +85,7 @@ public final class StorageSaveFix {
 
         time = System.nanoTime() - time;
         if (fixed > 0) {
-            logger.log(Level.INFO, "Fixed " + fixed + " bugged storage(s) in " + (time / 1000000) + " ms");
+            LogUtils.info("Fixed " + fixed + " bugged storage(s) in " + (time / 1000000) + " ms");
         }
     }
 
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/items/storage/StorageUnit.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/storage/StorageUnit.java
similarity index 73%
rename from src/main/java/io/github/mooy1/infinityexpansion/items/storage/StorageUnit.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/storage/StorageUnit.java
index 62ed348..140dc82 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/items/storage/StorageUnit.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/items/storage/StorageUnit.java
@@ -1,32 +1,10 @@
-package io.github.mooy1.infinityexpansion.items.storage;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.items.storage;
 
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-import javax.annotation.ParametersAreNonnullByDefault;
-
-import org.bukkit.ChatColor;
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.NamespacedKey;
-import org.bukkit.block.Block;
-import org.bukkit.event.block.BlockBreakEvent;
-import org.bukkit.event.block.BlockPlaceEvent;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.meta.ItemMeta;
-import org.bukkit.persistence.PersistentDataContainer;
-import org.bukkit.persistence.PersistentDataType;
-
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import io.github.mooy1.infinityexpansion.categories.Groups;
-import io.github.mooy1.infinitylib.common.PersistentType;
-import io.github.mooy1.infinitylib.common.Scheduler;
-import io.github.mooy1.infinitylib.machines.MenuBlock;
+import id.universenetwork.sfa_loader.addons.infinityexpansion.categories.Groups;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.PersistentType;
+import id.universenetwork.sfa_loader.libraries.infinitylib.common.Scheduler;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
+import id.universenetwork.sfa_loader.libraries.infinitylib.machines.MenuBlock;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
 import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItemStack;
 import io.github.thebusybiscuit.slimefun4.core.attributes.DistinctiveItem;
@@ -41,22 +19,38 @@ import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;
 import me.mrCookieSlime.Slimefun.api.inventory.BlockMenuPreset;
 import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.Material;
+import org.bukkit.NamespacedKey;
+import org.bukkit.block.Block;
+import org.bukkit.event.block.BlockBreakEvent;
+import org.bukkit.event.block.BlockPlaceEvent;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.meta.ItemMeta;
+import org.bukkit.persistence.PersistentDataContainer;
+import org.bukkit.persistence.PersistentDataType;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import javax.annotation.ParametersAreNonnullByDefault;
+import java.util.*;
 
 /**
  * A block that stored large amounts of 1 item
  *
  * @author Mooy1
- *
+ * <p>
  * Thanks to FluffyBear for stuff to learn from
  */
 @ParametersAreNonnullByDefault
 public final class StorageUnit extends MenuBlock implements DistinctiveItem {
 
     /* Namespaced keys */
-    static final NamespacedKey EMPTY_KEY = InfinityExpansion.createKey("empty"); // key for empty item
-    static final NamespacedKey DISPLAY_KEY = InfinityExpansion.createKey("display"); // key for display item
-    private static final NamespacedKey ITEM_KEY = InfinityExpansion.createKey("item"); // item key for item pdc
-    private static final NamespacedKey AMOUNT_KEY = InfinityExpansion.createKey("stored"); // amount key for item pdc
+    static final NamespacedKey EMPTY_KEY = AbstractAddon.createKey("empty"); // key for empty item
+    static final NamespacedKey DISPLAY_KEY = AbstractAddon.createKey("display"); // key for display item
+    private static final NamespacedKey ITEM_KEY = AbstractAddon.createKey("item"); // item key for item pdc
+    private static final NamespacedKey AMOUNT_KEY = AbstractAddon.createKey("stored"); // amount key for item pdc
 
     /* Menu slots */
     static final int INPUT_SLOT = 10;
@@ -87,7 +81,6 @@ public final class StorageUnit extends MenuBlock implements DistinctiveItem {
         this.max = max;
 
         addItemHandler(new BlockTicker() {
-
             @Override
             public boolean isSynchronized() {
                 return true;
@@ -96,34 +89,24 @@ public final class StorageUnit extends MenuBlock implements DistinctiveItem {
             @Override
             public void tick(Block b, SlimefunItem item, Config data) {
                 StorageCache cache = StorageUnit.this.caches.get(b.getLocation());
-                if (cache != null) {
-                    cache.tick(b);
-                }
+                if (cache != null) cache.tick(b);
             }
 
         }, new BlockBreakHandler(false, false) {
-
             @Override
             public void onPlayerBreak(BlockBreakEvent e, ItemStack item, List<ItemStack> drops) {
                 BlockMenu menu = BlockStorage.getInventory(e.getBlock());
                 StorageCache cache = StorageUnit.this.caches.remove(menu.getLocation());
-                if (cache != null && !cache.isEmpty()) {
-                    cache.destroy(e, drops);
-                }
-                else {
-                    drops.add(getItem().clone());
-                }
+                if (cache != null && !cache.isEmpty()) cache.destroy(e, drops);
+                else drops.add(getItem().clone());
                 menu.dropItems(menu.getLocation(), INPUT_SLOT, OUTPUT_SLOT);
             }
-
         });
     }
 
     @Override
     protected void onNewInstance(@Nonnull BlockMenu menu, @Nonnull Block b) {
-        if (BlockStorage.getInventory(b) == menu) {
-            this.caches.put(b.getLocation(), new StorageCache(this, menu));
-        }
+        if (BlockStorage.getInventory(b) == menu) this.caches.put(b.getLocation(), new StorageCache(this, menu));
     }
 
     @Nonnull
@@ -135,24 +118,22 @@ public final class StorageUnit extends MenuBlock implements DistinctiveItem {
     @Override
     protected void onPlace(@Nonnull BlockPlaceEvent e, @Nonnull Block b) {
         Pair<ItemStack, Integer> data = loadFromStack(e.getItemInHand());
-        if (data != null) {
-            Scheduler.run(() -> {
-                StorageCache cache = this.caches.get(b.getLocation());
-                cache.load(data.getFirstValue(), data.getFirstValue().getItemMeta());
-                cache.amount(data.getSecondValue());
-            });
-        }
+        if (data != null) Scheduler.run(() -> {
+            StorageCache cache = this.caches.get(b.getLocation());
+            cache.load(data.getFirstValue(), data.getFirstValue().getItemMeta());
+            cache.amount(data.getSecondValue());
+        });
     }
 
     @Override
     protected void setup(@Nonnull BlockMenuPreset blockMenuPreset) {
-        blockMenuPreset.drawBackground(INPUT_BORDER, new int[] {
+        blockMenuPreset.drawBackground(INPUT_BORDER, new int[]{
                 0, 1, 2, 9, 11, 18, 19, 20
         });
-        blockMenuPreset.drawBackground(BACKGROUND_ITEM, new int[] {
+        blockMenuPreset.drawBackground(BACKGROUND_ITEM, new int[]{
                 3, 5, 12, 14, 21, 23
         });
-        blockMenuPreset.drawBackground(OUTPUT_BORDER, new int[] {
+        blockMenuPreset.drawBackground(OUTPUT_BORDER, new int[]{
                 6, 7, 8, 15, 17, 24, 25, 26
         });
         blockMenuPreset.addMenuClickHandler(DISPLAY_SLOT, ChestMenuUtils.getEmptyClickHandler());
@@ -166,21 +147,18 @@ public final class StorageUnit extends MenuBlock implements DistinctiveItem {
         StorageCache cache = this.caches.get(((BlockMenu) dirtyChestMenu).getLocation());
         if (cache != null && (cache.isEmpty() || cache.matches(itemStack))) {
             cache.input();
-            return new int[] { INPUT_SLOT };
-        }
-        else {
-            return new int[0];
-        }
+            return new int[]{INPUT_SLOT};
+        } else return new int[0];
     }
 
     @Override
     protected int[] getInputSlots() {
-        return new int[] { INPUT_SLOT };
+        return new int[]{INPUT_SLOT};
     }
 
     @Override
     protected int[] getOutputSlots() {
-        return new int[] { OUTPUT_SLOT };
+        return new int[]{OUTPUT_SLOT};
     }
 
     public void reloadCache(Block b) {
@@ -194,10 +172,8 @@ public final class StorageUnit extends MenuBlock implements DistinctiveItem {
 
     static void transferToStack(@Nonnull ItemStack source, @Nonnull ItemStack target) {
         Pair<ItemStack, Integer> data = loadFromStack(source);
-        if (data != null) {
-            target.setItemMeta(saveToStack(target.getItemMeta(), data.getFirstValue(),
-                    ItemUtils.getItemName(data.getFirstValue()), data.getSecondValue()));
-        }
+        if (data != null) target.setItemMeta(saveToStack(target.getItemMeta(), data.getFirstValue(),
+                ItemUtils.getItemName(data.getFirstValue()), data.getSecondValue()));
     }
 
     static ItemMeta saveToStack(ItemMeta meta, ItemStack displayItem, String displayName, int amount) {
@@ -218,9 +194,7 @@ public final class StorageUnit extends MenuBlock implements DistinctiveItem {
             Integer amount = con.get(AMOUNT_KEY, PersistentDataType.INTEGER);
             if (amount != null) {
                 ItemStack item = con.get(ITEM_KEY, PersistentType.ITEM_STACK_OLD);
-                if (item != null) {
-                    return new Pair<>(item, amount);
-                }
+                if (item != null) return new Pair<>(item, amount);
             }
         }
         return null;
@@ -230,4 +204,4 @@ public final class StorageUnit extends MenuBlock implements DistinctiveItem {
     public boolean canStack(@Nonnull ItemMeta sfItemMeta, @Nonnull ItemMeta itemMeta) {
         return sfItemMeta.getPersistentDataContainer().equals(itemMeta.getPersistentDataContainer());
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/utils/Util.java b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/utils/Util.java
similarity index 85%
rename from src/main/java/io/github/mooy1/infinityexpansion/utils/Util.java
rename to src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/utils/Util.java
index 2bde9e3..070ac23 100644
--- a/src/main/java/io/github/mooy1/infinityexpansion/utils/Util.java
+++ b/src/main/java/id/universenetwork/sfa_loader/addons/infinityexpansion/utils/Util.java
@@ -1,16 +1,9 @@
-package io.github.mooy1.infinityexpansion.utils;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.logging.Level;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
+package id.universenetwork.sfa_loader.addons.infinityexpansion.utils;
 
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.AbstractAddon;
+import id.universenetwork.sfa_loader.libraries.infinitylib.core.SlimefunAddonInstance;
 import lombok.experimental.UtilityClass;
-
+import me.mrCookieSlime.Slimefun.api.BlockStorage;
 import org.bukkit.ChatColor;
 import org.bukkit.Location;
 import org.bukkit.block.Block;
@@ -21,22 +14,22 @@ import org.bukkit.enchantments.Enchantment;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
 
-import io.github.mooy1.infinityexpansion.InfinityExpansion;
-import me.mrCookieSlime.Slimefun.api.BlockStorage;
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
 
 @UtilityClass
 public final class Util {
-
     @Nonnull
     public static ItemStack getDisplayItem(@Nonnull ItemStack output) {
         ItemMeta meta = output.getItemMeta();
         List<String> lore;
-        if (meta.hasLore()) {
-            lore = meta.getLore();
-        }
-        else {
-            lore = new ArrayList<>();
-        }
+        if (meta.hasLore()) lore = meta.getLore();
+        else lore = new ArrayList<>();
         lore.add("");
         lore.add(ChatColor.GREEN + "-------------------");
         lore.add(ChatColor.GREEN + "\u21E8 Click to craft");
@@ -52,12 +45,10 @@ public final class Util {
             Enchantment e = enchantmentByPath(path);
             if (e != null) {
                 int level = section.getInt(path);
-                if (level > 0 && level <= Short.MAX_VALUE) {
-                    enchants.put(e, level);
-                }
+                if (level > 0 && level <= Short.MAX_VALUE) enchants.put(e, level);
                 else if (level != 0) {
                     section.set(path, 0);
-                    InfinityExpansion.log(Level.WARNING,
+                    AbstractAddon.log(Level.WARNING,
                             "Enchantment level " + level
                                     + " is out of bounds for " + e.getKey()
                                     + ", resetting to default!"
@@ -111,7 +102,7 @@ public final class Util {
     }
 
     public static boolean isWaterLogged(@Nonnull Block b) {
-        if (InfinityExpansion.slimefunTickCount() % 63 == 0) {
+        if (SlimefunAddonInstance.slimefunTickCount() % 63 == 0) {
             BlockData blockData = b.getBlockData();
 
             if (blockData instanceof Waterlogged) {
@@ -119,20 +110,13 @@ public final class Util {
                 if (waterLogged.isWaterlogged()) {
                     BlockStorage.addBlockInfo(b.getLocation(), "water_logged", "true");
                     return true;
-                }
-                else {
+                } else {
                     BlockStorage.addBlockInfo(b.getLocation(), "water_logged", "false");
                     return false;
                 }
-            }
-            else {
-                return false;
-            }
+            } else return false;
 
-        }
-        else {
-            return "true".equals(BlockStorage.getLocationInfo(b.getLocation(), "water_logged"));
-        }
+        } else return "true".equals(BlockStorage.getLocationInfo(b.getLocation(), "water_logged"));
     }
 
     public static int getIntData(String key, Location block) {
@@ -148,5 +132,4 @@ public final class Util {
             return 0;
         }
     }
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/InfinityExpansion.java b/src/main/java/io/github/mooy1/infinityexpansion/InfinityExpansion.java
deleted file mode 100644
index 9ffb0e6..0000000
--- a/src/main/java/io/github/mooy1/infinityexpansion/InfinityExpansion.java
+++ /dev/null
@@ -1,85 +0,0 @@
-package io.github.mooy1.infinityexpansion;
-
-import java.io.File;
-import java.util.logging.Level;
-
-import org.bukkit.plugin.Plugin;
-import org.bukkit.plugin.PluginDescriptionFile;
-import org.bukkit.plugin.java.JavaPluginLoader;
-
-import io.github.mooy1.infinityexpansion.categories.Groups;
-import io.github.mooy1.infinityexpansion.commands.GiveRecipe;
-import io.github.mooy1.infinityexpansion.commands.PrintItem;
-import io.github.mooy1.infinityexpansion.commands.SetData;
-import io.github.mooy1.infinityexpansion.items.Researches;
-import io.github.mooy1.infinityexpansion.items.SlimefunExtension;
-import io.github.mooy1.infinityexpansion.items.blocks.Blocks;
-import io.github.mooy1.infinityexpansion.items.gear.Gear;
-import io.github.mooy1.infinityexpansion.items.generators.Generators;
-import io.github.mooy1.infinityexpansion.items.machines.Machines;
-import io.github.mooy1.infinityexpansion.items.materials.Materials;
-import io.github.mooy1.infinityexpansion.items.mobdata.MobData;
-import io.github.mooy1.infinityexpansion.items.quarries.Quarries;
-import io.github.mooy1.infinityexpansion.items.storage.Storage;
-import io.github.mooy1.infinityexpansion.items.storage.StorageSaveFix;
-import io.github.mooy1.infinitylib.common.Scheduler;
-import io.github.mooy1.infinitylib.core.AbstractAddon;
-import io.github.mooy1.infinitylib.metrics.bukkit.Metrics;
-import io.github.mooy1.infinitylib.metrics.charts.SimplePie;
-
-public final class InfinityExpansion extends AbstractAddon {
-
-    public InfinityExpansion(JavaPluginLoader loader, PluginDescriptionFile description, File dataFolder, File file) {
-        super(loader, description, dataFolder, file,
-                "Mooy1", "InfinityExpansion", "master", "auto-update");
-    }
-
-    public InfinityExpansion() {
-        super("Mooy1", "InfinityExpansion", "master", "auto-update");
-        StorageSaveFix.fixStuff(getLogger());
-    }
-
-    @Override
-    protected void enable() {
-        Metrics metrics = new Metrics(this, 8991);
-        String autoUpdates = String.valueOf(autoUpdatesEnabled());
-        metrics.addCustomChart(new SimplePie("auto_updates", () -> autoUpdates));
-
-        Plugin lx = getServer().getPluginManager().getPlugin("LiteXpansion");
-        if (lx != null && lx.getConfig().getBoolean("options.nerf-other-addons")) {
-            Scheduler.run(() -> log(Level.WARNING,
-                    "########################################################",
-                    "LiteXpansion nerfs energy generation in this addon.",
-                    "You can disable these nerfs in the LiteXpansion config.",
-                    "Under 'options:' add 'nerf-other-addons: false'",
-                    "########################################################"
-            ));
-        }
-
-        getAddonCommand()
-                .addSub(new GiveRecipe())
-                .addSub(new SetData())
-                .addSub(new PrintItem());
-
-        Groups.setup(this);
-        MobData.setup(this);
-        Materials.setup(this);
-        Machines.setup(this);
-        Quarries.setup(this);
-        Gear.setup(this);
-        Blocks.setup(this);
-        Storage.setup(this);
-        Generators.setup(this);
-        SlimefunExtension.setup(this);
-
-        if (getConfig().getBoolean("balance-options.enable-researches")) {
-            Researches.setup();
-        }
-    }
-
-    @Override
-    public void disable() {
-
-    }
-
-}
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/commands/GiveRecipe.java b/src/main/java/io/github/mooy1/infinityexpansion/commands/GiveRecipe.java
deleted file mode 100644
index 5b9553e..0000000
--- a/src/main/java/io/github/mooy1/infinityexpansion/commands/GiveRecipe.java
+++ /dev/null
@@ -1,68 +0,0 @@
-package io.github.mooy1.infinityexpansion.commands;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import javax.annotation.Nonnull;
-
-import org.bukkit.ChatColor;
-import org.bukkit.command.CommandSender;
-import org.bukkit.entity.Player;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinitylib.commands.SubCommand;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import io.github.thebusybiscuit.slimefun4.api.recipes.RecipeType;
-import io.github.thebusybiscuit.slimefun4.core.multiblocks.MultiBlockMachine;
-import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-
-public final class GiveRecipe extends SubCommand {
-
-    public GiveRecipe() {
-        super("giverecipe", "gives all the items in a Slimefun item recipe", "infinityexpansion.giverecipe");
-    }
-
-    @Override
-    protected void execute(@Nonnull CommandSender sender, @Nonnull String[] args) {
-        if (!(sender instanceof Player)) {
-            sender.sendMessage("Only players can use this!");
-            return;
-        }
-
-        if (args.length != 1) {
-            sender.sendMessage("Usage: /ie giverecipe <ID>");
-            return;
-        }
-
-        SlimefunItem sfItem = SlimefunItem.getById(args[0].toUpperCase());
-
-        if (sfItem == null || sfItem instanceof MultiBlockMachine || sfItem.getRecipeType() == RecipeType.GEO_MINER) {
-            sender.sendMessage(ChatColor.RED + "Invalid Slimefun item!");
-            return;
-        }
-
-        sender.sendMessage(ChatColor.GREEN + "Gave recipe for " + sfItem.getItemName());
-
-        Player p = (Player) sender;
-
-        List<ItemStack> recipe = new ArrayList<>();
-
-        for (ItemStack e : sfItem.getRecipe()) {
-            if (e != null) {
-                recipe.add(e);
-            }
-        }
-
-        p.getInventory().addItem(recipe.toArray(new ItemStack[0]));
-    }
-
-    @Override
-    protected void complete(@Nonnull CommandSender sender, @Nonnull String[] args, @Nonnull List<String> tabs) {
-        if (args.length == 1) {
-            for (SlimefunItem item : Slimefun.getRegistry().getEnabledSlimefunItems()) {
-                tabs.add(item.getId());
-            }
-        }
-    }
-
-}
\ No newline at end of file
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/commands/PrintItem.java b/src/main/java/io/github/mooy1/infinityexpansion/commands/PrintItem.java
deleted file mode 100644
index 0b46526..0000000
--- a/src/main/java/io/github/mooy1/infinityexpansion/commands/PrintItem.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package io.github.mooy1.infinityexpansion.commands;
-
-import java.util.List;
-
-import javax.annotation.Nonnull;
-
-import org.bukkit.ChatColor;
-import org.bukkit.Material;
-import org.bukkit.command.CommandSender;
-import org.bukkit.entity.Player;
-import org.bukkit.inventory.ItemStack;
-
-import io.github.mooy1.infinitylib.commands.SubCommand;
-
-public final class PrintItem extends SubCommand {
-
-    public PrintItem() {
-        super("printitem", "Prints the internal data of an item for debugging purposes", "infinityexpansion.printitem");
-    }
-
-    @Override
-    protected void execute(@Nonnull CommandSender commandSender, @Nonnull String[] strings) {
-        if (!(commandSender instanceof Player)) {
-            return;
-        }
-
-        Player p = (Player) commandSender;
-
-        ItemStack item = p.getInventory().getItemInMainHand();
-
-        if (item.getType() == Material.AIR) {
-            p.sendMessage(ChatColor.RED + "You must be holding an item!");
-            return;
-        }
-
-        p.sendMessage(item.toString());
-    }
-
-    @Override
-    protected void complete(@Nonnull CommandSender commandSender, @Nonnull String[] strings, @Nonnull List<String> list) {
-
-    }
-
-}
diff --git a/src/main/java/io/github/mooy1/infinityexpansion/commands/SetData.java b/src/main/java/io/github/mooy1/infinityexpansion/commands/SetData.java
deleted file mode 100644
index 6e3645b..0000000
--- a/src/main/java/io/github/mooy1/infinityexpansion/commands/SetData.java
+++ /dev/null
@@ -1,102 +0,0 @@
-package io.github.mooy1.infinityexpansion.commands;
-
-import java.util.List;
-
-import javax.annotation.Nonnull;
-
-import org.bukkit.ChatColor;
-import org.bukkit.FluidCollisionMode;
-import org.bukkit.Material;
-import org.bukkit.block.Block;
-import org.bukkit.command.CommandSender;
-import org.bukkit.entity.Player;
-
-import io.github.mooy1.infinityexpansion.items.storage.StorageUnit;
-import io.github.mooy1.infinitylib.commands.SubCommand;
-import io.github.thebusybiscuit.slimefun4.api.items.SlimefunItem;
-import me.mrCookieSlime.Slimefun.api.BlockStorage;
-
-public final class SetData extends SubCommand {
-
-    public SetData() {
-        super("setdata", "Set slimefun block data of the block you are looking at", "infinityexpansion.setdata");
-    }
-
-    @Override
-    protected void execute(@Nonnull CommandSender commandSender, @Nonnull String[] strings) {
-        if (!(commandSender instanceof Player)) {
-            commandSender.sendMessage("Only players can use this!");
-            return;
-        }
-
-        if (strings.length != 2) {
-            commandSender.sendMessage(ChatColor.RED + "You must specify a key and value to set!");
-            return;
-        }
-
-        Player p = (Player) commandSender;
-
-        Block target = p.getTargetBlockExact(8, FluidCollisionMode.NEVER);
-
-        if (target == null || target.getType() == Material.AIR) {
-            p.sendMessage(ChatColor.RED + "You need to target a block to use this command!");
-            return;
-        }
-
-        String id = BlockStorage.getLocationInfo(target.getLocation(), "id");
-
-        if (id == null) {
-            p.sendMessage(ChatColor.RED + "You need to target a slimefun block to use this command!");
-            return;
-        }
-
-        if (strings[0].equals("id")) {
-            p.sendMessage(ChatColor.RED + "You cannot change the id of this block, it could cause internal issues!");
-            return;
-        }
-
-        if (strings[1].equals("\\remove")) {
-            p.sendMessage(ChatColor.GREEN + "Successfully removed value of key '" + strings[0] + "' in " + id);
-            BlockStorage.addBlockInfo(target, strings[0], null);
-        }
-        else {
-            p.sendMessage(ChatColor.GREEN + "Successfully set key '" + strings[0] + "' to value '" + strings[1] + "' in " + id);
-            BlockStorage.addBlockInfo(target, strings[0], strings[1]);
-        }
-
-        SlimefunItem unit = SlimefunItem.getById(id);
-        if (unit instanceof StorageUnit) {
-            ((StorageUnit) unit).reloadCache(target);
-        }
-    }
-
-    @Override
-    protected void complete(@Nonnull CommandSender commandSender, @Nonnull String[] strings, @Nonnull List<String> list) {
-        if (!(commandSender instanceof Player)) {
-            return;
-        }
-
-        Player p = (Player) commandSender;
-
-        Block target = p.getTargetBlockExact(8, FluidCollisionMode.NEVER);
-
-        if (target == null || target.getType() == Material.AIR) {
-            return;
-        }
-
-        if (strings.length == 1) {
-            if (BlockStorage.hasBlockInfo(target)) {
-                list.addAll(BlockStorage.getLocationInfo(target.getLocation()).getKeys());
-                list.remove("id");
-            }
-        }
-        else if (strings.length == 2 && !strings[1].equals("id")) {
-            String current = BlockStorage.getLocationInfo(target.getLocation(), strings[1]);
-            if (current != null) {
-                list.add(current);
-                list.add("\\remove");
-            }
-        }
-    }
-
-}
diff --git a/src/main/resources/config.yml b/src/main/resources/addons-config/InfinityExpansion/config.yml
similarity index 96%
rename from src/main/resources/config.yml
rename to src/main/resources/addons-config/InfinityExpansion/config.yml
index a164140..23f5317 100644
--- a/src/main/resources/config.yml
+++ b/src/main/resources/addons-config/InfinityExpansion/config.yml
@@ -1,7 +1,3 @@
-
-# You should enable this to get bug fixes and receive support asap!
-auto-update: true
-
 balance-options:
   
   # Increases or decreases the cost of infinity singularities
@@ -13,7 +9,7 @@ balance-options:
 
   # Enables/Disables Researches which requires players to spend xp to unlock items
   enable-researches: false
-  
+
 mob-simulation-options:
 
   # The number of slimefun ticks it takes to output xp and drops. 1 slimefun tick = .5 seconds by default
@@ -21,7 +17,7 @@ mob-simulation-options:
 
   # Multiplies amount of xp gained from mob simulation
   xp-multiplier: 1.0
-  
+
 quarry-options:
 
   # The chance (0 to 1) of an oscillator activating each time a material would be produced
@@ -54,7 +50,7 @@ quarry-options:
     redstone: true
     netherite: true
     netherrack: true
-  
+
 # These are the maximum level of enchants that can be obtained by combining 2 of the same enchant of the same level.
 advanced-anvil-max-levels:
   sharpness: 9
diff --git a/src/main/resources/plugin.yml b/src/main/resources/plugin.yml
deleted file mode 100644
index a33febf..0000000
--- a/src/main/resources/plugin.yml
+++ /dev/null
@@ -1,27 +0,0 @@
-name: InfinityExpansion
-author: Mooy1
-description: more slimefun content
-main: io.github.mooy1.infinityexpansion.InfinityExpansion
-website: https://github.com/Mooy1/InfinityExpansion
-depend: [Slimefun]
-softdepend: [LiteXpansion]
-version: ${project.version}
-api-version: 1.16
-
-commands:
-  infinityexpansion:
-    description: Use /infinityexpansion help for a list of commands
-    usage: /infinityexpansion <subcommand>
-    aliases: [ie, ix, infinity]
-
-permissions:
-  infinityexpansion.setdata:
-    description: Access to /infinityexpansion setdata
-    default: op
-  infinityexpansion.printitem:
-    description: Access to /infinityexpansion printitem
-    default: op
-  infinityexpansion.giverecipe:
-    description: Access to /infinityexpansion giverecipe
-    default: op
-
diff --git a/src/test/java/io/github/mooy1/infinityexpansion/TestInfinityExpansion.java b/src/test/java/io/github/mooy1/infinityexpansion/TestInfinityExpansion.java
deleted file mode 100644
index 1ece34e..0000000
--- a/src/test/java/io/github/mooy1/infinityexpansion/TestInfinityExpansion.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package io.github.mooy1.infinityexpansion;
-
-import org.junit.jupiter.api.AfterAll;
-import org.junit.jupiter.api.BeforeAll;
-import org.junit.jupiter.api.Test;
-
-import be.seeseemelk.mockbukkit.MockBukkit;
-import io.github.thebusybiscuit.slimefun4.implementation.Slimefun;
-
-class TestInfinityExpansion {
-
-    @BeforeAll
-    public static void load() {
-        MockBukkit.mock();
-        MockBukkit.load(Slimefun.class);
-    }
-
-    @AfterAll
-    public static void unload() {
-        MockBukkit.unmock();
-    }
-
-    @Test
-    void testLoad() {
-        MockBukkit.load(InfinityExpansion.class);
-    }
-
-}
-- 
2.41.0.windows.2

